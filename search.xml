<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>刷题检讨 --(1) 线性表</title>
    <url>/2021/03/21/C++%E5%88%B7%E9%A2%98%E6%A3%80%E8%AE%A8--(1)%20%E7%BA%BF%E6%80%A7%E8%A1%A8/</url>
    <content><![CDATA[<h3 id="线性表"><a href="# 线性表" class="headerlink" title="线性表"></a>线性表 </h3><h5 id="1- 如果你需要高效的隨即存取，而不在乎插入和刪除的效率，使用 -vector- 数组 -iterator"><a href="#1- 如果你需要高效的隨即存取，而不在乎插入和刪除的效率，使用 -vector- 数组 -iterator" class="headerlink" title="(1) 如果你需要高效的隨即存取，而不在乎插入和刪除的效率，使用 vector (数组) //iterator"></a>(1) 如果你需要高效的隨即存取，而不在乎插入和刪除的效率，使用 vector (数组) //iterator</h5><p> 除了用迭代器获取 vector 容器中的元素，[] 和 at 也可以<br>vector<int>(v).swap (v); // 收缩内存<br>//vector<int> 利用 v 调用拷贝构造函数，创建匿名对象，它会用 v 目前使用的元素个数来初始化这个匿名对象<br>//swap () 互换函数的本质类似于指针的交换<br>// 调换后 v 指向了创建的匿名对象，而本来匿名对象的指针 x 指向原本的 v，并且在该语句过后由系统自动回收</int></int></p>
<p>如果没有用 reserve 预留空间，随着 push 进去的数据越来越多，可能需要重新分配内存<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 统计内存重新开辟的次数</span></span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span>* p = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">	v.<span class="built_in">push_back</span> (i);</span><br><span class="line">	<span class="keyword">if</span> (p != &amp;v [<span class="number">0</span>])</span><br><span class="line">	&#123;</span><br><span class="line">		p = &amp;v [<span class="number">0</span>];</span><br><span class="line">		num++;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;num:&quot;</span> &lt;&lt; num &lt;&lt; endl;</span><br></pre></td></tr></table></figure></p>
<h5 id="2- 如果你需要大量的插入和刪除，而不關心隨機存取，則應使用 -list- 双向循环链表 -const-iterator"><a href="#2- 如果你需要大量的插入和刪除，而不關心隨機存取，則應使用 -list- 双向循环链表 -const-iterator" class="headerlink" title="(2) 如果你需要大量的插入和刪除，而不關心隨機存取，則應使用 list (双向循环链表) //const_iterator"></a>(2) 如果你需要大量的插入和刪除，而不關心隨機存取，則應使用 list (双向循环链表) //const_iterator</h5><p>list 的迭代器是双向迭代器，不支持随机访问（不可以通过 [] 或 at 方式访问数据）<br>it++ // 可以<br>it = it + 1 // 会报错</p>
<h5 id="3- 如果你需要隨機存取，而且關心兩端數據的插入和刪除，則應使用 -deque"><a href="#3- 如果你需要隨機存取，而且關心兩端數據的插入和刪除，則應使用 -deque" class="headerlink" title="(3) 如果你需要隨機存取，而且關心兩端數據的插入和刪除，則應使用 deque"></a>(3) 如果你需要隨機存取，而且關心兩端數據的插入和刪除，則應使用 deque</h5><h3 id="UVA12657"><a href="#UVA12657" class="headerlink" title="UVA12657"></a>UVA12657</h3><pre><code>你有 n 个盒子在桌子上的一条线上从左到右编号为 1……n。你的任务是模拟四种操作
1 X Y 移动盒子编号 X 到盒子编号 Y 的左边（如果 X 已经在 Y 的左边了就忽略）
2 X Y 移动盒子编号 X 到盒子编号 Y 的右边（如果 X 已经在 Y 的右边了就忽略）
3 X Y 交换盒子编号 X 与盒子编号 Y 的位置
4 将整条线反转
操作保证合法，X 不等于 Y
举一个例子，如果 n=6，操作 1 1 4 然后就变成了 2 3 1 4 5 6；再操作 2 3 5 就变成了 2 1 4 5 3 6；再操作 3 1 6 就变成 2 6 4 5 3 1；
输入：最多有 10 组数据，每个数据会包含两个整数 n,m（1≤n,m&lt;100,000）, 接下来是 m 行数据，表示操作。
输出：对于每组数据，输出他们奇数位置的编号的和。
</code></pre><p>思路：利用双向静态链表，且反转不用真的反转，只要做标记就好了。<br>(移动元素需要链表的特性，但是查找是链表不擅长的，所以使用静态链表)<br>检讨：一开始把 if (a!=3&amp;&amp;flag) a=3-a; 的顺序放在下两个 if 的后面，这样就没有考虑到翻转的情形<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (a!=<span class="number">3</span>&amp;&amp;flag)</span><br><span class="line">	a=<span class="number">3</span>-a;</span><br><span class="line"><span class="keyword">if</span> (a==<span class="number">1</span>&amp;&amp;x==l [y])</span><br><span class="line">	<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (a==<span class="number">2</span>&amp;&amp;x==r [y])</span><br><span class="line">	<span class="keyword">continue</span>;</span><br></pre></td></tr></table></figure></p>
<h3 id="UVA101-The-Blocks-Problem"><a href="#UVA101-The-Blocks-Problem" class="headerlink" title="UVA101 The Blocks Problem"></a>UVA101 The Blocks Problem</h3><pre><code>初始时从左到右有 nn 个木块，编号为 0 \ldots n-10…n−1, 要求实现下列四种操作：
move a onto b : 把 aa 和 bb 上方的木块归位，然后把 aa 放到 bb 上面。
move a over b : 把 aa 上方的木块归位，然后把 aa 放在 bb 所在木块堆的最上方。
pile a onto b : 把 bb 上方的木块归位，然后把 aa 及以上的木块坨到 bb 上面。
pile a over b : 把 aa 及以上的木块坨到 bb 的上面。
一组数据的结束标志为 quit，如果有非法指令（如 aa 与 bb 在同一堆），无需处理。
输出：所有操作输入完毕后，从左到右，从下到上输出每个位置的木块编号。
</code></pre><p>思路：使用线性表 vector 来实现 <br> 注释：vector 是单端数组（这题最主要涉及的动作是查找，还有向尾端加元素的移动）</p>
<h3 id="UVA11988- 破损的键盘 -Broken-Keyboard-a-k-a-Beiju-Text"><a href="#UVA11988- 破损的键盘 -Broken-Keyboard-a-k-a-Beiju-Text" class="headerlink" title="UVA11988 破损的键盘 Broken Keyboard (a.k.a. Beiju Text)"></a>UVA11988 破损的键盘 Broken Keyboard (a.k.a. Beiju Text)</h3><pre><code>你在输入文章的时候，键盘上的 Home 键和 End 键出了问题，会不定时的按下。你却不知道此问题，而是专心致志地打稿子，甚至显示器都没开。当你打开显示器之后，展现你面前的数一段悲剧文本。你的任务是在显示器打开前计算出这段悲剧的文本。 给你一段按键的文本，其中 &#39;[&#39; 表示 Home 键，&#39;]&#39; 表示 End 键，输入结束标志是文件结束符（EOF）。
输出一行，即这段悲剧文本。
</code></pre><p>思路：涉及行首和行尾的操作，使用链表 list（不宜用线性表 vector）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span> <span class="params">(string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> len = s.<span class="built_in">length</span> ();</span><br><span class="line">	list&lt;<span class="keyword">char</span>&gt; text;</span><br><span class="line">	list&lt;<span class="keyword">char</span>&gt;::iterator it = text.<span class="built_in">begin</span> ();</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 报错 TLE</span></span><br><span class="line">list&lt;<span class="keyword">char</span>&gt; text;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span> <span class="params">(string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> len = s.<span class="built_in">length</span> ();</span><br><span class="line">	list&lt;<span class="keyword">char</span>&gt;::iterator it = text.<span class="built_in">begin</span> ();</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为什么注释掉那行代码结果是错的？<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span> <span class="params">(string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> len = s.<span class="built_in">length</span> ();</span><br><span class="line">	list&lt;<span class="keyword">char</span>&gt; text;</span><br><span class="line">	list&lt;<span class="keyword">char</span>&gt;::iterator it = text.<span class="built_in">begin</span> ();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		it = text.<span class="built_in">insert</span> (it, s [i]);</span><br><span class="line">		it++;</span><br><span class="line">		<span class="comment">//text.insert (it++, s [i]);</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (it=text.<span class="built_in">begin</span> (); it!=text.<span class="built_in">end</span> (); it++)</span><br><span class="line">		cout &lt;&lt; *it;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>C++刷題</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>数据结构</tag>
        <tag>刷题</tag>
        <tag>线性表</tag>
      </tags>
  </entry>
  <entry>
    <title>利用 rand () 產生隨機數</title>
    <url>/2019/03/14/C++%E5%88%A9%E7%94%A8rand-%E7%94%A2%E7%94%9F%E9%9A%A8%E6%A9%9F%E6%95%B8/</url>
    <content><![CDATA[<h4 id="1-rand- 函數介紹"><a href="#1-rand- 函數介紹" class="headerlink" title="1.rand () 函數介紹"></a>1.rand () 函數介紹 </h4><p>rand () 的效果可以產生從 0~RAND_MAX (int 的最大值) 之間的隨機整數。<br> 在模擬亂數時，需要設定一個亂數種子，所以如果要讓每次執行程式的結果都不一樣的話，必須要設定不同的亂數種子，設定亂數種子的函數為 srand (int)。<br>一般來說，會在程式加上 srand (time (NULL)); 這一行，讓亂數種子以現在的時間做設定，這樣每次執行程式的結果就不同了。</p>
<h4 id="2- 任意浮點數範圍或是任意整數範圍的隨機數"><a href="#2- 任意浮點數範圍或是任意整數範圍的隨機數" class="headerlink" title="2. 任意浮點數範圍或是任意整數範圍的隨機數"></a>2. 任意浮點數範圍或是任意整數範圍的隨機數</h4><p>0~1 之間的隨機浮點數<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> x = (<span class="keyword">double</span>) <span class="built_in">rand</span> () / (RAND_MAX + <span class="number">1.0</span>);</span><br></pre></td></tr></table></figure><br>a~b 之間的隨機浮點數<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> x = (b - a) * <span class="built_in">rand</span> () / (RAND_MAX + <span class="number">1.0</span>) + a;</span><br></pre></td></tr></table></figure><br>a~b 之間的隨機整數<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> x = <span class="built_in">rand</span> () % (b - a + <span class="number">1</span>) + a;</span><br></pre></td></tr></table></figure></p>
<h4 id="3- 不公平的骰子"><a href="#3- 不公平的骰子" class="headerlink" title="3. 不公平的骰子"></a>3. 不公平的骰子</h4>]]></content>
      <categories>
        <category>C++學習</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>取出一個數的每一位</title>
    <url>/2019/03/16/C++%E5%8F%96%E5%87%BA%E4%B8%80%E5%80%8B%E6%95%B8%E7%9A%84%E6%AF%8F%E4%B8%80%E4%BD%8D/</url>
    <content><![CDATA[<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">long</span> t = <span class="number">123456789</span>;</span><br><span class="line">	<span class="keyword">int</span> arr[<span class="number">9</span>]; </span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=<span class="number">8</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		arr[i] = t / <span class="built_in"><span class="keyword">int</span></span>(<span class="built_in">pow</span>(<span class="number">10</span>,i)) % <span class="number">10</span>;</span><br><span class="line">		cout &lt;&lt; arr[i];</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C++學習</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 四捨五入</title>
    <url>/2019/03/22/C++%E5%9B%9B%E6%8D%A8%E4%BA%94%E5%85%A5/</url>
    <content><![CDATA[<p>round (a)：回傳 a 之小數經四捨五入後之值。<br>floor (a)：回傳 a 之小數無條件捨去後之值。<br>ceil (a)：回傳 a 之小數無條件進位後之值。<br>setprecision () 是輸入 / 輸出操縱器庫 <iomanip> 的一個操作符，可以用來修改浮點數的預設精度。<br> 使用 setprecision (n) 可控制輸出流顯示浮點數的數字個數。C++ 預設的流輸出數值有效位是 6。<br> 如果 setprecision (n) 與 setiosflags (ios::fixed) 合用，可以控制小數點右邊的數字個數。<br>setiosflags (ios::fixed) 是用定點方式表示實數 </iomanip></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span> <span class="comment">// 輸出流控制，setiosflags (ios::fixed)，setprecision (n) 的標頭檔案 </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">double</span> n = <span class="number">50.26548</span>;</span><br><span class="line">	<span class="built_in">printf</span> (<span class="string">&quot;%.4f&quot;</span>, n); cout &lt;&lt; endl; <span class="comment">// 列印輸出小數點後 4 位，會四捨五入 </span></span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="built_in">setprecision</span> (<span class="number">4</span>) &lt;&lt; n &lt;&lt; endl;<span class="comment">// 輸出 4 位有效數字，包括整數和小數部分，會四捨五入 </span></span><br><span class="line">	cout &lt;&lt; <span class="built_in">setiosflags</span> (ios::fixed) &lt;&lt; <span class="built_in">setprecision</span> (<span class="number">4</span>) &lt;&lt; n &lt;&lt; endl;<span class="comment">// 輸出小數點後 4 位，會四捨五入，會影響後面的 setprecision () 輸出 </span></span><br><span class="line">	cout &lt;&lt; <span class="built_in">setprecision</span> (<span class="number">4</span>) &lt;&lt; n &lt;&lt; endl;<span class="comment">// 只輸出小數點後 4 位，而不再是包括整數部分的 7 位，會四捨五入（但是此處受到前面影響，所以會輸出包含整數）</span></span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="built_in">setiosflags</span> (ios::fixed) &lt;&lt; <span class="built_in">setprecision</span> (<span class="number">4</span>)&lt;&lt; <span class="built_in">floor</span> (n * <span class="number">10000</span>)/<span class="number">10000</span>&lt;&lt; endl;<span class="comment">// 不會四捨五入，保留幾位小數就乘和除 10 的幾次方 </span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C++學習</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>刷題</tag>
        <tag>四捨五入</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 復習 --1.C++ 基礎入門</title>
    <url>/2018/09/13/C++%E5%9F%BA%E7%A4%8E%E5%85%A5%E9%96%80/</url>
    <content><![CDATA[<p><a href="https://wangxchun.github.io/2018/09/13/C++% E5%9F% BA% E7% A4%8E% E5%85% A5% E9%96%80/">C++ 復習 —1.C++ 基礎入門</a><br><a href="https://wangxchun.github.io/2018/10/14/C++% E5%85% A5% E9%96%80% E4% B9%8B% E5% BE%8C/">C++ 復習 —2.C++ 入門之後</a><br><a href="https://wangxchun.github.io/2019/03/14/C++% E9%80% B2% E9%9A%8E/">C++ 復習 —3.C++ 進階</a></p>
<h3 id="一、認識 -C"><a href="# 一、認識 -C" class="headerlink" title="一、認識 C++"></a>一、認識 C++</h3><h3 id="二、數據類型"><a href="# 二、數據類型" class="headerlink" title="二、數據類型"></a>二、數據類型 </h3><h4 id="1- 基本數據類型"><a href="#1- 基本數據類型" class="headerlink" title="1. 基本數據類型"></a>1. 基本數據類型</h4><h4 id="2- 變量"><a href="#2- 變量" class="headerlink" title="2. 變量"></a>2. 變量</h4><h5 id="1- 變量的聲明和定義"><a href="#1- 變量的聲明和定義" class="headerlink" title="(1) 變量的聲明和定義"></a>(1) 變量的聲明和定義</h5><p> 聲明一個變量只是將變量名稱標識符的有關信息告訴編譯器，使編譯器 “認識” 該標識符，不一定分配記憶體空間。<br>定義一個變量意味著給變量分配内存空間，變量名就是對相應記憶體單元的命名。<br>在 C++ 程式中，大多數情況下，聲明變量的同時也就完成了變量的定義，只有聲明外部變量時例外。</p>
<h5 id="2- 外部變量"><a href="#2- 外部變量" class="headerlink" title="(2) 外部變量"></a>(2) 外部變量 </h5><p> 外部變量：一個變量除了在定義它的原始檔案中可以使用，還能被其他檔案使用。<br>命名空間作用域中定義的變量，默認情況下都是外部變量，若其他檔案要使用，則要加上 extern 關鍵字聲明。<br>定義性聲明（1. 命名空間中不加 extern 關鍵字的聲明 2.extern 聲明同時指定了初值）<br>引用性聲明（只有使用 extern 關鍵字，extern int i;）</p>
<h5 id="3- 變量的存儲類型"><a href="#3- 變量的存儲類型" class="headerlink" title="(3) 變量的存儲類型"></a>(3) 變量的存儲類型 </h5><p>auto：采用堆棧方式分配記憶體空間，屬於暫時性存儲。<br>register：存放在通用寄存器中。(register 存取速度優於 RAM)<br>extern：在所有函數和程式段中都可以引用。<br>static：在記憶體中是以固定地址存放的，在整個程式運行期間都有效。<br>(a) 靜態局部變量<br> 靜態局部變量的生存期為整個源程式，但是其作用域仍與自動變量相同，只能在定義該變量的函數内使用該變量。雖然離開定義它的函數後不能使用，但如再次調用定義它的函數，它又可繼續使用，且保存了前次被調用後留下的值。<br>因此，當多次調用一個函數且要求在調用之間保留某些變量的值時，可考慮采用靜態局部變量。雖然用全局變量也可以達到上述目的，但全局變量有時會造成意外的副作用（全局變量在離開函數之後，依舊可以操作）。<br>(b) 靜態全局變量（與 static 函數類似，内部函數和外部函數，内部函數又稱爲靜態函數）<br>非靜態全局變量的作用域是整個源程式，當一個源程式由多個原始檔案組成時，非靜態的全局變量在各個原始檔案中都是有效的（只要加上 extern 聲明）。<br>而靜態全局變量則只在定義該變量的原始檔案内有效，在同一個源程式中的其他原始檔案不能使用它，因此可以避免在其他原始檔案中引起錯誤。<br>    把局部變量改變成靜態變量後是改變了它的存儲方式，即改變了它的生存期。<br>    把全局變量改變成靜態變量，則是改變了它的作用域，限制了它的使用範圍。</p>
<h4 id="3- 常量"><a href="#3- 常量" class="headerlink" title="3. 常量"></a>3. 常量</h4><h5 id="1- 宏常量"><a href="#1- 宏常量" class="headerlink" title="(1) 宏常量"></a>(1) 宏常量</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> day 7</span></span><br></pre></td></tr></table></figure>
<h5 id="2-const- 修飾的變量"><a href="#2-const- 修飾的變量" class="headerlink" title="(2) const 修飾的變量"></a>(2) const 修飾的變量</h5><p>const int month = 12;</p>
<h5 id="3- 符號常量"><a href="#3- 符號常量" class="headerlink" title="(3) 符號常量"></a>(3) 符號常量</h5><p>const float PI = 3.1415926;</p>
<h4 id="4- 關鍵字"><a href="#4- 關鍵字" class="headerlink" title="4. 關鍵字"></a>4. 關鍵字 </h4><h4 id="5- 標識符命名規則"><a href="#5- 標識符命名規則" class="headerlink" title="5. 標識符命名規則"></a>5. 標識符命名規則</h4><h3 id="三、運算符、表達式、語句"><a href="# 三、運算符、表達式、語句" class="headerlink" title="三、運算符、表達式、語句"></a> 三、運算符、表達式、語句 </h3><h3 id="四、程式流程控制"><a href="# 四、程式流程控制" class="headerlink" title="四、程式流程控制"></a> 四、程式流程控制 </h3><h3 id="五、陣列"><a href="# 五、陣列" class="headerlink" title="五、陣列"></a> 五、陣列 </h3><h4 id="1- 一維陣列"><a href="#1- 一維陣列" class="headerlink" title="1. 一維陣列"></a>1. 一維陣列</h4><h5 id="1- 陣列名"><a href="#1- 陣列名" class="headerlink" title="(1) 陣列名"></a>(1) 陣列名</h5><p> 在大多數用到陣列的表達式中，陣列會自動轉換成指向陣列首元素的指針，例如：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> ia [<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> *p = ia;</span><br></pre></td></tr></table></figure><br>但在以下情形，上述轉換不會發生<br>(a) 當陣列被用作 decltype 關鍵字的參數時<br>(b) 作爲取地址符 (&amp;)、sizeof、typeid 等運算符的運算對象時<br><img src="/2018/09/13/C++%E5%9F%BA%E7%A4%8E%E5%85%A5%E9%96%80/test1.png" alt></p>
<pre><code>補充：類型轉換
(1) 舊有 C 風格的强制轉換是不推薦的，因爲不顯眼，容易被忽略
    (int) x;
    int (x);
(2) 隱式轉換
    (a) 將比較小的整型值提升到較大的整數類型
    (b) 在條件判斷中，將非 bool 類型轉換成 bool 類型
    (c) 初始化過程中，初始化值轉換成變量的類型；賦值語句中，右側運算對象轉換成左側運算對象的類型
    (d) 函數調用的時候會發生實參類型轉換
(3) 顯式轉換：C++ 四種 explicit 關鍵字
    (a) static_cast &lt;new_type&gt; (expression)
        static_cast 也不能去掉 expression 的 const、volitale、或者__unaligned 屬性
    (b) const_cast &lt;new_type&gt; (expression)
        它僅僅把一個它作用的表達式轉換成常量。它可以使一個本來不是 const 類型的數據轉換成 const 類型的，或者把 const 屬性去掉。
        const int p = 0;
        int &amp;rb = const_cast&lt;int&amp;&gt;(p);// 正確
        rb =10;
    (c) dynamic_cast &lt;new_type&gt; (expression)
    (d) reinterpret_cast &lt;new_type&gt; (expression)
</code></pre><h5 id="2- 找最大 - 小 - 值"><a href="#2- 找最大 - 小 - 值" class="headerlink" title="(2) 找最大 (小) 值"></a>(2) 找最大 (小) 值 </h5><p> 要找一個陣列中的最大值，可以設定一個變量，然後遍歷整個陣列，如果找到更大的數就更新該變量</p>
<h5 id="3- 排序"><a href="#3- 排序" class="headerlink" title="(3) 排序"></a>(3) 排序 </h5><p> 冒泡排序</p>
<h4 id="2- 二維陣列"><a href="#2- 二維陣列" class="headerlink" title="2. 二維陣列"></a>2. 二維陣列 </h4><h4 id="3- 從函數返回數組"><a href="#3- 從函數返回數組" class="headerlink" title="3. 從函數返回數組"></a>3. 從函數返回數組</h4><p> 如果想要從函數返回一個一維數組，必須聲明一個返回指針的函數 <br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">myFunction</span> <span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><br> 實例：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span> <span class="comment">//rand () 函數</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">getRandom</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> r [<span class="number">10</span>];</span><br><span class="line">	<span class="comment">// 設置種子</span></span><br><span class="line">	<span class="built_in">srand</span> ((unsingned) <span class="built_in">time</span> (<span class="literal">NULL</span>));</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)</span><br><span class="line">		r [i] = <span class="built_in">rand</span> ();</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> *p;</span><br><span class="line">	p = <span class="built_in">getRandom</span> ();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; *(p+i) &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="六、函數"><a href="# 六、函數" class="headerlink" title="六、函數"></a>六、函數 </h3><h4 id="1- 函數的分檔案編寫：讓程式結構更加清晰"><a href="#1- 函數的分檔案編寫：讓程式結構更加清晰" class="headerlink" title="1. 函數的分檔案編寫：讓程式結構更加清晰"></a>1. 函數的分檔案編寫：讓程式結構更加清晰</h4><h5 id="1- 創建後綴名為 -h- 的頭檔案，並在頭檔案中寫函數的聲明，例如：swap-h"><a href="#1- 創建後綴名為 -h- 的頭檔案，並在頭檔案中寫函數的聲明，例如：swap-h" class="headerlink" title="(1) 創建後綴名為.h 的頭檔案，並在頭檔案中寫函數的聲明，例如：swap.h"></a>(1) 創建後綴名為.h 的頭檔案，並在頭檔案中寫函數的聲明，例如：swap.h</h5><h5 id="2- 創建後綴名為 -cpp- 的原始檔案，在原始檔案中 -include-“swap-h”- 並寫函數的定義"><a href="#2- 創建後綴名為 -cpp- 的原始檔案，在原始檔案中 -include-“swap-h”- 並寫函數的定義" class="headerlink" title="(2) 創建後綴名為.cpp 的原始檔案，在原始檔案中 #include “swap.h” 並寫函數的定義"></a>(2) 創建後綴名為.cpp 的原始檔案，在原始檔案中 #include “swap.h” 並寫函數的定義</h5><h5 id="3- 在 -main- 函數檔案中，-include-“swap-h”，並可以使用該函數"><a href="#3- 在 -main- 函數檔案中，-include-“swap-h”，並可以使用該函數" class="headerlink" title="(3) 在 main 函數檔案中，#include “swap.h”，並可以使用該函數"></a>(3) 在 main 函數檔案中，#include “swap.h”，並可以使用該函數</h5><pre><code> 補充：
#include 實質的作用是預編譯的時候 copy include 標頭檔案的內容到當前列
#include 的路徑 (&quot;&quot; 和 &lt;&gt; 的區別)
#include &quot;swap.h&quot; 通常為自定義函數，在 Project 所在的路徑，若 complier 找不到則會去系統設定的目錄底下找
#include &lt;iostream&gt; 為 C++ 系統的函數庫，complier 會去系統設定的目錄底下去找
</code></pre><p>將需要分配記憶體空間的定義放在原始檔案中，例如：函數的定義，命名空間作用域中變量的定義；<br>而將不需要分配空間的聲明放在頭檔案中，例如：類聲明、外部函數的原型聲明、外部變量的聲明、基本數據類型常量的聲明。<br>内聯函數由於需要嵌入到每個調用它的函數之中，應該被編譯單元可見，定義應該出現在頭檔案當中。</p>
<h4 id="2- 外部函數"><a href="#2- 外部函數" class="headerlink" title="2. 外部函數"></a>2. 外部函數 </h4><p> 非成員函數，都是命名空間作用域的，如果沒有特殊説明，可以在不同的編譯單元中被調用，只要在調用之前聲明即可。</p>
<h4 id="3-static- 修飾命名空間作用域的變量或函數"><a href="#3-static- 修飾命名空間作用域的變量或函數" class="headerlink" title="3.static 修飾命名空間作用域的變量或函數"></a>3.static 修飾命名空間作用域的變量或函數 </h4><p> 命名空間作用域中聲明的變量或函數，在默認情況下都可以被其他編譯單元訪問，但有時並不希望被其他原始檔案引用，可以使用 static。<br>然而，ISO C++ 2.0 標準中，不鼓勵使用這種方式隱藏，而是使用匿名空間：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">f</span> <span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		n++;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="七、指針"><a href="# 七、指針" class="headerlink" title="七、指針"></a>七、指針</h3><h4 id="1- 指針的概念與使用"><a href="#1- 指針的概念與使用" class="headerlink" title="1. 指針的概念與使用"></a>1. 指針的概念與使用</h4><p>(1) 可以通過 &amp; 符號獲取變量的地址<br>(2) 利用指針可以記錄地址<br>(3) 對指針變量解引用，可以操作指針指向的記憶體存放的數據<br><img src="/2018/09/13/C++%E5%9F%BA%E7%A4%8E%E5%85%A5%E9%96%80/test2.png" alt></p>
<h4 id="2- 指針所佔的記憶體空間"><a href="#2- 指針所佔的記憶體空間" class="headerlink" title="2. 指針所佔的記憶體空間"></a>2. 指針所佔的記憶體空間 </h4><p> 所有指針類型在 32 位作業系統下是 4 字節；在 64 位作業系統是 8 字節</p>
<h4 id="3- 空指針和野指針"><a href="#3- 空指針和野指針" class="headerlink" title="3. 空指針和野指針"></a>3. 空指針和野指針 </h4><p> 空指針指向記憶體中編號為 0 的空間，是用來初始化指針變量的 <br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> *p = <span class="literal">NULL</span>;</span><br><span class="line">cout &lt;&lt; *p &lt;&lt; endl; <span class="comment">// 訪問空指針報錯</span></span><br></pre></td></tr></table></figure><br> 空指針指向的記憶體是不可以訪問的（記憶體編號 0-255 為系統占用記憶體，不允許用戶訪問）<br>野指針指向非法的記憶體空間，也是不可以訪問的</p>
<h4 id="4-const- 和指針"><a href="#4-const- 和指針" class="headerlink" title="4.const 和指針"></a>4.const 和指針 </h4><h5 id="1- 指向常量的指針，稱爲常量指針"><a href="#1- 指向常量的指針，稱爲常量指針" class="headerlink" title="(1) 指向常量的指針，稱爲常量指針"></a>(1) 指向常量的指針，稱爲常量指針</h5><p> 只能防止通過指針修改記憶體中的數據，並不能保護指針所指向的對象。<br>可以將一個常量的地址賦值給常量指針。<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>, b = <span class="number">20</span>; <span class="comment">//const 在星號 * 前</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> *p1 = &amp;a;</span><br><span class="line">p1 = &amp;b; <span class="comment">// 正確</span></span><br><span class="line">*p1 = <span class="number">100</span>; <span class="comment">// 報錯</span></span><br></pre></td></tr></table></figure></p>
<h5 id="2- 指針本身是一個常量，指針指向的記憶體位置不能改變，稱爲指針常量"><a href="#2- 指針本身是一個常量，指針指向的記憶體位置不能改變，稱爲指針常量" class="headerlink" title="(2) 指針本身是一個常量，指針指向的記憶體位置不能改變，稱爲指針常量"></a>(2) 指針本身是一個常量，指針指向的記憶體位置不能改變，稱爲指針常量 </h5><p> 指針常量必須在聲明的時候同時初始化，這和聲明一般的常量是一樣的<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>, b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> * <span class="keyword">const</span> p2 = &amp;a; <span class="comment">//const 在星號 * 後</span></span><br><span class="line">*p2 =<span class="number">100</span>; <span class="comment">// 正確</span></span><br><span class="line">p2 = &amp;b; <span class="comment">// 報錯</span></span><br></pre></td></tr></table></figure></p>
<h5 id="3-const- 既修飾指針又修飾常量"><a href="#3-const- 既修飾指針又修飾常量" class="headerlink" title="(3) const 既修飾指針又修飾常量"></a>(3) const 既修飾指針又修飾常量</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>, b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> * <span class="keyword">const</span> p2 = &amp;a; <span class="comment">//const 在星號 * 前後都有</span></span><br><span class="line">*p2 =<span class="number">100</span>; <span class="comment">// 報錯</span></span><br><span class="line">p2 = &amp;b; <span class="comment">// 報錯</span></span><br></pre></td></tr></table></figure>
<h4 id="5- 指針和陣列"><a href="#5- 指針和陣列" class="headerlink" title="5. 指針和陣列"></a>5. 指針和陣列 </h4><p> 利用指針訪問陣列中的元素<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> arr [] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> *p = arr; <span class="comment">// 陣列名轉換成指向陣列第一個元素的指針</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">	cout &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line">	p++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="6- 指針和函數"><a href="#6- 指針和函數" class="headerlink" title="6. 指針和函數"></a>6. 指針和函數 </h4><p> 利用指針作爲函數的參數，可以修改實參的值<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span> <span class="params">(<span class="keyword">int</span>* p1, <span class="keyword">int</span>* p2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> temp = *p1;</span><br><span class="line">	*p1 = *p2;</span><br><span class="line">	*p2 = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>, b=<span class="number">20</span>;</span><br><span class="line">	<span class="built_in">swap</span> (&amp;a, &amp;b);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;a =&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;b =&quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></p>
<h4 id="7- 當陣列名傳入到函數作爲參數時，被退化為指向陣列首元素的指針"><a href="#7- 當陣列名傳入到函數作爲參數時，被退化為指向陣列首元素的指針" class="headerlink" title="7. 當陣列名傳入到函數作爲參數時，被退化為指向陣列首元素的指針"></a>7. 當陣列名傳入到函數作爲參數時，被退化為指向陣列首元素的指針 </h4><p> 例如：可以封裝一個函數，利用冒泡排序，實現對整型陣列的升序排序<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span> <span class="params">(<span class="keyword">int</span>* arr, <span class="keyword">int</span> len)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span> <span class="params">(<span class="keyword">int</span> arr [], <span class="keyword">int</span> len)</span></span>;</span><br><span class="line"><span class="comment">// 以上兩者是一樣的</span></span><br></pre></td></tr></table></figure></p>
<h4 id="8- 函數返回指針"><a href="#8- 函數返回指針" class="headerlink" title="8. 函數返回指針"></a>8. 函數返回指針 </h4><p> 如果想要從函數返回一個一維數組，必須聲明一個返回指針的函數</p>
<h4 id="9- 多級指針"><a href="#9- 多級指針" class="headerlink" title="9. 多級指針"></a>9. 多級指針 </h4><h3 id="八、結構體"><a href="# 八、結構體" class="headerlink" title="八、結構體"></a> 八、結構體</h3><h4 id="1- 結構體變量通過 -“-”- 訪問結構體成員"><a href="#1- 結構體變量通過 -“-”- 訪問結構體成員" class="headerlink" title="1. 結構體變量通過 “.” 訪問結構體成員"></a>1. 結構體變量通過 “.” 訪問結構體成員</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> // 類型名的首字母習慣大寫</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	string name; <span class="comment">// 姓名</span></span><br><span class="line">	<span class="keyword">int</span> age; <span class="comment">// 年齡</span></span><br><span class="line">	<span class="keyword">int</span> score; <span class="comment">// 分數</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">stu1</span> =</span> &#123; <span class="string">&quot; 李四 &quot;</span>,<span class="number">19</span>,<span class="number">60</span> &#125;;</span><br><span class="line">	stu1.name = <span class="string">&quot; 王五 &quot;</span>；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2- 結構體陣列"><a href="#2- 結構體陣列" class="headerlink" title="2. 結構體陣列"></a>2. 結構體陣列 </h4><p> 把自定義的結構體放到陣列中方便維護<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	string name; <span class="comment">// 姓名</span></span><br><span class="line">	<span class="keyword">int</span> age; <span class="comment">// 年齡</span></span><br><span class="line">	<span class="keyword">int</span> score; <span class="comment">// 分數</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Student arr [<span class="number">3</span>]=</span><br><span class="line">	&#123;</span><br><span class="line">		&#123;<span class="string">&quot; 张三 &quot;</span>,<span class="number">18</span>,<span class="number">80</span> &#125;,</span><br><span class="line">		&#123;<span class="string">&quot; 李四 &quot;</span>,<span class="number">19</span>,<span class="number">60</span> &#125;,</span><br><span class="line">		&#123;<span class="string">&quot; 王五 &quot;</span>,<span class="number">20</span>,<span class="number">70</span> &#125;</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot; 姓名：&quot;</span> &lt;&lt; arr [i].name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; arr [i].age &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; arr [i].score &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="3- 結構體指針可以通過 -gt- 操作符來訪問結構體成員"><a href="#3- 結構體指針可以通過 -gt- 操作符來訪問結構體成員" class="headerlink" title="3. 結構體指針可以通過 -&gt; 操作符來訪問結構體成員"></a>3. 結構體指針可以通過 -&gt; 操作符來訪問結構體成員</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	string name; <span class="comment">// 姓名</span></span><br><span class="line">	<span class="keyword">int</span> age; <span class="comment">// 年齡</span></span><br><span class="line">	<span class="keyword">int</span> score; <span class="comment">// 分數</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Student stu1 = &#123; <span class="string">&quot; 李四 &quot;</span>,<span class="number">19</span>,<span class="number">60</span> &#125;;</span><br><span class="line">	Student* p = &amp;stu1;</span><br><span class="line">	p-&gt;acore = <span class="number">80</span>;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">weekday</span> <span class="params">(struct week *wd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    wd-&gt;sleep_time = <span class="number">7.0</span>;       <span class="comment">// 7 小时</span></span><br><span class="line">    wd-&gt;work_time = <span class="number">8.5</span>;        <span class="comment">// 8.5 小时</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">weekend</span> <span class="params">(struct week *we)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    we-&gt;sleep_time = <span class="number">9.0</span>;       <span class="comment">// 9 小时</span></span><br><span class="line">    we-&gt;work_time = <span class="number">2.5</span>;        <span class="comment">// 2.5 小时</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">week</span> <span class="title">w</span>;</span></span><br><span class="line">    <span class="built_in">weekday</span> (&amp;w);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;weekday: sleep time =&quot;</span> &lt;&lt; w.sleep_time; &lt;&lt; <span class="string">&quot;, work time =&quot;</span> &lt;&lt; w.work_time;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">weekend</span> (&amp;w);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;weekend: sleep time =&quot;</span> &lt;&lt; w.sleep_time; &lt;&lt; <span class="string">&quot;, work time =&quot;</span> &lt;&lt; w.work_time;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4- 結構體嵌套結構體"><a href="#4- 結構體嵌套結構體" class="headerlink" title="4. 結構體嵌套結構體"></a>4. 結構體嵌套結構體 </h4><p> 結構體中的成員可以是另一個結構體 <br> 例如：每一個老師輔導一個學員，一個老師的結構體中，記錄一個學生的結構體<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	string name;</span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">	<span class="keyword">int</span> score;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> id;</span><br><span class="line">	string name;</span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">	Student stu;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 訪問老師輔導的學生的成績</span></span><br><span class="line"><span class="comment">//Teacher t1 = &#123;...&#125;;</span></span><br><span class="line"><span class="comment">//t1.stu.score = 80;</span></span><br></pre></td></tr></table></figure></p>
<h4 id="5- 結構體作爲函數參數"><a href="#5- 結構體作爲函數參數" class="headerlink" title="5. 結構體作爲函數參數"></a>5. 結構體作爲函數參數 </h4><p> 如果不想修改主函數中的數據，用值傳遞，反之用地址傳遞<br>(還有一種情形是爲了避免占用太多記憶體，用址傳遞，但是不想修改數據，則可以使用 const)<br>void printStudent (Student stu);<br>void setStudent (Student* stu);</p>
<h4 id="6- 結構體中 -const- 使用場景"><a href="#6- 結構體中 -const- 使用場景" class="headerlink" title="6. 結構體中 const 使用場景"></a>6. 結構體中 const 使用場景 </h4><p> 若結構體數據量太大，用值傳遞會占用太多記憶體，用址傳遞，指針只占用 8 個字節 (64 位作業系統)<br>加入 const 修飾，若在函數中不小心修改實參，編譯器會檢測出問題，讓 programmer 修改<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printStudent</span> <span class="params">(<span class="keyword">const</span> Student *stu)</span></span>;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>C++復習</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>環境配置</tag>
        <tag>數據類型</tag>
        <tag>運算符</tag>
        <tag>陣列</tag>
        <tag>指針</tag>
        <tag>結構體</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 的 #include</title>
    <url>/2021/03/27/C++%E7%9A%84#include/</url>
    <content><![CDATA[<h3 id="被 -include- 的 -header-file- 中最常見的內容分為哪幾類？"><a href="# 被 -include- 的 -header-file- 中最常見的內容分為哪幾類？" class="headerlink" title="被 #include 的 header file 中最常見的內容分為哪幾類？"></a>被 #include 的 header file 中最常見的內容分為哪幾類？</h3><h5 id="1- 巨集定義"><a href="#1- 巨集定義" class="headerlink" title="(1) 巨集定義"></a>(1) 巨集定義 </h5><h5 id="2-typedef"><a href="#2-typedef" class="headerlink" title="(2) typedef"></a>(2) typedef</h5><h5 id="3- 包含別的標頭檔案"><a href="#3- 包含別的標頭檔案" class="headerlink" title="(3) 包含別的標頭檔案"></a>(3) 包含別的標頭檔案</h5><h5 id="4-inline- 函式定義"><a href="#4-inline- 函式定義" class="headerlink" title="(4) inline 函式定義"></a>(4) inline 函式定義</h5><h5 id="5- 函式宣告"><a href="#5- 函式宣告" class="headerlink" title="(5) 函式宣告"></a>(5) 函式宣告</h5><h5 id="6-struct-union-enum- 型別定義"><a href="#6-struct-union-enum- 型別定義" class="headerlink" title="(6) struct,union,enum 型別定義"></a>(6) struct,union,enum 型別定義</h5><h3 id="如何防止重複 -include？（更確切的表述為 -“重複 -include- 時如何防止重複定義 - 宣告？”）需要說出 -2- 種方案，並說明各自的優缺點？"><a href="# 如何防止重複 -include？（更確切的表述為 -“重複 -include- 時如何防止重複定義 - 宣告？”）需要說出 -2- 種方案，並說明各自的優缺點？" class="headerlink" title="如何防止重複 #include？（更確切的表述為 “重複 #include 時如何防止重複定義 / 宣告？”）需要說出 2 種方案，並說明各自的優缺點？"></a> 如何防止重複 #include？（更確切的表述為 “重複 #include 時如何防止重複定義 / 宣告？”）需要說出 2 種方案，並說明各自的優缺點？</h3><h4 id="1-pragma-once"><a href="#1-pragma-once" class="headerlink" title="(1) #pragma once"></a>(1) #pragma once</h4><p>優點：不會出現巨集名重複   缺點：某些老的編譯器不支援</p>
<h4 id="2-ifndef-XXX"><a href="#2-ifndef-XXX" class="headerlink" title="(2) ifndef XXX"></a>(2) ifndef XXX</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> XXX</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span>     優點：所以的編譯器都支援   缺點：出現巨集名重複</span></span><br></pre></td></tr></table></figure>
<p>一般我們看到大多都是選擇方案二，我們只要避免巨集名重複就行了</p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 小知识点总结</title>
    <url>/2021/03/27/C++%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h3 id="返回多个参数的方法："><a href="# 返回多个参数的方法：" class="headerlink" title="返回多个参数的方法："></a>返回多个参数的方法：</h3><h4 id="1- 定义结构体"><a href="#1- 定义结构体" class="headerlink" title="1. 定义结构体"></a>1. 定义结构体 </h4><h4 id="2- 利用引用参数"><a href="#2- 利用引用参数" class="headerlink" title="2. 利用引用参数"></a>2. 利用引用参数</h4><h3 id="解决 -“数组大小必须事先决定”- 这个问题"><a href="# 解决 -“数组大小必须事先决定”- 这个问题" class="headerlink" title="解决 “数组大小必须事先决定” 这个问题"></a> 解决 “数组大小必须事先决定” 这个问题</h3><h4 id="1- 使用 -new- 和 -delete，有程序员自行分配内"><a href="#1- 使用 -new- 和 -delete，有程序员自行分配内" class="headerlink" title="1. 使用 new 和 delete，有程序员自行分配内"></a>1. 使用 new 和 delete，有程序员自行分配内</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span> </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> size = <span class="number">0</span>; </span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot; 输入长度：&quot;</span>; </span><br><span class="line">    cin &gt;&gt; size; </span><br><span class="line">    <span class="keyword">int</span> *arr = <span class="keyword">new</span> <span class="keyword">int</span> [size]&#123;<span class="number">0</span>&#125;; </span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot; 输入元素值：&quot;</span> &lt;&lt; endl; </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123; </span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;arr [&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;] =&quot;</span>; </span><br><span class="line">        cin &gt;&gt; arr [i]; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot; 显示元素值：&quot;</span> &lt;&lt; endl; </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;arr [&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;] =&quot;</span> &lt;&lt; arr [i]</span><br><span class="line">             &lt;&lt; endl; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> [] arr; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注释：二维矩阵就是多段一维数组 <br> 例如需要一个 3X6 的矩阵<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span> </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> **arr = <span class="keyword">new</span> <span class="keyword">int</span>*[<span class="number">3</span>]; <span class="comment">//arr [0] 和 arr [1] 分别存储一维数组的位置</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        arr [i] = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">6</span>]&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 既然可以动态分配，那每一段数组的长度当然可以不一样</span></span><br><span class="line">    <span class="comment">//arr [0] = new int [3]&#123;0&#125;;</span></span><br><span class="line">    <span class="comment">//arr [1] = new int [5]&#123;0&#125;;</span></span><br><span class="line">    <span class="comment">//arr [3] = new int [3]&#123;0&#125;;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; j++) &#123;</span><br><span class="line">            cout &lt;&lt; arr [i][j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">delete</span> [] arr [i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> [] arr; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="2- 动态分配会使得程序难以理解，在需要建立长度不定的容器时，建议使用 -vector- 之类的容器"><a href="#2- 动态分配会使得程序难以理解，在需要建立长度不定的容器时，建议使用 -vector- 之类的容器" class="headerlink" title="2. 动态分配会使得程序难以理解，在需要建立长度不定的容器时，建议使用 vector 之类的容器"></a>2. 动态分配会使得程序难以理解，在需要建立长度不定的容器时，建议使用 vector 之类的容器 </h4><h3 id="static- 的使用时机"><a href="#static- 的使用时机" class="headerlink" title="static 的使用时机"></a>static 的使用时机</h3><h4 id="1- 改变变量的存储方式和生存周期"><a href="#1- 改变变量的存储方式和生存周期" class="headerlink" title="1. 改变变量的存储方式和生存周期"></a>1. 改变变量的存储方式和生存周期</h4><p> 局部变量</p>
<h4 id="2- 限制作用域"><a href="#2- 限制作用域" class="headerlink" title="2. 限制作用域"></a>2. 限制作用域 </h4><p> 全局函数和变量</p>
<h4 id="3- 唯一性"><a href="#3- 唯一性" class="headerlink" title="3. 唯一性"></a>3. 唯一性 </h4><p> 函数成员</p>
<h3 id="堆和栈的比较"><a href="# 堆和栈的比较" class="headerlink" title="堆和栈的比较"></a>堆和栈的比较 </h3><h4 id="堆是由低地址向高地址扩充的"><a href="# 堆是由低地址向高地址扩充的" class="headerlink" title="堆是由低地址向高地址扩充的"></a> 堆是由低地址向高地址扩充的 </h4><h4 id="堆是不连续的空间"><a href="# 堆是不连续的空间" class="headerlink" title="堆是不连续的空间"></a> 堆是不连续的空间 </h4><h4 id="在申请空间后，栈的分配要比堆还快"><a href="# 在申请空间后，栈的分配要比堆还快" class="headerlink" title="在申请空间后，栈的分配要比堆还快"></a> 在申请空间后，栈的分配要比堆还快 </h4><h4 id="生命周期"><a href="# 生命周期" class="headerlink" title="生命周期"></a> 生命周期</h4><h3 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h3><p>volatile 可以保证对特殊地址的稳定访问，通常用到如下几个地方</p>
<h4 id="1- 中断服务程式修改的供其他程式检测的变量"><a href="#1- 中断服务程式修改的供其他程式检测的变量" class="headerlink" title="1. 中断服务程式修改的供其他程式检测的变量"></a>1. 中断服务程式修改的供其他程式检测的变量</h4><h4 id="2- 多工环境下各任务共享的标志"><a href="#2- 多工环境下各任务共享的标志" class="headerlink" title="2. 多工环境下各任务共享的标志"></a>2. 多工环境下各任务共享的标志</h4><h4 id="3- 存储器对应的硬体暂存器也要加 -volatile- 说明，因为每次对它的读写都可能有不同意义"><a href="#3- 存储器对应的硬体暂存器也要加 -volatile- 说明，因为每次对它的读写都可能有不同意义" class="headerlink" title="3. 存储器对应的硬体暂存器也要加 volatile 说明，因为每次对它的读写都可能有不同意义"></a>3. 存储器对应的硬体暂存器也要加 volatile 说明，因为每次对它的读写都可能有不同意义</h4>]]></content>
      <categories>
        <category>C++學習</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 的 RALL 实现</title>
    <url>/2021/03/27/C++%E7%9A%84RALL%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10000000</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int32_t</span> *ptr = <span class="keyword">new</span> <span class="keyword">int32_t</span> [<span class="number">3</span>];</span><br><span class="line">		ptr [<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">		ptr [<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">		ptr [<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">		<span class="keyword">delete</span> ptr;     <span class="comment">// 假设忘记了释放内存，会消耗大量内存 </span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">system</span> (<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>RALL 机制便是通过利用对象的自动销毁，使得资源也具有了生命周期，有了自动销毁（自动回收）的功能。<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">auto_release_ptr</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">auto_release_ptr</span> (T *t) :<span class="keyword">_t</span> (t)&#123;&#125;;</span><br><span class="line">	~<span class="built_in">auto_release_ptr</span> ()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">delete</span> <span class="keyword">_t</span>;</span><br><span class="line">	&#125;;</span><br><span class="line"> </span><br><span class="line">	<span class="function">T * <span class="title">getPtr</span> <span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">_t</span>;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	T *<span class="keyword">_t</span>;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10000000</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">auto</span> arp = auto_release_ptr&lt;<span class="keyword">int32_t</span>&gt;(<span class="keyword">new</span> <span class="keyword">int32_t</span> [<span class="number">3</span>]);</span><br><span class="line">		<span class="keyword">int32_t</span> *ptr = arp.<span class="built_in">getPtr</span> ();</span><br><span class="line">		<span class="comment">//auto_release_ptr 有一个数据成员在构造时完成了初始化并指向了 new 出来的空间 </span></span><br><span class="line">		ptr [<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">		ptr [<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">		ptr [<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">system</span> (<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p> 更多的如智能指针，lock_guard 都利用了 RALL 机制来实现。</p>
]]></content>
      <categories>
        <category>C++學習</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 萬能標題檔案</title>
    <url>/2021/03/27/C++%E8%90%AC%E8%83%BD%E6%A8%99%E9%A0%AD%E6%AA%94%E6%A1%88/</url>
    <content><![CDATA[<p> 萬能標頭檔案 </p>
]]></content>
      <categories>
        <category>C++學習</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>解釋一個語句</title>
    <url>/2019/03/28/C++%E8%A7%A3%E9%87%8B%E4%B8%80%E5%80%8B%E8%AA%9E%E5%8F%A5/</url>
    <content><![CDATA[<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">A += B == <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p> 在邏輯上等於：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> b = B == <span class="number">1</span>;</span><br><span class="line">A += b;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>C++學習</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 資料結構與算法 -- 一。線性表 --1. 線性表的存儲結構</title>
    <url>/2019/06/02/C++%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B%E8%88%87%E7%AE%97%E6%B3%95-%E7%B7%9A%E6%80%A7%E8%A1%A8%E7%9A%84%E5%AD%98%E5%84%B2%E7%B5%90%E6%A7%8B/</url>
    <content><![CDATA[<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="一、順序表"><a href="# 一、順序表" class="headerlink" title="一、順序表"></a> 一、順序表 </h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="二、單鏈表（Single-Linked-List）"><a href="# 二、單鏈表（Single-Linked-List）" class="headerlink" title="二、單鏈表（Single Linked List）"></a> 二、單鏈表（Single Linked List）</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 單鏈表的節點定義 */</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    T data;</span><br><span class="line">    LinkNode&lt;T&gt; *next;</span><br><span class="line">    <span class="built_in">LinkNode</span> (LinkNode&lt;T&gt; *ptr = <span class="literal">NULL</span>)&#123;next = ptr;&#125;</span><br><span class="line">    <span class="built_in">LinkNode</span> (<span class="keyword">const</span> T &amp;item, LinkNode&lt;T&gt; *ptr = <span class="literal">NULL</span>)    </span><br><span class="line">    &#123;</span><br><span class="line">        next = ptr;</span><br><span class="line">        data = item;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 帶頭節點的單鏈表定義 */</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkList</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 無參數的構造函數 </span></span><br><span class="line">    <span class="built_in">LinkList</span> ()&#123;head = <span class="keyword">new</span> LinkNode&lt;T&gt;;&#125;</span><br><span class="line">    <span class="comment">// 帶參數的構造函數 </span></span><br><span class="line">    <span class="built_in">LinkList</span> (<span class="keyword">const</span> T &amp;item)&#123;head = <span class="keyword">new</span> LinkNode&lt;T&gt;(item);&#125;</span><br><span class="line">    <span class="comment">// 複製構造函數 </span></span><br><span class="line">    <span class="built_in">LinkList</span> (LinkList&lt;T&gt; &amp;List);</span><br><span class="line">    <span class="comment">// 析構函數 </span></span><br><span class="line">    ~<span class="built_in">LinkList</span> ()&#123;<span class="built_in">Clear</span> ();&#125;</span><br><span class="line">    <span class="comment">// 重載函數：賦值 </span></span><br><span class="line">    LinkList&lt;T&gt;&amp; <span class="keyword">operator</span>=(LinkList&lt;T&gt; &amp;List);</span><br><span class="line">   	<span class="comment">// 定位指定的位置，返回該位置上的節點指針 </span></span><br><span class="line">   	<span class="function">LinkNode&lt;T&gt;* <span class="title">Locate</span> <span class="params">(<span class="keyword">int</span> pos)</span></span>;</span><br><span class="line">   	<span class="comment">// 在指定位置 pos 插入值为 item 的節點，失敗返回 false</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">Insert</span> <span class="params">(T &amp;item, <span class="keyword">int</span> pos)</span></span>;</span><br><span class="line">    <span class="comment">// 删除指定位置 pos 上的節點，item 就是該節點的值，失敗返回 false</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">Remove</span> <span class="params">(<span class="keyword">int</span> pos, T &amp;item)</span></span>;</span><br><span class="line">    <span class="comment">// 鏈表清空 </span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Clear</span> <span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 獲取鏈表長度 </span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Length</span> <span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="comment">// 打印鏈表 </span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Print</span> <span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="comment">// 獲取鏈表頭節點 </span></span><br><span class="line">    <span class="function">LinkNode&lt;T&gt;* <span class="title">GetHead</span> <span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="comment">// 設置鏈表頭節點 </span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetHead</span> <span class="params">(LinkNode&lt;T&gt; *p)</span></span>;</span><br><span class="line">    <span class="comment">// 查找數據的位置，返回第一個找到的滿足該數值的節點指針 </span></span><br><span class="line">    <span class="function">LinkNode&lt;T&gt;* <span class="title">Find</span> <span class="params">(T &amp;item)</span></span>;</span><br><span class="line">    <span class="comment">// 獲取指定位置 pos 的節點的值，失敗返回 false</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">GetData</span> <span class="params">(<span class="keyword">int</span> pos, T &amp;item)</span></span>;</span><br><span class="line">    <span class="comment">// 設置指定位置 pos 的節點的值，失敗返回 false</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">SetData</span> <span class="params">(<span class="keyword">int</span> pos, T &amp;item)</span></span>;</span><br><span class="line">    <span class="comment">// 判斷鏈表是否為空 </span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">IsEmpty</span> <span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="comment">// 鏈表排序 </span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Sort</span> <span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 鏈表逆置 </span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Reverse</span> <span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    LinkNode&lt;T&gt; *head;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="三、靜態表"><a href="# 三、靜態表" class="headerlink" title="三、靜態表"></a> 三、靜態表 </h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="二、棧（Stack）"><a href="# 二、棧（Stack）" class="headerlink" title="二、棧（Stack）"></a> 二、棧（Stack）</h3><h3 id="三、隊列（Queue）"><a href="# 三、隊列（Queue）" class="headerlink" title="三、隊列（Queue）"></a> 三、隊列（Queue）</h3><h3 id="四、串（String）"><a href="# 四、串（String）" class="headerlink" title="四、串（String）"></a> 四、串（String）</h3><h3 id="五、陣列（Array）"><a href="# 五、陣列（Array）" class="headerlink" title="五、陣列（Array）"></a> 五、陣列（Array）</h3><h3 id="六、廣義表（Generalize-List）"><a href="# 六、廣義表（Generalize-List）" class="headerlink" title="六、廣義表（Generalize List）"></a> 六、廣義表（Generalize List）</h3>]]></content>
      <categories>
        <category>C++資料結構</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 运算符</title>
    <url>/2021/03/27/C++%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[<h4 id="使用运算符要注意：接受的操作数、优先级、结合性、返回值。"><a href="# 使用运算符要注意：接受的操作数、优先级、结合性、返回值。" class="headerlink" title="使用运算符要注意：接受的操作数、优先级、结合性、返回值。"></a>使用运算符要注意：接受的操作数、优先级、结合性、返回值。</h4><p>C++ 中的运算符几乎 都可以写成函数调用的形式，因此不难理解表达式通常都有其返回值。赋值运算符的返回值是赋值后左操作数的引用。== 的返回值是一个布尔值，表示两边的操作数是否相等。以表达式 <em>a = 15 </em> 6 / 5 为例，它的返回值就是赋值后的 *a ，即 18。 sizeof 的返回值的意义比较多，篇幅所限，这里不分析它。</p>
<h4 id="是右结核性"><a href="# 是右结核性" class="headerlink" title="= 是右结核性"></a>= 是右结核性 </h4><p> 连续使用 = 会怎么样？<br>以 a = b = c 为例。<br>由于赋值运算符是右结合性的，原表达式相当于 a = (b = c)，所以先计算 b = c，然后返回 b；那么表达式就变成了 a = b，a 的值变为 b 的值。最后的结果就是 a 和 b 的值都变成 c 的值了。—— 这是符合人的直观感受的。可以证明，对于超过两个连续使用的赋值运算符，其结果都与上面的类似。这样做是不会引发编译器或者程序员的误解的。</p>
<h4 id="是左结合性"><a href="# 是左结合性" class="headerlink" title="== 是左结合性"></a>== 是左结合性 </h4><p> 连续使用 == 会怎么样？<br>以 a == b == c 为例。不妨假设其中三个变量都是 int 型，对于其他情况，分析方法类似。<br>左结合性：原表达式相当于 (a == b) == c 先计算 a == b，返回 true 或者 false。由于 c 是 int 型，因此会发生隐式类型转换，true 或者 false 会 <br> 被转换为 int 型的 1 或者 0。最后表达式就变成 1 == c 或者 0 == c。这显然不是在检查 a、b、c 三个变量是否相等，会引起误解。可以证明，对 <br> 于超过两个连续使用的 == 运算符，都会引起类似的误解。</p>
]]></content>
      <categories>
        <category>C++學習</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 復習 --3.C++ 進階</title>
    <url>/2019/03/14/C++%E9%80%B2%E9%9A%8E/</url>
    <content><![CDATA[<p><a href="https://wangxchun.github.io/2018/09/13/C-% E5%9F% BA% E7% A4%8E% E5%85% A5% E9%96%80/">C++ 復習 —1.C++ 基礎入門</a><br><a href="https://wangxchun.github.io/2018/10/14/C-% E5%85% A5% E9%96%80% E4% B9%8B% E5% BE%8C/">C++ 復習 —2.C++ 入門之後</a><br><a href="https://wangxchun.github.io/2019/03/14/C-% E9%80% B2% E9%9A%8E/">C++ 復習 —3.C++ 進階</a></p>
<h3 id="一、模板"><a href="# 一、模板" class="headerlink" title="一、模板"></a>一、模板 </h3><h4 id="1- 模板的概念"><a href="#1- 模板的概念" class="headerlink" title="1. 模板的概念"></a>1. 模板的概念</h4><h4 id="2- 函數模板"><a href="#2- 函數模板" class="headerlink" title="2. 函數模板"></a>2. 函數模板</h4><h4 id="3- 類模板"><a href="#3- 類模板" class="headerlink" title="3. 類模板"></a>3. 類模板</h4><h3 id="二、STL- 初識"><a href="# 二、STL- 初識" class="headerlink" title="二、STL 初識"></a> 二、STL 初識 </h3><h3 id="三、STL- 常用容器"><a href="# 三、STL- 常用容器" class="headerlink" title="三、STL 常用容器"></a> 三、STL 常用容器 </h3><h3 id="四、STL- 函數對象"><a href="# 四、STL- 函數對象" class="headerlink" title="四、STL 函數對象"></a> 四、STL 函數對象 </h3><h3 id="五、STL- 常用算法"><a href="# 五、STL- 常用算法" class="headerlink" title="五、STL 常用算法"></a> 五、STL 常用算法</h3>]]></content>
      <categories>
        <category>C++復習</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>dos 使用</title>
    <url>/2021/03/27/dos%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="显示目录下的文件"><a href="# 显示目录下的文件" class="headerlink" title="显示目录下的文件"></a> 显示目录下的文件 </h3><p>dir 不带任何参数，等价于命令 dir/a-h-s，即显示除系统和隐藏属性外的文件和目录 <br>dir/a 显示的是当前路径下，所有的文件和目录（含只读，系统，隐藏，归档）<br>dir/ah 只显示当前路径下隐藏文件和目录 <br>dir/ad 只显示当前路径下的所有目录（含隐藏等其他属性，只要是目录就显示）</p>
<h3 id="Linux- 与 -Windows- 命令对比"><a href="#Linux- 与 -Windows- 命令对比" class="headerlink" title="Linux 与 Windows 命令对比"></a>Linux 与 Windows 命令对比 </h3><p><a href="https://blog.csdn.net/xzwspy/article/details/80183849">https://blog.csdn.net/xzwspy/article/details/80183849</a></p>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>git 安装</title>
    <url>/2021/03/27/git%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/ScottePerk/article/details/81571251">https://blog.csdn.net/ScottePerk/article/details/81571251</a></p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
  </entry>
  <entry>
    <title>hexo 中 Mathjax 的用法</title>
    <url>/2019/02/23/hexo%E4%B8%ADMathjax%E7%9A%84%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<h3 id="Mathjax- 的安装"><a href="#Mathjax- 的安装" class="headerlink" title="Mathjax 的安装"></a>Mathjax 的安装 </h3><p> 在 hexo 中，你会发现我们不能用 Latex 语法来书写数学公式，这对于书写学术博客来说是很大的不便，因为我们会经常碰到很多的数学公式推导，但是我们可以通过安装第三方库来解决这一问题。</p>
<h4 id="第一步：- 使用 -Kramed- 代替 -Marked"><a href="# 第一步：- 使用 -Kramed- 代替 -Marked" class="headerlink" title="第一步： 使用 Kramed 代替 Marked"></a>第一步： 使用 Kramed 代替 Marked</h4><p>hexo 默认的渲染引擎是 marked，但是 marked 不支持 mathjax。 kramed 是在 marked 的基础上进行修改。我们在工程目录下执行以下命令来安装 kramed。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure></p>
<p>然后，更改 /node_modules/hexo-renderer-kramed/lib/renderer.js，更改：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Change inline math rule</span><br><span class="line">function formatText (text) &#123;</span><br><span class="line">    &#x2F;&#x2F; Fit kramed&#39;s rule: $$ + \1 + $$</span><br><span class="line">    return text.replace (&#x2F;&#96;\$(.*?)\$&#96;&#x2F;g, &#39;$$$$$1$$$$&#39;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>为：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Change inline math rule</span><br><span class="line">function formatText (text) &#123;</span><br><span class="line">    return text;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="第二步：停止使用 -hexo-math"><a href="# 第二步：停止使用 -hexo-math" class="headerlink" title="第二步：停止使用 hexo-math"></a>第二步：停止使用 hexo-math</h4><p>首先，如果你已经安装 hexo-math, 请卸载它：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-math --save</span><br></pre></td></tr></table></figure>
<p>然后安装 hexo-renderer-mathjax 包：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-mathjax --save</span><br></pre></td></tr></table></figure></p>
<h4 id="第三步：更新 -Mathjax- 的 -CDN- 链接"><a href="# 第三步：更新 -Mathjax- 的 -CDN- 链接" class="headerlink" title="第三步：更新 Mathjax 的 CDN 链接"></a>第三步：更新 Mathjax 的 CDN 链接 </h4><p> 首先，打开 /node_modules/hexo-renderer-mathjax/mathjax.html<br>然后，把 script 更改为：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;mathjax&#x2F;2.7.1&#x2F;MathJax.js?config&#x3D;TeX-MML-AM_CHTML&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></p>
<h4 id="第四步：更改默认转义规则"><a href="# 第四步：更改默认转义规则" class="headerlink" title="第四步：更改默认转义规则"></a>第四步：更改默认转义规则 </h4><p> 因为 hexo 默认的转义规则会将一些字符进行转义，比如 _ 转为 <em>, 所以我们需要对默认的规则进行修改.<br>首先， 打开 /node_modules/kramed/lib/rules、inline.js</em></p>
<p>然后，把<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">escape: &#x2F;^\\([\\&#96;*&#123;&#125;\[\]()#$+\-.!_&gt;])&#x2F;,</span><br></pre></td></tr></table></figure></p>
<p>更改为：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">escape: &#x2F;^\\([&#96;*\[\]()# +\-.!_&gt;])&#x2F;,</span><br></pre></td></tr></table></figure></p>
<p>把<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">em: &#x2F;^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)&#x2F;,</span><br></pre></td></tr></table></figure></p>
<p>更改为:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">em: &#x2F;^\*((?:\*\*|[\s\S])+?)\*(?!\*)&#x2F;,</span><br></pre></td></tr></table></figure></p>
<p>第五步：开启 mathjax<br>在主题 _config.yml 中开启 Mathjax， 找到 mathjax 字段添加如下代码：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mathjax:</span><br><span class="line">    enable: true</span><br></pre></td></tr></table></figure></p>
<p>到博客根目录下，找到 themes/next/_config.yml，把 math 默认的 flase 修改为 true，具体如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Math Equations Render Support</span><br><span class="line">math:</span><br><span class="line">  enable: true</span><br><span class="line">  per_page: true</span><br><span class="line">  engine: mathjax</span><br></pre></td></tr></table></figure></p>
<p>通过以上步骤，我们就可以在 hexo 中使用 Mathjax 来书写数学公式。</p>
<h3 id="语法使用"><a href="# 语法使用" class="headerlink" title="语法使用"></a>语法使用</h3><h4 id><a href="#" class="headerlink" title=" "></a> </h4>]]></content>
      <categories>
        <category>hexo</category>
      </categories>
  </entry>
  <entry>
    <title>hexo 目錄結構</title>
    <url>/2021/03/27/hexo%E7%9B%AE%E9%8C%84%E7%B5%90%E6%A7%8B/</url>
    <content><![CDATA[<p>.<br>├── node_modules  // 套件暫存處，基本上你所有安裝的套件也都會在這裡 <br>├── public        // 執行 hexo generate 後，輸出的靜態網頁 <br>├── scaffolds     // 模板。Hexo 會根據 scaffold 來建立新文章 / 新頁面 <br>├── scripts       // 存放自定義 js 文件 <br>├── source<br>|   ├── _drafts   // 草稿文章 <br>|   └── _posts    // 發佈文章 <br>├── themes        // Hexo 主题文件，Next 主題的樹狀結構請看下面 <br>├── _config.yml   // 整個 Blog 的配置 <br>├── .gitignore    // 舉凡只要你不想被加入版本控制甚至是上傳到 GitHub 的資料夾或檔案，都可寫在這 <br>├── package-lock.json 主要用途是用於記錄當前狀態安裝的每一個套件版本，他會自己調整，不需要動它 <br>└── package.json  // 主要是拿來放置並管理我們透過 npm 下載回來的檔案，其中部分指令也是直接寫在這裡面 </p>
<p>.<br>└──themes<br>   └── next<br>          ├── doc<br>       ├── languages    // 主題語言字眼 <br>       ├── layout       //pug 文件，後會渲染成 html<br>       ├── scripts      //js 文件 <br>       ├── source<br>       |   ├── css      //styl 文件，後會渲染成 css<br>       |   ├── img      // 主題配置用到的圖片 <br>       |   └── js       //js 文件 <br>       ├── test<br>       └── _config.yml  // Butterfly 主題配置 </p>
<p> 試著學 Hexo 系列 <br><a href="https://ithelp.ithome.com.tw/users/20119486/ironman/2944">https://ithelp.ithome.com.tw/users/20119486/ironman/2944</a></p>
<p> 參考：<br><a href="https://ouoholly.github.io/post/my-custom-config-on-hexo-butterfly-theme/#%">https://ouoholly.github.io/post/my-custom-config-on-hexo-butterfly-theme/#%</a> E5%89%8D% E8% A8%80</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>目錄結構</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 報錯 no matching function for call to transform</title>
    <url>/2021/03/24/no-matching-function-for-call-to-transform/</url>
    <content><![CDATA[<h3 id="報錯"><a href="# 報錯" class="headerlink" title="報錯"></a> 報錯 </h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	string str = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">	<span class="built_in">transform</span> (str.<span class="built_in">begin</span> (), str.<span class="built_in">end</span> (), str.<span class="built_in">begin</span> (), ::toupper);</span><br><span class="line">	cout &lt;&lt; str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 報錯：no matching function for call to transform</p>
<h3 id="有三種解決方法："><a href="# 有三種解決方法：" class="headerlink" title="有三種解決方法："></a> 有三種解決方法：</h3><h4 id="1- 因為在全域性名稱空間中有實現的函式（而不是巨集），所以我們明確名稱空間，這並不是總奏效，但是在我的 -g- 環境中沒有問題："><a href="#1- 因為在全域性名稱空間中有實現的函式（而不是巨集），所以我們明確名稱空間，這並不是總奏效，但是在我的 -g- 環境中沒有問題：" class="headerlink" title="1. 因為在全域性名稱空間中有實現的函式（而不是巨集），所以我們明確名稱空間，這並不是總奏效，但是在我的 g++ 環境中沒有問題："></a>1. 因為在全域性名稱空間中有實現的函式（而不是巨集），所以我們明確名稱空間，這並不是總奏效，但是在我的 g++ 環境中沒有問題：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">transform</span> (str.<span class="built_in">begin</span> (), str.<span class="built_in">end</span> (), str.<span class="built_in">begin</span> (), ::toupper);</span><br></pre></td></tr></table></figure>
<h4 id="2- 自己寫一個函數出來 -—wraper"><a href="#2- 自己寫一個函數出來 -—wraper" class="headerlink" title="2. 自己寫一個函數出來 —wraper"></a>2. 自己寫一個函數出來 —wraper</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">charToUpper</span> <span class="params">(<span class="keyword">char</span> c)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">return</span> std::<span class="built_in">toupper</span> (c); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3- 強制轉化：將 -toupper- 轉換為一個返回值為 -int，引數只有一個 -int- 的函數指標。"><a href="#3- 強制轉化：將 -toupper- 轉換為一個返回值為 -int，引數只有一個 -int- 的函數指標。" class="headerlink" title="3. 強制轉化：將 toupper 轉換為一個返回值為 int，引數只有一個 int 的函數指標。"></a>3. 強制轉化：將 toupper 轉換為一個返回值為 int，引數只有一個 int 的函數指標。</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">transform</span> (str.<span class="built_in">begin</span> (), str.<span class="built_in">end</span> (), str.<span class="built_in">begin</span> (), (<span class="built_in"><span class="keyword">int</span></span> (*)(<span class="keyword">int</span>)) toupper);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C++報錯</category>
      </categories>
  </entry>
  <entry>
    <title>vbox 安装 Ubuntu 清理整个磁盘会怎样</title>
    <url>/2021/03/23/vbox%E5%AE%89%E8%A3%85Ubuntu%E6%B8%85%E7%90%86%E6%95%B4%E4%B8%AA%E7%A3%81%E7%9B%98%E4%BC%9A%E6%80%8E%E6%A0%B7/</url>
    <content><![CDATA[<h4 id="vbox- 安装 -Ubuntu- 清理整个磁盘会怎样"><a href="#vbox- 安装 -Ubuntu- 清理整个磁盘会怎样" class="headerlink" title="vbox 安装 Ubuntu 清理整个磁盘会怎样"></a>vbox 安装 Ubuntu 清理整个磁盘会怎样 </h4><p> 不用担心。它不会影响你的整个系统。因为你是在 VirtualBox 虚拟机里面安装系统的。在虚拟机中，硬盘实际上是一个文件。是在电脑中建立一个文件或文件夹。用这个文件或者是文件夹中的内容来模拟一个虚拟的硬盘。此时的格式化，只会影响到虚拟出来的硬盘。对真正的物理硬盘是没有影响的。</p>
<p>这只是在虚拟机中是这样，要是到了真实的电脑上就要小心了。如果要装两套系统就别选是，除非你已经想清楚了，现有的系统已经打定主意不要了。</p>
<h4 id="请问如何新建一个盘符 -？"><a href="# 请问如何新建一个盘符 -？" class="headerlink" title="请问如何新建一个盘符 ？"></a>请问如何新建一个盘符 ？</h4><p>右键我的电脑，管理，磁盘管理器，<br>此时会看到分区，c： d：等等，<br>若硬盘有剩余空间在 磁盘 0 右边 右键 自由空间 格式化分区就行了。<br>若没有剩余空间，要创建未分配的空间，需要压缩硬盘（右键，压缩卷）。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>三連擊（洛谷 P1008）</title>
    <url>/2019/03/27/%E4%B8%89%E9%80%A3%E6%93%8A%EF%BC%88%E6%B4%9B%E8%B0%B7P1008%EF%BC%89/</url>
    <content><![CDATA[<h4 id="題目描述"><a href="# 題目描述" class="headerlink" title="題目描述"></a>題目描述 </h4><pre><code> 將 1，2,...,9 共 9 個數分成三組，分別組成三個三位數，且使這三個三位數構成 1：2：3 的比例，試求出所有滿足條件的三個三位數。 
</code></pre><h4 id="輸入輸出格式"><a href="# 輸入輸出格式" class="headerlink" title="輸入輸出格式"></a>輸入輸出格式 </h4><pre><code> 輸入格式：沒有輸入。
輸出格式：若干行，每行 3 個數位。 按照每行第一個數位升序排列。
</code></pre><h4 id="我的解法："><a href="# 我的解法：" class="headerlink" title="我的解法："></a>我的解法：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 將 i 分別乘以 2 和 3，若這兩個三位數都滿足：(1) 自身沒有重複的數字 (2) 與 i 沒有重複的數字 (3) 不包含 0 這個數字 ，則輸出</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">123</span>; i&lt;=<span class="number">329</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		set&lt;<span class="keyword">int</span>&gt; test1, test2, test3;</span><br><span class="line">		set&lt;<span class="keyword">int</span>&gt; a &#123;i/<span class="number">100</span>, i/<span class="number">10</span>%<span class="number">10</span>, i%<span class="number">10</span>&#125;;</span><br><span class="line">		<span class="keyword">int</span> double_i = i*<span class="number">2</span>, triple_i = i*<span class="number">3</span>;</span><br><span class="line">		set&lt;<span class="keyword">int</span>&gt; b &#123;double_i/<span class="number">100</span>, double_i/<span class="number">10</span>%<span class="number">10</span>, double_i%<span class="number">10</span>&#125;;</span><br><span class="line">		set&lt;<span class="keyword">int</span>&gt; c &#123;triple_i/<span class="number">100</span>, triple_i/<span class="number">10</span>%<span class="number">10</span>, triple_i%<span class="number">10</span>&#125;;</span><br><span class="line">		<span class="built_in">set_intersection</span> (a.<span class="built_in">begin</span> (), a.<span class="built_in">end</span> (), b.<span class="built_in">begin</span> (), b.<span class="built_in">end</span> (), <span class="built_in">inserter</span> (test1, test1.<span class="built_in">begin</span> ()));</span><br><span class="line">		<span class="built_in">set_intersection</span> (a.<span class="built_in">begin</span> (), a.<span class="built_in">end</span> (), c.<span class="built_in">begin</span> (), c.<span class="built_in">end</span> (), <span class="built_in">inserter</span> (test2, test2.<span class="built_in">begin</span> ()));</span><br><span class="line">		<span class="built_in">set_intersection</span> (c.<span class="built_in">begin</span> (), c.<span class="built_in">end</span> (), b.<span class="built_in">begin</span> (), b.<span class="built_in">end</span> (), <span class="built_in">inserter</span> (test3, test3.<span class="built_in">begin</span> ()));</span><br><span class="line">		<span class="keyword">if</span> (test1.<span class="built_in">empty</span> () &amp;&amp; test2.<span class="built_in">empty</span> () &amp;&amp; test3.<span class="built_in">empty</span> () &amp;&amp; a.<span class="built_in">count</span> (<span class="number">0</span>)==<span class="number">0</span> &amp;&amp; b.<span class="built_in">count</span> (<span class="number">0</span>)==<span class="number">0</span> &amp;&amp; c.<span class="built_in">count</span> (<span class="number">0</span>)==<span class="number">0</span> &amp;&amp; a.<span class="built_in">size</span> ()==<span class="number">3</span> &amp;&amp; b.<span class="built_in">size</span> ()==<span class="number">3</span> &amp;&amp; c.<span class="built_in">size</span> ()==<span class="number">3</span>)</span><br><span class="line">			cout &lt;&lt; i &lt;&lt; <span class="string">&quot;&quot;</span> &lt;&lt; double_i &lt;&lt;<span class="string">&quot; &quot;</span> &lt;&lt; triple_i &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h4 id="別的解法"><a href="# 別的解法" class="headerlink" title="別的解法"></a>別的解法</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> i,j,v;<span class="keyword">bool</span> a [<span class="number">10</span>];<span class="comment">//a [i] 表示第 i 个数已经用过了</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">192</span>;i&lt;=<span class="number">327</span>;i++)<span class="comment">// 第一个数最小 192，最大 327。其实不知道的情况下简单来说是从 123-329 的但是算出来是最值就稍微改了下下</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span> (a,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span> (a));v=<span class="number">0</span>;<span class="comment">// 清零</span></span><br><span class="line">        a [i%<span class="number">10</span>]=a [i/<span class="number">10</span>%<span class="number">10</span>]=a [i/<span class="number">100</span>]=a [i*<span class="number">2</span>%<span class="number">10</span>]=a [i*<span class="number">2</span>/<span class="number">10</span>%<span class="number">10</span>]=a [i*<span class="number">2</span>/<span class="number">100</span>]=a [i*<span class="number">3</span>%<span class="number">10</span>]=a [i*<span class="number">3</span>/<span class="number">10</span>%<span class="number">10</span>]=a [i*<span class="number">3</span>/<span class="number">100</span>]=<span class="number">1</span>;<span class="comment">// 统计数字，赋值所有数组 1；</span></span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">1</span>;j&lt;=<span class="number">9</span>;j++) v+=a [j];<span class="comment">//v 表示 1-9 这些数字是否全部齐了，如果有相同的数，就会缺某个数组导致得数 &lt; 9；</span></span><br><span class="line">        <span class="keyword">if</span> (v==<span class="number">9</span>) <span class="built_in">printf</span> (<span class="string">&quot;% d % d % d\n&quot;</span>,i,i*<span class="number">2</span>,i*<span class="number">3</span>);<span class="comment">// 如果齐了就输出</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 以上代码来自洛谷题解作者：Kelin</span></span><br></pre></td></tr></table></figure>
<h4 id="用到的知識點"><a href="# 用到的知識點" class="headerlink" title="用到的知識點"></a>用到的知識點</h4><p>memset：作用是在一段記憶體塊中填充某個給定的值，它是對較大的結構體或陣列進行清零操作的一種最快方法，清空后換為自己給定的值，可以是符號。</p>
]]></content>
      <categories>
        <category>C++刷題</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>OJ</tag>
        <tag>set</tag>
        <tag>洛谷刷題</tag>
      </tags>
  </entry>
  <entry>
    <title>參考：架設網站的第一步</title>
    <url>/2021/03/27/%E5%8F%83%E8%80%83%EF%BC%9A%E6%9E%B6%E8%A8%AD%E7%B6%B2%E7%AB%99%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AD%A5/</url>
    <content><![CDATA[<p>從零開始：使用 npm 套件 <br><a href="https://medium.com/html-test/%">https://medium.com/html-test/%</a> E5% BE%9E% E9%9B% B6% E9%96%8B% E5% A7%8B-% E4% BD% BF% E7%94% A8npm% E5% A5%97% E4% BB% B6-317beefdf182<br> 介紹 npm 的概念與使用，可以與使用 hexo 的經驗和架構結合參考</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>在 hexo 文章中插入图片</title>
    <url>/2021/03/25/%E5%9C%A8hexo%E6%96%87%E7%AB%A0%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<h3 id="绝对路径"><a href="# 绝对路径" class="headerlink" title="绝对路径"></a>绝对路径 </h3><p> 当 Hexo 项目中只用到少量图片时，可以将图片统一放在 source/img 文件夹中<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![](&#x2F;images&#x2F;image.jpg)</span><br></pre></td></tr></table></figure></p>
<h3 id="相对路径"><a href="# 相对路径" class="headerlink" title="相对路径"></a>相对路径 </h3><p> 将_config.yml 文件中的配置项 post_asset_folder 设为 true 后，<br>执行命令 $ hexo new post_name，在 source/posts 中会生成文章 post_name.md 和同名文件夹 post_name。<br>将图片资源放在 post_name 中，文章就可以使用相对路径引用图片资源了。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![](image.jpg)</span><br></pre></td></tr></table></figure></p>
<h3 id="如果希望图片在文章和首页中同时显示，可以使用标签插件语法"><a href="# 如果希望图片在文章和首页中同时显示，可以使用标签插件语法" class="headerlink" title="如果希望图片在文章和首页中同时显示，可以使用标签插件语法"></a>如果希望图片在文章和首页中同时显示，可以使用标签插件语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在 hexo blog 中發表一篇文章</title>
    <url>/2019/03/22/%E5%A6%82%E4%BD%95%E5%9C%A8hexo-blog%E4%B8%AD%E7%99%BC%E8%A1%A8%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<h4 id="新建一篇文章"><a href="# 新建一篇文章" class="headerlink" title="新建一篇文章"></a>新建一篇文章</h4><p>(1) 在 hexo blog 目錄下，進入 cmd，輸入以下命令：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new &quot; 文章名稱 &quot;</span><br></pre></td></tr></table></figure></p>
<p>(2) 在 blog 目錄下的 /source/_posts/ 資料夾下，可以看到生成的 blog 文章（文章名稱.md）<br>(3) 在.md 檔案中編輯自己的文章即可 <br> 注意：Hexo 發表的文章是 Markdown 格式的檔案</p>
<h3 id="Hexo- 使用的 -Markdown- 語法及 -NEXT- 的 -Tags"><a href="#Hexo- 使用的 -Markdown- 語法及 -NEXT- 的 -Tags" class="headerlink" title="Hexo 使用的 Markdown 語法及 NEXT 的 Tags"></a>Hexo 使用的 Markdown 語法及 NEXT 的 Tags</h3><p><a href="https://blog.akizukineko.tw/hexo-new-NEXT-tags/">https://blog.akizukineko.tw/hexo-new-NEXT-tags/</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>發表文章</tag>
      </tags>
  </entry>
  <entry>
    <title>如何是实现 hexo 文章中文和英文之间自动空格</title>
    <url>/2021/03/27/%E5%A6%82%E4%BD%95%E6%98%AF%E5%AE%9E%E7%8E%B0hexo%E6%96%87%E7%AB%A0%E4%B8%AD%E6%96%87%E5%92%8C%E8%8B%B1%E6%96%87%E4%B9%8B%E9%97%B4%E8%87%AA%E5%8A%A8%E7%A9%BA%E6%A0%BC/</url>
    <content><![CDATA[<p>安装插件 <br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-filter-auto-spacing --save</span><br></pre></td></tr></table></figure><br> 并在_config.yml 文件中设置 auto_spacing，设置 enable: false</p>
<p>另外一个插件 hexo-pangu-spacing 是有 BUG 的，比如你引用文章的时候的文章的网址里面有中文和英文，这个时候它也会把它给隔开。<br>所以就用 hexo-filter-auto-spacing 吧。</p>
]]></content>
  </entry>
  <entry>
    <title>怎么取消文章目录中对标题的自动编号</title>
    <url>/2021/03/25/%E6%80%8E%E4%B9%88%E5%8F%96%E6%B6%88%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95%E4%B8%AD%E5%AF%B9%E6%A0%87%E9%A2%98%E7%9A%84%E8%87%AA%E5%8A%A8%E7%BC%96%E5%8F%B7/</url>
    <content><![CDATA[<p> 修改主题配置文件_config.yml 那里的 number 为 false</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
  </entry>
  <entry>
    <title>撰写文章基本操作</title>
    <url>/2021/03/28/%E6%92%B0%E5%86%99%E6%96%87%E7%AB%A0%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h4 id="加入代码"><a href="# 加入代码" class="headerlink" title="加入代码"></a> 加入代码 </h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;figure class&#x3D;&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class&#x3D;&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class&#x3D;&quot;line&quot;&gt;1&lt;&#x2F;span&gt;&lt;br&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;td&gt;&lt;td class&#x3D;&quot;code&quot;&gt;&lt;pre&gt;&lt;span class&#x3D;&quot;line&quot;&gt;...&lt;&#x2F;span&gt;&lt;br&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;table&gt;&lt;&#x2F;figure&gt;</span><br></pre></td></tr></table></figure>
<h4 id="加入链结"><a href="# 加入链结" class="headerlink" title="加入链结"></a> 加入链结 </h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[链接名称](链接地址)</span><br></pre></td></tr></table></figure>
<p><a href="https://www.google.com.tw/">google</a></p>
<h4 id="加入引用"><a href="# 加入引用" class="headerlink" title="加入引用"></a> 加入引用 </h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; 引用 1</span><br></pre></td></tr></table></figure>
<blockquote>
<p> 引用 1</p>
</blockquote>
<h4 id="改变文字颜色和大小"><a href="# 改变文字颜色和大小" class="headerlink" title="改变文字颜色和大小"></a> 改变文字颜色和大小 </h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;font color&#x3D;&quot;Crimson&quot; size&#x3D;&quot;2&quot;&gt; 颜色 &lt;&#x2F;font&gt;</span><br><span class="line">&lt;code&gt;&lt;font color&#x3D;&quot;Crimson&quot; size&#x3D;&quot;3&quot;&gt; 大小 &lt;&#x2F;font&gt;&lt;&#x2F;code&gt;</span><br></pre></td></tr></table></figure>
<p><font color="Crimson" size="2"> 颜色 </font><br><code><font color="Crimson" size="3"> 大小 </font></code></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
  </entry>
  <entry>
    <title>数据结构 -- (2) 树</title>
    <url>/2021/03/23/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91/</url>
    <content><![CDATA[<p><a href="https://wangxchun.github.io/2019/03/20/% E6%95% B0% E6%8D% AE% E7% BB%93% E6%9E%84-% E7% BA% BF% E6%80% A7% E8% A1% A8/">数据结构 — (1) 线性表 </a><br><a href="https://wangxchun.github.io/2021/03/23/% E6%95% B0% E6%8D% AE% E7% BB%93% E6%9E%84-% E6% A0%91/"> 数据结构 — (2) 树</a></p>
<h3 id="一、基本概念"><a href="# 一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念 </h3><h4 id="1- 树的定义：递归定义"><a href="#1- 树的定义：递归定义" class="headerlink" title="1. 树的定义：递归定义"></a>1. 树的定义：递归定义</h4><h4 id="2- 基本术语"><a href="#2- 基本术语" class="headerlink" title="2. 基本术语"></a>2. 基本术语</h4><p> 父节点，子节点，兄弟节点 <br> 根节点，叶节点 <br> 层 (深度)，高度 (树的高度 = 根节点的高度)<br>有序树 (兄弟节点之间是有顺序的)，无序树 <br> 路径 (树的边是单向的)，路径长度 (一条路径边的个数)，带权路径 <br> 节点的度 (子节点的数量)，树的度 (最大的度)</p>
<h4 id="3- 树的性质"><a href="#3- 树的性质" class="headerlink" title="3. 树的性质"></a>3. 树的性质 </h4><h5 id="1-n-e-1- 树中的节点数等于所有结点的度数加 -1"><a href="#1-n-e-1- 树中的节点数等于所有结点的度数加 -1" class="headerlink" title="(1) $n=e+1$ 树中的节点数等于所有结点的度数加 1"></a>(1) $n=e+1$ 树中的节点数等于所有结点的度数加 1</h5><p> 边数 $d$，度数 $e$，$d=e$<br>可以用归纳法证明</p>
<h5 id="2- 度为 -m- 的树中，第 -i- 层上至多有 -m-i-1- 个节点 -i-geq-1"><a href="#2- 度为 -m- 的树中，第 -i- 层上至多有 -m-i-1- 个节点 -i-geq-1" class="headerlink" title="(2) 度为 $m$ 的树中，第 $i$ 层上至多有 $m {^i-1}$ 个节点 ($i \geq 1$)"></a>(2) 度为 $m$ 的树中，第 $i$ 层上至多有 $m {^i-1}$ 个节点 ($i \geq 1$)</h5><h5 id="3- 高度为 -h- 的 -m- 叉树中至多有 -m-h-1-over-m-1- 个节点"><a href="#3- 高度为 -h- 的 -m- 叉树中至多有 -m-h-1-over-m-1- 个节点" class="headerlink" title="(3) 高度为 $h$ 的 $m$ 叉树中至多有 $(m^h-1) \over (m-1)$ 个节点"></a>(3) 高度为 $h$ 的 $m$ 叉树中至多有 $(m^h-1) \over (m-1)$ 个节点</h5><p>$ 由性质（2）可得：n \leq 1+m+m^2+…+m^{h-1}$<br>$n \leq {(m^h-1) \over (m-1)}$</p>
<h5 id="4- 具有 -n- 个节点的 -m- 叉树的最小高度为 -lceil-log-m-n-m-1-1-rceil"><a href="#4- 具有 -n- 个节点的 -m- 叉树的最小高度为 -lceil-log-m-n-m-1-1-rceil" class="headerlink" title="(4) 具有 $n$ 个节点的 $m$ 叉树的最小高度为 $\lceil \log_m {(n (m-1)+1)} \rceil$"></a>(4) 具有 $n$ 个节点的 $m$ 叉树的最小高度为 $\lceil \log_m {(n (m-1)+1)} \rceil$</h5><p>$ 由性质（3）可得：h \geq \log_m {n (m-1)+1}$</p>
<h5 id="5- 叶节点个数"><a href="#5- 叶节点个数" class="headerlink" title="(5) 叶节点个数"></a>(5) 叶节点个数</h5><p>$n=k_0+k_1+…+k_m -(1)$<br>$n=\sum_{i=0}^n d_i +1$<br>$\quad =\sum_{i=0}^m i \cdot k_i$<br>$\quad =k_1+2k_2+…+mk_m+1 -(2)$<br>$ 由式 (1) 和式 (2) 可得 $<br>$k_0=k_2+k_3+…+(m-1) k_m+1$</p>
<h3 id="二、二叉树"><a href="# 二、二叉树" class="headerlink" title="二、二叉树"></a>二、二叉树 </h3><h4 id="1- 与 - 度为 -2- 的有序树 - 不同"><a href="#1- 与 - 度为 -2- 的有序树 - 不同" class="headerlink" title="1. 与 {度为 2 的有序树} 不同"></a>1. 与 {度为 2 的有序树} 不同</h4><p> 只有一个根节点不属于 {度为 2 的有序树}</p>
<h4 id="2- 特殊二叉树种类"><a href="#2- 特殊二叉树种类" class="headerlink" title="2. 特殊二叉树种类"></a>2. 特殊二叉树种类 </h4><p> 满二叉树，完全二叉树</p>
<h4 id="3- 性质"><a href="#3- 性质" class="headerlink" title="3. 性质"></a>3. 性质</h4><p>$n=k_0+k_1+k_2$<br>$k_0=k_2+1$<br>$ 两式相减得：k_0-n=1-k_0-k_1$<br>$2k_0=n+1-k_1$<br>$ 当 k_1=0，n 为奇数，k_0={(n+1) \over 2}$<br>$ 当 k_1=0，n 为偶数，k_0={n \over 2}$<br>$ 结论：在完成二叉树或满二叉树中，k_0=\lceil {n \over 2} \rceil$</p>
<h4 id="4- 存储结构"><a href="#4- 存储结构" class="headerlink" title="4. 存储结构"></a>4. 存储结构 </h4><h5 id="1- 顺序存储"><a href="#1- 顺序存储" class="headerlink" title="(1) 顺序存储"></a>(1) 顺序存储</h5><p> 按照完全二叉树的顺序，父节点和子节点之间有简单的关系 <br> 但是可能会造成空间浪费</p>
<h5 id="2- 链式存储"><a href="#2- 链式存储" class="headerlink" title="(2) 链式存储"></a>(2) 链式存储</h5><figure class="highlight plain"><figcaption><span>C++</span></figcaption><table><tr><td class="code"><pre><span class="line">typedef struct BiTNode</span><br><span class="line">&#123;</span><br><span class="line">	ElemType data;</span><br><span class="line">	struct BiTNode *ichild, *rchild;</span><br><span class="line">&#125; BiTNode, *BiTree;</span><br></pre></td></tr></table></figure>
<h4 id="5- 二叉树的遍历"><a href="#5- 二叉树的遍历" class="headerlink" title="5. 二叉树的遍历"></a>5. 二叉树的遍历</h4><h5 id="1- 遍历有先序 -NLR-、中序 -LNR-、后序 -LRN- 三种遍历算法，其中 -“序”- 指的是根节点在何时被访问"><a href="#1- 遍历有先序 -NLR-、中序 -LNR-、后序 -LRN- 三种遍历算法，其中 -“序”- 指的是根节点在何时被访问" class="headerlink" title="(1) 遍历有先序 (NLR)、中序 (LNR)、后序 (LRN) 三种遍历算法，其中 “序” 指的是根节点在何时被访问"></a>(1) 遍历有先序 (NLR)、中序 (LNR)、后序 (LRN) 三种遍历算法，其中 “序” 指的是根节点在何时被访问</h5><figure class="highlight plain"><figcaption><span>C++</span></figcaption><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 先序遍历</span><br><span class="line">void PreOrder (BiTree T)</span><br><span class="line">&#123;</span><br><span class="line">	if (T!&#x3D;NULL)</span><br><span class="line">	&#123;</span><br><span class="line">		visit (T);            &#x2F;&#x2F; 访问根节点</span><br><span class="line">		PreOrder (T-&gt;ichild); &#x2F;&#x2F; 递归遍历左子树</span><br><span class="line">		PreOrder (T-&gt;echild); &#x2F;&#x2F; 递归遍历右子树</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="2- 非递归算法"><a href="#2- 非递归算法" class="headerlink" title="(2) 非递归算法"></a>(2) 非递归算法</h5><figure class="highlight plain"><figcaption><span>C++</span></figcaption><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 中序遍历的非递归算法</span><br><span class="line">void InOrder2 (BiTree T)</span><br><span class="line">&#123;</span><br><span class="line">	InitStack (S); BiTree p &#x3D; T;</span><br><span class="line">	while (p || !IsEmpty (S))</span><br><span class="line">	&#123;</span><br><span class="line">		if (p)</span><br><span class="line">		&#123;</span><br><span class="line">			Push (S,p);</span><br><span class="line">			p &#x3D; p-&gt;lchild;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		else</span><br><span class="line">		&#123;</span><br><span class="line">			Pop (S,p); visit (p);</span><br><span class="line">			p &#x3D; p-&gt;rchild;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 入栈序列：先序</span><br><span class="line">&#x2F;&#x2F; 出栈序列：中序</span><br></pre></td></tr></table></figure>
<h5 id="3- 层次遍历"><a href="#3- 层次遍历" class="headerlink" title="(3) 层次遍历"></a>(3) 层次遍历 </h5><p> 利用队列：<br>将根节点入队 <br> 若队列不为空：队头元素出队，访问队头元素若有子节点，子节点入队</p>
<h4 id="4- 由遍历序列构造二叉树"><a href="#4- 由遍历序列构造二叉树" class="headerlink" title="(4) 由遍历序列构造二叉树"></a>(4) 由遍历序列构造二叉树 </h4><h5 id="a- 先序 - 中序"><a href="#a- 先序 - 中序" class="headerlink" title="(a) 先序 + 中序"></a>(a) 先序 + 中序</h5><p> 中序遍历最左端元素第一个访问，排序树的插入会用到这个性质 <br> 先序序列第一个元素是根节点</p>
<h5 id="b- 后序 - 中序"><a href="#b- 后序 - 中序" class="headerlink" title="(b) 后序 + 中序"></a>(b) 后序 + 中序</h5><h5 id="c- 层次 - 中序"><a href="#c- 层次 - 中序" class="headerlink" title="(c) 层次 + 中序"></a>(c) 层次 + 中序</h5>]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
  </entry>
  <entry>
    <title>机器学习算法 --（1）回归</title>
    <url>/2021/03/28/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95--%EF%BC%881%EF%BC%89%E5%9B%9E%E5%BD%92/</url>
    <content><![CDATA[<h3 id="前言"><a href="# 前言" class="headerlink" title="前言"></a>前言 </h3><h4 id="1- 数据挖掘和机器学习的关系"><a href="#1- 数据挖掘和机器学习的关系" class="headerlink" title="1. 数据挖掘和机器学习的关系"></a>1. 数据挖掘和机器学习的关系</h4><h4 id="2- 训练数据 -vs- 验证数据 -vs- 测试数据"><a href="#2- 训练数据 -vs- 验证数据 -vs- 测试数据" class="headerlink" title="2. 训练数据 vs 验证数据 vs 测试数据"></a>2. 训练数据 vs 验证数据 vs 测试数据</h4><h4 id="3- 监督学习 -vs- 无监督学习 -vs- 半监督学习"><a href="#3- 监督学习 -vs- 无监督学习 -vs- 半监督学习" class="headerlink" title="3. 监督学习 vs 无监督学习 vs 半监督学习"></a>3. 监督学习 vs 无监督学习 vs 半监督学习</h4><h4 id="4- 回归 -vs- 分类 -vs- 聚类"><a href="#4- 回归 -vs- 分类 -vs- 聚类" class="headerlink" title="4. 回归 vs 分类 vs 聚类"></a>4. 回归 vs 分类 vs 聚类</h4><h3 id="一、一元线性回归概念"><a href="# 一、一元线性回归概念" class="headerlink" title="一、一元线性回归概念"></a> 一、一元线性回归概念 </h3><p> 回归：高尔顿提出 <br> 回归分析：建立方程模拟两个或多个变量之间如何关联 <br> 一个线性回归：包含一个自变量和一个应变量，用一条直线来模拟 <br> 一元线性回归的模型：$h_\theta (x) = \theta_0 + \theta_1x$<br>$\theta_0$ 是截距，$\theta_1$ 是斜率</p>
<h3 id="二、代价函数"><a href="# 二、代价函数" class="headerlink" title="二、代价函数"></a>二、代价函数 </h3><p>$J (\theta_0,\theta_1) = {1 \over 2m} \sum_{i=0}^m (h_\theta (x_i) - y_i)^2$<br><img src="/2021/03/28/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95--%EF%BC%881%EF%BC%89%E5%9B%9E%E5%BD%92/photo1.jpg" alt><br> 自变量是 $\theta_0$ 和 $\theta_1$，应变量是代价函数 $h_\theta (x)$，<br>本来是一个三维的函数图像，Z 轴是但是这里用等高线表示。<br>Q：如何寻找使得代价函数最小的 $\theta_0$ 和 $\theta_1$，后面会讲解。</p>
<h3 id="三、相关系数和决定系数"><a href="# 三、相关系数和决定系数" class="headerlink" title="三、相关系数和决定系数"></a>三、相关系数和决定系数 </h3><h4 id="相关系数：衡量线性相关性的强弱"><a href="# 相关系数：衡量线性相关性的强弱" class="headerlink" title="相关系数：衡量线性相关性的强弱"></a> 相关系数：衡量线性相关性的强弱</h4><p>$r_{xy} = {{\sum {(X_i - \bar X)(Y_i - \bar Y)}} \over {\sqrt {\sum {(X_i - \bar X)^2 (Y_i - \bar Y)^2}}} }$  </p>
<h4 id="决定系数"><a href="# 决定系数" class="headerlink" title="决定系数"></a>决定系数 </h4><p> 总平方和（SST）：$\sum_{i=0}^n (y_i - \bar y)^2$<br>残差平方和（SSE）：$\sum_{i=0}^n (y_i - \hat y)^2$<br>回归平方和（SSR）：$\sum_{i=0}^n (\hat y - \bar y)^2$<br>它们三者的关系是：$SST = SSE + SSR$<br>决定系数：$R^2 = {SSR \over SST} = 1 - {SSE \over SST}$</p>
<h3 id="四、梯度下降法"><a href="# 四、梯度下降法" class="headerlink" title="四、梯度下降法"></a>四、梯度下降法 </h3><h4 id="概念"><a href="# 概念" class="headerlink" title="概念"></a> 概念 </h4><p> 缺点：初始值的选取会影响到最后的结果，只能找到局部最优解<br>(凸函数的局部最值就是全局最值)<br>repeat until convergence<br>{<br>    $\qquad\qquad\theta_j := \theta_j - \alpha {\partial \over \partial\theta_j} J (\theta_0,\theta_1)$ $\quad (for\quad j = 0 \quad and \quad j = 1)$<br>}</p>
<p>同步更新：<br>$temp0 := \theta_0 - \alpha {\partial \over \partial\theta_0} J (\theta_0,\theta_1)$<br>$temp1 := \theta_1 - \alpha {\partial \over \partial\theta_1} J (\theta_0,\theta_1)$<br>$\theta_0 := temp0$<br>$\theta_0 := temp1$</p>
<p>学习率 $\alpha$ 不能太大也不能太小，<br>太大可能会导致在收敛值附近不断震荡，一直无法收敛；<br>太小会导致收敛速度过慢</p>
<h4 id="用梯度下降法来求解线性回归"><a href="# 用梯度下降法来求解线性回归" class="headerlink" title="用梯度下降法来求解线性回归"></a>用梯度下降法来求解线性回归</h4><p>$h_\theta (x) = \theta_0 + \theta_1x -(1)$<br>$J (\theta_0,\theta_1) = {1 \over 2m} \sum_{i=0}^m (h_\theta (x_i) - y_i)^2 -(2)$<br>$ 将 (1) 式代入 (2) 式 $<br>${\partial \over \partial\theta_0} J (\theta_0,\theta_1) = {1 \over m}\sum_{i=0}^m (h_\theta (x_i) - y_i)$ </p>
<h3 id="五、sklearn- 实现一元线性回归"><a href="# 五、sklearn- 实现一元线性回归" class="headerlink" title="五、sklearn 实现一元线性回归"></a>五、sklearn 实现一元线性回归</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x_data = data [:,<span class="number">0</span>,np.newaxis]</span><br><span class="line">y_data = data [:,<span class="number">1</span>,np.newaxis]</span><br><span class="line"><span class="comment"># 创建并拟合模型</span></span><br><span class="line">model = LinearRegression ()</span><br><span class="line">model.fit (x_data, y_data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画图</span></span><br><span class="line">plt.plot (x_data, y_data, <span class="string">&#x27;b.&#x27;</span>)</span><br><span class="line">plt.plot (x_data, model.predict (x_data), <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">plt.show ()</span><br></pre></td></tr></table></figure>
<h3 id="六、多元线性回归"><a href="# 六、多元线性回归" class="headerlink" title="六、多元线性回归"></a>六、多元线性回归</h3><h4 id="Hypothesis"><a href="#Hypothesis" class="headerlink" title="Hypothesis:"></a>Hypothesis:</h4><p>$h_\theta (x) = \theta^Tx = \theta_0x_1 + \theta_2x_2 + … + \theta_nx_n$</p>
<h4 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters:"></a>Parameters:</h4><p>theta_0,theta_1,…,theta_n</p>
<h4 id="Cost-Function"><a href="#Cost-Function" class="headerlink" title="Cost Function"></a>Cost Function</h4><p>$J (\theta_0,\theta_1,…,\theta_n) = {1 \over 2m} \sum_{i=0}^m (h_\theta (x_i) - y_i)^2 -(2)$</p>
<h4 id="Gradient-descent"><a href="#Gradient-descent" class="headerlink" title="Gradient descent"></a>Gradient descent</h4><p>repeat until convergence<br>{<br>    $\qquad\qquad\theta_j := \theta_j - \alpha {\partial \over \partial\theta_j} J (\theta_0,…,\theta_n)$<br>    $\quad\qquad (for\quad j = 0,1,…,n)$<br>}</p>
<h3 id="七、多项式回归"><a href="# 七、多项式回归" class="headerlink" title="七、多项式回归"></a>七、多项式回归</h3>]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>一元线性回归</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构 -- (1) 线性表</title>
    <url>/2019/03/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%BA%BF%E6%80%A7%E8%A1%A8/</url>
    <content><![CDATA[<p><a href="https://wangxchun.github.io/2019/03/20/% E6%95% B0% E6%8D% AE% E7% BB%93% E6%9E%84-% E7% BA% BF% E6%80% A7% E8% A1% A8/">数据结构 — (1) 线性表 </a><br><a href="https://wangxchun.github.io/2021/03/23/% E6%95% B0% E6%8D% AE% E7% BB%93% E6%9E%84-% E6% A0%91/"> 数据结构 — (2) 树</a></p>
<p>存储结构：顺序，链接，索引，哈希</p>
<h3 id="一、顺序表"><a href="# 一、顺序表" class="headerlink" title="一、顺序表"></a>一、顺序表 </h3><p> 线性表的寻顺序存储又称为顺序表</p>
<h4 id="1- 随机存储"><a href="#1- 随机存储" class="headerlink" title="1. 随机存储"></a>1. 随机存储 </h4><p> 相同数据类型，所以可以用公式 LOC (A) + (i-1) xsize (ElemType)</p>
<h4 id="2- 类型描述"><a href="#2- 类型描述" class="headerlink" title="2. 类型描述"></a>2. 类型描述</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> InitSize 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	ElemType *data;</span><br><span class="line">	<span class="keyword">int</span> MaxSize, length;</span><br><span class="line">&#125; SeqList;</span><br><span class="line"></span><br><span class="line">SeqList L;</span><br><span class="line">L.data = <span class="keyword">new</span> ElemType [InitSize];</span><br></pre></td></tr></table></figure>
<h4 id="3- 操作与实现"><a href="#3- 操作与实现" class="headerlink" title="3. 操作与实现"></a>3. 操作与实现 </h4><p> 删除，插入，按值查找</p>
<h4 id="4- 例题"><a href="#4- 例题" class="headerlink" title="4. 例题"></a>4. 例题 </h4><p> 若长度为 n 的非空线性表釆用顺序存储结构，在表的第 i 个位置插入一个数据元素，i 的合法值应该是（ ）<br>A. 1&lt;=i&lt;=n     B. 1&lt;=i&lt;=n+l     C. 0&lt;=i&lt;=n-1     D. 0&lt;=i&lt;=n<br>答案：B 表元素序号从 1 开始，而在第 n+1 个位置插入相当于在表尾追加</p>
<p>求两个升序序列 A 和 B 的合并序列 C：<br>分别用游标 i 和 j 指向序列 A 和 B 的序列头，<br>依次比较 A [i] 和 B [j]，比较小的就放入序列 C</p>
<p>方法 1：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">search_median</span> <span class="params">(<span class="keyword">int</span> A [], <span class="keyword">int</span> B [], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i=<span class="number">0</span>, j=<span class="number">0</span>, cnt=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cnt++;</span><br><span class="line">		<span class="keyword">if</span> (cnt == n)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> A [i]&lt;B [j]?A [i]:B [j];</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (A [i] &lt; B [j]) i++;</span><br><span class="line">		<span class="keyword">else</span> j++;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>方法 2：分治<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></p>
<h3 id="二、单链表"><a href="# 二、单链表" class="headerlink" title="二、单链表"></a>二、单链表 </h3><h4 id="1- 实现"><a href="#1- 实现" class="headerlink" title="1. 实现"></a>1. 实现</h4><p> 线性表的链式存储又称为单链表<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	ElemType data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125; LNode, *LinkList;</span><br><span class="line"><span class="comment">// 指向节点的指针就是链表</span></span><br></pre></td></tr></table></figure></p>
<h4 id="2- 操作"><a href="#2- 操作" class="headerlink" title="2. 操作"></a>2. 操作 </h4><h5 id="1- 建立表"><a href="#1- 建立表" class="headerlink" title="(1) 建立表"></a>(1) 建立表</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">(a) 采用头插法建立单链表（插入 S）</span><br><span class="line">s-&gt;next = L-&gt;next;</span><br><span class="line">L-&gt;next = s;</span><br><span class="line">(b) 采用头插法建立单链表（插入 S）</span><br><span class="line"> 需要有一个尾指针 r</span><br><span class="line">r-&gt;next = s;</span><br><span class="line">r = s;</span><br></pre></td></tr></table></figure>
<h5 id="2- 按序号查找节点值（遍历 - 计数器）"><a href="#2- 按序号查找节点值（遍历 - 计数器）" class="headerlink" title="(2) 按序号查找节点值（遍历 + 计数器）"></a>(2) 按序号查找节点值（遍历 + 计数器）</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>, LNode* p = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">for</span> (p = L-&gt;next; p != <span class="literal">NULL</span>; p = p-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line">	cnt++;</span><br><span class="line">	<span class="keyword">if</span> (cnt == i)</span><br><span class="line">		<span class="keyword">return</span> p;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h5 id="3- 按值查找表节点"><a href="#3- 按值查找表节点" class="headerlink" title="(3) 按值查找表节点"></a>(3) 按值查找表节点</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">LNode* p = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">for</span> (p=L-&gt;next; p!=<span class="literal">NULL</span>; p=p-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (p-&gt;data == e)</span><br><span class="line">		<span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>
<h5 id="4- 插入节点"><a href="#4- 插入节点" class="headerlink" title="(4) 插入节点"></a>(4) 插入节点 </h5><p> 先检查插入位置的合法性，找到待插入位置的前驱节点 p，再在其后插入新节点（i 前插）<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">s-&gt;next = p-&gt;next;</span><br><span class="line">p-&gt;next = s;</span><br><span class="line"><span class="comment">//p-&gt;next 一定是在最后一步修改</span></span><br><span class="line">i 前插 = (i<span class="number">-1</span>) 后插 = i 后插，交换 i 和 i+<span class="number">1</span> 的 data</span><br><span class="line">(在有了指向 i 节点的指针，且是单链表的情况下，可以用这个技巧降低时间复杂度)</span><br></pre></td></tr></table></figure></p>
<h5 id="5- 删除节点"><a href="#5- 删除节点" class="headerlink" title="(5) 删除节点"></a>(5) 删除节点 </h5><p> 先检查删除位置 q 的合法性，找到待删除位置的前驱节点<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">p-&gt;next = q-&gt;next;</span><br><span class="line"><span class="built_in">free</span> (q);<span class="comment">// 没有释放会导致内存泄漏</span></span><br></pre></td></tr></table></figure></p>
<h5 id="6- 求表长（遍历 - 计数器）"><a href="#6- 求表长（遍历 - 计数器）" class="headerlink" title="(6) 求表长（遍历 + 计数器）"></a>(6) 求表长（遍历 + 计数器）</h5><p>int cnt=0, LNode* p;<br>for (p=L-&gt;next; p!=NULL; p=p-&gt;next)<br>{<br>    cnt++;<br>}<br>return cnt;</p>
<h3 id="三、双链表"><a href="# 三、双链表" class="headerlink" title="三、双链表"></a>三、双链表</h3><p>ex：单链表的插入算法，要先找到欲插入位置的前驱，就要花费 O (n) 的时间</p>
<h4 id="1- 实现 -1"><a href="#1- 实现 -1" class="headerlink" title="1. 实现"></a>1. 实现</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	ElemType data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">DNode</span> *<span class="title">prior</span>, *<span class="title">next</span>;</span></span><br><span class="line">&#125; DNode, *DLinklist;</span><br></pre></td></tr></table></figure>
<h4 id="2- 操作 -1"><a href="#2- 操作 -1" class="headerlink" title="2. 操作"></a>2. 操作</h4><h5 id="1- 插入节点"><a href="#1- 插入节点" class="headerlink" title="(1) 插入节点"></a>(1) 插入节点</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">s-&gt;next = p-&gt;next;</span><br><span class="line">p-&gt;next-&gt;prior = s;</span><br><span class="line">s-&gt;prior = p;</span><br><span class="line">p-&gt;next = s;</span><br></pre></td></tr></table></figure>
<h6 id="2- 删除节点"><a href="#2- 删除节点" class="headerlink" title="(2) 删除节点"></a>(2) 删除节点 </h6><p> 删除双链表中节点 <em> p 和后继节点 </em> q<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">p-&gt;next = q-&gt;next;</span><br><span class="line">q-&gt;next-&gt;prior = p;</span><br><span class="line"><span class="built_in">free</span> (q);</span><br></pre></td></tr></table></figure></p>
<h3 id="四、循环链表（分为循环单链表和循环双链表）"><a href="# 四、循环链表（分为循环单链表和循环双链表）" class="headerlink" title="四、循环链表（分为循环单链表和循环双链表）"></a>四、循环链表（分为循环单链表和循环双链表）</h3><h4 id="1- 循环单链表"><a href="#1- 循环单链表" class="headerlink" title="1. 循环单链表"></a>1. 循环单链表 </h4><p>L 是头指针，r 是尾指针<br>r-&gt;next = L-&gt;next;<br> 判空条件：L-&gt;next == L;</p>
<h4 id="2- 循环双链表"><a href="#2- 循环双链表" class="headerlink" title="2. 循环双链表"></a>2. 循环双链表 </h4><p> 判空条件：L-&gt;next==L &amp;&amp; L-&gt;prior==L;</p>
<h3 id="五、静态链表"><a href="# 五、静态链表" class="headerlink" title="五、静态链表"></a>五、静态链表 </h3><p> 移动 -&gt; 使用链表 <br> 查找 -&gt; 使用顺序表 <br> 移动又查找 -&gt; 使用静态链表 <br> 既有前向操作又有后向操作 -&gt; 选择双向链表</p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
  </entry>
  <entry>
    <title>机器学习算法 --（2）神经网络</title>
    <url>/2021/03/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95--%EF%BC%882%EF%BC%89%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<h3 id="一、深度学习"><a href="# 一、深度学习" class="headerlink" title="一、深度学习"></a>一、深度学习 </h3><h4 id="深度学习三次热潮"><a href="# 深度学习三次热潮" class="headerlink" title="深度学习三次热潮"></a> 深度学习三次热潮</h4><p>1950 年代：图灵提出图灵测试<br>1980 年代：李开复语音识别，BP 算法<br>2006 年至今：李飞飞 ImageNet，AlphoGo 战胜人类棋手</p>
<h4 id="深度学习爆发三要素"><a href="# 深度学习爆发三要素" class="headerlink" title="深度学习爆发三要素"></a>深度学习爆发三要素 </h4><p> 数据、算法、算力</p>
<h4 id="机器学习三巨头"><a href="# 机器学习三巨头" class="headerlink" title="机器学习三巨头"></a>机器学习三巨头 </h4><p>Hinton：BP 算法<br>Lecun：卷积神经网络<br>Bengio：预训练和自动编码器<br> 吴恩达：创建 Coursera 和 Google Brain</p>
<p><img src="/2021/03/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95--%EF%BC%882%EF%BC%89%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/photo1.jpg" alt></p>
<h3 id="二、单层感知机"><a href="# 二、单层感知机" class="headerlink" title="二、单层感知机"></a>二、单层感知机 </h3><h4 id="介绍"><a href="# 介绍" class="headerlink" title="介绍"></a> 介绍 </h4><p><img src="/2021/03/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95--%EF%BC%882%EF%BC%89%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/photo2.jpg" alt><br>$\delta w_i = \eta (t-y) x_i$<br> 输入节点：<br>输出节点：<br>权向量：<br>偏置因子：b（也可以看成是 x_0=1）<br>激活函数：$$sign () =<br>\begin {cases}<br>1,  &amp; \text {x \ge 0} \\<br>-1, &amp; \text {x &lt; 0}<br>\end {cases}</p>
<p>$$</p>
<h4 id="例子"><a href="# 例子" class="headerlink" title="例子"></a>例子 </h4><h3 id="三、"><a href="# 三、" class="headerlink" title="三、"></a> 三、</h3>]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title>算法</title>
    <url>/2021/03/25/%E7%AE%97%E6%B3%953/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
  </entry>
  <entry>
    <title>slam 小車：(一) 前期準備 --1. 機器人架構設計流程</title>
    <url>/2019/03/20/%E6%BF%80%E5%85%89slam%E5%B0%8F%E8%BB%8A1/</url>
    <content><![CDATA[<p><a href="https://wangxchun.github.io/2019/03/20/% E6% BF%80% E5%85%89slam% E5% B0%8F% E8% BB%8A1/">(一) 前期準備 —1. 機器人架構設計流程</a><br><a href="https://wangxchun.github.io/2019/03/21/% E6% BF%80% E5%85%89slam% E5% B0%8F% E8% BB%8A2/">(一) 前期準備 —2.Linux 目錄結構與常用指令</a></p>
<h3 id="一、了解機器人架構"><a href="# 一、了解機器人架構" class="headerlink" title="一、了解機器人架構"></a>一、了解機器人架構 </h3><p> 機器人包含四大部分：機械結構、驅動裝置、感測裝置、控制與算法。<br>機器人的研發涉及機械工程、電機工程、資訊工程、醫學工程等領域，次技術領域包括能量學、驅動技術、感知技術和決策技術等。</p>
<h3 id="二、機器人概念設計（選擇機器人平台）"><a href="# 二、機器人概念設計（選擇機器人平台）" class="headerlink" title="二、機器人概念設計（選擇機器人平台）"></a>二、機器人概念設計（選擇機器人平台）</h3><h4 id="1- 定義機器人的功能："><a href="#1- 定義機器人的功能：" class="headerlink" title="1. 定義機器人的功能："></a>1. 定義機器人的功能：</h4><h4 id="2- 決定機器人的載具和移動方式："><a href="#2- 決定機器人的載具和移動方式：" class="headerlink" title="2. 決定機器人的載具和移動方式："></a>2. 決定機器人的載具和移動方式：</h4><p>機械手臂、雙腳、四肢、八腳蜘蛛、輪車等。</p>
<h4 id="3- 確認機器人的控制方式："><a href="#3- 確認機器人的控制方式：" class="headerlink" title="3. 確認機器人的控制方式："></a>3. 確認機器人的控制方式：</h4><h5 id="1- 有線控制（電線、網路線）"><a href="#1- 有線控制（電線、網路線）" class="headerlink" title="(1) 有線控制（電線、網路線）"></a>(1) 有線控制（電線、網路線）</h5><h5 id="2- 無線控制（紅外線、藍芽、WIFI、GPRS、無線射頻）"><a href="#2- 無線控制（紅外線、藍芽、WIFI、GPRS、無線射頻）" class="headerlink" title="(2) 無線控制（紅外線、藍芽、WIFI、GPRS、無線射頻）"></a>(2) 無線控制（紅外線、藍芽、WIFI、GPRS、無線射頻）</h5><h5 id="3- 自主控制"><a href="#3- 自主控制" class="headerlink" title="(3) 自主控制"></a>(3) 自主控制 </h5><h3 id="三、零件選用"><a href="# 三、零件選用" class="headerlink" title="三、零件選用"></a> 三、零件選用 </h3><h4 id="1- 動力源與驅動器"><a href="#1- 動力源與驅動器" class="headerlink" title="1. 動力源與驅動器"></a>1. 動力源與驅動器</h4><p> 考量因素：功率和比能量，還有位置控制、雙向運動、可靠度、力量控制。</p>
<h5 id="1- 液壓驅動：多用於特大功率的機器人系統"><a href="#1- 液壓驅動：多用於特大功率的機器人系統" class="headerlink" title="(1) 液壓驅動：多用於特大功率的機器人系統"></a>(1) 液壓驅動：多用於特大功率的機器人系統 </h5><h5 id="2- 氣壓驅動：功率較小，而且速度不易控制，所以多用於精度不高的點位控制系統"><a href="#2- 氣壓驅動：功率較小，而且速度不易控制，所以多用於精度不高的點位控制系統" class="headerlink" title="(2) 氣壓驅動：功率較小，而且速度不易控制，所以多用於精度不高的點位控制系統"></a>(2) 氣壓驅動：功率較小，而且速度不易控制，所以多用於精度不高的點位控制系統</h5><h5 id="3- 電器驅動：轉動輪子或齒輪（馬達轉子、減速齒輪、力感測器和負載）"><a href="#3- 電器驅動：轉動輪子或齒輪（馬達轉子、減速齒輪、力感測器和負載）" class="headerlink" title="(3) 電器驅動：轉動輪子或齒輪（馬達轉子、減速齒輪、力感測器和負載）"></a>(3) 電器驅動：轉動輪子或齒輪（馬達轉子、減速齒輪、力感測器和負載）</h5><p> 線性驅動器：將電動馬達的旋轉運動轉換為線性運動</p>
<h5 id="4- 壓電驅動：電陶瓷材料可以達到較大的比功率、SMA- 形狀記憶合金具有輕量化結構"><a href="#4- 壓電驅動：電陶瓷材料可以達到較大的比功率、SMA- 形狀記憶合金具有輕量化結構" class="headerlink" title="(4) 壓電驅動：電陶瓷材料可以達到較大的比功率、SMA 形狀記憶合金具有輕量化結構"></a>(4) 壓電驅動：電陶瓷材料可以達到較大的比功率、SMA 形狀記憶合金具有輕量化結構 </h5><p> 可以產生較大的比能量（希望達到與人類肌肉相同的比功率和比能量），適合小尺度。</p>
<h4 id="2- 感測器"><a href="#2- 感測器" class="headerlink" title="2. 感測器"></a>2. 感測器 </h4><p> 能量轉換裝置，能將被測量的物理量（例如加速的）轉換成電能或其他需要形式的信號。</p>
<h5 id="1- 機身本身的測量"><a href="#1- 機身本身的測量" class="headerlink" title="(1) 機身本身的測量"></a>(1) 機身本身的測量 </h5><p> 方向（指南針、陀螺儀、傾斜儀）<br>位置（輪子編碼器、信標、GPS）<br>運動（慣性測量單元：量測線性和角位移、速度和加速度）</p>
<h5 id="2- 環境的測量"><a href="#2- 環境的測量" class="headerlink" title="(2) 環境的測量"></a>(2) 環境的測量 </h5><p> 距離（聲納、雷射測距儀、超聲波測距儀紅、外線感測器）<br>化學成分（光譜儀）<br>視覺（相機）</p>
<h4 id="3- 控制器（機器人的大腦）"><a href="#3- 控制器（機器人的大腦）" class="headerlink" title="3. 控制器（機器人的大腦）"></a>3. 控制器（機器人的大腦）</h4><h5 id="1- 微控制器（MCU- 單片機）：Arduino，STM32，BasicATOM，BasicX，POB- 技術，-Pololu，Parallax- 等等"><a href="#1- 微控制器（MCU- 單片機）：Arduino，STM32，BasicATOM，BasicX，POB- 技術，-Pololu，Parallax- 等等" class="headerlink" title="(1) 微控制器（MCU 單片機）：Arduino，STM32，BasicATOM，BasicX，POB 技術， Pololu，Parallax 等等"></a>(1) 微控制器（MCU 單片機）：Arduino，STM32，BasicATOM，BasicX，POB 技術， Pololu，Parallax 等等 </h5><pre><code> 因為 Arduino 開發了簡單的函數，還有許多應用庫，這樣就不用直接去操作暫存器了，適合沒有單片機基礎的
</code></pre><p>製作小車使用的是微控制器，選擇時需要考慮以下三點：<br>(a) 哪個微控制器在我應用領域上是最常用的？<br>(b) 它有機器人需要的所有特殊功能嗎？<br>有些功能所有微控制器都有支持（例如：數位輸入和輸出，執行簡單的數學運算，比較值和做決定），而有些功能則需要特定的硬體做搭配才能完成（例如 ADC，PWM 和通訊協議的支援）。另外，還需要考慮記憶體和速度的要求，還有接腳數。<br>(c) 是否找得到所選定微控制器可以搭配的相關零件？</p>
<h5 id="2- 微處理器（MPU）：树莓派，S3C2440，CubieBoard-CC80，Jetson-TK1- 等等"><a href="#2- 微處理器（MPU）：树莓派，S3C2440，CubieBoard-CC80，Jetson-TK1- 等等" class="headerlink" title="(2) 微處理器（MPU）：树莓派，S3C2440，CubieBoard CC80，Jetson TK1 等等"></a>(2) 微處理器（MPU）：树莓派，S3C2440，CubieBoard CC80，Jetson TK1 等等 </h5><p> 嵌入式微處理器 MPU 和一般的電腦 CPU 還有區別，嵌入式微處理器大多工作在特定設計的系統中，其中主流的体系有 ARM、MIPS、PowerPC、X86 和 SH 等，与全球 PC 市场不同的是，没有一种嵌入式微处理器可以主导市场。</p>
<h5 id="3- 工業用控制板：機器人大廠多自行研發控制器，例如：Fanuc、ABB、Yaskawa、KUKA、EPSON、DENSO、TOSHIBA"><a href="#3- 工業用控制板：機器人大廠多自行研發控制器，例如：Fanuc、ABB、Yaskawa、KUKA、EPSON、DENSO、TOSHIBA" class="headerlink" title="(3) 工業用控制板：機器人大廠多自行研發控制器，例如：Fanuc、ABB、Yaskawa、KUKA、EPSON、DENSO、TOSHIBA"></a>(3) 工業用控制板：機器人大廠多自行研發控制器，例如：Fanuc、ABB、Yaskawa、KUKA、EPSON、DENSO、TOSHIBA</h5><pre><code>補充：選擇馬達控制器（控制器 - 馬達控制器 - 馬達）
雖然微控制器決定馬達的速度和方向，它卻不能直接驅動它們，因為它的功率（電流和電壓）輸出非常有限。
另一方面，馬達控制器可以提供所需電壓的電流，但不能決定馬達應該轉動多快。
</code></pre><h3 id="四、機器人組裝"><a href="# 四、機器人組裝" class="headerlink" title="四、機器人組裝"></a>四、機器人組裝 </h3><p> 瓦楞紙、木材、金屬薄板、3D 列印等等。</p>
<h3 id="五、控制與算法"><a href="# 五、控制與算法" class="headerlink" title="五、控制與算法"></a>五、控制與算法 </h3><p> 這是我們激光 slam 小車專題的重點，後面文章會詳細闡述。</p>
]]></content>
      <categories>
        <category>激光slam小車</category>
      </categories>
      <tags>
        <tag>slam</tag>
        <tag>智能車</tag>
        <tag>機器人</tag>
        <tag>設計流程</tag>
      </tags>
  </entry>
  <entry>
    <title>slam 小車：(一) 前期準備 --2.Linux 目錄結構與常用指令</title>
    <url>/2019/03/21/%E6%BF%80%E5%85%89slam%E5%B0%8F%E8%BB%8A2/</url>
    <content><![CDATA[<p><a href="https://wangxchun.github.io/2019/03/20/% E6% BF%80% E5%85%89slam% E5% B0%8F% E8% BB%8A1/">(一) 前期準備 —1. 機器人架構設計流程</a><br><a href="https://wangxchun.github.io/2019/03/21/% E6% BF%80% E5%85%89slam% E5% B0%8F% E8% BB%8A2/">(一) 前期準備 —2.Linux 目錄結構與常用指令</a></p>
<h3 id="一、Linux- 目錄結構"><a href="# 一、Linux- 目錄結構" class="headerlink" title="一、Linux 目錄結構"></a>一、Linux 目錄結構 </h3><h3 id="二、Linux- 常用指令"><a href="# 二、Linux- 常用指令" class="headerlink" title="二、Linux 常用指令"></a> 二、Linux 常用指令</h3><h4 id="1- 打开 -terminal"><a href="#1- 打开 -terminal" class="headerlink" title="1. 打开 terminal"></a>1. 打开 terminal</h4><p>(1) 右鍵 -&gt; 打開終端<br>(2) Ctrl+Alt+t 或者 Ctrl+Shift+t</p>
<h4 id="2- 常用快速鍵"><a href="#2- 常用快速鍵" class="headerlink" title="2. 常用快速鍵"></a>2. 常用快速鍵 </h4><p>(1) tab<br> 一次 tab：命令補齊 <br> 兩次 tab：提示內容 <br>(2) Ctrl+c<br>Ctrl+c 中斷，強行打斷進程<br>(3) Ctrl+d<br>Ctrl+d 退出，相當於 exit 和 quit<br> 比如用 python 命令進入 python 交互環境後，就可以用 Ctrl+d 退出 python 交互環境 <br>(4) Ctrl+Shift+c 和 Ctrl+Shift+v<br> 先用滑鼠選中需要複製的內容，然後用 Ctrl+Shift+c 進行複製，再用 Ctrl+Shift+v 進行貼上<br>(5) 圖形介面與純文字互動模式切換<br>Ctrl+Alt+F1-F6：純文字交互模式登入 tty1-tty6 終端機<br>Ctrl+Alt+F7：切回圖形介面</p>
<h3 id="3- 關機與重啟命令"><a href="#3- 關機與重啟命令" class="headerlink" title="3. 關機與重啟命令"></a>3. 關機與重啟命令</h3><p>(1) 關機<br>$ sudo poweroff<br>(2) 重新啟動<br>$ sudo reboot</p>
<h3 id="4- 終端命令列中一些常用符號瞭解"><a href="#4- 終端命令列中一些常用符號瞭解" class="headerlink" title="4. 終端命令列中一些常用符號瞭解"></a>4. 終端命令列中一些常用符號瞭解</h3><p>(1) 使用者家目錄：~<br>(2) 系統根目錄：/<br>(3) 一般使用者提示符：$<br>(4) root 使用者提示符：#</p>
<h3 id="5- 目錄與文件相關命令"><a href="#5- 目錄與文件相關命令" class="headerlink" title="5. 目錄與文件相關命令"></a>5. 目錄與文件相關命令</h3><p>(1) 顯示檔案與目錄清單<br>$ ls<br>(2) 切換目錄（ 2）<br>$ cd &lt; 目標目錄 &gt;<br>(3) 顯示目前所在工作目錄<br>$ pwd<br>(4) 建立檔案<br>$ touch &lt; 檔名 &gt;<br>(5) 複製檔案<br>$ cp &lt; 源檔案路徑 &gt; &lt; 目標檔案路徑 &gt;<br>(6) 移動檔案<br>$ mv &lt; 源檔案路徑 &gt; &lt; 目標檔案路徑 &gt;<br>(7) 刪除檔案<br>$ rm &lt; 檔名 &gt;<br>(8) 顯示檔案內容<br>$ cat &lt; 檔名 &gt;<br>(9) 建立資料夾<br>$ mkdir &lt; 資料夾名 &gt;<br>(10) 刪除資料夾<br>$ rmdir &lt; 資料夾名 &gt;</p>
<h3 id="6- 文件許可權"><a href="#6- 文件許可權" class="headerlink" title="6. 文件許可權"></a>6. 文件許可權</h3><p>(1) 修改檔案讀寫可執行權限，該權限由遮罩， 如 777 權限全開<br>$ sudo chmod 777 &lt; 檔名 &gt;<br>(2) 修改檔案擁有者<br>$ sudo chown &lt; 使用者名 &gt;：&lt; 組名 &gt; &lt; 檔名 &gt;</p>
<h3 id="7- 檔案查找"><a href="#7- 檔案查找" class="headerlink" title="7. 檔案查找"></a>7. 檔案查找</h3><p>(1) locate<br>$ sudo updatedb<br>$ locate &lt; 待查找檔名 &gt;<br>(2) find<br>$ find -name &lt; 待查找檔名 &gt;</p>
<h3 id="8- 網路相關命令"><a href="#8- 網路相關命令" class="headerlink" title="8. 網路相關命令"></a>8. 網路相關命令</h3><p>(1) 網路連線與否測試<br>$ ping &lt; 待測目標主機 IP 或域名 &gt;<br>(2) 本地 IP 位址檢視<br>$ ifconfig<br>(3) 遠端登入目標主機<br>$ ssh &lt; 目標主機使用者名 &gt;@&lt; 目標主機 IP 位址 &gt;</p>
<h3 id="9- 系統軟體安裝與軟體運行方法"><a href="#9- 系統軟體安裝與軟體運行方法" class="headerlink" title="9. 系統軟體安裝與軟體運行方法"></a>9. 系統軟體安裝與軟體運行方法</h3><p>(1) 系統預設的套件安裝方法 apt-get<br>$ sudo apt-get update<br>$ sudo apt-get install &lt; 軟體套件名稱 &gt;<br>(2) source 方法執行系統文稿，例如執行使用者預設配置文件.bashrc<br>$ source ~/.bashrc<br>(3) ./ 方法執行一般可執行檔<br>$ ./&lt; 可执行文件 &gt;</p>
<h3 id="10- 文字編輯器 -vim- 使用"><a href="#10- 文字編輯器 -vim- 使用" class="headerlink" title="10. 文字編輯器 vim 使用"></a>10. 文字編輯器 vim 使用 </h3><p>(1) vim 檢視檔案內容<br>$ vim &lt; 檔名 &gt;<br>(2) vim 進入編輯模式<br> 在 vim 查看檔案內容的介面中，按 i 鍵進入編輯模式，然後就可以編輯檔案的內容了 <br>(3) vim 退出編輯模式<br> 在 vim 編輯檔案內容的介面中，按 Esc 鍵退出編輯模式，然後就又回到查看檔案內容的介面了<br>(4) vim 編輯內容儲存<br>vim 在編輯完檔內容，退出到查看檔內容的介面後，可以輸入 “：w” 對編輯內容進行保存，也可以輸入 “：wq” 對編輯內容進行保存並退出 vim</p>
]]></content>
      <categories>
        <category>激光slam小車</category>
      </categories>
      <tags>
        <tag>slam</tag>
        <tag>智能車</tag>
        <tag>Linux</tag>
        <tag>命令列指令</tag>
      </tags>
  </entry>
  <entry>
    <title>設定 Github SSH 金鑰</title>
    <url>/2021/03/27/%E8%A8%AD%E5%AE%9A-Github-SSH-%E9%87%91%E9%91%B0/</url>
    <content><![CDATA[<p> 設定 Github SSH 金鑰 <br><a href="https://ithelp.ithome.com.tw/articles/10205988">https://ithelp.ithome.com.tw/articles/10205988</a></p>
<p>ssh-keygen 常用命令与参数 <br><a href="https://p3terx.com/archives/ssh-keygen-common-parameters.html">https://p3terx.com/archives/ssh-keygen-common-parameters.html</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
  </entry>
  <entry>
    <title>讓 Dev C++ 支持 C++11</title>
    <url>/2018/09/27/%E8%AE%93Dev-C-%E6%94%AF%E6%8C%81C-11/</url>
    <content><![CDATA[<p>在 DevC++ 中 <br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">set&lt;<span class="keyword">int</span>&gt; a &#123;i/<span class="number">100</span>, i/<span class="number">10</span>%<span class="number">10</span>, i%<span class="number">10</span>&#125;;</span><br></pre></td></tr></table></figure><br> 會出現如下錯誤<br><img src="/2018/09/27/%E8%AE%93Dev-C-%E6%94%AF%E6%8C%81C-11/wrong1.png" alt></p>
<h4 id="解決方法"><a href="# 解決方法" class="headerlink" title="解決方法"></a>解決方法</h4><p>(1) 先在 dev 的 [工具] 里找到 [編譯選項]<br>(2) 勾選 [編譯時加入以下命令] 欄位並填入 - std=c++11</p>
]]></content>
      <categories>
        <category>C++學習</category>
      </categories>
      <tags>
        <tag>Dev C++</tag>
        <tag>C++ 11</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络 lab1</title>
    <url>/2021/03/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9Clab1/</url>
    <content><![CDATA[<h3 id="Lab-1-Set-Up-Environment-and-Test-Basic-Softwares"><a href="#Lab-1-Set-Up-Environment-and-Test-Basic-Softwares" class="headerlink" title="Lab 1: Set Up Environment and Test Basic Softwares"></a>Lab 1: Set Up Environment and Test Basic Softwares</h3><p>准备工作：</p>
<h5 id="1- 安装 -Virtualbox"><a href="#1- 安装 -Virtualbox" class="headerlink" title="(1) 安装 Virtualbox"></a>(1) 安装 Virtualbox</h5><h5 id="2- 在 -Virtualbox- 中建立安装 -ubuntu- 作业系统的虚拟机"><a href="#2- 在 -Virtualbox- 中建立安装 -ubuntu- 作业系统的虚拟机" class="headerlink" title="(2) 在 Virtualbox 中建立安装 ubuntu 作业系统的虚拟机"></a>(2) 在 Virtualbox 中建立安装 ubuntu 作业系统的虚拟机 </h5><p> 在 Windows 下安裝 VirtualBox 及 Ubuntu 18.04：<br>(Ubuntu18.04 可以在官网下载，或是下载阿里镜像)<br><a href="https://hth322.pixnet.net/blog/post/183391361-%">https://hth322.pixnet.net/blog/post/183391361-%</a> E5% AE%89% E8% A3%9Dubuntu% E5%9C% A8oracle-vm-virtualbox% E7% B4% AE% E8% A8%98<br><a href="https://murphymind.blogspot.com/2020/01/windows-virtualbox-ubuntu-1804.html">https://murphymind.blogspot.com/2020/01/windows-virtualbox-ubuntu-1804.html</a></p>
<h5 id="3- 设置虚拟机网卡（net-hostonly）"><a href="#3- 设置虚拟机网卡（net-hostonly）" class="headerlink" title="(3) 设置虚拟机网卡（net + hostonly）"></a>(3) 设置虚拟机网卡（net + hostonly）</h5><p><img src="/2021/03/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9Clab1/photo4.png" alt></p>
<h5 id="4- 在 -linux- 上安装 -wireshark"><a href="#4- 在 -linux- 上安装 -wireshark" class="headerlink" title="(4) 在 linux 上安装 wireshark"></a>(4) 在 linux 上安装 wireshark</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ dpkg -l |grep wrieshark&#x2F;&#x2F; 查看系统是否有这个包</span><br><span class="line">&#x2F;&#x2F; 如果没有，在网络原配置好的情况下</span><br><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install wireshark &#x2F;&#x2F; 等待安装完成</span><br></pre></td></tr></table></figure>
<p>若出现 “Should non-superusers be able to capture packages?” ，选择 yes<br>若没有，则手动设置 <br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ dpkg-reconfigure wireshark-common</span><br></pre></td></tr></table></figure><br> 把当前用户加入到 wireshark 组当中:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo vim &#x2F;etc&#x2F;group</span><br></pre></td></tr></table></figure></p>
<h5 id="5- 运行 -wireshark，选择要检测的端口"><a href="#5- 运行 -wireshark，选择要检测的端口" class="headerlink" title="(5) 运行 wireshark，选择要检测的端口"></a>(5) 运行 wireshark，选择要检测的端口</h5><p><img src="/2021/03/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9Clab1/photo5.png" alt></p>
<h4 id="1-What-protocol-does-“ping”-and-“traceroute”-use-10-points"><a href="#1-What-protocol-does-“ping”-and-“traceroute”-use-10-points" class="headerlink" title="1. What protocol does “ping” and “traceroute” use? (10 points)"></a>1. What protocol does “ping” and “traceroute” use? (10 points)</h4><p>打开 wireshark 开始监测<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ping google.com&#x2F;&#x2F; 可以看到使用的协议是 ICMP</span><br><span class="line">$ traceroute google.com&#x2F;&#x2F; 可以看到使用的协议是 UDP</span><br></pre></td></tr></table></figure></p>
<h4 id="2-What-is-the-IP-address-of-www-sjtu-edu-cn-10-points"><a href="#2-What-is-the-IP-address-of-www-sjtu-edu-cn-10-points" class="headerlink" title="2. What is the IP address of www.sjtu.edu.cn? (10 points)"></a>2. What is the IP address of www.sjtu.edu.cn? (10 points)</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ping www.sjtu.edu.cn&#x2F;&#x2F; 可以看到 IP</span><br></pre></td></tr></table></figure>
<p><img src="/2021/03/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9Clab1/photo7.png" alt></p>
<h4 id="3-What-is-the-average-round-trip-time-RTT-from-your-VM-to-www-sjtu-edu-cn-and-mit-edu"><a href="#3-What-is-the-average-round-trip-time-RTT-from-your-VM-to-www-sjtu-edu-cn-and-mit-edu" class="headerlink" title="3. What is the average round trip time (RTT) from your VM to www.sjtu.edu.cn and mit.edu."></a>3. What is the average round trip time (RTT) from your VM to www.sjtu.edu.cn and mit.edu.</h4><p>Analyze the reason for the difference of their RTTs. (25 points)<br>(1) ping to send 10 packets and get the average RTT<br><img src="/2021/03/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9Clab1/photo8.png" alt><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ping www.sjtu.edu.cn -c 10 &#x2F;&#x2F; 可以看到 rtt</span><br></pre></td></tr></table></figure></p>
<h4 id="4-What-is-the-TCP-bandwidth-between-your-two-VMs-25-points"><a href="#4-What-is-the-TCP-bandwidth-between-your-two-VMs-25-points" class="headerlink" title="4. What is the TCP bandwidth between your two VMs? (25 points)"></a>4. What is the TCP bandwidth between your two VMs? (25 points)</h4><p>(1) 安裝 iPerf3<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install iperf3</span><br></pre></td></tr></table></figure><br>(2) 测试网络频宽 <br>Server 端:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ iperf3 -s</span><br></pre></td></tr></table></figure><br>Client 端<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ iperf3 -c SERVER_IP</span><br></pre></td></tr></table></figure><br>(3) connection timeout 问题解决<br><a href="https://www.mdeditor.tw/pl/2NjU/zh-tw">https://www.mdeditor.tw/pl/2NjU/zh-tw</a><br> 如何诊断：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 檢查 ipv4 forwarding 是否開啟 </span><br><span class="line">$ sysctl net.ipv4.ip_forward</span><br><span class="line">&#x2F;&#x2F;net.ipv4.ip_forward &#x3D; 0，意味著未開啟</span><br></pre></td></tr></table></figure><br> 如何修復：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;this will turn things back on a live server</span><br><span class="line">$ sysctl -w net.ipv4.ip_forward&#x3D;1</span><br><span class="line">&#x2F;&#x2F;on Centos this will make the setting apply after reboot</span><br><span class="line">$ echo net.ipv4.ip_forward&#x3D;1 &gt;&gt; &#x2F;etc&#x2F;sysconf.d&#x2F;10-ipv4-forwarding-on.conf</span><br><span class="line">&#x2F;&#x2F; 驗證並生效</span><br><span class="line">$ sysctl -p</span><br></pre></td></tr></table></figure></p>
<p>如何診斷：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 檢查 bridge netfilter 是否開啟 </span><br><span class="line">$ sysctl net.bridge.bridge-nf-call-iptables</span><br><span class="line">net.bridge.bridge-nf-call-iptables &#x3D; 0，表示未開啟</span><br></pre></td></tr></table></figure><br> 如何修復：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Note some distributions may have this compiled with kernel,</span><br><span class="line">check with cat &#x2F;lib&#x2F;modules&#x2F;$ (uname -r)&#x2F;modules.builtin | grep netfilter</span><br><span class="line">$ modprobe br_netfilter</span><br><span class="line">開啟這個 iptables 設定</span><br><span class="line">$ sysctl -w net.bridge.bridge-nf-call-iptables&#x3D;1</span><br><span class="line">$ echo net.bridge.bridge-nf-call-iptables&#x3D;1 &gt;&gt; &#x2F;etc&#x2F;sysconf.d&#x2F;10-bridge-nf-call-iptables.conf</span><br><span class="line">$ sysctl -p</span><br></pre></td></tr></table></figure></p>
<p><a href="https://gist.github.com/iamcryptoki/ed6925ce95f047673e7709f23e0b9939">https://gist.github.com/iamcryptoki/ed6925ce95f047673e7709f23e0b9939</a><br>Fix sysctl: cannot stat /proc/sys/net/bridge/bridge-nf-call-iptables.<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$  modprobe bridge</span><br><span class="line">$  echo &quot;net.bridge.bridge-nf-call-iptables &#x3D; 1&quot; &gt;&gt; &#x2F;etc&#x2F;sysctl.conf</span><br><span class="line">$  sysctl -p &#x2F;etc&#x2F;sysctl.conf</span><br><span class="line"></span><br><span class="line">sysctl: cannot stat &#x2F;proc&#x2F;sys&#x2F;net&#x2F;bridge&#x2F;bridge-nf-call-iptables: No such file or directory sysctl: cannot stat &#x2F;proc&#x2F;sys&#x2F;net&#x2F;bridge&#x2F;bridge-nf-call-ip6tables: No such file or directory</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; SOLUTION</span><br><span class="line">$  modprobe br_netfilter</span><br><span class="line">$  sysctl -p &#x2F;etc&#x2F;sysctl.conf</span><br></pre></td></tr></table></figure></p>
<h4 id="5-Select-a-VM-as-your-host-machine-and-another-VM-as-your-server-machine-then-use-ssh-on-your-host-to-connect-to-the-server-15-points"><a href="#5-Select-a-VM-as-your-host-machine-and-another-VM-as-your-server-machine-then-use-ssh-on-your-host-to-connect-to-the-server-15-points" class="headerlink" title="5. Select a VM as your host machine, and another VM as your server machine, then use ssh on your host to connect to the server. (15 points)"></a>5. Select a VM as your host machine, and another VM as your server machine, then use ssh on your host to connect to the server. (15 points)</h4><h5 id="1- 在 -UBuntu- 安装 -ssh"><a href="#1- 在 -UBuntu- 安装 -ssh" class="headerlink" title="(1) 在 UBuntu 安装 ssh"></a>(1) 在 UBuntu 安装 ssh</h5><p>(a) 开启 terminal<br>(b) 更新套件清单<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get update</span><br></pre></td></tr></table></figure><br>(c) 安装 OpenSSH Server<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install -y openssh-server</span><br></pre></td></tr></table></figure><br>(d) 确认 SSH 服务<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo service ssh status</span><br></pre></td></tr></table></figure><br>(e) 查询 Ubuntu 的 IP<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ifconfig &#x2F;&#x2F;server 的 IP</span><br></pre></td></tr></table></figure><br>(f) 在 host mechine 上，ssh 到 server<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh chris@192.158.xx.xxx</span><br></pre></td></tr></table></figure></p>
<h4 id="6-Use-scp-to-copy-a-file-from-your-host-to-the-server-15-points"><a href="#6-Use-scp-to-copy-a-file-from-your-host-to-the-server-15-points" class="headerlink" title="6. Use scp to copy a file from your host to the server. (15 points)"></a>6. Use scp to copy a file from your host to the server. (15 points)</h4><h5 id="1- 本地端 -Host- 需安装 -openssh-client- 套件"><a href="#1- 本地端 -Host- 需安装 -openssh-client- 套件" class="headerlink" title="(1) 本地端 Host 需安装 openssh-client 套件"></a>(1) 本地端 Host 需安装 openssh-client 套件</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install openssh-client</span><br></pre></td></tr></table></figure>
<h5 id="2- 远端 -Server- 需安装 -openssh-server- 套件"><a href="#2- 远端 -Server- 需安装 -openssh-server- 套件" class="headerlink" title="(2) 远端 Server 需安装 openssh-server 套件"></a>(2) 远端 Server 需安装 openssh-server 套件</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install openssh-server</span><br></pre></td></tr></table></figure>
<h5 id="3- 将文件从本机 -Host- 复制到远端主机 -Server"><a href="#3- 将文件从本机 -Host- 复制到远端主机 -Server" class="headerlink" title="(3) 将文件从本机 Host 复制到远端主机 Server"></a>(3) 将文件从本机 Host 复制到远端主机 Server</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo chmod 777 &#x2F;home&#x2F;test&#x2F;&#x2F; 改变权限</span><br><span class="line">$ scp a.txt chris@192.168.xx.xxx</span><br></pre></td></tr></table></figure>
<h3 id="问题解决"><a href="# 问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><h4 id="E- 无法获取 -dpkg- 前端锁 -var-lib-dpkg-lock-frontend-，是否有其他进程正占用它？"><a href="#E- 无法获取 -dpkg- 前端锁 -var-lib-dpkg-lock-frontend-，是否有其他进程正占用它？" class="headerlink" title="E: 无法获取 dpkg 前端锁 (/var/lib/dpkg/lock-frontend)，是否有其他进程正占用它？"></a>E: 无法获取 dpkg 前端锁 (/var/lib/dpkg/lock-frontend)，是否有其他进程正占用它？</h4><p>(1) 杀死进程<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ps -e|grep apt-get</span><br><span class="line">sudo kill [进程]</span><br></pre></td></tr></table></figure><br>(2) 重新启动</p>
<h3 id="知识补充"><a href="# 知识补充" class="headerlink" title="知识补充"></a>知识补充 </h3><h4 id="1- 本地接口列表包含一个 -Random-packet-generator，这是什么"><a href="#1- 本地接口列表包含一个 -Random-packet-generator，这是什么" class="headerlink" title="1. 本地接口列表包含一个 Random packet generator，这是什么"></a>1. 本地接口列表包含一个 Random packet generator，这是什么</h4><p> 这是 wireshark 提供的一个模拟；每次随机生成某种协议的 1000 个包；供研究学习使用。</p>
<h4 id="透过 -wireshark- 查看封包，可以了解到為什麼端到端加密很重要。"><a href="# 透过 -wireshark- 查看封包，可以了解到為什麼端到端加密很重要。" class="headerlink" title="透过 wireshark 查看封包，可以了解到為什麼端到端加密很重要。"></a>透过 wireshark 查看封包，可以了解到為什麼端到端加密很重要。</h4><p>假設你正在登入一個不使用 HTTPS 的網站。與你在同一網路上的任何人都可以嗅探封包，並在原始資料中看到使用者名稱和密碼。<br>這就是為什麼現在大多數聊天應用程式使用端到端加密，而大多數網站使用 https (而不是 http)</p>
<h4 id="2-Traceroute- 工作原理"><a href="#2-Traceroute- 工作原理" class="headerlink" title="2. Traceroute 工作原理"></a>2. Traceroute 工作原理</h4><p><img src="/2021/03/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9Clab1/photo6.png" alt><br>Traceroute 最简单的基本用法是：traceroute hostname<br>    Traceroute 程序的设计是利用 ICMP 及 IP header 的 TTL (Time To Live) 栏位 (field)。首先，traceroute 送出一个 TTL 是 1 的 IP datagram（其实，每次送出的为 3 个 40 字节的包括源地址，目的地址和包发出的时间标签）到目的地，当路径上的第一个路由器 (router) 收到这个 datagram 时，它将 TTL 减 1。此时，TTL 变为 0 了，所以路由器会将此 datagram 丢掉，并送回一个「ICMP time exceeded」消息（包括发 IP 包的源地址，IP 包的所有内容及路由器的 IP 地址），traceroute 收到这个消息后，便知道这个路由器存在于这个路径上，接着 traceroute 再送出另一个 TTL 是 2 的 datagram，发现第 2 个路由器…… traceroute 每次将送出的 datagram 的 TTL 加 1 来发现另一个路由器，这个重复的动作一直持续到某个 datagram 目的地。当 datagram 到达目的地后，该主机并不会送回 ICMP time exceed 消息，因为它已经是目的地了，那么 traceroute 如何得知目的地到达了呢？</p>
<p>Traceroute 在送出 UDP datagrams 到目的地时，它所选择送达的 port number 是一个一般应用程序都不会用的号码（30000 以上），所以当此 UDP datagram 到达目的地后该主机会送回一个「ICMP port unreachable」的消息，而当 traceroute 收到这个消息时，便知道目的地已经到达了。所以 traceroute 在 Server 也是没有所谓的 Daemon 程式。<br>Traceroute 提取发 ICMP TTL 到期消息设备的 IP 地址并作域名解析。每次，Traceroute 都打印出一系列数据，包括所经过的路由设备的域名及 IP 地址，三个包每次来回所花时间。其中 CDN (内容分发网络) 就是为了降低与用户路由的个数而设计的。</p>
<h4 id="3-Ping- 工作原理"><a href="#3-Ping- 工作原理" class="headerlink" title="3. Ping 工作原理"></a>3. Ping 工作原理 </h4><p> 運作原理：向目標主機傳出一個要求封包，並等待接收回應封包。程式會按時間和成功回應的次數估算封包遺失率（丟包率）和封包來回的時間（即 RTT）</p>
<h3 id="操作补充"><a href="# 操作补充" class="headerlink" title="操作补充"></a>操作补充</h3><h4 id="1- 查看主机 -ip- 地址方式："><a href="#1- 查看主机 -ip- 地址方式：" class="headerlink" title="1. 查看主机 ip 地址方式："></a>1. 查看主机 ip 地址方式：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ifconfig</span><br><span class="line">&#x2F;&#x2F;windows cmd 是使用 $ ipconfig</span><br></pre></td></tr></table></figure>
<h4 id="2-Linux- 从一般用户切换到 -root- 用户"><a href="#2-Linux- 从一般用户切换到 -root- 用户" class="headerlink" title="2.Linux 从一般用户切换到 root 用户"></a>2.Linux 从一般用户切换到 root 用户</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo su</span><br><span class="line">$ exit &#x2F;&#x2F; 从 root 切换回一般用户</span><br></pre></td></tr></table></figure>
<h4 id="3-vim- 常用指令"><a href="#3-vim- 常用指令" class="headerlink" title="3.vim 常用指令"></a>3.vim 常用指令</h4><p><img src="/2021/03/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9Clab1/photo9.png" alt><br><img src="/2021/03/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9Clab1/photo10.png" alt></p>
<h3 id="详细名词解释"><a href="# 详细名词解释" class="headerlink" title="详细名词解释"></a>详细名词解释</h3><p><a href="https://sls.weco.net/node/28883">https://sls.weco.net/node/28883</a></p>
<h3 id="讨论：安装 -VirtualBox-VMWare-or-Parallels- 哪个比较好？"><a href="# 讨论：安装 -VirtualBox-VMWare-or-Parallels- 哪个比较好？" class="headerlink" title="讨论：安装 VirtualBox, VMWare, or Parallels 哪个比较好？"></a>讨论：安装 VirtualBox, VMWare, or Parallels 哪个比较好？</h3>]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>C++ 復習 --2.C++ 入門之後</title>
    <url>/2018/10/14/C++%E5%85%A5%E9%96%80%E4%B9%8B%E5%BE%8C/</url>
    <content><![CDATA[<p><a href="https://wangxchun.github.io/2018/09/13/C++% E5%9F% BA% E7% A4%8E% E5%85% A5% E9%96%80/">C++ 復習 —1.C++ 基礎入門</a><br><a href="https://wangxchun.github.io/2018/10/14/C++% E5%85% A5% E9%96%80% E4% B9%8B% E5% BE%8C/">C++ 復習 —2.C++ 入門之後</a><br><a href="https://wangxchun.github.io/2019/03/14/C++% E9%80% B2% E9%9A%8E/">C++ 復習 —3.C++ 進階</a></p>
<h3 id="一、記憶體分區模型"><a href="# 一、記憶體分區模型" class="headerlink" title="一、記憶體分區模型"></a>一、記憶體分區模型</h3><p><img src="/2018/10/14/C++%E5%85%A5%E9%96%80%E4%B9%8B%E5%BE%8C/photo1.png" alt></p>
<h4 id="1- 程式運行前"><a href="#1- 程式運行前" class="headerlink" title="1. 程式運行前"></a>1. 程式運行前 </h4><p> 在程式編譯後，生成了 exe 可執行程式，未執行該程式前分爲三個區域<br>(1) 代碼區：共享和只讀的<br>(2) 全局區：全局變量、靜態變量、<br>(3) 常量區：常量、const 修飾的全局常量、字符串常量</p>
<h4 id="2- 程式運行後"><a href="#2- 程式運行後" class="headerlink" title="2. 程式運行後"></a>2. 程式運行後</h4><p>(1) 棧區 (stack)：由編譯器自動分配釋放，存放函數的參數值、局部變量等<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">func</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">return</span> &amp;a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> *p = <span class="built_in">func</span> ();</span><br><span class="line">	cout &lt;&lt; *p &lt;&lt; endl; <span class="comment">// 報錯</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><br><span id="more"></span><br>(2) 堆區 (heap)：堆區數據由管理員開闢和釋放（利用 new 和 delete）<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">func</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span>* a = <span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span> (<span class="number">10</span>);</span><br><span class="line">	<span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> *p = <span class="built_in">func</span> ();</span><br><span class="line">	cout &lt;&lt; *p &lt;&lt; endl; <span class="comment">// 正確</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></p>
<h4 id="3-new- 和 -delete- 操作符"><a href="#3-new- 和 -delete- 操作符" class="headerlink" title="3.new 和 delete 操作符"></a>3.new 和 delete 操作符</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> *p = <span class="keyword">new</span> <span class="keyword">int</span>;</span><br></pre></td></tr></table></figure>
<p>在這段程式中，new 運算子會配置 int 需要的空間，並傳回該空間的位址，可以使用指標 p 來儲存位址，這段程式只配置空間但不初始空間的值。想在配置完成後指定儲存值，可以如下:<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> *p = <span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span> (<span class="number">100</span>);</span><br></pre></td></tr></table></figure><br>這段程式在配置空間之後，會將空間中的儲存值設定為 100。<br>如果想配置連續個指定型態的空間，可以如下：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> *p = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">1000</span>];</span><br></pre></td></tr></table></figure><br>配置後的空間資料是未知的，[] 中指定的長度可以是來自於運算式，不必是編譯時期就得決定的值，這個值必須自行儲存下來，因為沒有任何方式，可以從 p 得知到底配置的長度是多少。因此上面的方式，會被用來克服陣列大小必須事先決定的問題，也就是可以用來動態地配置連續空間，並當成陣列來操作。<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot; 輸出長度：&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cin &gt;&gt; size;</span><br><span class="line">	<span class="keyword">int</span> *arr = <span class="keyword">new</span> <span class="keyword">int</span> [size](<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot; 指定元素：&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;arr [&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;] =&quot;</span>;</span><br><span class="line">		cin &gt;&gt; arr [i];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="二、引用"><a href="# 二、引用" class="headerlink" title="二、引用"></a>二、引用</h3><h4 id="1- 引用的基本使用"><a href="#1- 引用的基本使用" class="headerlink" title="1. 引用的基本使用"></a>1. 引用的基本使用</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> &amp;b = a;</span><br></pre></td></tr></table></figure>
<h4 id="2- 引用注意事項"><a href="#2- 引用注意事項" class="headerlink" title="2. 引用注意事項"></a>2. 引用注意事項 </h4><p> 引用必須初始化 <br> 引用在初始化後，不可以改變</p>
<h4 id="3- 引用做函數參數"><a href="#3- 引用做函數參數" class="headerlink" title="3. 引用做函數參數"></a>3. 引用做函數參數</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 地址傳遞</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mySwap01</span> <span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span>* b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> temp = *a;</span><br><span class="line">	*a = *b;</span><br><span class="line">	*b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用傳遞</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mySwap02</span> <span class="params">(<span class="keyword">int</span>&amp; a, <span class="keyword">int</span>&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> temp = a;</span><br><span class="line">	a = b;</span><br><span class="line">	b = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通過引用參數產生的效果和按地址傳遞是一樣的，引用的語法更清楚簡單。</p>
<h4 id="4- 引用做函數返回值"><a href="#4- 引用做函數返回值" class="headerlink" title="4. 引用做函數返回值"></a>4. 引用做函數返回值</h4><h5 id="1- 當函數返回引用類型時，沒有複製返回值，返回的是對象本身。"><a href="#1- 當函數返回引用類型時，沒有複製返回值，返回的是對象本身。" class="headerlink" title="(1) 當函數返回引用類型時，沒有複製返回值，返回的是對象本身。"></a>(1) 當函數返回引用類型時，沒有複製返回值，返回的是對象本身。</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 這裏參數用到常量引用，後面會講到</span></span><br><span class="line"><span class="function"><span class="keyword">const</span> string&amp; <span class="title">shorterString</span> <span class="params">(<span class="keyword">const</span> string&amp; s1, <span class="keyword">const</span> string&amp; s2)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> s1.size &lt; s2.size ? s1 : s2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="2- 在函數的參數中，包含引用或指針，需要被返回的參數"><a href="#2- 在函數的參數中，包含引用或指針，需要被返回的參數" class="headerlink" title="(2) 在函數的參數中，包含引用或指針，需要被返回的參數"></a>(2) 在函數的參數中，包含引用或指針，需要被返回的參數</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span>&amp; <span class="title">abc</span> <span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, <span class="keyword">int</span>&amp; result)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	result = a + b + c;</span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以改寫成：</span></span><br><span class="line"><span class="function"><span class="keyword">int</span>&amp; <span class="title">abc</span> <span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, <span class="keyword">int</span>* result)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	result = a + b + c;</span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="3- 不能返回局部對象的引用"><a href="#3- 不能返回局部對象的引用" class="headerlink" title="(3) 不能返回局部對象的引用"></a>(3) 不能返回局部對象的引用 </h5><p> 當函數執行完之後，將釋放分配給局部對象的存儲空間，此時，對局部對象的引用就會指向不確定的空間。</p>
<h5 id="4- 引用返回一個左值"><a href="#4- 引用返回一個左值" class="headerlink" title="(4) 引用返回一個左值"></a>(4) 引用返回一個左值 </h5><h5 id="5- 如果不希望返回的對象被修改，可以返回 -const- 引用"><a href="#5- 如果不希望返回的對象被修改，可以返回 -const- 引用" class="headerlink" title="(5) 如果不希望返回的對象被修改，可以返回 const 引用"></a>(5) 如果不希望返回的對象被修改，可以返回 const 引用</h5><h4 id="5- 引用的本質"><a href="#5- 引用的本質" class="headerlink" title="5. 引用的本質"></a>5. 引用的本質</h4><p> 引用在 C++ 内部實現是一個指針常量，指針常量本身不可改，這也説明了爲什麽引用不可更改<br>C++ 推薦引用，因爲語法方便，引用的本質是指針常量，但是所有的指針操作編譯器幫忙做了<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span> <span class="params">(<span class="keyword">int</span>&amp; ref)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ref = <span class="number">100</span>; <span class="comment">//ref 是引用，轉換成 *ref = 100; </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span>&amp; b = a; <span class="comment">// 自動轉換成 int* const b = &amp;a;</span></span><br><span class="line">	b = <span class="number">20</span>; <span class="comment">// 自動轉換成 *b = 20;</span></span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt;endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;b:&quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">func</span> (a); <span class="comment">// 在函數中轉換成 int* const ref = &amp;a;</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="6- 常量引用"><a href="#6- 常量引用" class="headerlink" title="6. 常量引用"></a>6. 常量引用 </h4><p> 函數中常用常量引用防止誤修改實參，例如：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">const</span> string&amp; <span class="title">shorterString</span> <span class="params">(<span class="keyword">const</span> string&amp; s1, <span class="keyword">const</span> string&amp; s2)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> s1.size &lt; s2.size ? s1 : s2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>常量引用的初始化<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>&amp; ref = <span class="number">10</span>; <span class="comment">// 引用本身需要一個合法空間，10 是沒有地址的，因此這列錯誤</span></span><br><span class="line"><span class="keyword">const</span></span><br></pre></td></tr></table></figure></p>
<h3 id="三、函數進階"><a href="# 三、函數進階" class="headerlink" title="三、函數進階"></a>三、函數進階 </h3><h3 id="四、類和對象"><a href="# 四、類和對象" class="headerlink" title="四、類和對象"></a> 四、類和對象</h3><p>C++ 面向對象的三大特性：封裝、繼承、多態</p>
<h4 id="1- 封裝"><a href="#1- 封裝" class="headerlink" title="1. 封裝"></a>1. 封裝</h4><h5 id="1- 封裝的意義"><a href="#1- 封裝的意義" class="headerlink" title="(1) 封裝的意義"></a>(1) 封裝的意義</h5><h5 id="2-struct- 和 -class- 的區別"><a href="#2-struct- 和 -class- 的區別" class="headerlink" title="(2) struct 和 class 的區別"></a>(2) struct 和 class 的區別</h5><p>struct 默認權限為公有<br>class 默認權限為私有</p>
<h5 id="3- 成員屬性設置為私有"><a href="#3- 成員屬性設置為私有" class="headerlink" title="(3) 成員屬性設置為私有"></a>(3) 成員屬性設置為私有 </h5><p> 將所有成員屬性設置為私有，可以自己控制讀寫權限 <br> 對於寫權限，可以檢測用戶輸入數據的有效性<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//point.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">setX</span> <span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line">		<span class="function"><span class="keyword">int</span> <span class="title">getX</span> <span class="params">()</span></span>;</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">setY</span> <span class="params">(<span class="keyword">int</span> y)</span></span>;</span><br><span class="line">		<span class="function"><span class="keyword">int</span> <span class="title">getY</span> <span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span>:</span><br><span class="line">		<span class="keyword">int</span> m_X;</span><br><span class="line">		<span class="keyword">int</span> m_Y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//point.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;point.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Point:<span class="built_in">setX</span> (<span class="keyword">int</span> x)</span><br><span class="line">&#123;</span><br><span class="line">	m_X = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Point:<span class="built_in">getX</span> ()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> m_X;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setY</span> <span class="params">(<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	m_X = y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getY</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> m_Y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<h4 id="2- 對象的初始化和清理"><a href="#2- 對象的初始化和清理" class="headerlink" title="2. 對象的初始化和清理"></a>2. 對象的初始化和清理 </h4><h5 id="1- 構造函數和析構函數"><a href="#1- 構造函數和析構函數" class="headerlink" title="(1) 構造函數和析構函數"></a>(1) 構造函數和析構函數</h5><p>(a) 如果數據成員包含指針，在析構函數中要 delete 掉<br>(b) 析構函數調用時機<br> 如果對象是動態變量，則當執行完定義該對象的程式區塊時，將調用該對象的析構函數；<br>如果對象是靜態變量 (外部、靜態、靜態外部、來自命名空間)，則在程式結束時調用對象的析構函數；<br>如果對象是用 new 創建的，則僅當顯式使用 delete 刪除對象時，其析構函數才會被調用<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Time *a = <span class="keyword">new</span> <span class="built_in">Time</span> ();</span><br><span class="line">...</span><br><span class="line"><span class="keyword">delete</span> a;</span><br></pre></td></tr></table></figure></p>
<h5 id="2- 構造函數的分類和調用"><a href="#2- 構造函數的分類和調用" class="headerlink" title="(2) 構造函數的分類和調用"></a>(2) 構造函數的分類和調用</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 調用無參構造函數</span></span><br><span class="line">Person p; </span><br><span class="line"><span class="comment">// 調用有參構造函數</span></span><br><span class="line"><span class="function">Person <span class="title">p1</span> <span class="params">(<span class="number">10</span>)</span></span>; <span class="comment">// 刮號法</span></span><br><span class="line"><span class="comment">// 顯式法</span></span><br><span class="line">Person p2 = <span class="built_in">Person</span> (<span class="number">10</span>);</span><br><span class="line">Person p3 = <span class="built_in">Person</span> (p2);</span><br><span class="line"><span class="comment">// 隱式轉換法</span></span><br><span class="line">Person p4 = <span class="number">10</span>;</span><br><span class="line">Person p5 = p4;</span><br></pre></td></tr></table></figure>
<h5 id="3- 複製構造函數調用時機"><a href="#3- 複製構造函數調用時機" class="headerlink" title="(3) 複製構造函數調用時機"></a>(3) 複製構造函數調用時機</h5><p>(a) 使用一個已經創建完畢的對象來初始化一個新對象<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">Person <span class="title">man</span> <span class="params">(<span class="number">100</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">newman1</span> <span class="params">(man)</span></span>; <span class="comment">// 調用複製構造函數</span></span><br><span class="line">Person newman2 = man; <span class="comment">// 調用複製構造函數</span></span><br><span class="line">Person newman3;</span><br><span class="line">newman3 = man1; <span class="comment">// 這是賦值，不是調用複製構造函數</span></span><br></pre></td></tr></table></figure><br>(b) 值傳遞的方式給函數參數傳值<br>(c) 以值方式返回局部對象<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">Time <span class="title">Time::max</span> <span class="params">(<span class="keyword">const</span> Time &amp;t1, <span class="keyword">const</span> Time &amp;t2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> t1;</span><br><span class="line">	<span class="comment">// 值方式返回，需要創建一份 t1 對象的副本 (調用複製構造函數)，效率比較低</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 因爲在參數中聲明 t1 為 const 類型的，所以返回值也必須聲明為 const</span></span><br><span class="line"><span class="function"><span class="keyword">const</span> Time&amp; <span class="title">Time::max</span> <span class="params">(<span class="keyword">const</span> Time &amp;t1, <span class="keyword">const</span> Time &amp;t2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> t1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h5 id="4- 構造函數調用規則"><a href="#4- 構造函數調用規則" class="headerlink" title="(4) 構造函數調用規則"></a>(4) 構造函數調用規則 </h5><p> 如果用戶定義有參構造函數，C++ 不再提供默認無參構造函數，但是會提供默認複製函數 <br> 如果用戶定義複製構造函數，C++ 不會再提供其他構造函數</p>
<h5 id="5- 淺複製和深複製"><a href="#5- 淺複製和深複製" class="headerlink" title="(5) 淺複製和深複製"></a>(5) 淺複製和深複製 </h5><p> 淺複製：簡單的賦值複製操作 <br> 深複製：在堆區重新申請空間，進行複製操作<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Person</span> (<span class="keyword">const</span> Person&amp; p)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 如果不利用深複製在堆區創建新空間，會導致淺複製帶來的重複釋放堆區的問題</span></span><br><span class="line">	<span class="comment">// 因爲如果單純的進行指針賦值，兩個不同對象的指針成員會指向同一個空間</span></span><br><span class="line">	age = p.age;</span><br><span class="line">	height = <span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span> (*p.height);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h5 id="6- 初始化列表"><a href="#6- 初始化列表" class="headerlink" title="(6) 初始化列表"></a>(6) 初始化列表</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Person</span> (<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c):<span class="built_in">m_A</span> (a), <span class="built_in">m_B</span> (b), <span class="built_in">m_C</span> (c) &#123;&#125;;</span><br></pre></td></tr></table></figure>
<h5 id="7- 類對象作爲類成員"><a href="#7- 類對象作爲類成員" class="headerlink" title="(7) 類對象作爲類成員"></a>(7) 類對象作爲類成員 </h5><p> 當類中成員是其他類對象時，我們稱該成員為對象成員 <br> 構造的順序是：先調用對象成員的構造，再調用本類構造；析構順序與構造相反</p>
<h5 id="8- 靜態成員"><a href="#8- 靜態成員" class="headerlink" title="(8) 靜態成員"></a>(8) 靜態成員 </h5><p> 非整型 / 枚舉型 const 的靜態屬性，都必須在實現檔案 (.cpp) 中進行初始化，且不能在成員函數中 <br> 整型 / 枚舉型 const 的靜態屬性，才可以且必須在聲明檔案 (.h) 中初始化 <br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Time.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> TIME_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TIME_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Time</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> hours;</span><br><span class="line">	<span class="keyword">int</span> minutes;</span><br><span class="line">	<span class="keyword">int</span> seconds;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> count;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Time</span> ();</span><br><span class="line">	<span class="built_in">Time</span> (<span class="keyword">int</span> h = <span class="number">0</span>, <span class="keyword">int</span> m = <span class="number">0</span>, <span class="keyword">int</span> s = <span class="number">0</span>);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Time.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Time.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span> <span class="comment">//abort () 函數</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> Time::count = <span class="number">0</span>;<span class="comment">// 初始化時不用加 static</span></span><br><span class="line"> </span><br><span class="line">Time::<span class="built_in">Time</span> ()</span><br><span class="line">&#123;</span><br><span class="line">	hours = minutes = seconds = <span class="number">0</span>;</span><br><span class="line">	count++;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">Time::<span class="built_in">Time</span> (<span class="keyword">int</span> h, <span class="keyword">int</span> m, <span class="keyword">int</span> s)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (h &lt; <span class="number">0</span> || h &gt; <span class="number">24</span> || m &gt; <span class="number">60</span> || m &lt; <span class="number">0</span> || s &gt; <span class="number">60</span> || s &lt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot; 初始化參數輸入有誤，程式終止！&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="built_in">abort</span> (); <span class="comment">// 終止程式執行，直接從調用的地方跳出</span></span><br><span class="line">	&#125;</span><br><span class="line">	hours = h;</span><br><span class="line">	minutes = m;</span><br><span class="line">	seconds = s;</span><br><span class="line">	count++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>(a) 靜態成員變量<br> 所有對象共享一份數據 <br> 在編譯階段分配記憶體 <br> 類内聲明，類外初始化 <br>(b) 靜態成員函數<br> 所有對象共享同一個函數 <br> 靜態成員函數只能訪問靜態成員變量（因爲調用靜態函數時，不會有 this 指針）</p>
<h4 id="3-C- 對象模型和 -this- 指針"><a href="#3-C- 對象模型和 -this- 指針" class="headerlink" title="3.C++ 對象模型和 this 指針"></a>3.C++ 對象模型和 this 指針 </h4><h5 id="1- 成員變量和成員函數分開存儲"><a href="#1- 成員變量和成員函數分開存儲" class="headerlink" title="(1) 成員變量和成員函數分開存儲"></a>(1) 成員變量和成員函數分開存儲</h5><p> 非靜態成員變量占對象空間；靜態成員變量不占對象空間 <br> 非靜態成員函數不占對象空間，所有對象共享一個函數實例；靜態成員函數不占對象空間</p>
<h5 id="2-this- 指針的概念"><a href="#2-this- 指針的概念" class="headerlink" title="(2) this 指針的概念"></a>(2) this 指針的概念 </h5><p> 所有同類型的對象共享一個函數實例，那如何區分是哪個對象調用該函數呢？<br>this 指針指向被調用的成員函數所屬的對象 <br>(a) 當形參和成員變量同名時，可以用 this 指針來區分，隱含在每一個非靜態成員函數内，不須定義，可以直接使用<br>(b) 在類的非靜態函數中返回對象本身，可以使用 return *this;<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"> 訪問對象就可以連續調用</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="built_in">Person</span> (<span class="keyword">int</span> age)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function">Person&amp; <span class="title">PersonAddPerson</span> <span class="params">(Person p)</span></span></span><br><span class="line"><span class="function">		</span>&#123;</span><br><span class="line">			<span class="keyword">this</span>-&gt;age = p.age;</span><br><span class="line">			<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Person <span class="title">p1</span> <span class="params">(<span class="number">20</span>)</span></span>;</span><br><span class="line">	<span class="function">Person <span class="title">p2</span> <span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">	p2.<span class="built_in">PersonAddPerson</span> (p1).<span class="built_in">PersonAddPerson</span> (p1).<span class="built_in">PersonAddPerson</span> (p1);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;p2.age =&quot;</span> &lt;&lt; p2.age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h5 id="3- 空指針訪問成員函數"><a href="#3- 空指針訪問成員函數" class="headerlink" title="(3) 空指針訪問成員函數"></a>(3) 空指針訪問成員函數 </h5><p> 空指針可以訪問屬性是 public 的成員函數，但是函數中不可以用到 this 指針<br><img src="/2018/10/14/C++%E5%85%A5%E9%96%80%E4%B9%8B%E5%BE%8C/photo2.png" alt><br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">foo</span> <span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;B foo&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    B *somenull = <span class="literal">NULL</span>;</span><br><span class="line">    somenull-&gt;<span class="built_in">foo</span> ();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h5 id="4-const- 修飾成員函數"><a href="#4-const- 修飾成員函數" class="headerlink" title="(4) const 修飾成員函數"></a>(4) const 修飾成員函數 </h5><p>(a) 常函數<br> 若成員函數後加 const，我們稱這個函數為常函數 <br> 常函數不可以修改成員屬性 <br> 但如果成員屬性在聲明時加關鍵字 mutable，在常函數中依然可以修改 <br>(b) 常對象<br> 聲明對象前加 const 稱爲常對象 <br> 常對象只能調用常函數</p>
<h4 id="4- 友元"><a href="#4- 友元" class="headerlink" title="4. 友元"></a>4. 友元 </h4><p> 友元就是讓類外某些特殊的函數或類訪問另一個類中的私有成員</p>
<h5 id="1- 全局函數做友元"><a href="#1- 全局函數做友元" class="headerlink" title="(1) 全局函數做友元"></a>(1) 全局函數做友元</h5><h5 id="2- 類做友元"><a href="#2- 類做友元" class="headerlink" title="(2) 類做友元"></a>(2) 類做友元</h5><h5 id="3- 成員函數做友元"><a href="#3- 成員函數做友元" class="headerlink" title="(3) 成員函數做友元"></a>(3) 成員函數做友元</h5><h4 id="5- 運算符重載"><a href="#5- 運算符重載" class="headerlink" title="5. 運算符重載"></a>5. 運算符重載</h4><h5 id="1- 加號運算符重載"><a href="#1- 加號運算符重載" class="headerlink" title="(1) 加號運算符重載"></a>(1) 加號運算符重載</h5><p>(a) 利用成員函數實現加號重載<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Person <span class="keyword">operator</span>+ (<span class="keyword">const</span> Person &amp;p)</span><br><span class="line">&#123;</span><br><span class="line">	Person temp;</span><br><span class="line">	temp.m_A = <span class="keyword">this</span>-&gt;m_A + p.m_A;</span><br><span class="line">	temp.m_B = <span class="keyword">this</span>-&gt;m_B + p.m_B;</span><br><span class="line">	<span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person p3 = p1.opertor+(p2);</span><br><span class="line"><span class="comment">// 可以簡化成 (使用編譯器提供的名稱)：</span></span><br><span class="line">Person p3 = p1 + p2;</span><br></pre></td></tr></table></figure><br>(b) 利用全局函數重載加號<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Person <span class="keyword">operator</span>+ (Person &amp;p1, Person &amp;p2)</span><br><span class="line">&#123;</span><br><span class="line">	Person temp;</span><br><span class="line">	temp.m_A = p1.m_A + p2.m_A;</span><br><span class="line">	temp.m_B = p1.m_B + p2.m_B;</span><br><span class="line">	<span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person p3 = <span class="keyword">operator</span>+ (p1, p2);</span><br><span class="line"><span class="comment">// 可以簡化成:</span></span><br><span class="line">Person p3 = p1 + p2;</span><br></pre></td></tr></table></figure><br>(c) 全局函數又實現一次函數重載<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Person <span class="keyword">operator</span>+ (<span class="keyword">const</span> Person &amp;p1, <span class="keyword">int</span> val)</span><br><span class="line">&#123;</span><br><span class="line">	Person temp;</span><br><span class="line">	temp.m_A = p1.m_A + val;</span><br><span class="line">	temp.m_B = p2.m_A + val;</span><br><span class="line">	<span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h5 id="2- 左移運算符重載"><a href="#2- 左移運算符重載" class="headerlink" title="(2) 左移運算符重載"></a>(2) 左移運算符重載</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">Person p;</span><br><span class="line">p.m_A = <span class="number">10</span>;</span><br><span class="line">p.m_B = <span class="number">20</span>;</span><br><span class="line">cout &lt;&lt; p &lt;&lt; endl; <span class="comment">// 不知道你有什麽屬性成員 // 運算符沒有和操作數匹配</span></span><br></pre></td></tr></table></figure>
<p>(a) 利用成員函數重載 (不會使用)<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="keyword">operator</span>&lt;&lt;(Person &amp;p);</span><br><span class="line"><span class="comment">//p.operator (p) 不是我們想要的效果</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="keyword">operator</span>&lt;&lt;(cout);</span><br><span class="line"><span class="comment">//p.operator (p) 簡化后可以寫成 p &lt;&lt; cout 但是我們想要的結果是 cout &lt;&lt; p</span></span><br></pre></td></tr></table></figure><br>(b) 利用全局函數實現左移重載<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//cout 這個對象全局只能有一個，所以要用引用的，不能創建一個新的</span></span><br><span class="line"><span class="comment">//operator&lt;&lt;(cout, p) 簡化成 cout &lt;&lt; p</span></span><br><span class="line"><span class="comment">// 返回 cout 類型，才可以連續輸出</span></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, Person&amp; p)</span><br><span class="line">&#123;</span><br><span class="line">	out &lt;&lt; <span class="string">&quot;m_A =&quot;</span> &lt;&lt; p.m_A &lt;&lt; <span class="string">&quot;, m_B =&quot;</span> &lt;&lt; p.m_B;</span><br><span class="line">	<span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果 m_A 和 m_B 是私有成員屬性，就要把重載函數設定成友元</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, Person&amp; p);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h5 id="3- 遞增運算符重載"><a href="#3- 遞增運算符重載" class="headerlink" title="(3) 遞增運算符重載"></a>(3) 遞增運算符重載</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInteger</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt; (ostream&amp; out, MyInteger myint);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="built_in">MyInteger</span> ()</span><br><span class="line">		&#123;</span><br><span class="line">			m_Num = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 返回引用是爲了對同一個數據進行遞增操作 ++(++a)</span></span><br><span class="line">		MyInteger&amp; <span class="keyword">operator</span>++ ()</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">// 先自增</span></span><br><span class="line">			m_Num ++;</span><br><span class="line">			<span class="comment">// 再返回</span></span><br><span class="line">			<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//int 代表占位參數，可以用於區分前置和後置</span></span><br><span class="line">		<span class="comment">// 後置要返回值，不能返回引用，不然就是返回局部對象的引用，會出錯</span></span><br><span class="line">		MyInterger <span class="keyword">operator</span>+ (<span class="keyword">int</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			MyInteger temp = *<span class="keyword">this</span>;</span><br><span class="line">			m_Num++;</span><br><span class="line">			<span class="keyword">return</span> temp;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">private</span>:</span><br><span class="line">		<span class="keyword">int</span> m_Num;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt; (ostream&amp; out, MyInteger myint)</span><br><span class="line">&#123;</span><br><span class="line">	out &lt;&lt; myint.m_Num;</span><br><span class="line">	<span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="4- 賦值運算符重載"><a href="#4- 賦值運算符重載" class="headerlink" title="(4) 賦值運算符重載"></a>(4) 賦值運算符重載 </h5><p>C++ 編譯器至少給一個類添加 4 個函數<br>(a) 默認構造函數（無參，函數體為空）<br>(b) 默認析構函數（無參，函數體爲空）<br>(c) 默認複製構造函數，對屬性進行值拷貝<br>(d) 賦值運算符 operator=，對屬性進行值拷貝<br> 如果類中有屬性指向堆區，做賦值操作時也會出現深淺拷貝<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="built_in">Person</span> (<span class="keyword">int</span> age)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">// 將年齡數據開闢到堆區</span></span><br><span class="line">			m_Age = <span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span> (age);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 重載賦值運算符，要返回自身，才可以做連續賦值</span></span><br><span class="line">		Person&amp; <span class="keyword">operator</span>= (Person &amp;p)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">// 編譯器提供的函數是淺拷貝</span></span><br><span class="line">			<span class="comment">//m_Age = p.m_Age;</span></span><br><span class="line"></span><br><span class="line">			<span class="comment">// 應先判斷是否有屬性在堆區，如果有先釋放乾净，然後再深拷貝</span></span><br><span class="line">			<span class="keyword">if</span> (m_Age != <span class="literal">NULL</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">delete</span> m_Age;</span><br><span class="line">				m_Age = <span class="literal">NULL</span>;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// 深拷貝，會造成兩個不同的對象的屬性成員指針指向同一個空間</span></span><br><span class="line">			m_Age = <span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span> (*p.m_Age);</span><br><span class="line"></span><br><span class="line">			<span class="comment">// 返回自身</span></span><br><span class="line">			<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		~<span class="built_in">Person</span> ()</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (m_Age != <span class="literal">NULL</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">delete</span> m_Age;</span><br><span class="line">				m_Age = <span class="literal">NULL</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 指向年齡的指針</span></span><br><span class="line">		<span class="keyword">int</span> *m_Age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h5 id="5- 關係運算符重載"><a href="#5- 關係運算符重載" class="headerlink" title="(5) 關係運算符重載"></a>(5) 關係運算符重載</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="built_in">Person</span> (string name, <span class="keyword">int</span> age)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">			<span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">bool</span> <span class="keyword">operator</span>== (Person &amp;p)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Name == p.m_Name &amp;&amp; <span class="keyword">this</span>-&gt;m_Age == p.m_Age)</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="keyword">bool</span> <span class="keyword">operator</span>!= (Person &amp;p)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Name == p.m_Name &amp;&amp; <span class="keyword">this</span>-&gt;m_Age == p.m_Age)</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h5 id="6- 函數調用運算符重載"><a href="#6- 函數調用運算符重載" class="headerlink" title="(6) 函數調用運算符重載"></a>(6) 函數調用運算符重載 </h5><p> 由於重載之後使用的方式非常像函數的調用，因此稱爲仿函數 <br> 仿函數沒有固定寫法，非常靈活<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPrint</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">operator</span> <span class="params">()</span><span class="params">(string next)</span></span></span><br><span class="line"><span class="function">		</span>&#123;</span><br><span class="line">			cout &lt;&lt; text &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyAdd</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="function"><span class="keyword">int</span> <span class="title">operator</span> <span class="params">()</span><span class="params">(<span class="keyword">int</span> v1, <span class="keyword">int</span> v2)</span></span></span><br><span class="line"><span class="function">		</span>&#123;</span><br><span class="line">			<span class="keyword">return</span> v1+v2;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	MyPrint myFunc;</span><br><span class="line">	<span class="built_in">myFunc</span> (<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line"></span><br><span class="line">	MyAdd add;</span><br><span class="line">	<span class="keyword">int</span> ret = <span class="built_in">add</span> (<span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">	cout &lt;&lt; ret &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 匿名函數對象，當前列用完了即被釋放</span></span><br><span class="line">	cout &lt;&lt; <span class="built_in">MyAdd</span> ()(<span class="number">100</span>, <span class="number">100</span>) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="6- 繼承"><a href="#6- 繼承" class="headerlink" title="6. 繼承"></a>6. 繼承 </h4><p> 繼承可以減少重複的程式塊<br>class A : public B<br>A 類稱爲子類 或 派生類<br>B 類稱爲父類 或 基類</p>
<p>派生類中的成員，包含兩大部分：<br>一類是從基類繼承過來的，一類是自己增加的成員 <br> 從基類繼承過來的表現其共性，而新增的成員體現其個性</p>
<h5 id="1- 繼承的基本語法"><a href="#1- 繼承的基本語法" class="headerlink" title="(1) 繼承的基本語法"></a>(1) 繼承的基本語法 </h5><p> 以簡易版頁面顯示爲例：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasePage</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">header</span> <span class="params">()</span></span></span><br><span class="line"><span class="function">		</span>&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot; 頁面、公開課、登錄、注冊...（公共頭部）&quot;</span> &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">footer</span> <span class="params">()</span></span></span><br><span class="line"><span class="function">		</span>&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot; 幫助中心、交流合作、站内地圖...（公共底部）&quot;</span> &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">left</span> <span class="params">()</span></span></span><br><span class="line"><span class="function">		</span>&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;Java,Python,C++...（公共分類列表）&quot;</span> &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Java</span> :</span> <span class="keyword">public</span> BasePage</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">content</span> <span class="params">()</span></span></span><br><span class="line"><span class="function">		</span>&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;JAVA 學科影片 &quot;</span> &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Python</span> :</span> <span class="keyword">public</span> BasePage</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">content</span> <span class="params">()</span></span></span><br><span class="line"><span class="function">		</span>&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;Python 學科影片 &quot;</span> &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>++ :</span> <span class="keyword">public</span> BasePage</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">content</span> <span class="params">()</span></span></span><br><span class="line"><span class="function">		</span>&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;C++ 學科影片 &quot;</span> &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h5 id="2- 繼承方式"><a href="#2- 繼承方式" class="headerlink" title="(2) 繼承方式"></a>(2) 繼承方式</h5><p><img src="/2018/10/14/C++%E5%85%A5%E9%96%80%E4%B9%8B%E5%BE%8C/photo3.png" alt></p>
<h5 id="3- 繼承中的對象模型"><a href="#3- 繼承中的對象模型" class="headerlink" title="(3) 繼承中的對象模型"></a>(3) 繼承中的對象模型 </h5><p> 父類中所有非靜態成員屬性都會被子類繼承下去 <br> 父類中私有成員屬性是被編譯器給隱藏了，因此是訪問不到的，但是確實被繼承了 <br>Q: 怎麽得知？<br>(a) cout &lt;&lt; sizeof (Son) &lt;&lt; endl;<br>(b) 利用工具查看<br> 打開 Visual Studio 的 Developer Command Prompt<br>定位到當前.cpp 檔案的槽，cd 進入檔案所在位置 <br> 然後輸入 cl /d1 reportSingleClassLayout 查看的類名 所屬檔案名</p>
<h5 id="4- 繼承中構造和析構順序"><a href="#4- 繼承中構造和析構順序" class="headerlink" title="(4) 繼承中構造和析構順序"></a>(4) 繼承中構造和析構順序 </h5><p> 先調用父類構造函數，再調用子類構造函數，析構順序與構造相反</p>
<h5 id="5- 繼承中同名成員的處理方式"><a href="#5- 繼承中同名成員的處理方式" class="headerlink" title="(5) 繼承中同名成員的處理方式"></a>(5) 繼承中同名成員的處理方式 </h5><p> 子類對象可以直接訪問到子類中同名成員 <br> 子類對象加作用域可以訪問到父類中同名成員 <br> 當子類與父類擁有同名的成員函數，子類會隱藏父類中所有版本的同名成員函數 (包含重載)，加作用域可以訪問</p>
<h5 id="6- 繼承中同名靜態成員的處理方式"><a href="#6- 繼承中同名靜態成員的處理方式" class="headerlink" title="(6) 繼承中同名靜態成員的處理方式"></a>(6) 繼承中同名靜態成員的處理方式 </h5><p> 同名靜態成員處理方式和非靜態成員處理方式一樣，只不過有兩種訪問方式 (通過對象 和 通過類名)</p>
<h5 id="7- 多繼承語法"><a href="#7- 多繼承語法" class="headerlink" title="(7) 多繼承語法"></a>(7) 多繼承語法 </h5><p>C++ 允許一個類繼承多個類<br> 多繼承可能會引發父類中有同名成員出現，需要加作用域區分<br>C++ 實際開發中不建議用多繼承<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> :</span> <span class="keyword">public</span> Base2, <span class="keyword">public</span> Base1</span><br><span class="line">&#123;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h5 id="8- 菱形繼承"><a href="#8- 菱形繼承" class="headerlink" title="(8) 菱形繼承"></a>(8) 菱形繼承 </h5><p>(a) 菱形繼承的概念<br> 兩個派生類繼承同一個基類 <br> 又有個類同時繼承這兩個派生類 <br> 這種繼承被稱爲菱形繼承，或者鑽石繼承 <br>(b) 舉例<br> 羊繼承了動物的數據，駝也繼承了動物的數據，草泥馬多繼承了羊和駝的數據 <br>(c) 問題<br> 草泥馬繼承自動物的數據就有了兩份，當草泥馬使用數據的時候就會產生歧義 <br> 子類繼承了兩份相同的數據，導致資源浪費以及毫無意義 <br>(d) 解決<br> 利用虛繼承可以解決菱形繼承的問題，相當於共享數據<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="keyword">int</span> m_Age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sheep</span> :</span> <span class="keyword">virtual</span> <span class="keyword">public</span> Animal &#123;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tuo</span> :</span> <span class="keyword">virtual</span> <span class="keyword">public</span> Animal &#123;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SheepTuo</span> :</span> <span class="keyword">public</span> Sheep, <span class="keyword">public</span> Tuo &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	SheepTuo st;</span><br><span class="line">	st.Sheep::m_Age = </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="7- 多態"><a href="#7- 多態" class="headerlink" title="7. 多態"></a>7. 多態 </h4><h3 id="五、檔案操作"><a href="# 五、檔案操作" class="headerlink" title="五、檔案操作"></a> 五、檔案操作</h3>]]></content>
      <categories>
        <category>C++復習</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
</search>
