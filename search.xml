<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>5G（一）5G 概述</title>
    <url>/2021/04/14/5G-1/</url>
    <content><![CDATA[<h3 id="一、移动通信发展趋势"><a href="# 一、移动通信发展趋势" class="headerlink" title="一、移动通信发展趋势"></a>一、移动通信发展趋势</h3><h4 id="1G：摩托罗拉和贝尔实验室发展起来，1981- 年开始部署"><a href="#1G：摩托罗拉和贝尔实验室发展起来，1981- 年开始部署" class="headerlink" title="1G：摩托罗拉和贝尔实验室发展起来，1981 年开始部署"></a>1G：摩托罗拉和贝尔实验室发展起来，1981 年开始部署</h4><p>(1) 不同国家有不同标准，跨区漫游问题无法解决<br>(2) 模拟信号。没办法保证通信安全</p>
<h4 id="2G：1991，欧洲的 -GSM、美国的 -CDMA-S95"><a href="#2G：1991，欧洲的 -GSM、美国的 -CDMA-S95" class="headerlink" title="2G：1991，欧洲的 GSM、美国的 CDMA (S95)"></a>2G：1991，欧洲的 GSM、美国的 CDMA (S95)</h4><h4 id="3G：2001，从 -3G- 开始，标准由 -ITO- 来主导"><a href="#3G：2001，从 -3G- 开始，标准由 -ITO- 来主导" class="headerlink" title="3G：2001，从 3G 开始，标准由 ITO 来主导"></a>3G：2001，从 3G 开始，标准由 ITO 来主导 </h4><p>ITO 提出需求，其他机构提出标准（技术方案）<br>WCDMA (欧洲)、CDMA2000 (美国和日本)、TDSCDMA (中国)<br> 中国从 3G 开始参与到国际标准的制定</p>
<h4 id="4G：2011，IEEE- 的 -LTE"><a href="#4G：2011，IEEE- 的 -LTE" class="headerlink" title="4G：2011，IEEE 的 LTE"></a>4G：2011，IEEE 的 LTE</h4><span id="more"></span>
<h4 id="5G："><a href="#5G：" class="headerlink" title="5G："></a>5G：</h4><h3 id="二、ITU-5G- 发展历程"><a href="# 二、ITU-5G- 发展历程" class="headerlink" title="二、ITU 5G 发展历程"></a>二、ITU 5G 发展历程</h3><p><img src="/2021/04/14/5G-1/photo1.jpg" alt></p>
<h3 id="三、5G- 应用场景"><a href="# 三、5G- 应用场景" class="headerlink" title="三、5G 应用场景"></a>三、5G 应用场景</h3><p><img src="/2021/04/14/5G-1/photo2.jpg" alt></p>
<h3 id="四、5G- 性能指标"><a href="# 四、5G- 性能指标" class="headerlink" title="四、5G 性能指标"></a>四、5G 性能指标</h3><h3 id="5G- 系列文章"><a href="#5G- 系列文章" class="headerlink" title="5G 系列文章"></a>5G 系列文章</h3><p><a href="https://wangxchun.github.io/2021/04/14/5G-1/">5G（一）5G 概述</a><br><a href="https://wangxchun.github.io/2021/04/14/5G-2-1/">5G（二）5G 网络架构 — 1. 核心网架构</a><br><a href="https://wangxchun.github.io/2021/04/14/5G-2-2/">5G（二）5G 网络架构 — 2. 接入网及网络部署</a><br><a href="https://wangxchun.github.io/2021/04/15/5G-3-1/">5G（三）5G 关键技术 — 1.NFV 网络功能虚拟化</a><br><a href="https://wangxchun.github.io/2021/04/15/5G-3-2/">5G（三）5G 关键技术 — 2.SDN 软件定义网络</a><br><a href="https://wangxchun.github.io/2021/04/16/5G-3-3/">5G（三）5G 关键技术 — 3.MEC 移动边缘计算</a><br><a href="https://wangxchun.github.io/2021/04/16/5G-3-4/">5G（三）5G 关键技术 — 4.Network Slicing 网络切片</a><br><a href="https://wangxchun.github.io/2021/04/16/5G-3-5/">5G（三）5G 关键技术 — 5.mmWave 毫米波</a><br><a href="https://wangxchun.github.io/2021/04/16/5G-3-6-1/">5G（三）5G 关键技术 — 6.Massive MIMO</a><br><a href="https://wangxchun.github.io/2021/04/17/5G-3-6-2/">5G（三）5G 关键技术 — 6.Massive MIMO 补充</a></p>
]]></content>
      <categories>
        <category>5G</category>
      </categories>
      <tags>
        <tag>5G</tag>
        <tag>GSM</tag>
        <tag>CDMA</tag>
        <tag>ITO</tag>
        <tag>IEEE</tag>
        <tag>LTE</tag>
      </tags>
  </entry>
  <entry>
    <title>5G（二）5G 网络架构 -- 1. 核心网架构</title>
    <url>/2021/04/14/5G-2-1/</url>
    <content><![CDATA[<h3 id="一、5G- 不同应用场景的需求指标差异"><a href="# 一、5G- 不同应用场景的需求指标差异" class="headerlink" title="一、5G 不同应用场景的需求指标差异"></a>一、5G 不同应用场景的需求指标差异 </h3><p><img src="/2021/04/14/5G-2-1/photo1.jpg" alt><br> 有时不同场景所需的性能是不同的，甚至是矛盾的，单一网络没办法满足需要（4G 网络就是单一网络）<br>那 5G 网络是如何解决这个问题？<br>建立三个网络：5G eMBB、5G uRLLC、5G mMTC，但是成本太高，而且网络会非常复杂</p>
<h3 id="二、5G- 时代的网络挑战和改进方向"><a href="# 二、5G- 时代的网络挑战和改进方向" class="headerlink" title="二、5G 时代的网络挑战和改进方向"></a>二、5G 时代的网络挑战和改进方向</h3><p><img src="/2021/04/14/5G-2-1/photo2.jpg" alt></p>
<h4 id="发展方向"><a href="# 发展方向" class="headerlink" title="发展方向"></a>发展方向 </h4><p> 解决方法：使用网络切片，分层三种网络，但不是物理层面，而是网络层面</p>
<h5 id="1- 控制面和用户面分离"><a href="#1- 控制面和用户面分离" class="headerlink" title="1. 控制面和用户面分离"></a>1. 控制面和用户面分离 </h5><p>ex: 要增加用户数量，升级的是控制面；要提升传输速率，升级的是用户面。<br> 在 4G 网络核心网中已经完成了一部分的分离，主要控制面在 MME，用户面在 S-GW 和 P-GW，但在 S-GW 和 P-GW 中仍含有会话控制相关的控制功能（例如 IP 地址分配），分离的不彻底。唯有网络更加灵活，才可能完成网络切片。<br><span id="more"></span></p>
<pre><code>补充：MME 是 LTE 网络的网元，和 S-GW、P-GW 一起被称作 4G 的核心网：EPC。 
这三个网元都是逻辑网元，意味着任何厂家（爱立信，华为，中兴等）建立的 LTE 网络必须要有这三个逻辑网元。 
实际生产过程中，为了节省成本，有些技术好的厂家可以用一套系统（硬件 + 软件）同时作为 3G 网元和 4G 网元，
比如华为经常把 3G 的 SGSN 和 4G 的 MME 共用一套系统（硬件 + 软件），
华为的 S-GW,P-GW 经常合一为一套系统，同时还支持 3G 的 GGSN。
</code></pre><h5 id="2- 网络功能服务化"><a href="#2- 网络功能服务化" class="headerlink" title="2. 网络功能服务化"></a>2. 网络功能服务化 </h5><p> 软硬件解耦，在更新的时候，可以只更新软件而硬件不更新。<br>网络功能服务化，5G 中没有网元的概念，网络单元（Net Element，简称 NE，网元）。</p>
<h5 id="3- 网络接口总线化"><a href="#3- 网络接口总线化" class="headerlink" title="3. 网络接口总线化"></a>3. 网络接口总线化 </h5><p>5G 中，任何一个网络功能都可以给其他网络功能提供服务，也可以从其他网络功能得到服务。<br> 而在 4G 中，强调的是网元之间的接口。</p>
<h5 id="4- 最小化核心网和接入网的关联"><a href="#4- 最小化核心网和接入网的关联" class="headerlink" title="4. 最小化核心网和接入网的关联"></a>4. 最小化核心网和接入网的关联 </h5><p> 目标：不论接入网是是什么 (3G、4G、5G…) 都可以接入到 5G 的核心网中。</p>
<h5 id="5- 网络功能无状态化"><a href="#5- 网络功能无状态化" class="headerlink" title="5. 网络功能无状态化"></a>5. 网络功能无状态化 </h5><p> 在 4G 中有些网元既要控制又要存储。<br>在 5G 中控制和存储分别是专门的网络功能。</p>
<h5 id="6- 网络能力开放"><a href="#6- 网络能力开放" class="headerlink" title="6. 网络能力开放"></a>6. 网络能力开放 </h5><p> 运营商不甘心成为管道化的工具，<br>可以给某些特定的用户提供定制化的服务。</p>
<h4 id="关键技术（用哪些关键技术来实现上述目标）"><a href="# 关键技术（用哪些关键技术来实现上述目标）" class="headerlink" title="关键技术（用哪些关键技术来实现上述目标）"></a>关键技术（用哪些关键技术来实现上述目标）</h4><h5 id="1-CUPS（控制和用户分离）"><a href="#1-CUPS（控制和用户分离）" class="headerlink" title="1.CUPS（控制和用户分离）"></a>1.CUPS（控制和用户分离）</h5><p>该技术引入 4G 网中，让用户提前体会到 5G 的性能。</p>
<h5 id="2-SBA（基于服务的网路架构）"><a href="#2-SBA（基于服务的网路架构）" class="headerlink" title="2.SBA（基于服务的网路架构）"></a>2.SBA（基于服务的网路架构）</h5><p>用来满足网络功能服务化</p>
<h5 id="3-NFV（网络功能虚拟化）"><a href="#3-NFV（网络功能虚拟化）" class="headerlink" title="3.NFV（网络功能虚拟化）"></a>3.NFV（网络功能虚拟化）</h5><h5 id="4-SDN"><a href="#4-SDN" class="headerlink" title="4.SDN"></a>4.SDN</h5><p>满足网络功能服务化、控制面和用户面分离</p>
<h5 id="5-C-RAN（5G- 中新形式的接入网）"><a href="#5-C-RAN（5G- 中新形式的接入网）" class="headerlink" title="5.C-RAN（5G 中新形式的接入网）"></a>5.C-RAN（5G 中新形式的接入网）</h5><h5 id="6-NS（网络切片）"><a href="#6-NS（网络切片）" class="headerlink" title="6.NS（网络切片）"></a>6.NS（网络切片）</h5><h3 id="三、5G- 网络结构"><a href="# 三、5G- 网络结构" class="headerlink" title="三、5G 网络结构"></a>三、5G 网络结构</h3><h4 id="5G- 网络的总体结构"><a href="#5G- 网络的总体结构" class="headerlink" title="5G 网络的总体结构"></a>5G 网络的总体结构</h4><p><img src="/2021/04/14/5G-2-1/photo3.jpg" alt="5G 网络的总体结构"></p>
<h4 id="5G- 核心网架构（基于服务的结构 -SBA）"><a href="#5G- 核心网架构（基于服务的结构 -SBA）" class="headerlink" title="5G 核心网架构（基于服务的结构 SBA）"></a>5G 核心网架构（基于服务的结构 SBA）</h4><p><img src="/2021/04/14/5G-2-1/photo4.jpg" alt="5G 核心网架构"> NF：网路服务，而不是 4G 网中的网元<br>SBI：服务接口<br>SBA：5G 核心网架构<br>AF：应用服务器不算 5G 核心网中的一部分</p>
<h4 id="5G- 核心网网络功能"><a href="#5G- 核心网网络功能" class="headerlink" title="5G 核心网网络功能"></a>5G 核心网网络功能 </h4><h5 id="1-AMF"><a href="#1-AMF" class="headerlink" title="1.AMF"></a>1.AMF</h5><p> 类似 4G MME 的功能<br>Access and Mobility Management function (AMF).<br>(1) Termination of RAN CP interface (N2).<br>(2) Termination of NAS (N1), NAS ciphering and integrity protection.<br>(3) Registration management.<br>(4) Connection management.<br>(6) Reachability management.<br>(6) Mobility management.<br>(7) Provide transport for SM messages between UE and SMF.<br>(8) Access Authentication.<br>(9) Access Authorization.</p>
<h5 id="2-SMF"><a href="#2-SMF" class="headerlink" title="2.SMF"></a>2.SMF</h5><p>类似 4G PG-W 的控制面<br>The Session Management function (SMF)<br>(1) Session management e.g. Session Establishment, modify and release, including tunnel maintain between UPF and AN node.<br>(2) UE IP address allocation &amp; management (including optional Authorization).<br>(3) Selection and control of UP function.<br>(4) Configures traffic steering at UPF to route traffic to proper destination.<br>(5) Termination of interfaces towards Policy control functions (PCF).<br>(6) Termination of SM parts of NAS messages.</p>
<h5 id="3-UPF"><a href="#3-UPF" class="headerlink" title="3.UPF"></a>3.UPF</h5><p>The User plane function (UPF).<br>(1) External PDU session point of interconnect to Data Network.<br>终端的数据传到外部网络，外部网络的数据传回终端<br>(2) Packet routing &amp; forwording (e.g. support of Uplink classifier to route traffic flows to an instance of a data network, support muti-homed PDU Session).<br>(3) User Plane part of policy rule enforcement (e.g. Gating, Redirection, Traffic steering).<br>(4) QoS handling for user plane, e.g. UL/DL rate enforcement, Reflective QoS marking in DL.</p>
<h5 id="4-PCF"><a href="#4-PCF" class="headerlink" title="4.PCF"></a>4.PCF</h5><p>类似 LTE 的 PCRF (Policy and Charging Rules Function)，执行统一的策略框架 <br>The Policy Control Function (PCF)<br>(1) Supports unified policy framework to govern network behaviour.<br>(2) Provides policy rules to Control Plane functions to enforce them.<br>(3) Accesses subscription in a Unified Data Rspository (UDR).<br> 访问用户数据库</p>
<h5 id="5-NEF"><a href="#5-NEF" class="headerlink" title="5.NEF"></a>5.NEF</h5><p>5G 网络中的新功能，关于网络开放<br>The Network Exposure Function (NEF)<br>(1) Exposure of capabilities and events.<br>(2) Secure provision of information from external application to 3GPP network.<br>(3) Translation of internal-external information.<br>(4) The Network Exposure Function receives information from other network functions (base on exposured capablities of other network functions). NEF stores the received information as interface to a Unified Data Repository (UDR). The stored information can be accessed and “re-exposed” by the NEF to other network functions and Application Functions, and used for other purposes such as analytics.</p>
<h5 id="6-NRF"><a href="#6-NRF" class="headerlink" title="6.NRF"></a>6.NRF</h5><p>为 SBA 服务的网络功能 <br>The Network Repository Function (NRF)<br>(1) Supports service discovery function. Receive NF Discovery Request from NF instance, and provides the information of the discovered NF instances (be discovered) to the NF instance.<br> 每个网络功能都是服务化的，要取得服务，要先联系到它，才能请求服务。<br>NRF 是网络功能互相通信的基础。<br>(2) Maintains the NF profile of availble NF instances and their supported services.</p>
<h5 id="7-UDM"><a href="#7-UDM" class="headerlink" title="7.UDM"></a>7.UDM</h5><p>类似 4G 中的 HSS (包含管理和数据存储) 中的控制功能<br>The Unified Data Management (UDM)<br>(1) Generation of 3GPP AKA Authentication Credentials.<br>(2) User Identification Handling (e.g. storage and management of SUPI for each subscriber in the 5G system).<br>(3) Support of de-condelment of privacy-protected subcription identifier (SUCI).<br>(4) Access authorization based on subscriptiondata (e.g. roaming restrictions).<br>(5) UE’s Serving NF Registration Management (e.g. storing serving AMF for UE, storing serving SMF for UE’s PDU Session).<br>(6) Subscription management.</p>
<h5 id="8-AUSF"><a href="#8-AUSF" class="headerlink" title="8.AUSF"></a>8.AUSF</h5><p>健全服务器功能<br>The Authrntication Server Function (AUSF)<br>(1) Supports authentication for 3GPP access and untrusted non-3GPP access.</p>
<h5 id="9-AF"><a href="#9-AF" class="headerlink" title="9.AF"></a>9.AF</h5><p>The Application Function (AF)<br>(1) Application influence on traffic routing.<br>(2) Accessing Network Exposure Function.<br>(3) Interacting with the Policy framework for policy control.</p>
<h5 id="9-UDR"><a href="#9-UDR" class="headerlink" title="9.UDR"></a>9.UDR</h5><p>相当于 4G 中 HSS 的数据存储功能，统一存放数据的地方。<br>The Unified Data Repository (UDR)<br>(1) Storage and retrieval of subscription data by the UDM.<br>(2) Storage and retrieval of policy data by the PCF.<br>(3) Storage and retrieval of structured data for exposure.<br>(4) Application data (including Packet Flow Descriptios (PFDs) for application detection, AF request information for multiple UEs), by the NEF.</p>
<h5 id="10-UDSF"><a href="#10-UDSF" class="headerlink" title="10.UDSF"></a>10.UDSF</h5><p>UDR 存储的是结构化数据 (3GPP 定义好的)，<br>UDSF 存储的是非结构化数据 (可能是某个应用自己定义的)<br>The Unstructured Data Storage Function (UDSF)<br>(1) Storage and retrieval of information as unstructured data by any NF.</p>
<h5 id="11-SMSF"><a href="#11-SMSF" class="headerlink" title="11.SMSF"></a>11.SMSF</h5><p>信息管理，收发短信<br>The Short Message Service Function (SMSF)<br>(1) SMS management subscription data checking and conduction SMS delivery accordingly.<br>(2) SM-RP/SM-CP with the UE.<br>(3) Relay the SM with the UE.<br>(4) Relay the SM from SMS-GMSC/WMSC/SMS-Router toward the UE.<br>(5) Interaction with AMF and SMS- for notification procedure that the UE is unavaliable for SMS transfer (i.e, notifies SMS-GMSC to inform UDM when UE is unavailble for SMS).</p>
<h5 id="12-NSSF"><a href="#12-NSSF" class="headerlink" title="12.NSSF"></a>12.NSSF</h5><p>是 5G 中比较重要的功能<br>The Network Slice Selection Function (NSSF)<br>(1) Selecting the set of Network Slice instances serving the UE.<br>(2) Determining the Allowed NSSAI and, if needed, the mapping to hte Subscribed S-NSSAIs.<br>(3) Determining the Configured NSSAI and, if needed, the mapping to Subscribed S-NSSAIs.<br>(4) Determining the AMF Set to be used to serve the UE, or based on configuration, a list of candidate AMFs, possibly by querting the NRF.</p>
<h5 id="13-5G-EIR"><a href="#13-5G-EIR" class="headerlink" title="13.5G-EIR"></a>13.5G-EIR</h5><p>5G ID 认证中心，检查设备的状态<br>The 5G-Equipment Identity Register (5G-EIR)<br>Check the status of PEI (e.g. to check that it has not benn blackkisted)</p>
<h5 id="14-LMF"><a href="#14-LMF" class="headerlink" title="14.LMF"></a>14.LMF</h5><p>定位相关的功能，通过上下行的测量得到.. 的位置<br>The Location Management Function (LMF)<br>(1) Supports location determination for a UE.<br>(2) Obtains downlink location measurements a location estimate from the UE.<br>(3) Obtains uplink location measurements from the NG RAN.<br>(4) Obtains non-UE associated assistence data from the NG RAN.</p>
<h5 id="15-SEPP"><a href="#15-SEPP" class="headerlink" title="15.SEPP"></a>15.SEPP</h5><p>防火墙作用，过滤网络的数据包<br>The Security Edge Protection Proxy (SEPP)<br>(1) Message filtering and policing on inter-PLMN control plane interfaces.<br>(2) Topology hiding.</p>
<h5 id="16-NWDAF"><a href="#16-NWDAF" class="headerlink" title="16.NWDAF"></a>16.NWDAF</h5><p>基于切片的网络数据分析<br>The Network Data Analytics Function (NWDAF)<br>(1) Represents operator managed network analytics logical function.<br>(2) Provides slice specific network data analytics to a NF.<br>(3) Provides network analytics information (i.e., load level information) to a NF on a network slice instance level and the NWDAF is not required to be aware of current subscribers using the slice.<br>(4) Notifies slice specific network status analytic information to the NFs that are subscribed to it.<br>(5) NF may collect directly slice specific network status analytic information from NWDAF.This information is not about specific.</p>
<h3 id="四、5G- 核心网网络功能服务框架"><a href="# 四、5G- 核心网网络功能服务框架" class="headerlink" title="四、5G 核心网网络功能服务框架"></a>四、5G 核心网网络功能服务框架 </h3><p><img src="/2021/04/14/5G-2-1/photo5.jpg" alt="5G 核心网网络功能服务框架"><br> 类似用户看视频，可以点击视频观看，也可以订阅 up 主之后会收到通知</p>
<h4 id="网络功能服务 -NF- 的注册、发现、授权机制"><a href="# 网络功能服务 -NF- 的注册、发现、授权机制" class="headerlink" title="网络功能服务 (NF) 的注册、发现、授权机制"></a>网络功能服务 (NF) 的注册、发现、授权机制 </h4><p><img src="/2021/04/14/5G-2-1/photo6.jpg" alt="网络功能服务 (NF) 的注册、发现、授权机制"><br> 服务 NF 上下之后，向 NRF 发送注册消息，NEF 会存储 NF 的服务状态信息</p>
<h4 id="SBI- 接口协议"><a href="#SBI- 接口协议" class="headerlink" title="SBI 接口协议"></a>SBI 接口协议</h4><p>3G 和 4G 网络核心网的不同网元使用的协议是不一样的<br><img src="/2021/04/14/5G-2-1/photo7.jpg" alt="SBI 接口协议"></p>
<h4 id="网络服务功能举例：AMF"><a href="# 网络服务功能举例：AMF" class="headerlink" title="网络服务功能举例：AMF"></a>网络服务功能举例：AMF</h4><p><img src="/2021/04/14/5G-2-1/photo8.jpg" alt="网络服务功能举例：AMF"></p>
<p><center> 网络服务功能举例：AMF</center></p>
<h4 id="5G- 核心网与 -EPC- 交互"><a href="#5G- 核心网与 -EPC- 交互" class="headerlink" title="5G 核心网与 EPC 交互"></a>5G 核心网与 EPC 交互</h4><p><img src="/2021/04/14/5G-2-1/photo9.jpg" alt="5G 核心网与 EPC 交互"><br>4G 网中的网元与 5G 中的 NF 若功能相似，可以联合部署</p>
<h3 id="5G- 系列文章"><a href="#5G- 系列文章" class="headerlink" title="5G 系列文章"></a>5G 系列文章</h3><p><a href="https://wangxchun.github.io/2021/04/14/5G-1/">5G（一）5G 概述</a><br><a href="https://wangxchun.github.io/2021/04/14/5G-2-1/">5G（二）5G 网络架构 — 1. 核心网架构</a><br><a href="https://wangxchun.github.io/2021/04/14/5G-2-2/">5G（二）5G 网络架构 — 2. 接入网及网络部署</a><br><a href="https://wangxchun.github.io/2021/04/15/5G-3-1/">5G（三）5G 关键技术 — 1.NFV 网络功能虚拟化</a><br><a href="https://wangxchun.github.io/2021/04/15/5G-3-2/">5G（三）5G 关键技术 — 2.SDN 软件定义网络</a><br><a href="https://wangxchun.github.io/2021/04/16/5G-3-3/">5G（三）5G 关键技术 — 3.MEC 移动边缘计算</a><br><a href="https://wangxchun.github.io/2021/04/16/5G-3-4/">5G（三）5G 关键技术 — 4.Network Slicing 网络切片</a><br><a href="https://wangxchun.github.io/2021/04/16/5G-3-5/">5G（三）5G 关键技术 — 5.mmWave 毫米波</a><br><a href="https://wangxchun.github.io/2021/04/16/5G-3-6-1/">5G（三）5G 关键技术 — 6.Massive MIMO</a><br><a href="https://wangxchun.github.io/2021/04/17/5G-3-6-2/">5G（三）5G 关键技术 — 6.Massive MIMO 补充</a></p>
]]></content>
      <categories>
        <category>5G</category>
      </categories>
      <tags>
        <tag>5G</tag>
        <tag>核心网</tag>
        <tag>S-GW</tag>
        <tag>P-GW</tag>
        <tag>MME</tag>
        <tag>CUPS</tag>
        <tag>SBA</tag>
        <tag>NFV</tag>
        <tag>SDN</tag>
        <tag>C-RAN</tag>
        <tag>NS</tag>
        <tag>AMF</tag>
      </tags>
  </entry>
  <entry>
    <title>5G（二）5G 网络架构 -- 2. 接入网及网络部署</title>
    <url>/2021/04/14/5G-2-2/</url>
    <content><![CDATA[<h3 id="一、5G- 接入网架构"><a href="# 一、5G- 接入网架构" class="headerlink" title="一、5G 接入网架构"></a>一、5G 接入网架构 </h3><h4 id="5G- 接入网架构"><a href="#5G- 接入网架构" class="headerlink" title="5G 接入网架构"></a>5G 接入网架构</h4><p>4G 网络的站点都是独立的，没有像 3G 中 RNC (Radio Network Controller) 的角色来进行控制。<br> 在 5G 中，基站的密度更大，干扰更大，更需要站点间的协调合作。<br>5G 网络需要灵活部署，以配合不同的场景需求。<br>自动化网络优化管理，通用硬件。<br><img src="/2021/04/14/5G-2-2/photo1.jpg" alt></p>
<h4 id="5G- 接入网 -CU-DU- 分离选项"><a href="#5G- 接入网 -CU-DU- 分离选项" class="headerlink" title="5G 接入网 CU/DU 分离选项"></a>5G 接入网 CU/DU 分离选项 </h4><p> 越左边的划分方式越分布式，分布式实现的设备比较复杂，成本高。<br>3GPP 的第一种方式是：时延要求小的划分在 CU，这样 CU 就可以使用通用硬件。<br><img src="/2021/04/14/5G-2-2/photo2.jpg" alt></p>
<h4 id="5G- 接入网 -CU-DU"><a href="#5G- 接入网 -CU-DU" class="headerlink" title="5G 接入网 CU/DU"></a>5G 接入网 CU/DU</h4><p>DU 只能连接一个 CU-CP，CU-UP 也只能连接一个 CU-CP</p>
<p><img src="/2021/04/14/5G-2-2/photo3.png" alt><br>4G 中的 BBU 变成了 CU 和 DU，RRU 变成了 AAU<br>CU 可以采用通用硬件来实现，在上面采用 NFV 技术</p>
<h3 id="二、"><a href="# 二、" class="headerlink" title="二、"></a>二、</h3><span id="more"></span>
<h3 id="5G- 系列文章"><a href="#5G- 系列文章" class="headerlink" title="5G 系列文章"></a>5G 系列文章</h3><p><a href="https://wangxchun.github.io/2021/04/14/5G-1/">5G（一）5G 概述</a><br><a href="https://wangxchun.github.io/2021/04/14/5G-2-1/">5G（二）5G 网络架构 — 1. 核心网架构</a><br><a href="https://wangxchun.github.io/2021/04/14/5G-2-2/">5G（二）5G 网络架构 — 2. 接入网及网络部署</a><br><a href="https://wangxchun.github.io/2021/04/15/5G-3-1/">5G（三）5G 关键技术 — 1.NFV 网络功能虚拟化</a><br><a href="https://wangxchun.github.io/2021/04/15/5G-3-2/">5G（三）5G 关键技术 — 2.SDN 软件定义网络</a><br><a href="https://wangxchun.github.io/2021/04/16/5G-3-3/">5G（三）5G 关键技术 — 3.MEC 移动边缘计算</a><br><a href="https://wangxchun.github.io/2021/04/16/5G-3-4/">5G（三）5G 关键技术 — 4.Network Slicing 网络切片</a><br><a href="https://wangxchun.github.io/2021/04/16/5G-3-5/">5G（三）5G 关键技术 — 5.mmWave 毫米波</a><br><a href="https://wangxchun.github.io/2021/04/16/5G-3-6-1/">5G（三）5G 关键技术 — 6.Massive MIMO</a><br><a href="https://wangxchun.github.io/2021/04/17/5G-3-6-2/">5G（三）5G 关键技术 — 6.Massive MIMO 补充</a></p>
]]></content>
      <categories>
        <category>5G</category>
      </categories>
      <tags>
        <tag>5G</tag>
        <tag>接入网</tag>
        <tag>CU</tag>
        <tag>DU</tag>
      </tags>
  </entry>
  <entry>
    <title>5G（三）5G 关键技术 -- 1.NFV 网络功能虚拟化</title>
    <url>/2021/04/15/5G-3-1/</url>
    <content><![CDATA[<h3 id="5G- 新技术"><a href="#5G- 新技术" class="headerlink" title="5G 新技术"></a>5G 新技术 </h3><p> 网络新技术：NFV、SDN、MEC、UDN、NS<br>无线新技术：mmW、Massive MIMO、NOMA、Flexible PHY、Flexible Duplex</p>
<h3 id="一、从电子游戏说起"><a href="# 一、从电子游戏说起" class="headerlink" title="一、从电子游戏说起"></a>一、从电子游戏说起 </h3><p> 一开始的游戏，不同的游戏运行在不同的游戏硬件上 <br> 缺点：成本高、不灵活、部署慢 <br> 优点：性能好 (每个游戏都是针对特定硬件的性能开发的)、高可靠 (主机游戏死机的情况少)<span id="more"></span></p>
<p>之后，可以在 PC 上执行不同的游戏模拟器来模拟不同的游戏硬件 <br> 优点：成本低、灵活性高、部署快 <br> 缺点：性能不足、可靠性低 (虚拟器会有失配的问题)</p>
<h3 id="二、什么是 -NFV，为什么要 -NFV"><a href="# 二、什么是 -NFV，为什么要 -NFV" class="headerlink" title="二、什么是 NFV，为什么要 NFV"></a>二、什么是 NFV，为什么要 NFV</h3><p>通过引入标准的 IT 虚拟化技术，转换网络运营商的网络架构模式，<br>将之前各种专用的网络设备，替换成通用的高性能服务器，例如：交换器和存储器，<br>网络功能通过运行在这些通用硬件上的软件来实现，<br>主要是运营商的需求，网络设备商可能不希望看到这个场景。<br>（进入 5G 时代，网络设备制造商越来越少了）<br>全球五大网络设备制造商：华为、诺基亚 (NOK.US)、爱立信 (ERIC.US)、中兴 (00763)、三星</p>
<p>运营商在之前遇到的问题：<br>成本高（专用设备价格高周期短、不同场景需要不用的硬件来实现）<br>部署慢（网络功能和硬件相关，有了需求设备商要测试开发）<br>不灵活（4G 不同系统不同共享硬件资源）<br><img src="/2021/04/15/5G-3-1/photo1.jpg" alt><br>NFS 的好处：成本低、部署快、灵活性高、开放性高 (软硬件解耦)、配置容易</p>
<h3 id="三、NFV-VNF- 模块"><a href="# 三、NFV-VNF- 模块" class="headerlink" title="三、NFV-VNF 模块"></a>三、NFV-VNF 模块</h3><p><img src="/2021/04/15/5G-3-1/photo2.jpg" alt="NFS 架构"></p>
<h4 id="1-VNF- 虚拟化的网络功能"><a href="#1-VNF- 虚拟化的网络功能" class="headerlink" title="1.VNF 虚拟化的网络功能"></a>1.VNF 虚拟化的网络功能 </h4><p>VNF 实现的功能和对外接口和之前的专用硬件没有不同<br>VNF：一个网络功能可以由不同的组件组成，部署在不同的虚拟机上<br>EM：网元管理功能，类似通用硬件中的网管<br> 现在主流的虚拟机技术：XEN、KVM</p>
<h4 id="2-NFVI- 网络功能虚拟化基础设施"><a href="#2-NFVI- 网络功能虚拟化基础设施" class="headerlink" title="2.NFVI 网络功能虚拟化基础设施"></a>2.NFVI 网络功能虚拟化基础设施 </h4><h4 id="3-VIM- 虚拟化基础设施管理器"><a href="#3-VIM- 虚拟化基础设施管理器" class="headerlink" title="3.VIM 虚拟化基础设施管理器"></a>3.VIM 虚拟化基础设施管理器</h4><p> 虚拟机资源的分配、更新释放、故障、信息收集上报 <br> 现在主要使用的是 openstack，分布式虚拟资源管理平台，包含一系列开源组件和标准接口协议</p>
<h4 id="4-VNFM- 虚拟化网络功能管理器"><a href="#4-VNFM- 虚拟化网络功能管理器" class="headerlink" title="4.VNFM 虚拟化网络功能管理器"></a>4.VNFM 虚拟化网络功能管理器 </h4><p> 负责 VNF 生命周期管理，生成和释放</p>
<h4 id="5-NFVO- 网络功能虚拟化编排器"><a href="#5-NFVO- 网络功能虚拟化编排器" class="headerlink" title="5.NFVO 网络功能虚拟化编排器"></a>5.NFVO 网络功能虚拟化编排器 </h4><p> 负责编排和管理 NFVI 和软件资源，负责整体调度</p>
<h3 id="四、NFV- 集成方式"><a href="# 四、NFV- 集成方式" class="headerlink" title="四、NFV 集成方式"></a>四、NFV 集成方式</h3><p><img src="/2021/04/15/5G-3-1/photo3.jpg" alt></p>
<center> 从整个架构考虑，三层解耦是未来的发展方向，但是技术难度比较大，目前是单厂家为主 </center>

<p><img src="/2021/04/15/5G-3-1/photo4.jpg" alt></p>
<center>NFV 实例 </center>

<h3 id="五、NFV- 挑战"><a href="# 五、NFV- 挑战" class="headerlink" title="五、NFV 挑战"></a>五、NFV 挑战</h3><p><img src="/2021/04/15/5G-3-1/photo5.jpg" alt></p>
<h3 id="5G- 系列文章"><a href="#5G- 系列文章" class="headerlink" title="5G 系列文章"></a>5G 系列文章</h3><p><a href="https://wangxchun.github.io/2021/04/14/5G-1/">5G（一）5G 概述</a><br><a href="https://wangxchun.github.io/2021/04/14/5G-2-1/">5G（二）5G 网络架构 — 1. 核心网架构</a><br><a href="https://wangxchun.github.io/2021/04/14/5G-2-2/">5G（二）5G 网络架构 — 2. 接入网及网络部署</a><br><a href="https://wangxchun.github.io/2021/04/15/5G-3-1/">5G（三）5G 关键技术 — 1.NFV 网络功能虚拟化</a><br><a href="https://wangxchun.github.io/2021/04/15/5G-3-2/">5G（三）5G 关键技术 — 2.SDN 软件定义网络</a><br><a href="https://wangxchun.github.io/2021/04/16/5G-3-3/">5G（三）5G 关键技术 — 3.MEC 移动边缘计算</a><br><a href="https://wangxchun.github.io/2021/04/16/5G-3-4/">5G（三）5G 关键技术 — 4.Network Slicing 网络切片</a><br><a href="https://wangxchun.github.io/2021/04/16/5G-3-5/">5G（三）5G 关键技术 — 5.mmWave 毫米波</a><br><a href="https://wangxchun.github.io/2021/04/16/5G-3-6-1/">5G（三）5G 关键技术 — 6.Massive MIMO</a><br><a href="https://wangxchun.github.io/2021/04/17/5G-3-6-2/">5G（三）5G 关键技术 — 6.Massive MIMO 补充</a></p>
]]></content>
      <categories>
        <category>5G</category>
      </categories>
      <tags>
        <tag>5G</tag>
        <tag>NFV</tag>
        <tag>网络功能虚拟化</tag>
      </tags>
  </entry>
  <entry>
    <title>5G（三）5G 关键技术 -- 2.SDN 软件定义网络</title>
    <url>/2021/04/15/5G-3-2/</url>
    <content><![CDATA[<h3 id="一、从真人足球比赛和足球电子游戏说起"><a href="# 一、从真人足球比赛和足球电子游戏说起" class="headerlink" title="一、从真人足球比赛和足球电子游戏说起"></a>一、从真人足球比赛和足球电子游戏说起 </h3><h4 id="真人足球比赛"><a href="# 真人足球比赛" class="headerlink" title="真人足球比赛"></a> 真人足球比赛 </h4><p> 赛前教练布置战术 <br> 赛中球员自行发挥 <br> 教练需改变战术策略只能依靠中场休息时间 <br> 替补球员上场前需进行热身 <span id="more"></span></p>
<h4 id="传统网络"><a href="# 传统网络" class="headerlink" title="传统网络"></a>传统网络 </h4><p> 球员相当于网络设备，执行教练的战术相当于上层给设备的一些设置 <br> 网络设备对每个数据包进行的动作是自主判断的 <br> 上层应用如果要对网络设备的参数进行修改，要透过广播的方式 <br> 替补球员相当于对网络设备进行更新，需要有一定的兼容性</p>
<h4 id="足球电子游戏"><a href="# 足球电子游戏" class="headerlink" title="足球电子游戏"></a>足球电子游戏 </h4><p> 玩家有自己的战术策略 <br> 玩家控制球员 <br> 玩家可以随时改变战术策略 <br> 替补球员上场迅速进入角色</p>
<h4 id="SDN- 软件定义网络"><a href="#SDN- 软件定义网络" class="headerlink" title="SDN 软件定义网络"></a>SDN 软件定义网络 </h4><p> 游戏平台相当于一个 SDN<br>玩家扮演教练的角色，相当于上层应用 <br> 玩家透过手柄控制球员的每个动作，相当于 SDN 控制器<br>SDN 中的网络设备只执行转发面的功能，控制面的功能被剥离有 SDN 控制器统一处理</p>
<h3 id="二、SDN- 架构"><a href="# 二、SDN- 架构" class="headerlink" title="二、SDN 架构"></a>二、SDN 架构</h3><p><img src="/2021/04/15/5G-3-2/photo1.jpg" alt="传统网络架构"></p>
<p><center> 传统网络架构 </center><br>当网络中的一个路由器发现一个新网络的时候，会更新自己的路由表，并发散式的提醒周围的路由器更新路由表，这个过程需要耗费一定的时间</p>
<p><img src="/2021/04/15/5G-3-2/photo2.jpg" alt="SDN 架构"></p>
<p><center>SDN 架构 </center><br>当网络中的一个路由器发现一个新网络的时候，会通知统一的控制器更新 <br> 在 SDN 网络中，网络设备只负责单纯的数据转发，所以可以用通用的硬件设备</p>
<p><img src="/2021/04/15/5G-3-2/photo3.jpg" alt><br>SDN 的特征：<br>（1）控制面和转发面分离<br>（2）控制面有一个开放的接口<br>（3）逻辑上的集中控制，一个控制面可以控制多个转发面</p>
<p><img src="/2021/04/15/5G-3-2/photo4.jpg" alt="SDN 分层实现"></p>
<p><center>SDN 分层实现 </center><br>（1）基础设施层：专注于数据转发业务。<br>（2）控制层：由 SDN 的控制软件组成，集中管理所有网络设备，将整个网络虚拟化成一个资源池。根据用户的需求和网络拓扑，灵活的分配资源。<br>（3）通过控制层提供的接口 (API) 对底层设备编程。<br>基础设施层和控制层之间的接口称为南向接口，最典型的协议就是 openflow，是开放的接口。<br>控制层和应用层之间的接口称为北向接口，控制层向上开放的，目前没有统一的标准。</p>
<p><img src="/2021/04/15/5G-3-2/photo5.jpg" alt="openflow 协议"></p>
<p><center>openflow 协议 2010 年发布 1.0 版本 </center><br>Openflow 维护一个流表，这个流表是由 SDN 控制器生成、维护、下发 <br> 网络设备根据这个流表的参数进行报文的转发，如果收到的报文没有对应的信息，则发给控制器，控制器决定如果转发之后并更新流表。<br>MAC dst 匹配域：报文匹配的字段<br>Count 计数器：方便流量监管<br>Action 指令集：匹配之后决定报文该如何转发或抛弃</p>
<h3 id="三、SDN- 应用场景"><a href="# 三、SDN- 应用场景" class="headerlink" title="三、SDN 应用场景"></a>三、SDN 应用场景 </h3><p> 在 5G 中，核心网 SDN 化（控制面和用户面分离）<br><img src="/2021/04/15/5G-3-2/photo6.jpg" alt="SDN 和 NFV 的关系"></p>
<h4 id="1- 提升转发性能"><a href="#1- 提升转发性能" class="headerlink" title="1. 提升转发性能"></a>1. 提升转发性能 </h4><p> 转发和控制着重的硬件性能不同</p>
<h4 id="2- 提升网络可靠性"><a href="#2- 提升网络可靠性" class="headerlink" title="2. 提升网络可靠性"></a>2. 提升网络可靠性 </h4><p> 如果 UPF 故障了，SMF 可以通过北向接口动态的调整网络拓扑</p>
<h4 id="3- 促进网络扁平化部署"><a href="#3- 促进网络扁平化部署" class="headerlink" title="3. 促进网络扁平化部署"></a>3. 促进网络扁平化部署 </h4><p> 讲 5G 接入网的 CU/DU 分离的时候提到过 <br> 对于一些延时敏感的业务，在部署的时候可以将 UPF 下沉，与无限次网元部署在一起，可以在加上 MEC</p>
<h4 id="4- 提升业务创新能力"><a href="#4- 提升业务创新能力" class="headerlink" title="4. 提升业务创新能力"></a>4. 提升业务创新能力</h4><p>4G 核心网是封闭网，新业务的部署依赖网络设备厂商<br>5G 的控制面是通过软件，不依赖于网络设备商</p>
<h3 id="四、SDN- 和 -NFV- 的关系"><a href="# 四、SDN- 和 -NFV- 的关系" class="headerlink" title="四、SDN 和 NFV 的关系"></a>四、SDN 和 NFV 的关系</h3><p><img src="/2021/04/15/5G-3-2/photo7.jpg" alt="SDN 和 NFV 的关系"></p>
<h3 id="5G- 系列文章"><a href="#5G- 系列文章" class="headerlink" title="5G 系列文章"></a>5G 系列文章</h3><p><a href="https://wangxchun.github.io/2021/04/14/5G-1/">5G（一）5G 概述</a><br><a href="https://wangxchun.github.io/2021/04/14/5G-2-1/">5G（二）5G 网络架构 — 1. 核心网架构</a><br><a href="https://wangxchun.github.io/2021/04/14/5G-2-2/">5G（二）5G 网络架构 — 2. 接入网及网络部署</a><br><a href="https://wangxchun.github.io/2021/04/15/5G-3-1/">5G（三）5G 关键技术 — 1.NFV 网络功能虚拟化</a><br><a href="https://wangxchun.github.io/2021/04/15/5G-3-2/">5G（三）5G 关键技术 — 2.SDN 软件定义网络</a><br><a href="https://wangxchun.github.io/2021/04/16/5G-3-3/">5G（三）5G 关键技术 — 3.MEC 移动边缘计算</a><br><a href="https://wangxchun.github.io/2021/04/16/5G-3-4/">5G（三）5G 关键技术 — 4.Network Slicing 网络切片</a><br><a href="https://wangxchun.github.io/2021/04/16/5G-3-5/">5G（三）5G 关键技术 — 5.mmWave 毫米波</a><br><a href="https://wangxchun.github.io/2021/04/16/5G-3-6-1/">5G（三）5G 关键技术 — 6.Massive MIMO</a><br><a href="https://wangxchun.github.io/2021/04/17/5G-3-6-2/">5G（三）5G 关键技术 — 6.Massive MIMO 补充</a></p>
]]></content>
      <categories>
        <category>5G</category>
      </categories>
      <tags>
        <tag>5G</tag>
        <tag>SDN</tag>
        <tag>软件定义网络</tag>
      </tags>
  </entry>
  <entry>
    <title>5G（三）5G 关键技术 -- 3.MEC 移动边缘计算</title>
    <url>/2021/04/16/5G-3-3/</url>
    <content><![CDATA[<h3 id="一、从京东物流说起"><a href="# 一、从京东物流说起" class="headerlink" title="一、从京东物流说起"></a>一、从京东物流说起 </h3><p><img src="/2021/04/16/5G-3-3/photo1.jpg" alt><br><span id="more"></span><br> 在离用户比较近的地方设置分服务器 <br> 那和代理服务器 proxy 的区别是？<!-- more --></p>
<h3 id="二、MEC- 概念"><a href="# 二、MEC- 概念" class="headerlink" title="二、MEC 概念"></a>二、MEC 概念 </h3><p><img src="/2021/04/16/5G-3-3/photo.jpg" alt><br>Mobile Edge Computing 移动边缘计算 / Multi-access Edge Computing 多点边缘计算<br> 在 5G 时代，数据吞吐量、用户密度、时延等指标要求非常高，<br>云计算方式无法满足这些需求，需要引入边缘计算。<br>网络边缘 = 靠近用户的位置<br><img src="/2021/04/16/5G-3-3/photo2.jpg" alt="MEC 实现方式"></p>
<p><center>MEC 实现方式 </center><br>5G 核心网用户面和控制面是分离的，所以 UPF 才可以提取出来放在边缘</p>
<h3 id="三、MEC- 架构"><a href="# 三、MEC- 架构" class="headerlink" title="三、MEC 架构"></a>三、MEC 架构 </h3><p><img src="/2021/04/16/5G-3-3/photo3.jpg" alt="MEC 架构"><br> 左边是 5G 核心网，右边是 MEC 架构（位于核心网和接入网之间，基于 NFV）<br>提供本地就近路由的分流，支持第三方应用的边缘应用环境<br>MEC 应用可以通过 MEP (MEC Platform) 发现服务成为消费者，自身也可以注册 MEC 服务的提供者<br>MEC System：提供业务编排，MEC 节点主机调用</p>
<h3 id="四、MEC- 部署方式"><a href="# 四、MEC- 部署方式" class="headerlink" title="四、MEC 部署方式"></a>四、MEC 部署方式 </h3><p><img src="/2021/04/16/5G-3-3/photo4.jpg" alt="MEC 部署方式"><br>5G 透过 UPF 在网络边缘灵活部署达成分流，UPF 是由核心网的控制面统一管理<br> 不同行业对边缘计算部署的位置要求不一样 <br> 区县级的：类似边缘云，可以给第三方提供边缘计算的服务 <br> 现场级的：一般是部署在运营商网络的接入点，和用户非常靠近</p>
<h3 id="五、MEC- 应用场景"><a href="# 五、MEC- 应用场景" class="headerlink" title="五、MEC 应用场景"></a>五、MEC 应用场景 </h3><h4 id="1- 本地分流（最普遍的应用场景）"><a href="#1- 本地分流（最普遍的应用场景）" class="headerlink" title="1. 本地分流（最普遍的应用场景）"></a>1. 本地分流（最普遍的应用场景）</h4><h5 id="（1）企业园区：本地产生，本地终结，低时延高带宽，专用 -LTE- 无线网络"><a href="#（1）企业园区：本地产生，本地终结，低时延高带宽，专用 -LTE- 无线网络" class="headerlink" title="（1）企业园区：本地产生，本地终结，低时延高带宽，专用 LTE 无线网络"></a>（1）企业园区：本地产生，本地终结，低时延高带宽，专用 LTE 无线网络</h5><h5 id="（2）校园：访问的内同相似性大，可以和第三方合作，例如行业咨询方案"><a href="#（2）校园：访问的内同相似性大，可以和第三方合作，例如行业咨询方案" class="headerlink" title="（2）校园：访问的内同相似性大，可以和第三方合作，例如行业咨询方案"></a>（2）校园：访问的内同相似性大，可以和第三方合作，例如行业咨询方案</h5><h5 id="（3）本地视频监控：会产生大量本地的回传流量，大部分的画面都是没有价值的"><a href="#（3）本地视频监控：会产生大量本地的回传流量，大部分的画面都是没有价值的" class="headerlink" title="（3）本地视频监控：会产生大量本地的回传流量，大部分的画面都是没有价值的"></a>（3）本地视频监控：会产生大量本地的回传流量，大部分的画面都是没有价值的</h5><p> 没有价值的画面保存在本地 MEC，有价值的才回传到服务器</p>
<h5 id="（4）VR-AR：博物馆、体育赛事，视频的流量大"><a href="#（4）VR-AR：博物馆、体育赛事，视频的流量大" class="headerlink" title="（4）VR/AR：博物馆、体育赛事，视频的流量大"></a>（4）VR/AR：博物馆、体育赛事，视频的流量大 </h5><h5 id="（5）本地视频直播：运营商可以提供一个 -MEC- 开放平台，提供视频直播应用，进行收入共享"><a href="#（5）本地视频直播：运营商可以提供一个 -MEC- 开放平台，提供视频直播应用，进行收入共享" class="headerlink" title="（5）本地视频直播：运营商可以提供一个 MEC 开放平台，提供视频直播应用，进行收入共享"></a>（5）本地视频直播：运营商可以提供一个 MEC 开放平台，提供视频直播应用，进行收入共享</h5><h5 id="（6）边缘 -CDN：针对移动用户"><a href="#（6）边缘 -CDN：针对移动用户" class="headerlink" title="（6）边缘 CDN：针对移动用户"></a>（6）边缘 CDN：针对移动用户</h5><h4 id="2- 数据服务（基于 -MEC- 开放接口，第三方可以利用底层信息，提供精准的营销服务）"><a href="#2- 数据服务（基于 -MEC- 开放接口，第三方可以利用底层信息，提供精准的营销服务）" class="headerlink" title="2. 数据服务（基于 MEC 开放接口，第三方可以利用底层信息，提供精准的营销服务）"></a>2. 数据服务（基于 MEC 开放接口，第三方可以利用底层信息，提供精准的营销服务）</h4><h5 id="（1）室内定位：根据用户实时的位置，提供定制化的广告，或是互动式的服务"><a href="#（1）室内定位：根据用户实时的位置，提供定制化的广告，或是互动式的服务" class="headerlink" title="（1）室内定位：根据用户实时的位置，提供定制化的广告，或是互动式的服务"></a>（1）室内定位：根据用户实时的位置，提供定制化的广告，或是互动式的服务</h5><h5 id="（2）车联网：实现自动驾驶，网络处理节点要离车辆很近"><a href="#（2）车联网：实现自动驾驶，网络处理节点要离车辆很近" class="headerlink" title="（2）车联网：实现自动驾驶，网络处理节点要离车辆很近"></a>（2）车联网：实现自动驾驶，网络处理节点要离车辆很近</h5><h4 id="3- 业务优化"><a href="#3- 业务优化" class="headerlink" title="3. 业务优化"></a>3. 业务优化</h4><h5 id="（1）视频 -QoS- 优化：不同用户需要的质量可能不一样"><a href="#（1）视频 -QoS- 优化：不同用户需要的质量可能不一样" class="headerlink" title="（1）视频 QoS 优化：不同用户需要的质量可能不一样"></a>（1）视频 QoS 优化：不同用户需要的质量可能不一样</h5><h5 id="（2）视频直播和游戏加速"><a href="#（2）视频直播和游戏加速" class="headerlink" title="（2）视频直播和游戏加速"></a>（2）视频直播和游戏加速</h5><h3 id="四、MEC- 实例"><a href="# 四、MEC- 实例" class="headerlink" title="四、MEC 实例"></a> 四、MEC 实例 </h3><h4 id="VR- 直播"><a href="#VR- 直播" class="headerlink" title="VR 直播"></a>VR 直播</h4><p><img src="/2021/04/16/5G-3-3/photo5.jpg" alt="VR 直播"><br> 透过本地 MEC 直接处理，不需要发给 Internet 处理</p>
<h4 id="港口视频監控"><a href="# 港口视频監控" class="headerlink" title="港口视频監控"></a>港口视频監控</h4><p><img src="/2021/04/16/5G-3-3/photo6.jpg" alt="港口视频監控"></p>
<h3 id="5G- 系列文章"><a href="#5G- 系列文章" class="headerlink" title="5G 系列文章"></a>5G 系列文章</h3><p><a href="https://wangxchun.github.io/2021/04/14/5G-1/">5G（一）5G 概述</a><br><a href="https://wangxchun.github.io/2021/04/14/5G-2-1/">5G（二）5G 网络架构 — 1. 核心网架构</a><br><a href="https://wangxchun.github.io/2021/04/14/5G-2-2/">5G（二）5G 网络架构 — 2. 接入网及网络部署</a><br><a href="https://wangxchun.github.io/2021/04/15/5G-3-1/">5G（三）5G 关键技术 — 1.NFV 网络功能虚拟化</a><br><a href="https://wangxchun.github.io/2021/04/15/5G-3-2/">5G（三）5G 关键技术 — 2.SDN 软件定义网络</a><br><a href="https://wangxchun.github.io/2021/04/16/5G-3-3/">5G（三）5G 关键技术 — 3.MEC 移动边缘计算</a><br><a href="https://wangxchun.github.io/2021/04/16/5G-3-4/">5G（三）5G 关键技术 — 4.Network Slicing 网络切片</a><br><a href="https://wangxchun.github.io/2021/04/16/5G-3-5/">5G（三）5G 关键技术 — 5.mmWave 毫米波</a><br><a href="https://wangxchun.github.io/2021/04/16/5G-3-6-1/">5G（三）5G 关键技术 — 6.Massive MIMO</a><br><a href="https://wangxchun.github.io/2021/04/17/5G-3-6-2/">5G（三）5G 关键技术 — 6.Massive MIMO 补充</a></p>
]]></content>
      <categories>
        <category>5G</category>
      </categories>
      <tags>
        <tag>5G</tag>
        <tag>MEC</tag>
        <tag>边缘计算</tag>
        <tag>室内定位</tag>
        <tag>车联网</tag>
        <tag>VR/AR</tag>
      </tags>
  </entry>
  <entry>
    <title>5G（三）5G 关键技术 -- 4.Network Slicing 网络切片</title>
    <url>/2021/04/16/5G-3-4/</url>
    <content><![CDATA[<h3 id="一、因为不同场景有不同需求"><a href="# 一、因为不同场景有不同需求" class="headerlink" title="一、因为不同场景有不同需求"></a>一、因为不同场景有不同需求</h3><p><img src="/2021/04/16/5G-3-4/photo1.jpg" alt></p>
<h4 id="如何实现"><a href="# 如何实现" class="headerlink" title="如何实现"></a>如何实现 </h4><p> 不同的虚拟网络可以共用相同的 5G 基础设施，<br>且不同的虚拟网络 (例如实现 uRLLC 的车联网) 可以由不同的虚拟运营商来提供。<br><img src="/2021/04/16/5G-3-4/photo2.jpg" alt><br><span id="more"></span></p>
<h4 id="以 -PDU-SESSION- 为单位"><a href="# 以 -PDU-SESSION- 为单位" class="headerlink" title="以 PDU SESSION 为单位"></a>以 PDU SESSION 为单位 </h4><p> 对于不同用户业务流量（Traffic），RAN 侧和 CN 测做不同的处理，<br>但是不同于 4G 中 “不同 traffic 不同的 treatment 原则”。</p>
<p>5G 中的网络切片，我们做了网络切片后的切片网络本质上我们需要当做一个网络去看待，<br>5G 中的一个网络切片（Slice）, 有唯一的 S-NSSAI 标识，<br>虽然多个网络切片可以运营在同一个物理网络之上，<br>但网络切片并不是我们传统意义上的对应 QOS 等级承载的概念，<br>5G 中的切片网络的粒度是以 PDU SESSION 为单位。</p>
<p>在 5G 网络中，PDU 连接业务就是用户设备 UE 和数据网络 DN 之间交换 PDU 数据包的业务，<br>PDU 连接业务通过 UE 或应用服务器 AF 发起 PDU 会话的建立来实现。<br>一个 PDU 会话是指一个用户终端 UE 与数据网络 DN 之间进行通讯的过程，<br>PDU 会话建立后，也就是建立了一条 UE 和 DN 的数据传输通道。<br>PDU 会话的类似于 2/3G 的 PDP 上下文、4G 的承载上下文。</p>
<h3 id="二、端到端网络切片的实现"><a href="# 二、端到端网络切片的实现" class="headerlink" title="二、端到端网络切片的实现"></a>二、端到端网络切片的实现 </h3><h4 id="1- 核心网切片"><a href="#1- 核心网切片" class="headerlink" title="1. 核心网切片"></a>1. 核心网切片</h4><p> 不同的切片根据不同的需求划分，例如 uRLLC 需要有自己的 UP NF<br><img src="/2021/04/16/5G-3-4/photo3.jpg" alt><br>终端申请网络切片，通过审核会提供可供选择的网络切片<br><img src="/2021/04/16/5G-3-4/photo4.jpg" alt></p>
<h4 id="2- 接入网切片"><a href="#2- 接入网切片" class="headerlink" title="2. 接入网切片"></a>2. 接入网切片</h4><h4 id="3- 传输网切片"><a href="#3- 传输网切片" class="headerlink" title="3. 传输网切片"></a>3. 传输网切片</h4><h4 id="4- 终端切片"><a href="#4- 终端切片" class="headerlink" title="4. 终端切片"></a>4. 终端切片</h4><h4 id="5- 切片管理系统"><a href="#5- 切片管理系统" class="headerlink" title="5. 切片管理系统"></a>5. 切片管理系统</h4><h3 id="5G- 系列文章"><a href="#5G- 系列文章" class="headerlink" title="5G 系列文章"></a>5G 系列文章</h3><p><a href="https://wangxchun.github.io/2021/04/14/5G-1/">5G（一）5G 概述</a><br><a href="https://wangxchun.github.io/2021/04/14/5G-2-1/">5G（二）5G 网络架构 — 1. 核心网架构</a><br><a href="https://wangxchun.github.io/2021/04/14/5G-2-2/">5G（二）5G 网络架构 — 2. 接入网及网络部署</a><br><a href="https://wangxchun.github.io/2021/04/15/5G-3-1/">5G（三）5G 关键技术 — 1.NFV 网络功能虚拟化</a><br><a href="https://wangxchun.github.io/2021/04/15/5G-3-2/">5G（三）5G 关键技术 — 2.SDN 软件定义网络</a><br><a href="https://wangxchun.github.io/2021/04/16/5G-3-3/">5G（三）5G 关键技术 — 3.MEC 移动边缘计算</a><br><a href="https://wangxchun.github.io/2021/04/16/5G-3-4/">5G（三）5G 关键技术 — 4.Network Slicing 网络切片</a><br><a href="https://wangxchun.github.io/2021/04/16/5G-3-5/">5G（三）5G 关键技术 — 5.mmWave 毫米波</a><br><a href="https://wangxchun.github.io/2021/04/16/5G-3-6-1/">5G（三）5G 关键技术 — 6.Massive MIMO</a><br><a href="https://wangxchun.github.io/2021/04/17/5G-3-6-2/">5G（三）5G 关键技术 — 6.Massive MIMO 补充</a></p>
]]></content>
      <categories>
        <category>5G</category>
      </categories>
      <tags>
        <tag>5G</tag>
        <tag>Network Slicing</tag>
        <tag>网络切片</tag>
      </tags>
  </entry>
  <entry>
    <title>5G（三）5G 关键技术 -- 5.mmWave 毫米波</title>
    <url>/2021/04/16/5G-3-5/</url>
    <content><![CDATA[<span id="more"></span>
<h3 id="5G- 系列文章"><a href="#5G- 系列文章" class="headerlink" title="5G 系列文章"></a>5G 系列文章 </h3><p><a href="https://wangxchun.github.io/2021/04/14/5G-1/">5G（一）5G 概述 </a><br><a href="https://wangxchun.github.io/2021/04/14/5G-2-1/">5G（二）5G 网络架构 — 1. 核心网架构 </a><br><a href="https://wangxchun.github.io/2021/04/14/5G-2-2/">5G（二）5G 网络架构 — 2. 接入网及网络部署 </a><br><a href="https://wangxchun.github.io/2021/04/15/5G-3-1/">5G（三）5G 关键技术 — 1.NFV 网络功能虚拟化 </a><br><a href="https://wangxchun.github.io/2021/04/15/5G-3-2/">5G（三）5G 关键技术 — 2.SDN 软件定义网络 </a><br><a href="https://wangxchun.github.io/2021/04/16/5G-3-3/">5G（三）5G 关键技术 — 3.MEC 移动边缘计算 </a><br><a href="https://wangxchun.github.io/2021/04/16/5G-3-4/">5G（三）5G 关键技术 — 4.Network Slicing 网络切片 </a><br><a href="https://wangxchun.github.io/2021/04/16/5G-3-5/">5G（三）5G 关键技术 — 5.mmWave 毫米波 </a><br><a href="https://wangxchun.github.io/2021/04/16/5G-3-6-1/">5G（三）5G 关键技术 — 6.Massive MIMO</a><br><a href="https://wangxchun.github.io/2021/04/17/5G-3-6-2/">5G（三）5G 关键技术 — 6.Massive MIMO 补充 </a></p>
]]></content>
      <categories>
        <category>5G</category>
      </categories>
      <tags>
        <tag>5G</tag>
        <tag>毫米波</tag>
      </tags>
  </entry>
  <entry>
    <title>5G（三）5G 关键技术 -- 6.Massive MIMO 补充</title>
    <url>/2021/04/17/5G-3-6-2/</url>
    <content><![CDATA[<h3 id="一、MIMO- 的来龙去脉"><a href="# 一、MIMO- 的来龙去脉" class="headerlink" title="一、MIMO 的来龙去脉"></a>一、MIMO 的来龙去脉 </h3><h4 id="1-MIMO- 的思路"><a href="#1-MIMO- 的思路" class="headerlink" title="1.MIMO 的思路"></a>1.MIMO 的思路</h4><p> 无线通信的技术进步动力有很大一部分是不断提高空口速率（例如：手机上传和下载的网速）。<br>提高网速的一条路径是增加带宽，从 2G 的 0.2MHz 增加到 5G 的 100MHz。<br>载波聚合 CA 技术也是一种变相增加带宽的技术（例如：4G 3CC 聚合，相当于 60M 带宽）。<br><img src="/2021/04/17/5G-3-6-2/photo1.jpg" alt><br>增加带宽的效果相当于：一个人徒手搬砖 -&gt; 一个人骑一台自行车搬砖，是让一个人搬砖的能力增加。<br>MIMO 的思路：找多个人来搬砖。<span id="more"></span></p>
<h4 id="2-MIMO- 多入多出 -：多天线技术"><a href="#2-MIMO- 多入多出 -：多天线技术" class="headerlink" title="2.MIMO (多入多出)：多天线技术"></a>2.MIMO (多入多出)：多天线技术 </h4><p><img src="/2021/04/17/5G-3-6-2/photo2.jpg" alt><br>MIMO：发射端和接收端都有多个天线<br> 多天线，并不是指有多个天线板。</p>
<h4 id="3- 对于基站来说，是指天线有多套振子，每一套振子都可以看成一个独立的天线。"><a href="#3- 对于基站来说，是指天线有多套振子，每一套振子都可以看成一个独立的天线。" class="headerlink" title="3. 对于基站来说，是指天线有多套振子，每一套振子都可以看成一个独立的天线。"></a>3. 对于基站来说，是指天线有多套振子，每一套振子都可以看成一个独立的天线。</h4><p>下左图中，天线板拆开可看到有四列，每一列有 2 套振子，所以总共有 8 套振子 = 有 8 个天线。<br>（每一列的 X 的一撇的方向是一套振子，另一个方向的撇是另一套振子）<br>下右图中，每一个小方块是一套振子，T 和 R 是发射和接收的意思<br><img src="/2021/04/17/5G-3-6-2/photo3.jpg" alt></p>
<h5 id="4- 手机也是多天线的"><a href="#4- 手机也是多天线的" class="headerlink" title="4. 手机也是多天线的"></a>4. 手机也是多天线的</h5><p>4G 手机是 2 天线的，5G 手机是 4 天线的</p>
<h3 id="二、MIMO- 实现效果的分类"><a href="# 二、MIMO- 实现效果的分类" class="headerlink" title="二、MIMO 实现效果的分类"></a>二、MIMO 实现效果的分类 </h3><h4 id="1- 空间分集：目的是提升手机的接收质量"><a href="#1- 空间分集：目的是提升手机的接收质量" class="headerlink" title="1. 空间分集：目的是提升手机的接收质量"></a>1. 空间分集：目的是提升手机的接收质量</h4><p> 采用多个天线发射或接收一个数据流，避免单个信道衰弱对整个链路的影响。<br><img src="/2021/04/17/5G-3-6-2/photo4.jpg" alt="空间分集"></p>
<h4 id="2- 空间复用：目的是提升网速"><a href="#2- 空间复用：目的是提升网速" class="headerlink" title="2. 空间复用：目的是提升网速"></a>2. 空间复用：目的是提升网速 </h4><p> 利用较大间距的天线振元之间或赋形波束之间的不相关性，向一个终端 / 基站并行发射多个数据流，以提高链路容量（数据率）<br><img src="/2021/04/17/5G-3-6-2/photo5.jpg" alt="空间复用"><br>    RANK<br>    RANK 可以理解成手机可以区分的信道数，和传输信道相关性有关。<br>    只有接收端能够区分不相关的两条独立信道，才能够实现空间复用。<br>    RANK=1，就是信道相关性很强，手机无法区分两路信道，只能发挥空间分集的效果。<br>    RANK=2，说明手机可以区分两路信道，可以发挥空间复用的效果，可以接收两路数据流。<br>    对于 4G 来说，RANK=1,2; 对于 5G 来说，RANk=1,2,3,4。</p>
<h4 id="3- 波束赋形（只支持 -TDD- 模式）（可以发送定向电磁波）"><a href="#3- 波束赋形（只支持 -TDD- 模式）（可以发送定向电磁波）" class="headerlink" title="3. 波束赋形（只支持 TDD 模式）（可以发送定向电磁波）"></a>3. 波束赋形（只支持 TDD 模式）（可以发送定向电磁波）</h4><h5 id="概念"><a href="# 概念" class="headerlink" title="概念"></a>概念 </h5><p> 利用较小间距的天线阵元之间的相关性，通过阵元发射的波之间形成干涉，集中能量于某个 (或某些) 特定的方向上，形成波束，从而实现更大的覆盖和干扰抑制效果。<br>在移动通信中，最早期的应用，是在 3G 技术 TD-SCDMA 系统当中。<br>理论上也支持 FDD 模式，但是实际应用还没有实现。<br><img src="/2021/04/17/5G-3-6-2/photo6.jpg" alt="2D 和 3D MIMO"><br><img src="/2021/04/17/5G-3-6-2/photo7.jpg" alt="5G NR 的波束赋形"><br>2D：用户手机是在水平面上移动的。<br><img src="/2021/04/17/5G-3-6-2/photo8.jpg" alt="传统天线和波束赋形"></p>
<h5 id="天线的要求"><a href="# 天线的要求" class="headerlink" title="天线的要求"></a>天线的要求</h5><p>(1) 空间分集 2T2R<br>(2) 空间复用 2T2R<br>(3) 波束成形<br>8T8R（最低标准）：TD-SCDMA 和 LTE（4 套振子形成一个波束）<br>16T16R 及以下：只支持 2D MIMO<br>32T32R 天线及以上：支持 3D MIMO</p>
<h5 id="波的干涉是波束赋形的技术发想"><a href="# 波的干涉是波束赋形的技术发想" class="headerlink" title="波的干涉是波束赋形的技术发想"></a>波的干涉是波束赋形的技术发想 </h5><p> 电磁波的相位是关键因素。<br>相位的改变，可以带来波束的形成，实际应用中，也伴随着幅度的变化。<br><img src="/2021/04/17/5G-3-6-2/photo9.jpg" alt="叠加"><br>    总结<br>    空间分集：发送多个相同数据，避免单个信道衰弱对整个链路的影响。<br>    空间复用：提升网速。<br>    波束赋形：多套振子形成定向的电磁波。<br>    如果单纯从提升信号质量的角度，波束赋形的效果比空间分集还要好。<br>    波束赋形如果发送两个波束，也可以实现空间复用的效果。</p>
<h4 id="4- 空分多地（目前在理论阶段，实际实现几乎没有）"><a href="#4- 空分多地（目前在理论阶段，实际实现几乎没有）" class="headerlink" title="4. 空分多地（目前在理论阶段，实际实现几乎没有）"></a>4. 空分多地（目前在理论阶段，实际实现几乎没有）</h4><h3 id="三、MIMO- 的信息处理流程"><a href="# 三、MIMO- 的信息处理流程" class="headerlink" title="三、MIMO 的信息处理流程"></a>三、MIMO 的信息处理流程 </h3><p><img src="/2021/04/17/5G-3-6-2/photo10.jpg" alt="MIMO 的信息处理流程"><br> 前述的空间分集、空间复用、波束成形都是在物理天线到手机的部分。</p>
<h4 id="1- 传输块"><a href="#1- 传输块" class="headerlink" title="1. 传输块"></a>1. 传输块 </h4><p> 传输块 TB：可以简单理解成要给用户发送的原始数据，其实就是一堆 0101000100<br>帧结构：4G 和 5G 一帧是 10ms，一个子帧 = 一个传输块 = 1ms<br>一个传输块 = 基站在 1ms 内要发送的数据。</p>
<h4 id="2- 码字"><a href="#2- 码字" class="headerlink" title="2. 码字"></a>2. 码字 </h4><p> 传输块 TB 经过信道编码，交织之后变成码字。一个码字就是一股数据流。</p>
<h4 id="3- 层映射"><a href="#3- 层映射" class="headerlink" title="3. 层映射"></a>3. 层映射 </h4><h5 id="层"><a href="# 层" class="headerlink" title="层"></a> 层</h5><p>以空间分集为例，一个码字的最后需要两条通道发射出去。因此，构造了层的概念，把原始数据与原始数据的另一个版本，分别放入层当中去，最后构造到天线那里发射出去。</p>
<h5 id="4G- 最多为 -4- 层，按照单码字和双码字，又有如下划分："><a href="#4G- 最多为 -4- 层，按照单码字和双码字，又有如下划分：" class="headerlink" title="4G 最多为 4 层，按照单码字和双码字，又有如下划分："></a>4G 最多为 4 层，按照单码字和双码字，又有如下划分：</h5><p><img src="/2021/04/17/5G-3-6-2/photo11.jpg" alt><br>实际上，LTE 宏站不管单双码字，都是使用双层。<br>一般来说，室内分布才会有单天线这种特殊情况。</p>
<h4 id="4- 预编码：层到天线端口的映射"><a href="#4- 预编码：层到天线端口的映射" class="headerlink" title="4. 预编码：层到天线端口的映射"></a>4. 预编码：层到天线端口的映射 </h4><p> 使用预编码矩阵将层 (layer) 映射到天线端口 (antenna port) 的过程，通过改变系数调整层数据传送到各个端口的比例。<br><img src="/2021/04/17/5G-3-6-2/photo14.jpg" alt><br>基站可以透过 RS 排布判断接收的信号是来自哪一个端口 <br>$y_1 = m_1X_1 + m_3X_2$<br>$y_2 = m_2X_1 + m_3X_2$<br><img src="/2021/04/17/5G-3-6-2/photo15.jpg" alt="用矩阵来表示"><br> 码本：预编码矩阵的组合。</p>
<h4 id="5- 天线端口"><a href="#5- 天线端口" class="headerlink" title="5. 天线端口"></a>5. 天线端口 </h4><p><img src="/2021/04/17/5G-3-6-2/photo12.jpg" alt><br><img src="/2021/04/17/5G-3-6-2/photo13.jpg" alt><br> 可以理解成逻辑通道，并不是实际的天线上的物理端口。<br>可以分为 1,2,4 端口，目前只使用单端口和双端口，单端口对应用室内分布，双端口应用于室外宏站。<br>一个逻辑端口可以对应一个物理端口，也可以对应多个物理端口。<br><img src="/2021/04/17/5G-3-6-2/photo16.jpg" alt></p>
<h3 id="四、LTE- 的传输模式 -TM"><a href="# 四、LTE- 的传输模式 -TM" class="headerlink" title="四、LTE 的传输模式 TM"></a>四、LTE 的传输模式 TM</h3><h4 id="室内分布可能是单天线模式 - 左图 -，也可能是多天线模式 - 右图"><a href="# 室内分布可能是单天线模式 - 左图 -，也可能是多天线模式 - 右图" class="headerlink" title="室内分布可能是单天线模式 (左图)，也可能是多天线模式 (右图)"></a>室内分布可能是单天线模式 (左图)，也可能是多天线模式 (右图)</h4><p><img src="/2021/04/17/5G-3-6-2/photo17.jpg" alt></p>
<h4 id="TM2、TM3-TM4、TM7-YM8"><a href="#TM2、TM3-TM4、TM7-YM8" class="headerlink" title="TM2、TM3/TM4、TM7/YM8"></a>TM2、TM3/TM4、TM7/YM8</h4><p><img src="/2021/04/17/5G-3-6-2/photo18.jpg" alt></p>
<h4 id="TM3- 和 -TM4- 的区别"><a href="#TM3- 和 -TM4- 的区别" class="headerlink" title="TM3 和 TM4 的区别"></a>TM3 和 TM4 的区别</h4><p><img src="/2021/04/17/5G-3-6-2/photo20.jpg" alt><br>PMI：预编码矩阵指示<br>TM4：不只一种选择，手机可以建议基站使用某种预编码矩阵来给手机发信息。<br>（反馈就会有延迟，高速移动时延迟会严重影响接收）</p>
<h4 id="TM7- 和 -TM8- 的区别"><a href="#TM7- 和 -TM8- 的区别" class="headerlink" title="TM7 和 TM8 的区别"></a>TM7 和 TM8 的区别</h4><p>TM7：提高接收质量，但是没有提升网速的效果。</p>
<h4 id="总结"><a href="# 总结" class="headerlink" title="总结"></a>总结 </h4><p> 可以实现网速翻倍的模式：TM3、TM4、TM8<br>可以提升接收质量：TM2、TM7<br>无任何变化：TM1<br>网速排名 (用户低速)：TM8&gt;TM4&gt;TM3&gt;TM7&gt;TM2&gt;TM1</p>
<h4 id="LTE- 中实现真正的双流"><a href="#LTE- 中实现真正的双流" class="headerlink" title="LTE 中实现真正的双流"></a>LTE 中实现真正的双流 </h4><p>TM3、TM4、TM8：基站可以发双流<br>Rank2：手机能够区分两路信道<br>Rank2 + TM3/TM4/TM8 = 双流<br> 比如：Rank1 + TM3 = 就是单流</p>
<h4 id="LTE- 中 -TM- 模式的变化"><a href="#LTE- 中 -TM- 模式的变化" class="headerlink" title="LTE 中 TM 模式的变化"></a>LTE 中 TM 模式的变化 </h4><p> 通过 UE 反馈，基站选择一种 TM 模式，发送信息，反馈可以是 CQI/RANK/PMI<br>CQI 是信道质量指示：表示的是下行信号质量情况，从 SINR 计算而得出。<br>协议没有规定 SINR 和 CQI 之间的关系，由芯片厂家自行算法决定。</p>
]]></content>
      <categories>
        <category>5G</category>
      </categories>
      <tags>
        <tag>5G</tag>
        <tag>Massive MIMO</tag>
        <tag>MIMO</tag>
      </tags>
  </entry>
  <entry>
    <title>5G（三）5G 关键技术 -- 6.Massive MIMO</title>
    <url>/2021/04/16/5G-3-6-1/</url>
    <content><![CDATA[<h3 id="一、Massive-MIMO-Spatial-Multiplexing-beamforming"><a href="# 一、Massive-MIMO-Spatial-Multiplexing-beamforming" class="headerlink" title="一、Massive MIMO = Spatial Multiplexing + beamforming"></a>一、Massive MIMO = Spatial Multiplexing + beamforming</h3><h4 id="1- 香浓公式"><a href="#1- 香浓公式" class="headerlink" title="1. 香浓公式"></a>1. 香浓公式 </h4><p>$\displaystyle C=N \cdot B \log_2 (1+{S \over N})$<br>5G 的一个重要目标：增加系统带宽 (增加容量或是提高速率)<br>N：多个通信的通道（多通道 -&gt; 空间复用 -&gt;MIMO）<br>B：信道带宽（大带宽 -&gt; 毫米波 -&gt; 波束形成 beamforming）<br>$S \over N$：信噪比（高接收功率 -&gt; 高发射增益 -&gt; 波束形成 beamforming）<br> 毫米波的劣势：抗衰减能力差，所以也有增大发射功率的需求 <span id="more"></span><br>$\displaystyle P_r = P_t {G_tG_r \lambda^2 \over (4 \pi R)^2}$<br>增大接收功率 $P_r$ 的方法：<br>增大发射功率 $P_t$：有限制 <br> 缩短基站到终端的距离 (密集的基站部署)：成本太高 <br> 增大波长：低频带宽不够 <br> 增大接收增益：有困难 <br> 增大发射增益：可行 -&gt; 基站的天线数量增加</p>
<h4 id="2-Massive-MIMO- 的定义"><a href="#2-Massive-MIMO- 的定义" class="headerlink" title="2.Massive MIMO 的定义"></a>2.Massive MIMO 的定义</h4><p>Massive MIMO 利用 MIMO 技术并使用数十根甚至上百根天线将传统 MIMO 天线系统扩展为大规模天线阵列，从而利用大规模天线阵列所提供的波束赋形技术聚焦传输和接收信号的能量到有限区域，来提高能量效率和传输距离，并利用 MIMO 的空间复用技术提高传输速率。</p>
<h3 id="三、Beamforming- 的特点及优势"><a href="# 三、Beamforming- 的特点及优势" class="headerlink" title="三、Beamforming 的特点及优势"></a>三、Beamforming 的特点及优势</h3><p><img src="/2021/04/16/5G-3-6-1/photo1.jpg" alt></p>
<h4 id="1- 降低基站功率"><a href="#1- 降低基站功率" class="headerlink" title="1. 降低基站功率"></a>1. 降低基站功率 </h4><h4 id="2- 降低时延"><a href="#2- 降低时延" class="headerlink" title="2. 降低时延"></a>2. 降低时延</h4><h4 id="3- 抵抗干扰"><a href="#3- 抵抗干扰" class="headerlink" title="3. 抵抗干扰"></a>3. 抵抗干扰</h4><h4 id="4- 提高数据传输速率"><a href="#4- 提高数据传输速率" class="headerlink" title="4. 提高数据传输速率"></a>4. 提高数据传输速率</h4><h4 id="5- 增大小区范围"><a href="#5- 增大小区范围" class="headerlink" title="5. 增大小区范围"></a>5. 增大小区范围</h4><h3 id="四、Beamforming- 和 -Beam-steering- 原理"><a href="# 四、Beamforming- 和 -Beam-steering- 原理" class="headerlink" title="四、Beamforming 和 Beam steering 原理"></a> 四、Beamforming 和 Beam steering 原理 </h3><pre><code> 并列的多个振天线振子可以使发射信号形成方向性 -- 波束赋形（beamforming）
（均匀向各个方向扩散，变成集中向某个方向发射）
多个振子之间的相对相位改变使发射信号的方向变化 -- 波束导向（beam steering）
</code></pre><h4 id="Beamforming- 原理"><a href="#Beamforming- 原理" class="headerlink" title="Beamforming 原理"></a>Beamforming 原理 </h4><p><img src="/2021/04/16/5G-3-6-1/photo2.jpg" alt><br><img src="/2021/04/16/5G-3-6-1/photo3.jpg" alt><br> 纵向方向信号增强，垂直方向信号减弱。<br>纵向方向信号减弱，垂直方向信号增强。<br>结论：通过增加振子，并排列摆放方向，可以调整信号传输方向。并且振子的相位不同，信号增强和减弱的方向也不同。</p>
<h4 id="Beamforming- 波束"><a href="#Beamforming- 波束" class="headerlink" title="Beamforming 波束"></a>Beamforming 波束 </h4><p> 两个振子之间的距离是 $\displaystyle {\lambda \over 2}$ 的时候，得到最大的主瓣 <br><img src="/2021/04/16/5G-3-6-1/photo4.jpg" alt><br><img src="/2021/04/16/5G-3-6-1/photo5.jpg" alt><br><img src="/2021/04/16/5G-3-6-1/photo6.jpg" alt><br> 多个振子之间的距离越大，会使主瓣越窄 <br><img src="/2021/04/16/5G-3-6-1/photo7.jpg" alt><br><img src="/2021/04/16/5G-3-6-1/photo8.jpg" alt><br><img src="/2021/04/16/5G-3-6-1/photo9.jpg" alt><br> 振子数量越多，主瓣功率越大，虽然主瓣功率变大，但是旁瓣所占的比例也变大 <br><img src="/2021/04/16/5G-3-6-1/photo10.jpg" alt><br><img src="/2021/04/16/5G-3-6-1/photo11.jpg" alt><br><img src="/2021/04/16/5G-3-6-1/photo12.jpg" alt><br> 结论：在设计波束赋形系统的时候，要使得主瓣的强度和宽度都合适</p>
<h4 id="Beam-steering- 原理"><a href="#Beam-steering- 原理" class="headerlink" title="Beam steering 原理"></a>Beam steering 原理</h4><p><img src="/2021/04/16/5G-3-6-1/photo13.jpg" alt><br><img src="/2021/04/16/5G-3-6-1/photo14.jpg" alt><br><img src="/2021/04/16/5G-3-6-1/photo15.jpg" alt></p>
<h4 id="3D-Beamforming"><a href="#3D-Beamforming" class="headerlink" title="3D-Beamforming"></a>3D-Beamforming</h4><p><img src="/2021/04/16/5G-3-6-1/photo16.jpg" alt></p>
<h4 id="Beamforming- 过程"><a href="#Beamforming- 过程" class="headerlink" title="Beamforming 过程"></a>Beamforming 过程 </h4><p><img src="/2021/04/16/5G-3-6-1/photo17.jpg" alt><br> 形成波束 -&gt; 波束方向改变 -&gt; 抑制波瓣</p>
<h4 id="Beamforming- 类型"><a href="#Beamforming- 类型" class="headerlink" title="Beamforming 类型"></a>Beamforming 类型 </h4><p>Beamforming = 多天线 + 改变相位<br> 改变相位可以用模拟方式，也可以用数字方式 <br> 模拟方式：移向器；数字方式：基带编码<br><img src="/2021/04/16/5G-3-6-1/photo18.jpg" alt><br>Q: 为什么要用混合的</p>
<h5 id="Beamforming-digital"><a href="#Beamforming-digital" class="headerlink" title="Beamforming-digital"></a>Beamforming-digital</h5><p><img src="/2021/04/16/5G-3-6-1/photo19.jpg" alt="Beamforming-digital"><br><img src="/2021/04/16/5G-3-6-1/photo20.jpg" alt="Beamforming-digital"><br>两个天线可以用四种波束赋形的方式，如图所示<br>index=1，相位相差 90 度，波束角度就是 30 度<br>index=2，相位相差 180 度，</p>
<h5 id="Beamforming-analog"><a href="#Beamforming-analog" class="headerlink" title="Beamforming-analog"></a>Beamforming-analog</h5><p><img src="/2021/04/16/5G-3-6-1/photo21.jpg" alt="Beamforming-analog"></p>
<h5 id="Beamforming-hybrid"><a href="#Beamforming-hybrid" class="headerlink" title="Beamforming-hybrid"></a>Beamforming-hybrid</h5><p>在数字侧不管 Beamforming，只做 Multiplexing 和 MIMO，使得 recording 发挥优势<br><img src="/2021/04/16/5G-3-6-1/photo22.jpg" alt="Beamforming-hybrid"></p>
<h3 id="5G- 系列文章"><a href="#5G- 系列文章" class="headerlink" title="5G 系列文章"></a>5G 系列文章</h3><p><a href="https://wangxchun.github.io/2021/04/14/5G-1/">5G（一）5G 发展历程</a><br><a href="https://wangxchun.github.io/2021/04/14/5G-2/">5G（二）5G 应用场景</a><br><a href="https://wangxchun.github.io/2021/04/14/5G-3/">5G（三）5G 性能指标</a><br><a href="https://wangxchun.github.io/2021/04/14/5G-4-1/">5G（四）5G 网络架构 — 1. 核心网架构</a><br><a href="https://wangxchun.github.io/2021/04/14/5G-4-2/">5G（四）5G 网络架构 — 2. 接入网及网络部署</a><br><a href="https://wangxchun.github.io/2021/04/15/5G-5-1/">5G（五）5G 关键技术 — 1.NFV 网络功能虚拟化</a><br><a href="https://wangxchun.github.io/2021/04/15/5G-5-2/">5G（五）5G 关键技术 — 2.SDN 软件定义网络</a><br><a href="https://wangxchun.github.io/2021/04/16/5G-5-3/">5G（五）5G 关键技术 — 3.MEC 移动边缘计算</a><br><a href="https://wangxchun.github.io/2021/04/16/5G-5-4/">5G（五）5G 关键技术 — 4.Network Slicing 网络切片</a><br><a href="https://wangxchun.github.io/2021/04/16/5G-5-5/">5G（五）5G 关键技术 — 5.mmWave 毫米波</a><br><a href="https://wangxchun.github.io/2021/04/16/5G-5-6/">5G（五）5G 关键技术 — 6.Massive MIMO</a><br><a href="https://wangxchun.github.io/2021/04/17/5G-5-6-2/">5G（五）5G 关键技术 — 6.Massive MIMO 补充</a></p>
]]></content>
      <categories>
        <category>5G</category>
      </categories>
      <tags>
        <tag>5G</tag>
        <tag>Massive MIMO</tag>
        <tag>MIMO</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 的 RALL 实现</title>
    <url>/2018/10/27/C++%20RALL/</url>
    <content><![CDATA[<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10000000</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int32_t</span> *ptr = <span class="keyword">new</span> <span class="keyword">int32_t</span> [<span class="number">3</span>];</span><br><span class="line">		ptr [<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">		ptr [<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">		ptr [<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">		<span class="keyword">delete</span> ptr;     <span class="comment">// 假设忘记了释放内存，会消耗大量内存</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">system</span> (<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>RALL 机制便是通过利用对象的自动销毁，使得资源也具有了生命周期，有了自动销毁（自动回收）的功能。<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">auto_release_ptr</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">auto_release_ptr</span> (T *t) :<span class="keyword">_t</span> (t)&#123;&#125;;</span><br><span class="line">	~<span class="built_in">auto_release_ptr</span> ()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">delete</span> <span class="keyword">_t</span>;</span><br><span class="line">	&#125;;</span><br><span class="line"> </span><br><span class="line">	<span class="function">T * <span class="title">getPtr</span> <span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">_t</span>;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	T *<span class="keyword">_t</span>;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10000000</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">auto</span> arp = auto_release_ptr&lt;<span class="keyword">int32_t</span>&gt;(<span class="keyword">new</span> <span class="keyword">int32_t</span> [<span class="number">3</span>]);</span><br><span class="line">		<span class="keyword">int32_t</span> *ptr = arp.<span class="built_in">getPtr</span> ();</span><br><span class="line">		<span class="comment">//auto_release_ptr 有一个数据成员在构造时完成了初始化并指向了 new 出来的空间</span></span><br><span class="line">		ptr [<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">		ptr [<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">		ptr [<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">system</span> (<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>更多的如智能指针，lock_guard 都利用了 RALL 机制来实现。</p>
<h3 id="C-learing- 总览"><a href="#C-learing- 总览" class="headerlink" title="C++ learing 总览"></a>C++ learing 总览 </h3><p><a href="https://wangxchun.github.io/2019/03/17/C++%20rounding/">C++ 四舍五入</a><br><a href="https://wangxchun.github.io/2019/03/16/C++%20get-out-each-digit-of-the-number/">C++ 取出一個數的每一位</a><br><a href="https://wangxchun.github.io/2019/03/14/C++%20rand/">C++ 利用 rand () 產生隨機數</a><br><a href="https://wangxchun.github.io/2018/11/05/C++%20small-summary/">C++ 小知识点总结</a><br><a href="https://wangxchun.github.io/2018/10/28/C++%20explain-a-sentence/">C++ 解釋一個語句</a><br><a href="https://wangxchun.github.io/2018/10/27/C++%20include/">C++ #include</a><br><a href="https://wangxchun.github.io/2018/10/27/C++%20RALL/">C++ RALL</a><br><a href="https://wangxchun.github.io/2018/09/23/C++%20operator/">C++ 运算符</a><br><a href="https://wangxchun.github.io/2018/09/27/C++%20universal-header-files/">C++ 万能标头档</a><br><a href="https://wangxchun.github.io/2018/09/27/Dev%20C++11/"> 讓 Dev C++ 支持 C++11</a></p>
]]></content>
      <categories>
        <category>C++ learn</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>RALL</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ advance（四）Linux 命令基础 --1.Linux 常用命令</title>
    <url>/2021/04/14/C++%20advance4.1/</url>
    <content><![CDATA[<p>包括 linux 基本命令，用户管理，vi 使用，安装卸载软件，网络配置管理</p>
<h3 id="一、Linux- 介绍和 -Linux- 目录结构"><a href="# 一、Linux- 介绍和 -Linux- 目录结构" class="headerlink" title="一、Linux 介绍和 Linux 目录结构"></a>一、Linux 介绍和 Linux 目录结构 </h3><h4 id="1-UNIX"><a href="#1-UNIX" class="headerlink" title="1.UNIX"></a>1.UNIX</h4><p> 创始人：Ken Thompson 和 Dennis Ritchie<br>主要分支和发展方向：IBM-AIX、HP-UX、solaris、BSD、linux<br><span id="more"></span></p>
<h4 id="2-GNU- 组织（GNU’s-Not-Unix）"><a href="#2-GNU- 组织（GNU’s-Not-Unix）" class="headerlink" title="2.GNU 组织（GNU’s Not Unix）"></a>2.GNU 组织（GNU’s Not Unix）</h4><p>创始人：Richard Matthew Stallman<br>主旨：倡导自由软件 <br> 协议：GPL（General Public License）<br>主要产品：GCC、Emacs、Bash Shell、GLIBC、linux<br>标准：POSIX<br>    UNIX 用的是 Steve Bourne 在 1977 年发明的 Bourne Shell<br>    linux 用的默认是它的扩展：Bourne Again Shell（bash）</p>
<h4 id="3-linux"><a href="#3-linux" class="headerlink" title="3.linux"></a>3.linux</h4><h5 id="创始人：Linus-Torvalds"><a href="# 创始人：Linus-Torvalds" class="headerlink" title="创始人：Linus Torvalds"></a>创始人：Linus Torvalds</h5><h5 id="发行版本：Ubuntu、Redhat、CentOS"><a href="# 发行版本：Ubuntu、Redhat、CentOS" class="headerlink" title="发行版本：Ubuntu、Redhat、CentOS"></a>发行版本：Ubuntu、Redhat、CentOS</h5><h5 id="学习内容"><a href="# 学习内容" class="headerlink" title="学习内容"></a>学习内容 </h5><p>shell<br> 编辑器 vim<br>编译器 GCC<br>gdb 调试 <br> 制作静态库和共享库 <br> 项目工程管理 <br> 系统编程（API）：文件 IO、文件目录、进程、信号、网络、线程</p>
<h4 id="4-shell"><a href="#4-shell" class="headerlink" title="4.shell"></a>4.shell</h4><h5 id="shell- 是什么"><a href="#shell- 是什么" class="headerlink" title="shell 是什么"></a>shell 是什么 </h5><p> 打开终端，就获得一个 shell，可以输入各种命令</p>
<h5 id="shell- 家族"><a href="#shell- 家族" class="headerlink" title="shell 家族"></a>shell 家族 </h5><p>/bin/sh（已经被 /bin/bash 取代）<br>/bin/bash（就是 Linux 默认的 shell）<br>/bin/ksh（Korshell 由 AT&amp;T Bell lab 发展出来的）<br>/bin/tcsh（整合 C shell，提供更多功能）<br>/bin/csh（已经被 /bin/tcsh 所取代）<br>/bin/zsh（基于 ksh 发展出来的，功能更强大的 shell）<br> 查看系统配置 shell<br><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cat <span class="regexp">/etc/</span>shells</span><br><span class="line">echo <span class="variable">$SHELL</span></span><br></pre></td></tr></table></figure></p>
<h4 id="5- 目录结构"><a href="#5- 目录结构" class="headerlink" title="5. 目录结构"></a>5. 目录结构</h4><p>/ 根目录<br>/bin 可执行文件所在的目录<br>/media 挂载设备媒体、U 盘、光驱等<br>/mnt 让用户挂载别的文件系统<br>/usr unix system resources 庞大复杂的目录，很多应用会安装到此目录<br>/usr/local 用户自己安装软件的目录<br>/sbin 超级管理员 root 的可执行文件目录<br>/proc 这个目录是系统内存的映射，会保留进程运行的一些消息<br>/etc 系统软件的启动和配置目录<br>/etc/passwd 用户存放文件（man 5 passwd 查看）<br>/dev 设备文件所在目录<br>/home/user 用户家目录</p>
<h4 id="6- 常用命令"><a href="#6- 常用命令" class="headerlink" title="6. 常用命令"></a>6. 常用命令 </h4><p>ls 查看文件夹内容<br>history 查看历史记录<br> 可以方向键上下查看之前的命令</p>
<h3 id="二、Linux- 下的绝对路径和相对路径"><a href="# 二、Linux- 下的绝对路径和相对路径" class="headerlink" title="二、Linux 下的绝对路径和相对路径"></a>二、Linux 下的绝对路径和相对路径 </h3><p> 绝对路径：以 “/“ 开头 <br> 相对路径：以 “.” 或者 “..” 开头的路径，”.” 代表当前路径，”..” 代表上一级路径</p>
<h3 id="三、文件和目录操作相关命令"><a href="# 三、文件和目录操作相关命令" class="headerlink" title="三、文件和目录操作相关命令"></a>三、文件和目录操作相关命令</h3><h4 id="1- 代表意思"><a href="#1- 代表意思" class="headerlink" title="1. 代表意思"></a>1. 代表意思</h4><p>bob@ubuntu:~/linux$<br>bob 代表用户<br>ubuntu 代表机器名<br>~ 代表家目录<br>/linux 代表当前所在目录<br>$ 代表是普通用户（sudo su 切换到管理员，输入当前用户的密码）<br># 代表管理员用户</p>
<h4 id="2- 目录相关"><a href="#2- 目录相关" class="headerlink" title="2. 目录相关"></a>2. 目录相关 </h4><h5 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h5><p>-a 查看全部文件，包含文件名前带 “.” 的隐藏文件<br>-l 查看文件的详细信息<br>-R 递归查看子目录的文件信息<br>-lrt 文件按照修改时间排序<br> 通配符 <br> 任意多字符：*<br>任意一个字符：？<br><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ls</span> *<span class="string">.c</span></span><br></pre></td></tr></table></figure></p>
<h5 id="cd（change-dir- 更改目录）"><a href="#cd（change-dir- 更改目录）" class="headerlink" title="cd（change dir 更改目录）"></a>cd（change dir 更改目录）</h5><p>回到家目录的方式：<br>cd /home/user<br>cd ~<br>cd<br>cd $HOME（$HOME 是环境变量）<br>回到上一次所在的目录：cd -</p>
<h5 id="pwd- 打印当前工作目录"><a href="#pwd- 打印当前工作目录" class="headerlink" title="pwd 打印当前工作目录"></a>pwd 打印当前工作目录</h5><h5 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h5><p>mkdir dir1 [dir2]<br>mkdir -p dir1/dir2 递归创建目录</p>
<h5 id="tree-dir- 树状显示目录"><a href="#tree-dir- 树状显示目录" class="headerlink" title="tree [dir] 树状显示目录"></a>tree [dir] 树状显示目录</h5><p>sudo apt-get install tree</p>
<h5 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h5><p>删除的目录必须为空目录 <br>rm dir<br> 空目录定义：只包含 “.” 和 “..” 的目录<br>rmdir -rf dir 如果 dir2 删除后，dir1 为空，那么会递归删除<br>-r 向下递归，一并删除<br>-f 强行删除，不做提示</p>
<h5 id="which- 查看命令所在的目录"><a href="#which- 查看命令所在的目录" class="headerlink" title="which 查看命令所在的目录"></a>which 查看命令所在的目录</h5><p>which ls 查看 ls 命令所在的目录<br>（cd 命令是 bash 自身带的命令，所以不在任何一个目录下）</p>
<h4 id="3- 文件相关"><a href="#3- 文件相关" class="headerlink" title="3. 文件相关"></a>3. 文件相关 </h4><h5 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h5><p>touch file 创建文件，如果文件存在则更新文件最后访问时间<br> 可以用 ls -lrt 看文件的访问时间</p>
<h5 id="rm-1"><a href="#rm-1" class="headerlink" title="rm"></a>rm</h5><p>rm filename<br>rm -r dir 递归删除子目录<br>rm -rf * 删除当前目录的全部文件和目录</p>
<h5 id="cp- 拷贝文件或是目录"><a href="#cp- 拷贝文件或是目录" class="headerlink" title="cp 拷贝文件或是目录"></a>cp 拷贝文件或是目录 </h5><p>cp src des<br> 如果 des 最后一级的内容是目录，那么则将 src 拷贝到该目录下 <br> 如果 des 最后一级的内容不是目录…/aa/xxx，在 des 上级目录 /aa 下创建一个文件 xxx，并将 src 的内容拷贝过来<br>cp -r src des 将 src 这个目录拷贝到 des 目录下</p>
<h5 id="mv- 移动文件或是目录"><a href="#mv- 移动文件或是目录" class="headerlink" title="mv 移动文件或是目录"></a>mv 移动文件或是目录</h5><p>mv src des 重命名文件或者目录<br>mv src des 移动文件或目录到其他目录（des 是一个路径）<br>mv src des 移动并改名（des 是其他路径下的文件名）</p>
<h4 id="4- 文件内容"><a href="#4- 文件内容" class="headerlink" title="4. 文件内容"></a>4. 文件内容 </h4><h5 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h5><p>cat file 将文件内容显示到终端<br> 如果无文件，则读入标准输入，遇到回车显示</p>
<h5 id="more"><a href="#more" class="headerlink" title="more"></a>more</h5><p>more file 分屏查看文件，空格显示下一屏，回车显示下一行内容</p>
<h5 id="less"><a href="#less" class="headerlink" title="less"></a>less</h5><p>less file 分屏显示，可以用方向键控制上下翻</p>
<h5 id="head"><a href="#head" class="headerlink" title="head"></a>head</h5><p>head -n file 显示文件前 n 行，如果不加 - n 则默认显示前 10 行</p>
<h5 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h5><p>tail -n file 显示文件末尾 n 行，如果不加 - n 则默认显示末尾 10 行<br>tail -f file 查看文件尾部内容，不退出，用于追踪日志</p>
<h4 id="5- 统计信息"><a href="#5- 统计信息" class="headerlink" title="5. 统计信息"></a>5. 统计信息</h4><h5 id="tree"><a href="#tree" class="headerlink" title="tree"></a>tree</h5><p>tree file 树形显示目录结构</p>
<h5 id="wc（words-cout- 统计文件内容）"><a href="#wc（words-cout- 统计文件内容）" class="headerlink" title="wc（words cout 统计文件内容）"></a>wc（words cout 统计文件内容）</h5><p>wc * 统计整个目录<br>wc file 默认显示：行数 单词数 字节数<br>wc -l 显示行数<br>wc -w 显示单词数<br>wc -c 显示字节数</p>
<h5 id="du- 打印出子目录大小"><a href="#du- 打印出子目录大小" class="headerlink" title="du 打印出子目录大小"></a>du 打印出子目录大小</h5><p>du -h 更适合人类观察<br>du -h —max-depth=1 只一级子目录大小</p>
<h5 id="df"><a href="#df" class="headerlink" title="df"></a>df</h5><p>df -h 显示磁盘使用情形<br>df -h —block-size=GB 按照 GB 统计显示<br><img src="/2021/04/14/C++%20advance4.1/photo1.png" alt></p>
<h3 id="四、修改文件权限、用户与用户组相关命令"><a href="# 四、修改文件权限、用户与用户组相关命令" class="headerlink" title="四、修改文件权限、用户与用户组相关命令"></a>四、修改文件权限、用户与用户组相关命令 </h3><h4 id="修改文件权限、用户与用户组相关命令"><a href="# 修改文件权限、用户与用户组相关命令" class="headerlink" title="修改文件权限、用户与用户组相关命令"></a> 修改文件权限、用户与用户组相关命令 </h4><h5 id="ls-l- 显示文件信息"><a href="#ls-l- 显示文件信息" class="headerlink" title="ls -l 显示文件信息"></a>ls -l 显示文件信息</h5><p>drwxr-xr-x 3 bob bob 4096 5 月 14 18：16 MAKE<br>-rw-r—r— 1 bob bob<br>（1）MAKE 是一个目录，目录的大小一般默认是 4096<br>（2）5 月 14 18：16 是时间<br>（3）bob bob 是用户和组<br> 用户比较多的时候可以分组管理，默认情况下一个用户就是一个组 <br>（4）drwxr-xr-x 是文件权限的标志位<br> 总共 10 位，第 1 位是文件类型，后 9 位每三位一组，是文件的权限 <br> 文件类型：- 是普通文件，d 是目录文件 <br> 前 3 位：归属用户的权限 <br> 中 3 位：归属组的权限 <br> 后 3 位：其他用户的权限<br>r 可读，w 可写，x 可执行</p>
<blockquote>
<p>权限位数字表示法（8 进制数）：<br>rw- 110 6<br>r— 100 4<br>r— 100 4<br>三个数连起来前面 + 0<br>-&gt; 0644</p>
</blockquote>
<p>（5）3 是硬连接计数</p>
<h5 id="ln- 建立软硬连接"><a href="#ln- 建立软硬连接" class="headerlink" title="ln 建立软硬连接"></a>ln 建立软硬连接</h5><p>ln -s src des 建立软连接（软连接：相当于建立一个快捷方式）<br>ln src des 建立硬连接（硬连接：让两个文件占用同一个磁盘块上的内容）<br>unlink filename 删除引用计数和文件，当引用计数为 0 时，文件删除<br>stat file 可以查看文件的 inode 信息</p>
<h5 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h5><p>chmod [u|g|o|a] [+|-] [r|w|x] file 可以用 + 或 - 来增加或减少权限 <br>chmod -x file 如果不加用户和组等信息，则默认是 a，代表全部<br>chmod 9644 file 按照数字表示法设置权限位<br> 常用情景：创建一个 shell 文件的时候，默认没有可执行权限，利用 chmod 改变权限 <br> 目录的可执行权限就是用户可以 cd 进入目录</p>
<h5 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h5><p>sudo chown user:group file 可以修改 file 的所有者和所属组<br>sudo chown user file 只修改所有者</p>
<h5 id="chgrp"><a href="#chgrp" class="headerlink" title="chgrp"></a>chgrp</h5><p>sudo chgrp groupname file 修改文件所属组</p>
<h5 id="whoami- 显示当前用户"><a href="#whoami- 显示当前用户" class="headerlink" title="whoami 显示当前用户"></a>whoami 显示当前用户 </h5><h3 id="五、find- 命令参数进行文件查找"><a href="# 五、find- 命令参数进行文件查找" class="headerlink" title="五、find 命令参数进行文件查找"></a> 五、find 命令参数进行文件查找 </h3><h4 id="1- 按文件名查询 -name"><a href="#1- 按文件名查询 -name" class="headerlink" title="1. 按文件名查询 -name"></a>1. 按文件名查询 -name</h4><h5 id="find-path-name-file"><a href="#find-path-name-file" class="headerlink" title="find path -name file"></a>find path -name file</h5><h5 id="例子：find-home-name-a-txt"><a href="# 例子：find-home-name-a-txt" class="headerlink" title="例子：find /home -name a.txt"></a> 例子：find /home -name a.txt</h5><h4 id="2- 按文件大小查询 -size"><a href="#2- 按文件大小查询 -size" class="headerlink" title="2. 按文件大小查询 -size"></a>2. 按文件大小查询 -size</h4><h5 id="fing- 路径 -size- 范围"><a href="#fing- 路径 -size- 范围" class="headerlink" title="fing 路径 -size 范围"></a>fing 路径 -size 范围 </h5><p> 范围：大于 + 表示，小于 - 表示，等于不需要添加符号 <br> 大小：M 必须大写，k 必须小写</p>
<h5 id="例子："><a href="# 例子：" class="headerlink" title="例子："></a>例子：</h5><p>等于 100k 的文件：find ~/-size 100k<br>大于 100k 的文件：find ~/-size +100k<br>大于 50k，小于 100k 的文件：find ~/-size +50k -size -100k<br>只显示下一层路径的：find ./-maxdepth 1 -size +1M<br>查找的结果传递给后面的参数（显示详细信息）：find ./-maxdepth 1 -size +1M -exec ls -l {} \;<br>查找的结果传递给后面的参数的安全模式：find ./-maxdepth 1 -size +1M -ok ls -l {} \;</p>
<h4 id="3- 按文件类型查询 -type"><a href="#3- 按文件类型查询 -type" class="headerlink" title="3. 按文件类型查询 -type"></a>3. 按文件类型查询 -type</h4><h5 id="find- 路径 -type- 类型"><a href="#find- 路径 -type- 类型" class="headerlink" title="find 路径 -type 类型"></a>find 路径 -type 类型</h5><p>f 普通文件类型<br>d 目录<br>l 符号链接<br>b 块设备文件<br>c 字符设备文件<br>s socket 文件<br>p 管道</p>
<h5 id="例子：-1"><a href="# 例子：-1" class="headerlink" title="例子："></a>例子：</h5><p>find /home -type d</p>
<h4 id="4-find- 命令的好搭档 -xargs"><a href="#4-find- 命令的好搭档 -xargs" class="headerlink" title="4.find 命令的好搭档 |xargs"></a>4.find 命令的好搭档 |xargs</h4><p>-exec 是将 find 查找的结果一下子全部传给后面的指令，若过多容易造成后面的指令溢出<br>|xargs 会将 find 查找的结果分成若干块输出给后面的指令<br>find ./-type l|xargs ls -l</p>
<h3 id="六、grep- 命令根据文件内容进行查找"><a href="# 六、grep- 命令根据文件内容进行查找" class="headerlink" title="六、grep 命令根据文件内容进行查找"></a>六、grep 命令根据文件内容进行查找 </h3><h4 id="按文件内容查找（与 -find- 的不同处：不用加路径）"><a href="# 按文件内容查找（与 -find- 的不同处：不用加路径）" class="headerlink" title="按文件内容查找（与 find 的不同处：不用加路径）"></a> 按文件内容查找（与 find 的不同处：不用加路径）</h4><p>grep -r 查找内容 [对应文件]（-r 递归查找）</p>
<h5 id="例子"><a href="# 例子" class="headerlink" title="例子"></a>例子</h5><p>grep -rn “main” *.c（输出查找结果所在行号）</p>
<h4 id="过滤输出结果"><a href="# 过滤输出结果" class="headerlink" title="过滤输出结果"></a>过滤输出结果</h4><p>|grep 内容<br>|grep -v 内容（排除的内容）</p>
<h5 id="例子：-2"><a href="# 例子：-2" class="headerlink" title="例子："></a>例子：</h5><p>find ./-type f|grep txt<br>cat test.c |grep main<br>tail -f tcpsvr.1705 |grep connect</p>
<h3 id="七、压缩工具完成文件目录的压缩和解压缩"><a href="# 七、压缩工具完成文件目录的压缩和解压缩" class="headerlink" title="七、压缩工具完成文件目录的压缩和解压缩"></a>七、压缩工具完成文件目录的压缩和解压缩 </h3><h4 id="zip- 压缩命令"><a href="#zip- 压缩命令" class="headerlink" title="zip 压缩命令"></a>zip 压缩命令</h4><p> 打包：zip -r dir.zip dir（-r 包含子目录）<br>解包：unzip dir.zip<br>压缩文件的默认权限是 664</p>
<h5 id="例子 -1"><a href="# 例子 -1" class="headerlink" title="例子"></a>例子</h5><p>zip -r aa.zip aa hello</p>
<h4 id="rar"><a href="#rar" class="headerlink" title="rar"></a>rar</h4><p>rar a -r newdir dir（a 代表压缩，-r 是递归子目录）（rar 指令自动添加后缀）<br>rar x newdir.rar</p>
<h4 id="gzip- 和 -gunzip"><a href="#gzip- 和 -gunzip" class="headerlink" title="gzip 和 gunzip"></a>gzip 和 gunzip</h4><h5 id="tar- 最常用的打包工具 -tar-gz"><a href="#tar- 最常用的打包工具 -tar-gz" class="headerlink" title="tar 最常用的打包工具 .tar.gz"></a>tar 最常用的打包工具 .tar.gz</h5><p>-c 压缩文件<br>-v 显示信息<br>-f 指定压缩包名<br>-x 解开压缩文件<br>-z gz 格式压缩</p>
<h5 id="只压缩不打包"><a href="# 只压缩不打包" class="headerlink" title="只压缩不打包"></a>只压缩不打包</h5><p>tar -cvf dir.tar dir 打包<br>tar xvf dir.tar 解包</p>
<h5 id="打包并压缩 -gz- 格式"><a href="# 打包并压缩 -gz- 格式" class="headerlink" title="打包并压缩 gz 格式"></a>打包并压缩 gz 格式</h5><p>tar -zcvf dir.tar.gz dir 打包<br>tar zxvf dir.tar.gz 解包</p>
<h5 id="打包并压缩 -bzip2- 格式"><a href="# 打包并压缩 -bzip2- 格式" class="headerlink" title="打包并压缩 bzip2 格式"></a>打包并压缩 bzip2 格式</h5><p>-j 选项，其余和 tar 一致<br>tar -jcvf dir.tar.bzip2 dir<br>tar -xjvf dir.tar.bzip2</p>
<h3 id="七、虚拟机网络配置（VMWare- 范例）"><a href="# 七、虚拟机网络配置（VMWare- 范例）" class="headerlink" title="七、虚拟机网络配置（VMWare 范例）"></a>七、虚拟机网络配置（VMWare 范例）</h3><h4 id="1- 虚拟机网络连接"><a href="#1- 虚拟机网络连接" class="headerlink" title="1. 虚拟机网络连接"></a>1. 虚拟机网络连接 </h4><h5 id="桥接模式：虚拟机相当于一台电脑，和本地连接同一级 -IP- 段"><a href="# 桥接模式：虚拟机相当于一台电脑，和本地连接同一级 -IP- 段" class="headerlink" title="桥接模式：虚拟机相当于一台电脑，和本地连接同一级 IP 段"></a> 桥接模式：虚拟机相当于一台电脑，和本地连接同一级 IP 段</h5><h5 id="NAT- 模式：本地主机通过 -VMNET8- 网卡连接到虚拟机，要求 -VMNET8- 和虚拟机同一个网段"><a href="#NAT- 模式：本地主机通过 -VMNET8- 网卡连接到虚拟机，要求 -VMNET8- 和虚拟机同一个网段" class="headerlink" title="NAT 模式：本地主机通过 VMNET8 网卡连接到虚拟机，要求 VMNET8 和虚拟机同一个网段"></a>NAT 模式：本地主机通过 VMNET8 网卡连接到虚拟机，要求 VMNET8 和虚拟机同一个网段</h5><h4 id="2-secureCRT"><a href="#2-secureCRT" class="headerlink" title="2.secureCRT"></a>2.secureCRT</h4><h5 id="secureCRT- 是什么"><a href="#secureCRT- 是什么" class="headerlink" title="secureCRT 是什么"></a>secureCRT 是什么</h5><p>SecureCRT 是一款支持 SSH2、SSH1、Telnet、Telnet/SSH、Relogin、Serial、TAPI、RAW 等协议的终端仿真程序。简单的说是 Windows 下登录 UNIX、Linux 服务器主机的软件。SecureCRT 支持 SSH，同时支持 Telnet 和 rlogin 协议。</p>
<h5 id="设置"><a href="# 设置" class="headerlink" title="设置"></a>设置 </h5><p>secureCRT 协议，选择 SSH2<br>secureFX 协议，选择 SFTP<br> 并设置一个会话名词 <br> 登入之后可以再做一些设置，一般把字符编码改成 UTF-8<br>会话选项 - 终端 - 仿真 - Linux</p>
<h3 id="八、Ubuntu- 下的软件安装和卸载"><a href="# 八、Ubuntu- 下的软件安装和卸载" class="headerlink" title="八、Ubuntu 下的软件安装和卸载"></a>八、Ubuntu 下的软件安装和卸载 </h3><h4 id="apt-get- 自动安装软件，需要知道软件名称"><a href="#apt-get- 自动安装软件，需要知道软件名称" class="headerlink" title="apt-get 自动安装软件，需要知道软件名称"></a>apt-get 自动安装软件，需要知道软件名称</h4><p>sudo apt-get update 更新源<br> 更新的是 /etc/apt 下的 source.list<br>sudo apt-get install tree 安装<br>sudo apt-get remove tree 卸载<br>udo apt-get clean 清理包</p>
<h4 id="dpkg- 根据 -deb- 安装包来自动安装软件"><a href="#dpkg- 根据 -deb- 安装包来自动安装软件" class="headerlink" title="dpkg 根据 deb 安装包来自动安装软件"></a>dpkg 根据 deb 安装包来自动安装软件</h4><p>sudo dpkg -i xxx.deb 安装软件包<br>sudo dpkg -r xxx.deb 删除软件包</p>
<h4 id="源码安装"><a href="# 源码安装" class="headerlink" title="源码安装"></a>源码安装 </h4><h5 id="（1）解压缩源代码包"><a href="#（1）解压缩源代码包" class="headerlink" title="（1）解压缩源代码包"></a>（1）解压缩源代码包</h5><h5 id="（2）cd-dir"><a href="#（2）cd-dir" class="headerlink" title="（2）cd dir"></a>（2）cd dir</h5><h5 id="（3）-configure"><a href="#（3）-configure" class="headerlink" title="（3）./configure"></a>（3）./configure</h5><p> 检测文件是否缺失，创建 Makefile，检测编译环境</p>
<h5 id="（4）make"><a href="#（4）make" class="headerlink" title="（4）make"></a>（4）make</h5><p>编译源码，生成库和可执行程序</p>
<h5 id="（5）sudo-make-install"><a href="#（5）sudo-make-install" class="headerlink" title="（5）sudo make install"></a>（5）sudo make install</h5><p>把库和可执行程序，安装到系统路径 /usr/local/bin 下</p>
<h5 id="（6）sudo-make-distclean"><a href="#（6）sudo-make-distclean" class="headerlink" title="（6）sudo make distclean"></a>（6）sudo make distclean</h5><p>删除和卸载软件</p>
<h3 id="九、磁盘管理（了解）"><a href="# 九、磁盘管理（了解）" class="headerlink" title="九、磁盘管理（了解）"></a>九、磁盘管理（了解）</h3><h3 id="十、进程管理（后续）"><a href="# 十、进程管理（后续）" class="headerlink" title="十、进程管理（后续）"></a>十、进程管理（后续）</h3><h3 id="十一、用户管理（了解）"><a href="# 十一、用户管理（了解）" class="headerlink" title="十一、用户管理（了解）"></a>十一、用户管理（了解）</h3><h4 id="创建用户 -sudo-useradd"><a href="# 创建用户 -sudo-useradd" class="headerlink" title="创建用户 sudo useradd"></a>创建用户 sudo useradd</h4><p>-s 指定 shell<br>-g 指定组<br>-d 用户家目录<br>-m 家目录不存在时，自动创建<br>sudo useradd -s /bin/bash -g itcast -d /home/bob -m bob </p>
<h4 id="设置用户组 -sudo-groupadd"><a href="# 设置用户组 -sudo-groupadd" class="headerlink" title="设置用户组 sudo groupadd"></a>设置用户组 sudo groupadd</h4><p>sudo groupadd bob 增加 bob 用户组</p>
<h4 id="设置密码"><a href="# 设置密码" class="headerlink" title="设置密码"></a>设置密码</h4><p>sudo passwd bob 设置 bob 用户的密码</p>
<h4 id="切换用户 -su"><a href="# 切换用户 -su" class="headerlink" title="切换用户 su"></a>切换用户 su</h4><p>su ken 切换到 ken 用户<br>su -ken 切换到 ken 用户，带有环境变量</p>
<h4 id="root- 用户"><a href="#root- 用户" class="headerlink" title="root 用户"></a>root 用户</h4><p>sudo su</p>
<h3 id="十二、网络管理（后续）"><a href="# 十二、网络管理（后续）" class="headerlink" title="十二、网络管理（后续）"></a>十二、网络管理（后续）</h3><h3 id="十三、其他常用命令"><a href="# 十三、其他常用命令" class="headerlink" title="十三、其他常用命令"></a>十三、其他常用命令 </h3><h3 id="十四、关机重启（需要 -root- 权限）"><a href="# 十四、关机重启（需要 -root- 权限）" class="headerlink" title="十四、关机重启（需要 root 权限）"></a> 十四、关机重启（需要 root 权限）</h3><p>shotdown -h now 立即关机<br>init () 关机<br>power off 关机<br>reboot 重启</p>
<h3 id="十五、提问"><a href="# 十五、提问" class="headerlink" title="十五、提问"></a>十五、提问 </h3><p>find ./-size -1M 找不到文件<br>find ./-size -3M 找到文件<br> 为什么？因为可能不足 1M 的文件被按照 1M 计</p>
<h3 id="C-advance- 文章总览"><a href="#C-advance- 文章总览" class="headerlink" title="C++ advance 文章总览"></a>C++ advance 文章总览</h3><p><a href="https://wangxchun.github.io/2021/04/14/C++%20advance4.1/">C++ advance（四）Linux 命令基础 —1.Linux 常用命令</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance4.2/">C++ advance（四）Linux 命令基础 —2.vim 和 gcc 和 library</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance4.3/">C++ advance（四）Linux 命令基础 —3.makefile 和 gdb 和 IO</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance4.4/">C++ advance（四）Linux 命令基础 —4.stat 和 readdir 和 dup2</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advanc5.1/">C++ advance（五）Linux 进程和线程 —1. 进程控制</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.2/">C++ advance（五）Linux 进程和线程 —2. 进程间通信</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.3/">C++ advance（五）Linux 进程和线程 —3. 信号</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.4/">C++ advance（五）Linux 进程和线程 —4. 进程和线程</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.5/">C++ advance（五）Linux 进程和线程 —5. 线程同步</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.1/">C++ advance（六）Linux 高并发网络编程开发 —1. 网络编程基础 socket</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.2/">C++ advance（六）Linux 高并发网络编程开发 —2.tcp 三次握手 - 并发</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.3/">C++ advance（六）Linux 高并发网络编程开发 —3.tcp 状态转换 - selcet poll</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.4/">C++ advance（六）Linux 高并发网络编程开发 —4.epoll udp</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.5/">C++ advance（六）Linux 高并发网络编程开发 —5. 广播 - 组播 - 本地套接字</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.6">C++ advance（六）Linux 高并发网络编程开发 —6.libevent</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.7">C++ advance（六）Linux 高并发网络编程开发 —7.xml json</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance7.1">C++ advance（七）Linux 高并发 web 服务器开发 —1.</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance7.2">C++ advance（七）Linux 高并发 web 服务器开发 —2.</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance7.3">C++ advance（七）Linux 高并发 web 服务器开发 —3.</a></p>
]]></content>
      <categories>
        <category>C++ advance</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>常用命令</tag>
        <tag>命令基础</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ advance（四）Linux 命令基础 --2.vim 和 gcc 和 library</title>
    <url>/2021/04/16/C++%20advance4.2/</url>
    <content><![CDATA[<h3 id="一、vim"><a href="# 一、vim" class="headerlink" title="一、vim"></a>一、vim</h3><h4 id="1-vim- 简介"><a href="#1-vim- 简介" class="headerlink" title="1.vim 简介"></a>1.vim 简介</h4><p>vi 是 “visual interface” 的简称。<br>vim 更高级一些，可以理解是 vi 的高级版本。<br>vim 需要自行安装，在 shell 中输入 vimtutor 命令可以查看相关的帮助文档。<span id="more"></span></p>
<h4 id="2-vim- 三种模式"><a href="#2-vim- 三种模式" class="headerlink" title="2.vim 三种模式"></a>2.vim 三种模式 </h4><h4 id="3- 命令模式"><a href="#3- 命令模式" class="headerlink" title="3. 命令模式"></a>3. 命令模式</h4><h5 id="移动光标"><a href="# 移动光标" class="headerlink" title="移动光标"></a> 移动光标</h5><p>H 左 L 右 J 上 K 下<br>0 移动到行首<br>shift+4 ($) 移动到行尾<br>gg 移动到文件首部<br>GG 移动到文件尾部<br>nG 移动到文件第 n 行</p>
<h5 id="删除操作"><a href="# 删除操作" class="headerlink" title="删除操作"></a>删除操作</h5><p>x 删除光标所在字符<br>X 删除光标前的字符<br>dw 删除单词（从光标开始删）<br>d0 删除行首到光标前的内容<br>d$ 删除行尾到光标的内容 (D)<br>dd 删除光标所在一整行<br>ndd 删除光标所在行开始 n 行</p>
<h5 id="撤销动作"><a href="# 撤销动作" class="headerlink" title="撤销动作"></a>撤销动作</h5><p>u 撤销动作<br>ctrl+r 反撤销</p>
<h5 id="复制黏贴"><a href="# 复制黏贴" class="headerlink" title="复制黏贴"></a>复制黏贴</h5><p>yy 复制一行<br>p 将剪贴板内容黏贴到光标所在行的下一行<br>P 将剪贴板内容黏贴到光标所在行<br>r 替换光标所在字符为 r 之后输入的字符</p>
<h5 id="可视模式"><a href="# 可视模式" class="headerlink" title="可视模式"></a>可视模式</h5><p>v 进入可视模式，移动光标到目的地<br>y 复制<br>d 删除 (剪切)<br>p 黏贴 光标位置直接黏贴<br>P 黏贴 光标之前位置直接黏贴</p>
<h5 id="查找操作"><a href="# 查找操作" class="headerlink" title="查找操作"></a>查找操作 </h5><p>/string 从文件顶部查找文件内所有的 string<br>?string 从文件底部查找文件内所有的 string<br> 将光标移到要查找的字符串上后按 #，查找文件内所有该字符串<br>n/N 进行遍历（如果是从头开始查找，n 就是向后）</p>
<h5 id="格式化操作"><a href="# 格式化操作" class="headerlink" title="格式化操作"></a>格式化操作</h5><p>>> 光标所在行右移一个 tab<br>&lt;&lt; 光标所在行左移一个 tab<br>n&gt;&gt; 光标开始 n 行右移一个 tab<br>n&lt;&lt; 光标开始 n 行左移一个 tab<br>gg=G 文件整体调整格式</p>
<h5 id="查看 -man"><a href="# 查看 -man" class="headerlink" title="查看 man"></a>查看 man</h5><p>光标移动到函数位置，按 K 切换到 man 帮助页，按 nK 可以到 man page 的第 n 页查看该函数</p>
<h4 id="4- 切换到编辑模式 -a-i-o-s"><a href="#4- 切换到编辑模式 -a-i-o-s" class="headerlink" title="4. 切换到编辑模式 a/i/o/s"></a>4. 切换到编辑模式 a/i/o/s</h4><p>i 光标前插入<br>a 光标后插入<br>l 行首插入<br>A 行尾插入<br>o 当前光标下一行开始编辑<br>O 当前光标上一行开始编辑<br>s 删除当前光标内容<br>S 删除当前行</p>
<h4 id="5- 切换到末行模式 -“-”"><a href="#5- 切换到末行模式 -“-”" class="headerlink" title="5. 切换到末行模式 “:”"></a>5. 切换到末行模式 “:”</h4><h5 id="执行命令"><a href="# 执行命令" class="headerlink" title="执行命令"></a>执行命令</h5><p>!ls -l</p>
<h5 id="查找替换"><a href="# 查找替换" class="headerlink" title="查找替换"></a>查找替换</h5><p>:s/src/des 只替换改行第一个 src 为 des<br>:s/src/des/g 替换该行全部 src 为 des<br>:% s/src/des 替换文件内所有行第一个 src 为 des<br>:% s/src/des/g 替换文件内所有 src 为 des</p>
<h5 id="保存退出"><a href="# 保存退出" class="headerlink" title="保存退出"></a>保存退出</h5><p>:w 保存<br>:wq 保存后退出<br>:q 退出，只有文件没有变化才能退出<br>:q! 强制退出不保存<br>:x 相当于 wq<br>ZZ 命令模式下的保存退出</p>
<h5 id="vi- 分屏"><a href="#vi- 分屏" class="headerlink" title="vi 分屏"></a>vi 分屏 </h5><p> 横分 :sp filename<br>竖分 :vsp filename<br>退出<br>:q 退出一个文件<br>:qall 全部文件都退出<br>:wqall 全部保存退出</p>
<h5 id="command- 末行模式下执行 -shell- 命令"><a href="#command- 末行模式下执行 -shell- 命令" class="headerlink" title="!command 末行模式下执行 shell 命令"></a>!command 末行模式下执行 shell 命令 </h5><h3 id="注释"><a href="# 注释" class="headerlink" title="注释"></a> 注释 </h3><p> 如果非正常关闭了文件。再次打开的时候会提示 E325: 注意发现交换文件 “filename.swp”<br>(1) 另一个程序可能也在编辑同一个文件。<br>如果是这样，修改时请注意避免同一个文件产生两个不同的版本。<br>退出，或小心地继续。<br>(2) 文件非正常关闭 <br> 在用 vim 打开一个文件时，其会产生一个 cmd.swap 文件，用于保存数据，当文件非正常关闭时，可用此文件来恢复，当正常关闭时，此文件会被删除，非正常关闭时，不会被删除，所以提示存在.swap 文件。<br><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vim -r .filename.swp<span class="regexp">//</span> 恢复文件</span><br><span class="line">rm -f .filename.swp<span class="regexp">//</span> 删除交换文件</span><br></pre></td></tr></table></figure></p>
<h3 id="C-advance- 文章总览"><a href="#C-advance- 文章总览" class="headerlink" title="C++ advance 文章总览"></a>C++ advance 文章总览</h3><p><a href="https://wangxchun.github.io/2021/04/14/C++%20advance4.1/">C++ advance（四）Linux 命令基础 —1.Linux 常用命令</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance4.2/">C++ advance（四）Linux 命令基础 —2.vim 和 gcc 和 library</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance4.3/">C++ advance（四）Linux 命令基础 —3.makefile 和 gdb 和 IO</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance4.4/">C++ advance（四）Linux 命令基础 —4.stat 和 readdir 和 dup2</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advanc5.1/">C++ advance（五）Linux 进程和线程 —1. 进程控制</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.2/">C++ advance（五）Linux 进程和线程 —2. 进程间通信</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.3/">C++ advance（五）Linux 进程和线程 —3. 信号</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.4/">C++ advance（五）Linux 进程和线程 —4. 进程和线程</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.5/">C++ advance（五）Linux 进程和线程 —5. 线程同步</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.1/">C++ advance（六）Linux 高并发网络编程开发 —1. 网络编程基础 socket</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.2/">C++ advance（六）Linux 高并发网络编程开发 —2.tcp 三次握手 - 并发</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.3/">C++ advance（六）Linux 高并发网络编程开发 —3.tcp 状态转换 - selcet poll</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.4/">C++ advance（六）Linux 高并发网络编程开发 —4.epoll udp</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.5/">C++ advance（六）Linux 高并发网络编程开发 —5. 广播 - 组播 - 本地套接字</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.6">C++ advance（六）Linux 高并发网络编程开发 —6.libevent</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.7">C++ advance（六）Linux 高并发网络编程开发 —7.xml json</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance7.1">C++ advance（七）Linux 高并发 web 服务器开发 —1.</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance7.2">C++ advance（七）Linux 高并发 web 服务器开发 —2.</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance7.3">C++ advance（七）Linux 高并发 web 服务器开发 —3.</a></p>
]]></content>
      <categories>
        <category>C++ advance</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>vim</tag>
        <tag>gcc</tag>
        <tag>库</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ advance（四）Linux 命令基础 --3.makefile 和 gdb 和 IO</title>
    <url>/2021/04/16/C++%20advance4.3/</url>
    <content><![CDATA[<h3 id="一、makefile"><a href="# 一、makefile" class="headerlink" title="一、makefile"></a>一、makefile</h3><h4 id="1-makefile- 的基本规则"><a href="#1-makefile- 的基本规则" class="headerlink" title="1.makefile 的基本规则"></a>1.makefile 的基本规则</h4><h4 id="2-makefile- 的工作原理"><a href="#2-makefile- 的工作原理" class="headerlink" title="2.makefile 的工作原理"></a>2.makefile 的工作原理</h4><h4 id="3-makefile- 中的变量"><a href="#3-makefile- 中的变量" class="headerlink" title="3.makefile 中的变量"></a>3.makefile 中的变量</h4><h4 id="4-makefile- 函数"><a href="#4-makefile- 函数" class="headerlink" title="4.makefile 函数"></a>4.makefile 函数</h4><h4 id="5-makefile- 的清理操作"><a href="#5-makefile- 的清理操作" class="headerlink" title="5.makefile 的清理操作"></a>5.makefile 的清理操作</h4><span id="more"></span>
<h3 id="二、gdb- 调试"><a href="# 二、gdb- 调试" class="headerlink" title="二、gdb 调试"></a>二、gdb 调试 </h3><h4 id="1-gdb- 调试"><a href="#1-gdb- 调试" class="headerlink" title="1.gdb 调试"></a>1.gdb 调试</h4><h4 id="2- 生成调试信息"><a href="#2- 生成调试信息" class="headerlink" title="2. 生成调试信息"></a>2. 生成调试信息</h4><h4 id="3- 启动 -gdb"><a href="#3- 启动 -gdb" class="headerlink" title="3. 启动 gdb"></a>3. 启动 gdb</h4><h4 id="4- 显示源代码"><a href="#4- 显示源代码" class="headerlink" title="4. 显示源代码"></a>4. 显示源代码</h4><h4 id="5- 设置断点"><a href="#5- 设置断点" class="headerlink" title="5. 设置断点"></a>5. 设置断点</h4><h4 id="6- 调试代码"><a href="#6- 调试代码" class="headerlink" title="6. 调试代码"></a>6. 调试代码</h4><h3 id="三、"><a href="# 三、" class="headerlink" title="三、"></a> 三、</h3><p>操作文件操作符就相当于操作这个文件，就像 C++ 中的 fopen 返回一个 FILE 指针，操作这个指针就相当于操作这个</p>
<h3 id="C-advance- 文章总览"><a href="#C-advance- 文章总览" class="headerlink" title="C++ advance 文章总览"></a>C++ advance 文章总览</h3><p><a href="https://wangxchun.github.io/2021/04/14/C++%20advance4.1/">C++ advance（四）Linux 命令基础 —1.Linux 常用命令</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance4.2/">C++ advance（四）Linux 命令基础 —2.vim 和 gcc 和 library</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance4.3/">C++ advance（四）Linux 命令基础 —3.makefile 和 gdb 和 IO</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance4.4/">C++ advance（四）Linux 命令基础 —4.stat 和 readdir 和 dup2</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advanc5.1/">C++ advance（五）Linux 进程和线程 —1. 进程控制</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.2/">C++ advance（五）Linux 进程和线程 —2. 进程间通信</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.3/">C++ advance（五）Linux 进程和线程 —3. 信号</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.4/">C++ advance（五）Linux 进程和线程 —4. 进程和线程</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.5/">C++ advance（五）Linux 进程和线程 —5. 线程同步</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.1/">C++ advance（六）Linux 高并发网络编程开发 —1. 网络编程基础 socket</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.2/">C++ advance（六）Linux 高并发网络编程开发 —2.tcp 三次握手 - 并发</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.3/">C++ advance（六）Linux 高并发网络编程开发 —3.tcp 状态转换 - selcet poll</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.4/">C++ advance（六）Linux 高并发网络编程开发 —4.epoll udp</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.5/">C++ advance（六）Linux 高并发网络编程开发 —5. 广播 - 组播 - 本地套接字</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.6">C++ advance（六）Linux 高并发网络编程开发 —6.libevent</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.7">C++ advance（六）Linux 高并发网络编程开发 —7.xml json</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance7.1">C++ advance（七）Linux 高并发 web 服务器开发 —1.</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance7.2">C++ advance（七）Linux 高并发 web 服务器开发 —2.</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance7.3">C++ advance（七）Linux 高并发 web 服务器开发 —3.</a></p>
]]></content>
      <categories>
        <category>C++ advance</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>makefile</tag>
        <tag>gdb</tag>
        <tag>IO</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ advance（四）Linux 命令基础 --4.stat 和 readdir 和 dup2</title>
    <url>/2021/04/16/C++%20advance4.4/</url>
    <content><![CDATA[<span id="more"></span>
<h3 id="C-advance- 文章总览"><a href="#C-advance- 文章总览" class="headerlink" title="C++ advance 文章总览"></a>C++ advance 文章总览 </h3><p><a href="https://wangxchun.github.io/2021/04/14/C++%20advance4.1/">C++ advance（四）Linux 命令基础 —1.Linux 常用命令 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance4.2/">C++ advance（四）Linux 命令基础 —2.vim 和 gcc 和 library</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance4.3/">C++ advance（四）Linux 命令基础 —3.makefile 和 gdb 和 IO</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance4.4/">C++ advance（四）Linux 命令基础 —4.stat 和 readdir 和 dup2</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advanc5.1/">C++ advance（五）Linux 进程和线程 —1. 进程控制 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.2/">C++ advance（五）Linux 进程和线程 —2. 进程间通信 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.3/">C++ advance（五）Linux 进程和线程 —3. 信号 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.4/">C++ advance（五）Linux 进程和线程 —4. 进程和线程 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.5/">C++ advance（五）Linux 进程和线程 —5. 线程同步 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.1/">C++ advance（六）Linux 高并发网络编程开发 —1. 网络编程基础 socket</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.2/">C++ advance（六）Linux 高并发网络编程开发 —2.tcp 三次握手 - 并发 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.3/">C++ advance（六）Linux 高并发网络编程开发 —3.tcp 状态转换 - selcet poll</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.4/">C++ advance（六）Linux 高并发网络编程开发 —4.epoll udp</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.5/">C++ advance（六）Linux 高并发网络编程开发 —5. 广播 - 组播 - 本地套接字 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.6">C++ advance（六）Linux 高并发网络编程开发 —6.libevent</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.7">C++ advance（六）Linux 高并发网络编程开发 —7.xml json</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance7.1">C++ advance（七）Linux 高并发 web 服务器开发 —1.</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance7.2">C++ advance（七）Linux 高并发 web 服务器开发 —2.</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance7.3">C++ advance（七）Linux 高并发 web 服务器开发 —3.</a></p>
]]></content>
      <categories>
        <category>C++ advance</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>stat</tag>
        <tag>readdir</tag>
        <tag>dup2</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ advance（五）Linux 进程和线程 --1. 进程控制</title>
    <url>/2021/04/16/C++%20advance5.1/</url>
    <content><![CDATA[<h3 id="一、进程的相关概念"><a href="# 一、进程的相关概念" class="headerlink" title="一、进程的相关概念"></a>一、进程的相关概念 </h3><h4 id="1- 程序和进程"><a href="#1- 程序和进程" class="headerlink" title="1. 程序和进程"></a>1. 程序和进程</h4><h5 id="程序"><a href="# 程序" class="headerlink" title="程序"></a> 程序 </h5><p> 编译好的二进制文件</p>
<h5 id="进程"><a href="# 进程" class="headerlink" title="进程"></a>进程 </h5><p> 运行中的程序 <br> 站在程序员的角度：运行一系列指令的过程 <br> 站在操作系统的角度：分配系统资源 (CPU 和内存) 的基本单位</p>
<h5 id="区别"><a href="# 区别" class="headerlink" title="区别"></a>区别 </h5><p> 程序占用磁盘，不占用系统资源 <br> 进程占用系统资源 <br> 一个程序对应多个进程，一个进程对应一个程序 <br> 程序没有生命周期，进程有生命周期</p>
<h4 id="2- 并发和并行"><a href="#2- 并发和并行" class="headerlink" title="2. 并发和并行"></a>2. 并发和并行 </h4><p> 并发，在一个时间段内，在同一个 cpu 上，同时运行多个程序。<br>并行，指两个或两个以上的程序在同一时刻发生 (需要有多颗 CPU)</p>
<h4 id="3- 单道 - 多道程序设计"><a href="#3- 单道 - 多道程序设计" class="headerlink" title="3. 单道 / 多道程序设计"></a>3. 单道 / 多道程序设计 </h4><p> 单道：DOS<br>多道：多个进程，微观上串行，宏观上并行</p>
<h4 id="4-CPU- 和 -MMU"><a href="#4-CPU- 和 -MMU" class="headerlink" title="4.CPU 和 MMU"></a>4.CPU 和 MMU</h4><p><img src="/2021/04/16/C++%20advance5.1/photo1.png" alt><br>举例：32 位的电脑，256M 的物理内存虚拟出 4G 的寻址空间 <br><img src="/2021/04/16/C++%20advance5.1/photo3.png" alt><br>MMU 的功能：<br>(1) 虚拟内存和物理内存的映射<br>(2) 修改内存访问级别<br> 用户空间映射到物理内存是独立的，否则对应到相同虚拟地址的两个不同的进程，如果映射到相同的物理地址，进程 1 的用户可以操控进程 2。但是内核空间是映射到同样地址，否则进程间就没办法通信。</p>
<h4 id="5- 进程状态转换"><a href="#5- 进程状态转换" class="headerlink" title="5. 进程状态转换"></a>5. 进程状态转换</h4><p><img src="/2021/04/16/C++%20advance5.1/photo2.png" alt></p>
<h4 id="6- 进程控制块 -PCB"><a href="#6- 进程控制块 -PCB" class="headerlink" title="6. 进程控制块 PCB"></a>6. 进程控制块 PCB</h4><p>每个进程在内核中都有一个进程控制块 (PCB) 来维护进程相关的信息，每个进程的 PCB 都是被 MMU 映射到物理内存上某块区域的不同地方。<br>Linux 内核的进程控制块是 task_struct 结构体。<br>/usr/src/linux-headers-3.16.0-30/include/linux/sched.h 文件可以查看 struct task_struct<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">sudo grep -rn <span class="string">&quot;struct task_struct &#123;&quot;</span> /usr/</span><br></pre></td></tr></table></figure><br>小技巧：光标停在 {上，按 % 键，可以到达结构体的结尾。<br>struct 结构体定义。其内部成员有很多，重点掌握以下部分即可：</p>
<h5 id="1- 进程 -id。系统中每个进程有唯一的 -id，在 -C- 语言中用 -pid-t- 类型表示，其实就是一个非负整数。"><a href="#1- 进程 -id。系统中每个进程有唯一的 -id，在 -C- 语言中用 -pid-t- 类型表示，其实就是一个非负整数。" class="headerlink" title="(1) 进程 id。系统中每个进程有唯一的 id，在 C 语言中用 pid_t 类型表示，其实就是一个非负整数。"></a>(1) 进程 id。系统中每个进程有唯一的 id，在 C 语言中用 pid_t 类型表示，其实就是一个非负整数。</h5><p>可用 ps aux 查看第二列即为进程 id。</p>
<h5 id="2- 进程的状态，有就绪、运行、挂起、停止等状态。"><a href="#2- 进程的状态，有就绪、运行、挂起、停止等状态。" class="headerlink" title="(2) 进程的状态，有就绪、运行、挂起、停止等状态。"></a>(2) 进程的状态，有就绪、运行、挂起、停止等状态。</h5><h5 id="3- 进程切换时需要保存和恢复的一些 -CPU- 寄存器。"><a href="#3- 进程切换时需要保存和恢复的一些 -CPU- 寄存器。" class="headerlink" title="(3) 进程切换时需要保存和恢复的一些 CPU 寄存器。"></a>(3) 进程切换时需要保存和恢复的一些 CPU 寄存器。</h5><h5 id="4- 描述虚拟地址空间的信息。"><a href="#4- 描述虚拟地址空间的信息。" class="headerlink" title="(4) 描述虚拟地址空间的信息。"></a>(4) 描述虚拟地址空间的信息。</h5><p>就是说 MMU 在负责将虚拟内存映射到物理内存后，需要保存该映射的记录，但是 MMU 不会帮你记录，它只负责映射，记录是放在进程控制块 PCB 当中。</p>
<h5 id="5- 描述控制终端的信息。"><a href="#5- 描述控制终端的信息。" class="headerlink" title="(5) 描述控制终端的信息。"></a>(5) 描述控制终端的信息。</h5><p>即描述该进程是否与终端进程相关。有些进程与终端有关有些无关，例如守护进程就是与终端无关。</p>
<h5 id="6- 当前工作目录（Current-Working-Directory）"><a href="#6- 当前工作目录（Current-Working-Directory）" class="headerlink" title="(6) 当前工作目录（Current Working Directory）"></a>(6) 当前工作目录（Current Working Directory）</h5><p>当前工作目录就是当前进程的工作目录。例如进程 bash 即我们的输入终端，假设当前目录为家目录，当执行 cd … 后，进程 bash 的工作目录就改变了，那么 PCB 就会记录下来。</p>
<h5 id="7-umask- 掩码"><a href="#7-umask- 掩码" class="headerlink" title="(7) umask 掩码"></a>(7) umask 掩码</h5><p>umask 掩码就是一个进程对该进程内部资源分配的默认权限。由于 PCB 每个进程都有且不同，所以 PCB 内部的 umask 掩码在每个进程也不同，并非进程间共享。所以一个进程的 umask 掩码改变并不会影响另一个进程的 umask 掩码。</p>
<h5 id="8- 文件描述符表，包含很多指向 -file- 结构体的指针"><a href="#8- 文件描述符表，包含很多指向 -file- 结构体的指针" class="headerlink" title="(8) 文件描述符表，包含很多指向 file 结构体的指针"></a>(8) 文件描述符表，包含很多指向 file 结构体的指针 </h5><p> 文件描述符：在 linux 系统中打开文件就会获得文件描述符，它是个很小的非负整数。每个进程在 PCB（Process Control Block）中保存着一份文件描述符表，文件描述符 (FD) 就是这个表的索引，每个表项都有一个指向已打开文件的指针。</p>
<h5 id="9- 和信号相关的信息"><a href="#9- 和信号相关的信息" class="headerlink" title="(9) 和信号相关的信息"></a>(9) 和信号相关的信息 </h5><h5 id="10- 用户 -id- 和组 -id"><a href="#10- 用户 -id- 和组 -id" class="headerlink" title="(10) 用户 id 和组 id"></a>(10) 用户 id 和组 id</h5><h5 id="11- 会话（Session）的进程组"><a href="#11- 会话（Session）的进程组" class="headerlink" title="(11) 会话（Session）的进程组"></a>(11) 会话（Session）的进程组</h5><p> 会话 id 表示它属于哪个会话，进程组 id 表示该进程所属的进程组。<br>会话：多个进程组的集合。<br>进程组：多个进程的集合。</p>
<h5 id="12- 进程可以使用的资源上限（Resource-Limit）"><a href="#12- 进程可以使用的资源上限（Resource-Limit）" class="headerlink" title="(12) 进程可以使用的资源上限（Resource Limit）"></a>(12) 进程可以使用的资源上限（Resource Limit）</h5><p>可以使用 ulimit -a 查看</p>
<h3 id="二、环境变量"><a href="# 二、环境变量" class="headerlink" title="二、环境变量"></a>二、环境变量 </h3><h4 id="1- 环境变量"><a href="#1- 环境变量" class="headerlink" title="1. 环境变量"></a>1. 环境变量</h4><p> 环境变量，是指在操作系统中用来指定操作系统运行环境的一些参数。通常具备以下特征：<br>（1）字符串 (本质)<br>（2）有统一的格式：名 = 值 [: 值]<br>（3）值用来描述进程环境信息。<br>存储形式：与命令行参数类似。char *[] 数组，数组名 environ，内部存储字符串，NULL 作为结尾。<br>使用形式：与命令行参数类似。<br>加载位置：与命令行参数类似。位于用户区，高于 stack 的起始位置。<br>引入环境变量表：须声明环境变量 extern char ** environ</p>
<p>env 查看全部环境变量<br>echo $HOME<br>echo $PATH</p>
<h4 id="2- 常见环境变量"><a href="#2- 常见环境变量" class="headerlink" title="2. 常见环境变量"></a>2. 常见环境变量 </h4><p> 环境变量定义了进程的运行环境，一些比较重要的环境变量的含义如下：</p>
<h5 id="PATH"><a href="#PATH" class="headerlink" title="PATH"></a>PATH</h5><p>可执行文件的搜索路径。ls 命令也是一个程序，执行它不需要提供完整的路径名 /bin/ls，然而通常我们执行当前目录下的程序 a.out 却需要提供完整的路径名./a.out，这是因为 PATH 环境变量的值里面包含了 ls 命令所在的目录 /bin，却不包含 a.out 所在的目录。PATH 环境变量的值可以包含多个目录，用：号隔开。在 Shell 中用 echo 命令可以查看这个环境变量的值：echo $PATH</p>
<h5 id="SHELL"><a href="#SHELL" class="headerlink" title="SHELL"></a>SHELL</h5><p>当前 Shell，它的值通常是 /bin/bash。</p>
<h5 id="TERM"><a href="#TERM" class="headerlink" title="TERM"></a>TERM</h5><p>当前终端类型，在图形界面终端下它的值通常是 xterm，终端类型决定了一些程序的输出显示方式，比如图形界面终端可以显示汉字，而字符终端一般不行。</p>
<h5 id="LANG"><a href="#LANG" class="headerlink" title="LANG"></a>LANG</h5><p>语言和 locale，决定了字符编码以及时间、货币等信息的显示格式。</p>
<h5 id="HOME"><a href="#HOME" class="headerlink" title="HOME"></a>HOME</h5><p>当前用户主目录的路径，很多程序需要在主目录下保存配置文件，使得每个用户在运行该程序时都有自己的一套配置。</p>
<h4 id="3-getemv- 函数：获取函数变量"><a href="#3-getemv- 函数：获取函数变量" class="headerlink" title="3.getemv 函数：获取函数变量"></a>3.getemv 函数：获取函数变量 </h4><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"> 函数原型：<span class="keyword">char</span> \*<span class="built_in">getenv</span> (<span class="keyword">const</span> <span class="keyword">char</span>* name)</span><br></pre></td></tr></table></figure><figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">print (<span class="string">&quot;homepath is [% s]\n&quot;</span>, getenv (<span class="string">&quot;HOME&quot;</span>))<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<h4 id="4-setenv- 函数"><a href="#4-setenv- 函数" class="headerlink" title="4.setenv 函数"></a>4.setenv 函数 </h4><p> 也可以用命令 export key=value<br>在 shell 中执行程序时，shell 会提供一组环境变量。终端关闭或重启以后，环境变量会重置，即 ecport 设置的环境变量只在当前 shell 行下有作用。若想要开机自动加载某环境变量避免设置，需对 /etc/re.local 目录文件改动。</p>
<h4 id="5-unsetenv- 函数"><a href="#5-unsetenv- 函数" class="headerlink" title="5.unsetenv 函数"></a>5.unsetenv 函数</h4><p><a href="https://blog.csdn.net/yifen4234/article/details/80691434">linux 环境变量文件区别 &amp; 加载顺序</a></p>
<h3 id="三、进程控制"><a href="# 三、进程控制" class="headerlink" title="三、进程控制"></a>三、进程控制</h3><h4 id="1-fork- 函数"><a href="#1-fork- 函数" class="headerlink" title="1.fork 函数"></a>1.fork 函数</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span> (<span class="string">&quot;Begin ....\n&quot;</span>);</span><br><span class="line">	<span class="keyword">pid_t</span> pid = fork ();</span><br><span class="line">	<span class="built_in">printf</span> (<span class="string">&quot;End ....\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pid &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    	<span class="comment">// 若当前系统资源耗尽，无法再申请子进程，则发送错误</span></span><br><span class="line">    	<span class="built_in">perror</span> (<span class="string">&quot;fork err&quot;</span>);</span><br><span class="line">    	<span class="built_in">exit</span> (<span class="number">1</span>);</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pid == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    	<span class="comment">// 子进程</span></span><br><span class="line">    	<span class="built_in">printf</span> (<span class="string">&quot;I am a child, pid = % d, ppid = % d&quot;</span>, <span class="built_in">getpid</span> (), <span class="built_in">getppid</span> ());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (pid &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    	<span class="comment">// 父进程</span></span><br><span class="line">    	<span class="built_in">printf</span> (<span class="string">&quot;I am a father, childpid = % d, self = % d, ppid = % d\n&quot;</span>, pid, <span class="built_in">getpid</span> (), <span class="built_in">getppid</span> ());</span><br><span class="line">    	<span class="comment">// 这样执行之后会出问题，因为父进程先死了，造成孤儿进程。</span></span><br><span class="line">    	<span class="comment">// 解决办法：让子进程先死</span></span><br><span class="line">    	<span class="comment">//sleep (1);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/04/16/C++%20advance5.1/photo4.png" alt> 如何区分父子进程？<br>通过 fork 函数的返回值 <br> 父子进程的执行顺序？<br>不一定，哪个进程先抢到 CPU，哪个进程就先执行</p>
<h4 id="2-getpid、getppid- 函数"><a href="#2-getpid、getppid- 函数" class="headerlink" title="2.getpid、getppid 函数"></a>2.getpid、getppid 函数</h4><p>getpid 得到当前进程的 PID<br>getppid 得到当前进程的父进程的 PID</p>
<h4 id="3-ps- 命令和 -kill- 命令"><a href="#3-ps- 命令和 -kill- 命令" class="headerlink" title="3.ps 命令和 kill 命令"></a>3.ps 命令和 kill 命令 </h4><h5 id="1-ps- 查看进程信息"><a href="#1-ps- 查看进程信息" class="headerlink" title="(1) ps 查看进程信息"></a>(1) ps 查看进程信息</h5><p>-a：(all) 当前系统所有用户的进程<br>-u：查看进程所有者及其他一些信息<br>-x：显示没有控制终端的进程 — 不能与用户进行交互的进程【输入、输出】<br>-j：列出与作业控制相关的信息<br> 可以搭配 grep 使用 <br> 例如：ps aux<br>例如：ps ajx 可以追述进程之间的血缘关系</p>
<h5 id="2-kill- 给进程发送一个信号"><a href="#2-kill- 给进程发送一个信号" class="headerlink" title="(2) kill 给进程发送一个信号"></a>(2) kill 给进程发送一个信号</h5><p>SIGKILL 9 号信号<br>kill -l 查看系统有哪些信号<br>kill -9 pid 杀死某个线程</p>
<h4 id="4-getuid、getgid- 函数"><a href="#4-getuid、getgid- 函数" class="headerlink" title="4.getuid、getgid 函数"></a>4.getuid、getgid 函数 </h4><h4 id="5- 循环创建多个子进程"><a href="#5- 循环创建多个子进程" class="headerlink" title="5. 循环创建多个子进程"></a>5. 循环创建多个子进程</h4><p> 要求：(1) 多个子进程是兄弟关系。 (2) 判断子进程是第几个子进程。<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n = <span class="number">5</span>;</span><br><span class="line">	<span class="keyword">pid_t</span> pid = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		pid = fork ();</span><br><span class="line">		<span class="keyword">if</span> (pid == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span> (<span class="string">&quot;I am child, pid=% d, ppid=% d\n&quot;</span>, <span class="built_in">getpid</span> (), <span class="built_in">getppid</span> ());</span><br><span class="line">			<span class="comment">// 解决办法 break;</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (pid &gt; <span class="number">0</span>)</span><br><span class="line">			<span class="built_in">printf</span> (<span class="string">&quot;I am father, pid=% d, ppid=% d\n&quot;</span>, <span class="built_in">getpid</span> (), <span class="built_in">getppid</span> ());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">		<span class="built_in">sleep</span> (<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="comment">// 这样的写法会造成子进程继续生子进程，无穷无尽，不是本来想要的 5 个子进程的结果</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="6- 进程共享"><a href="#6- 进程共享" class="headerlink" title="6. 进程共享"></a>6. 进程共享 </h4><h3 id="四、exec- 函数族"><a href="# 四、exec- 函数族" class="headerlink" title="四、exec 函数族"></a> 四、exec 函数族 </h3><h4 id="1-execlp- 函数"><a href="#1-execlp- 函数" class="headerlink" title="1.execlp 函数"></a>1.execlp 函数</h4><h4 id="2-execl- 函数"><a href="#2-execl- 函数" class="headerlink" title="2.execl 函数"></a>2.execl 函数</h4><h4 id="3-execvp- 函数"><a href="#3-execvp- 函数" class="headerlink" title="3.execvp 函数"></a>3.execvp 函数</h4><h3 id="fork-getpid-getppid- 函数"><a href="#fork-getpid-getppid- 函数" class="headerlink" title="fork/getpid/getppid 函数"></a>fork/getpid/getppid 函数</h3><h3 id="ps-kill- 函数"><a href="#ps-kill- 函数" class="headerlink" title="ps/kill 函数"></a>ps/kill 函数</h3><h3 id="excel-execlp- 系列函数"><a href="#excel-execlp- 系列函数" class="headerlink" title="excel/execlp 系列函数"></a>excel/execlp 系列函数</h3><h3 id="孤儿进程，僵尸进程"><a href="# 孤儿进程，僵尸进程" class="headerlink" title="孤儿进程，僵尸进程"></a> 孤儿进程，僵尸进程</h3><h3 id="wait- 函数"><a href="#wait- 函数" class="headerlink" title="wait 函数"></a>wait 函数</h3><h3 id="waitpid- 函数"><a href="#waitpid- 函数" class="headerlink" title="waitpid 函数"></a>waitpid 函数</h3><span id="more"></span>
<h3 id="C-advance- 文章总览"><a href="#C-advance- 文章总览" class="headerlink" title="C++ advance 文章总览"></a>C++ advance 文章总览</h3><p><a href="https://wangxchun.github.io/2021/04/14/C++%20advance4.1/">C++ advance（四）Linux 命令基础 —1.Linux 常用命令</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance4.2/">C++ advance（四）Linux 命令基础 —2.vim 和 gcc 和 library</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance4.3/">C++ advance（四）Linux 命令基础 —3.makefile 和 gdb 和 IO</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance4.4/">C++ advance（四）Linux 命令基础 —4.stat 和 readdir 和 dup2</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advanc5.1/">C++ advance（五）Linux 进程和线程 —1. 进程控制</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.2/">C++ advance（五）Linux 进程和线程 —2. 进程间通信</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.3/">C++ advance（五）Linux 进程和线程 —3. 信号</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.4/">C++ advance（五）Linux 进程和线程 —4. 进程和线程</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.5/">C++ advance（五）Linux 进程和线程 —5. 线程同步</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.1/">C++ advance（六）Linux 高并发网络编程开发 —1. 网络编程基础 socket</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.2/">C++ advance（六）Linux 高并发网络编程开发 —2.tcp 三次握手 - 并发</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.3/">C++ advance（六）Linux 高并发网络编程开发 —3.tcp 状态转换 - selcet poll</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.4/">C++ advance（六）Linux 高并发网络编程开发 —4.epoll udp</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.5/">C++ advance（六）Linux 高并发网络编程开发 —5. 广播 - 组播 - 本地套接字</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.6">C++ advance（六）Linux 高并发网络编程开发 —6.libevent</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.7">C++ advance（六）Linux 高并发网络编程开发 —7.xml json</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance7.1">C++ advance（七）Linux 高并发 web 服务器开发 —1.</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance7.2">C++ advance（七）Linux 高并发 web 服务器开发 —2.</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance7.3">C++ advance（七）Linux 高并发 web 服务器开发 —3.</a></p>
]]></content>
      <categories>
        <category>C++ advance</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>进程控制</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ advance（五）Linux 进程和线程 --2. 进程间通信</title>
    <url>/2021/04/16/C++%20advance5.2/</url>
    <content><![CDATA[<span id="more"></span>
<h3 id="C-advance- 文章总览"><a href="#C-advance- 文章总览" class="headerlink" title="C++ advance 文章总览"></a>C++ advance 文章总览 </h3><p><a href="https://wangxchun.github.io/2021/04/14/C++%20advance4.1/">C++ advance（四）Linux 命令基础 —1.Linux 常用命令 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance4.2/">C++ advance（四）Linux 命令基础 —2.vim 和 gcc 和 library</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance4.3/">C++ advance（四）Linux 命令基础 —3.makefile 和 gdb 和 IO</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance4.4/">C++ advance（四）Linux 命令基础 —4.stat 和 readdir 和 dup2</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advanc5.1/">C++ advance（五）Linux 进程和线程 —1. 进程控制 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.2/">C++ advance（五）Linux 进程和线程 —2. 进程间通信 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.3/">C++ advance（五）Linux 进程和线程 —3. 信号 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.4/">C++ advance（五）Linux 进程和线程 —4. 进程和线程 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.5/">C++ advance（五）Linux 进程和线程 —5. 线程同步 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.1/">C++ advance（六）Linux 高并发网络编程开发 —1. 网络编程基础 socket</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.2/">C++ advance（六）Linux 高并发网络编程开发 —2.tcp 三次握手 - 并发 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.3/">C++ advance（六）Linux 高并发网络编程开发 —3.tcp 状态转换 - selcet poll</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.4/">C++ advance（六）Linux 高并发网络编程开发 —4.epoll udp</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.5/">C++ advance（六）Linux 高并发网络编程开发 —5. 广播 - 组播 - 本地套接字 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.6">C++ advance（六）Linux 高并发网络编程开发 —6.libevent</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.7">C++ advance（六）Linux 高并发网络编程开发 —7.xml json</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance7.1">C++ advance（七）Linux 高并发 web 服务器开发 —1.</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance7.2">C++ advance（七）Linux 高并发 web 服务器开发 —2.</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance7.3">C++ advance（七）Linux 高并发 web 服务器开发 —3.</a></p>
]]></content>
      <categories>
        <category>C++ advance</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>进程间通信</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ advance（五）Linux 进程和线程 --3. 信号</title>
    <url>/2021/04/16/C++%20advance5.3/</url>
    <content><![CDATA[<span id="more"></span>
<h3 id="C-advance- 文章总览"><a href="#C-advance- 文章总览" class="headerlink" title="C++ advance 文章总览"></a>C++ advance 文章总览 </h3><p><a href="https://wangxchun.github.io/2021/04/14/C++%20advance4.1/">C++ advance（四）Linux 命令基础 —1.Linux 常用命令 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance4.2/">C++ advance（四）Linux 命令基础 —2.vim 和 gcc 和 library</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance4.3/">C++ advance（四）Linux 命令基础 —3.makefile 和 gdb 和 IO</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance4.4/">C++ advance（四）Linux 命令基础 —4.stat 和 readdir 和 dup2</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advanc5.1/">C++ advance（五）Linux 进程和线程 —1. 进程控制 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.2/">C++ advance（五）Linux 进程和线程 —2. 进程间通信 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.3/">C++ advance（五）Linux 进程和线程 —3. 信号 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.4/">C++ advance（五）Linux 进程和线程 —4. 进程和线程 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.5/">C++ advance（五）Linux 进程和线程 —5. 线程同步 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.1/">C++ advance（六）Linux 高并发网络编程开发 —1. 网络编程基础 socket</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.2/">C++ advance（六）Linux 高并发网络编程开发 —2.tcp 三次握手 - 并发 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.3/">C++ advance（六）Linux 高并发网络编程开发 —3.tcp 状态转换 - selcet poll</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.4/">C++ advance（六）Linux 高并发网络编程开发 —4.epoll udp</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.5/">C++ advance（六）Linux 高并发网络编程开发 —5. 广播 - 组播 - 本地套接字 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.6">C++ advance（六）Linux 高并发网络编程开发 —6.libevent</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.7">C++ advance（六）Linux 高并发网络编程开发 —7.xml json</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance7.1">C++ advance（七）Linux 高并发 web 服务器开发 —1.</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance7.2">C++ advance（七）Linux 高并发 web 服务器开发 —2.</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance7.3">C++ advance（七）Linux 高并发 web 服务器开发 —3.</a></p>
]]></content>
      <categories>
        <category>C++ advance</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>信号</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ advance（五）Linux 进程和线程 --4. 进程和线程</title>
    <url>/2021/04/16/C++%20advance5.4/</url>
    <content><![CDATA[<span id="more"></span>
<h3 id="C-advance- 文章总览"><a href="#C-advance- 文章总览" class="headerlink" title="C++ advance 文章总览"></a>C++ advance 文章总览 </h3><p><a href="https://wangxchun.github.io/2021/04/14/C++%20advance4.1/">C++ advance（四）Linux 命令基础 —1.Linux 常用命令 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance4.2/">C++ advance（四）Linux 命令基础 —2.vim 和 gcc 和 library</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance4.3/">C++ advance（四）Linux 命令基础 —3.makefile 和 gdb 和 IO</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance4.4/">C++ advance（四）Linux 命令基础 —4.stat 和 readdir 和 dup2</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advanc5.1/">C++ advance（五）Linux 进程和线程 —1. 进程控制 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.2/">C++ advance（五）Linux 进程和线程 —2. 进程间通信 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.3/">C++ advance（五）Linux 进程和线程 —3. 信号 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.4/">C++ advance（五）Linux 进程和线程 —4. 进程和线程 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.5/">C++ advance（五）Linux 进程和线程 —5. 线程同步 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.1/">C++ advance（六）Linux 高并发网络编程开发 —1. 网络编程基础 socket</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.2/">C++ advance（六）Linux 高并发网络编程开发 —2.tcp 三次握手 - 并发 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.3/">C++ advance（六）Linux 高并发网络编程开发 —3.tcp 状态转换 - selcet poll</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.4/">C++ advance（六）Linux 高并发网络编程开发 —4.epoll udp</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.5/">C++ advance（六）Linux 高并发网络编程开发 —5. 广播 - 组播 - 本地套接字 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.6">C++ advance（六）Linux 高并发网络编程开发 —6.libevent</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.7">C++ advance（六）Linux 高并发网络编程开发 —7.xml json</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance7.1">C++ advance（七）Linux 高并发 web 服务器开发 —1.</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance7.2">C++ advance（七）Linux 高并发 web 服务器开发 —2.</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance7.3">C++ advance（七）Linux 高并发 web 服务器开发 —3.</a></p>
]]></content>
      <categories>
        <category>C++ advance</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>进程和线程</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ advance（六）Linux 高并发网络编程开发 --1. 网络编程基础 socket</title>
    <url>/2021/04/16/C++%20advance6.1/</url>
    <content><![CDATA[<h3 id="一、网络基础"><a href="# 一、网络基础" class="headerlink" title="一、网络基础"></a>一、网络基础 </h3><h4 id="1- 网络"><a href="#1- 网络" class="headerlink" title="1. 网络"></a>1. 网络</h4><h5 id="1-C-S-client-server"><a href="#1-C-S-client-server" class="headerlink" title="(1) C/S-client/server"></a>(1) C/S-client/server</h5><p> 优点: (a) 协议选用灵活 (b) 可以缓存数据 <br> 缺点: (a) 对用户安全构成威胁 (b) 开发工作量大，调试困难 (多线程实时数据同步、实时数据同步)<span id="more"></span></p>
<h5 id="2-B-S-browser-server"><a href="#2-B-S-browser-server" class="headerlink" title="(2) B/S-browser/server"></a>(2) B/S-browser/server</h5><p>优点：跨平台 <br> 缺点：只能使用 http<br>    跨平台：使用能够跨平台的语言，例如：QT 和 java<br>    给程序员一套接口，在不同平台下，接口调用的 API 是不一样的<br>    java 是跑在 java 虚拟机上的，执行在不同平台都是跑在 java 虚拟机上的<br>    不同语言实现跨平台的方式是不一样的</p>
<h4 id="2- 协议的概念"><a href="#2- 协议的概念" class="headerlink" title="2. 协议的概念"></a>2. 协议的概念 </h4><p> 规则：数据传输和数据解释的规则 <br> 原始协议 ———&gt;(改进、完善)———&gt; 标准协议 <br> 典型协议：TCP/UDP HTTP FTP IP ARP</p>
<p>例如：原始的 ftp 协议 <br>A 依次发送文件名、文件大小、文件内容给 B<br>B 就可以依据这些收到的信息，复制一个文件在自己的机器上<br> 发送的数据包不会太大，因为内存是栈空间，栈空间不大<br>linux 默认的栈空间是 8M</p>
<h4 id="3- 分层模式"><a href="#3- 分层模式" class="headerlink" title="3. 分层模式"></a>3. 分层模式 </h4><h5 id="1-7- 层模型 -OSI："><a href="#1-7- 层模型 -OSI：" class="headerlink" title="(1) 7 层模型 -OSI："></a>(1) 7 层模型 -OSI：</h5><p> 物 — 双绞线，光纤 <br> 数 — 数据的传输和错误检测 <br> 网 — 为数据包选择路由 <br> 传 — 提供端对端的接口 tcp/udp<br>会 — 解除或建立与别的节点的联系 <br> 表 — 数据格式化，代码转换，数据加密 <br> 应 — 文件传输，电子邮件，文件服务，虚拟终端</p>
<h5 id="2-TCP-IP：4- 层模型"><a href="#2-TCP-IP：4- 层模型" class="headerlink" title="(2) TCP/IP：4 层模型"></a>(2) TCP/IP：4 层模型 </h5><p> 层级 - 常见协议 <br> 网络接口层 - 以太网帧协议 <br> 网络层 - IP<br>传输层 - TCP/UDP<br>应用层 - FTP，HTTP，SSH，TELNET<br>一般说的传输模型都是 4 层模型 <br> 软件程序员主要负责应用层的协议，上层协议由操作系统完成。</p>
<p>例如：两个用户在使用腾讯的聊天软件 <br>A 用户发送 hello 给 B；<br> 腾讯开发的应用层协议会在 hello 字符串外面加上一层应用层协议数据；<br>然后操作系统会再在外面加上传输层和网络层和数据链路层的数据；<br>B 收到数据包之后，操作系统拆开传输层和网络层和数据链路层的数据；<br>然后腾讯的应用在拆应用层的数据；<br>最后返回 hello 给 B。</p>
<h4 id="4- 协议格式"><a href="#4- 协议格式" class="headerlink" title="4. 协议格式"></a>4. 协议格式 </h4><p> 数据包的封装思想</p>
<h5 id="1- 以太网帧格式 -—- 借助 -mac- 地址完成数据传送"><a href="#1- 以太网帧格式 -—- 借助 -mac- 地址完成数据传送" class="headerlink" title="(1) 以太网帧格式 — 借助 mac 地址完成数据传送"></a>(1) 以太网帧格式 — 借助 mac 地址完成数据传送 </h5><p><img src="/2021/04/16/C++%20advance6.1/photo3.png" alt><br>arp 数据报 — 根据 IP 获取 mac 地址<br><img src="/2021/04/16/C++%20advance6.1/photo4.png" alt><br><img src="/2021/04/16/C++%20advance6.1/photo2.png" alt><br>mac 地址其实就是网卡编号<br><img src="/2021/04/16/C++%20advance6.1/photo1.png" alt> 全球的网卡编号都是唯一的，生产网卡的厂家就那几间，有一个组织专门管理<br><a href="https://blog.csdn.net/wenwenxiong/article/details/51438553"> 虚拟机的 MAC 地址分配与修改</a></p>
<h5 id="2-IP- 格式"><a href="#2-IP- 格式" class="headerlink" title="(2) IP 格式"></a>(2) IP 格式</h5><p><img src="/2021/04/16/C++%20advance6.1/photo5.png" alt> 重要参数<br>4 位版本：ipv4、ipv6<br>8 位生存时间 (TTL): 最多能经过多少跳<br>32 位源 IP 地址：数据发送端地址<br>32 位目的 IP 地址：数据接收端地址</p>
<pre><code>ipv6 主要是中国在推动，因为
(a) 中国的网络较晚发展，公网 IP 是不够用的
192.168.XXX.XXX 这是局域网 IP，所以要通过路由器
在 socket 编程的时候就会发现不同局域网的电脑不同直接通信，就是因为没有公网 IP
(b) DNS 域名解析服务器
全世界只有 13 台根服务器，10 台在美国，1 台在日本，1 台在英国，1 台在瑞典
</code></pre><h5 id="3-UDP- 数据包格式"><a href="#3-UDP- 数据包格式" class="headerlink" title="(3) UDP 数据包格式"></a>(3) UDP 数据包格式</h5><p>16 位源端口<br>16 位目的端口<br><img src="/2021/04/16/C++%20advance6.1/photo6.png" alt></p>
<h4 id="4-TCP- 数据报格式数据"><a href="#4-TCP- 数据报格式数据" class="headerlink" title="(4) TCP 数据报格式数据"></a>(4) TCP 数据报格式数据 </h4><p>16 位源端口<br>16 位目的端口<br>32 位序号：TCP 要经过三次握手<br>32 位确认序号：TCP 要经过三次握手<br><img src="/2021/04/16/C++%20advance6.1/photo8.png" alt><br><a href="https://notfalse.net/7/three-way-handshake">TCP 三向交握 (Three-way Handshake)</a><br>6 个标志位<br> 存储空间<br>16 位滑动窗口：双方收发数据速度不协调的时候，控制其中一方阻塞<br>A 给 B 发数据，A 发得快，B 收得慢，则 B 可以告诉 A 它得缓存空间大小是多少，如果 A 发得数据使得缓存空间满了，则 A 就不会再发数据了<br><img src="/2021/04/16/C++%20advance6.1/photo7.png" alt></p>
<h4 id="5- 数据的发送和接收"><a href="#5- 数据的发送和接收" class="headerlink" title="5. 数据的发送和接收"></a>5. 数据的发送和接收 </h4><p><img src="/2021/04/16/C++%20advance6.1/photo9.png" alt><br> 可以传输的字节数并非全部都是实际数据，其中包含一部分的协议头。</p>
<h4 id="6-tcp-udp- 传输层协议"><a href="#6-tcp-udp- 传输层协议" class="headerlink" title="6.tcp,udp 传输层协议"></a>6.tcp,udp 传输层协议 </h4><h5 id="1-tcp- 面向连接的安全的流式传输协议"><a href="#1-tcp- 面向连接的安全的流式传输协议" class="headerlink" title="(1) tcp: 面向连接的安全的流式传输协议"></a>(1) tcp: 面向连接的安全的流式传输协议</h5><p> 连接的时候，进行三次握手。<br>数据发送的时候，会进行数据确认，若数据丢失，会进行数据重传。<br><img src="/2021/04/16/C++%20advance6.1/photo10.jpg" alt="流式传输"></p>
<center> 流式传输 </center>

<h5 id="2-udp- 面向无连接的不安全的报式传输"><a href="#2-udp- 面向无连接的不安全的报式传输" class="headerlink" title="(2) udp: 面向无连接的不安全的报式传输"></a>(2) udp: 面向无连接的不安全的报式传输 </h5><p> 连接的时候不会握手。<br>数据发送出去之后就不管了。<br><img src="/2021/04/16/C++%20advance6.1/photo11.jpg" alt="报式传输"></p>
<p><center> 报式传输 </center><br>如果数据包丢失会全丢，不存在丢失一半的情况。<br>如果需要安全的传输模式，需要在应用层再做封装。<br>一般而言，在聊天室开发，小公司会使用 TCP 协议，大公司会在 UDP 协议上在应用层自己开发封装。</p>
<h3 id="二、Socket- 编程"><a href="# 二、Socket- 编程" class="headerlink" title="二、Socket 编程"></a>二、Socket 编程 </h3><h4 id="1-socket- 编程"><a href="#1-socket- 编程" class="headerlink" title="1.socket 编程"></a>1.socket 编程</h4><p> 什么是 socket？网络通信的函数接口 <br> 封装了传输层协议，例如：TCP 和 UDP</p>
<h4 id="2- 套接字概念"><a href="#2- 套接字概念" class="headerlink" title="2. 套接字概念"></a>2. 套接字概念 </h4><p> 套接字 = IP+Port<br>回顾 read/write 操作，操作的是文件描述符；创建一个套接字，得到的也是文件描述符。</p>
<pre><code>进程间通信，匿名管道
1) 由 pipe 系统调用，管道由父进程建立
2) 单工通信的
3) 在关系进程中进行 (父进程和子进程、同一个父进程的两个子进程之间)
4) 管道位于内核空间，其实是一块缓存

比较：
管道位于内核缓冲区 (内存中一块存储空间，由环形队列实现)，管道的读写两端分别对应一个文件描述符
套接字：创建成功，得到的是一个文件描述符 fd，fd 操作的也是一个内核缓冲区。
套接字默认也是阻塞的（是不同文件描述符对应不同文件的性质）。
</code></pre><h4 id="3- 网络字节序（大端、小端）"><a href="#3- 网络字节序（大端、小端）" class="headerlink" title="3. 网络字节序（大端、小端）"></a>3. 网络字节序（大端、小端）</h4><p>内存中的多字节数据相对于内存地址有大端和小端之分，磁盘文件中的多字节数据相对于文件中的偏移地址也有大端小端之分。网络数据流同样有大端小端之分，那么如何定义网络数据流的地址呢？</p>
<p>发送主机通常将发送缓冲区中的数据按内存地址从低到高的顺序发出，接收主机把从网络上接到的字节依次保存在接收缓冲区中，也是按内存地址从低到高的顺序保存，因此，网络数据流的地址应这样规定：先发出的数据是低地址，后发出的数据是高地址。</p>
<p>TCP/IP 协议规定，网络数据流应采用大端字节序，即低地址高字节。如果主机是大端字节序的，发送和接收都不需要做转换，反之则需要。</p>
<p>为使网络程序具有可移植性，使同样的 C 代码在大端和小端计算机上编译后都能正常运行，可以调用以下库函数做网络字节序和主机字节序的转换。<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">uint32_t</span> <span class="title">htonl</span> <span class="params">(<span class="keyword">uint32_t</span> hostlong)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16_t</span> <span class="title">htons</span> <span class="params">(<span class="keyword">uint16_t</span> hostshort)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32_t</span> <span class="title">ntohl</span> <span class="params">(<span class="keyword">uint32_t</span> netlong)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16_t</span> <span class="title">ntohs</span> <span class="params">(<span class="keyword">uint16_t</span> netshort)</span></span>;</span><br></pre></td></tr></table></figure> h 表示 host，n 表示 network，l 表示 32 位长整数，s 表示 16 位短整数。</p>
<h4 id="4-IP- 地址转换函数"><a href="#4-IP- 地址转换函数" class="headerlink" title="4.IP 地址转换函数"></a>4.IP 地址转换函数</h4><p><a href="https://blog.csdn.net/eagle51/article/details/53157643">inet_pton 函数和 inet_ntop 函数的用法及简单实现</a><br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">inet_pton</span> <span class="params">(<span class="keyword">int</span> family, <span class="keyword">const</span> <span class="keyword">char</span> \*strptr, <span class="keyword">void</span> *addrptr)</span></span>;</span><br><span class="line"><span class="comment">// 返回：若成功则为 1, 若输入不是有效的表达格式则为 0, 若出错则为 - 1</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> \*<span class="built_in">inet_ntop</span> (<span class="keyword">int</span> family, <span class="keyword">const</span> <span class="keyword">void</span> \*addrptr, <span class="keyword">char</span> *strptr, <span class="keyword">size_t</span> len);</span><br><span class="line"><span class="comment">// 返回：若成功则为指向结果的指针， 若出错则为 NULL</span></span><br></pre></td></tr></table></figure></p>
<p>函数名中的 p 和 n 非别代表表达（presentation）和数值（numeric）。地址的表达格式通常是 ASCII 字符串，数值格式则是存放到套接字地址结构中的二进制值。这两个函数的 family 参数既可以是 AF_INET，也可以是 AF_INET6。如果以不被支持的地址族作为 family 的参数，这两个函数就都返回一个错误，并将 errno 置为 EAFNOSUPPORT。</p>
<p>(1) 本地 IP 转网络字节序（字符串 -&gt;int）<br>inet_pton 函数尝试转换由 strptr 指针所指的字符串，并通过 addrptr 指针存放二进制结果。若成功则返回 1, 否则如果对所指定的 family 而言输入的字符串不是有效的表达式，那么值为 0。</p>
<p>(2) 网络字节序转本地 IP（int-&gt; 字符串）<br>inet_ntop 函数进行相反的转换，从数值格式（addrptr）转换到表达格式（strptr）。len 参数是目标存储单元的大小，以免该函数溢出其调用者的缓冲区。为有助于指定这个大小，在 &lt; netinet/in.h &gt; 头文件中有如下定义：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INET_ADDRSTRLEN   16</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INET6_ADDRSTRLEN 46</span></span><br></pre></td></tr></table></figure> 如果 len 太小，不足以容纳表达式结果（包括结尾的空字符），那么返回一个空指针，并置 errno 为 ENOSPC。<br>inet_ntop 函数的 strptr 参数不可以是一个空指针。调用者必须为目标存储单元分配内存并指定其大小。调用成功时，这个指针就是该函数的返回值。</p>
<h5 id="5-socketaddr- 数据结构"><a href="#5-socketaddr- 数据结构" class="headerlink" title="5.socketaddr 数据结构"></a>5.socketaddr 数据结构 </h5><p>(1) 历史<br> 很多网络编程 API 诞生早于 IPv4 协议，那时候都使用的是 sockaddr 结构体，为了向前兼容，现在 sockaddr 退化成了 (void *) 的作用，传递一个地址给函数，至于这个函数是 sockaddr_in 还是其他的，由地址族确定，然后函数内部再强制转化为所需的地址类型。<br>(2) sockaddr 结构体 <br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr</span> &#123;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> sa_family;  <span class="comment">//address family, AF_xxx</span></span><br><span class="line"><span class="keyword">char</span> sa_data [<span class="number">14</span>];  <span class="comment">//14 bytes of protocol address</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure> 此数据结构用做 bind、connect、recvfrom、sendto 等函数的参数，指明地址信息。<br> 但一般编程中并不直接针对此数据结构操作，而是使用另一个与 sockaddr 等价的数据结构 sockaddr_in（在 netinet/in.h 中定义）：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> &#123;</span></span><br><span class="line"><span class="keyword">short</span> <span class="keyword">int</span> sin_family;  <span class="comment">//Address family</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> <span class="keyword">int</span> sin_port;  <span class="comment">//Port number</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">sin_addr</span>;</span>  <span class="comment">//Internet address</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> sin_zero [<span class="number">8</span>];  <span class="comment">//Same size as struct sockaddr</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure> 在编程中大多数是使用 sockaddr_in 这个结构来设置 / 获取地址信息。<br>sin_family 指代协议族，在 socket 编程中只能是 AF_INET<br>sin_port 存储端口号（使用网络字节顺序）<br>sin_addr 存储 IP 地址，使用 in_addr 这个数据结构 <br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> &#123;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> s_addr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure> 这个数据结构是由于历史原因保留下来的，主要用作与以前的格式兼容。<br>s_addr 按照网络字节顺序存储 IP 地址<br>sin_zero 是为了让 sockaddr 与 sockaddr_in 两个数据结构保持大小相同而保留的空字节。<br> 设置地址信息的示例：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">sa</span>;</span></span><br><span class="line">sa.sin_family = AF_INET;</span><br><span class="line">sa.sin_port = <span class="built_in">htons</span> (<span class="number">3490</span>);  <span class="comment">//short, NBO</span></span><br><span class="line">sa.sin_addr.s_addr = <span class="built_in">inet_addr</span> (<span class="string">&quot;132.241.5.10&quot;</span>);</span><br><span class="line"><span class="built_in">bzero</span> (&amp;(sa.sin_zero), <span class="number">8</span>);</span><br></pre></td></tr></table></figure> 注意：如果 sa.sin_addr.s_addr ＝ INADDR_ANY，则不指定 IP 地址（用于 Server 程序）<br><a href="http://haoyuanliu.github.io/2017/01/15/% E5%9C% B0% E5%9D%80% E8% BD% AC% E6%8D% A2% E5%87% BD% E6%95% B0inet-addr-inet-aton-inet-ntoa-% E5%92%8Cinet-ntop-inet-pton/">地址转换函数 inet_addr (), inet_aton (), inet_ntoa () 和 inet_ntop (), inet_pton ()</a></p>
<h3 id="C-advance- 文章总览"><a href="#C-advance- 文章总览" class="headerlink" title="C++ advance 文章总览"></a>C++ advance 文章总览</h3><p><a href="https://wangxchun.github.io/2021/04/14/C++%20advance4.1/">C++ advance（四）Linux 命令基础 —1.Linux 常用命令</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance4.2/">C++ advance（四）Linux 命令基础 —2.vim 和 gcc 和 library</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance4.3/">C++ advance（四）Linux 命令基础 —3.makefile 和 gdb 和 IO</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance4.4/">C++ advance（四）Linux 命令基础 —4.stat 和 readdir 和 dup2</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advanc5.1/">C++ advance（五）Linux 进程和线程 —1. 进程控制</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.2/">C++ advance（五）Linux 进程和线程 —2. 进程间通信</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.3/">C++ advance（五）Linux 进程和线程 —3. 信号</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.4/">C++ advance（五）Linux 进程和线程 —4. 进程和线程</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.5/">C++ advance（五）Linux 进程和线程 —5. 线程同步</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.1/">C++ advance（六）Linux 高并发网络编程开发 —1. 网络编程基础 socket</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.2/">C++ advance（六）Linux 高并发网络编程开发 —2.tcp 三次握手 - 并发</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.3/">C++ advance（六）Linux 高并发网络编程开发 —3.tcp 状态转换 - selcet poll</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.4/">C++ advance（六）Linux 高并发网络编程开发 —4.epoll udp</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.5/">C++ advance（六）Linux 高并发网络编程开发 —5. 广播 - 组播 - 本地套接字</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.6">C++ advance（六）Linux 高并发网络编程开发 —6.libevent</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.7">C++ advance（六）Linux 高并发网络编程开发 —7.xml json</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance7.1">C++ advance（七）Linux 高并发 web 服务器开发 —1.</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance7.2">C++ advance（七）Linux 高并发 web 服务器开发 —2.</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance7.3">C++ advance（七）Linux 高并发 web 服务器开发 —3.</a></p>
]]></content>
      <categories>
        <category>C++ advance</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>高并发网络编程开发</tag>
        <tag>网络编程基础</tag>
        <tag>socket</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ advance（六）Linux 高并发网络编程开发 --2.tcp 三次握手 - 并发</title>
    <url>/2021/04/16/C++%20advance6.2/</url>
    <content><![CDATA[<h3 id="回顾：socket-tcp-server- 实现"><a href="# 回顾：socket-tcp-server- 实现" class="headerlink" title="回顾：socket tcp server 实现"></a>回顾：socket tcp server 实现</h3><h4 id="1- 创建套接字"><a href="#1- 创建套接字" class="headerlink" title="1. 创建套接字"></a>1. 创建套接字</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> lfd = <span class="built_in">socket</span> ();</span><br></pre></td></tr></table></figure>
<h4 id="2- 绑定本地 -IP- 和端口"><a href="#2- 绑定本地 -IP- 和端口" class="headerlink" title="2. 绑定本地 IP 和端口"></a>2. 绑定本地 IP 和端口</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serv</span>;</span></span><br><span class="line">serv.port = <span class="built_in">htons</span> (port);</span><br><span class="line">serv.IP = <span class="built_in">htonl</span> (INADDR_ANY);</span><br><span class="line"><span class="built_in">bind</span> (lfd. &amp;serv, <span class="built_in"><span class="keyword">sizeof</span></span> (serv));</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h4 id="3- 监听"><a href="#3- 监听" class="headerlink" title="3. 监听"></a>3. 监听</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">listen</span> (lfd, <span class="number">128</span>);</span><br></pre></td></tr></table></figure>
<h4 id="4- 等待并接收连接请求"><a href="#4- 等待并接收连接请求" class="headerlink" title="4. 等待并接收连接请求"></a>4. 等待并接收连接请求</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">client</span>;</span></span><br><span class="line"><span class="keyword">int</span> len = <span class="built_in"><span class="keyword">sizeof</span></span> (client);</span><br><span class="line"><span class="keyword">int</span> cfd = <span class="built_in">accept</span> (lfd, &amp;client, &amp;len);</span><br><span class="line"><span class="comment">//lfd 监听有没有人连接到 Server，如果有就执行 accept</span></span><br><span class="line"><span class="comment">//cfd 是连接之后，用于通信的</span></span><br></pre></td></tr></table></figure>
<h4 id="5- 通信"><a href="#5- 通信" class="headerlink" title="5. 通信"></a>5. 通信 </h4><p> 接收数据：read/recv<br>发送数据：write/send</p>
<h4 id="6- 关闭"><a href="#6- 关闭" class="headerlink" title="6. 关闭"></a>6. 关闭</h4><p>close (lfd);<br>close (cfd);</p>
<h3 id="回顾：socket-tcp-client- 实现"><a href="# 回顾：socket-tcp-client- 实现" class="headerlink" title="回顾：socket tcp client 实现"></a>回顾：socket tcp client 实现</h3><h4 id="1- 创建套接字 -1"><a href="#1- 创建套接字 -1" class="headerlink" title="1. 创建套接字"></a>1. 创建套接字</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> fd = socket;</span><br></pre></td></tr></table></figure>
<h4 id="2- 连接服务器"><a href="#2- 连接服务器" class="headerlink" title="2. 连接服务器"></a>2. 连接服务器</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 客户端的端口可以不用固定，直接占用一个空闲端口就可以了（随机分配）</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server</span>;</span></span><br><span class="line">server.port = ...;</span><br><span class="line">server.ip = ...;</span><br><span class="line">server.family = ...;</span><br><span class="line"><span class="built_in">connect</span> (fd, &amp;server, <span class="built_in"><span class="keyword">sizeof</span></span> (server));</span><br></pre></td></tr></table></figure>
<h4 id="3- 通信"><a href="#3- 通信" class="headerlink" title="3. 通信"></a>3. 通信 </h4><p> 接收数据：read/recv<br>发送数据：write/send</p>
<h4 id="4- 断开连接"><a href="#4- 断开连接" class="headerlink" title="4. 断开连接"></a>4. 断开连接</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">close</span> (fd);</span><br></pre></td></tr></table></figure>
<h3 id="一、TCP- 客户端编程"><a href="# 一、TCP- 客户端编程" class="headerlink" title="一、TCP 客户端编程"></a>一、TCP 客户端编程</h3><h4 id="1-socket- 函数"><a href="#1-socket- 函数" class="headerlink" title="1.socket () 函数"></a>1.socket () 函数</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">socket</span> <span class="params">(<span class="keyword">int</span> domain, <span class="keyword">int</span> type, <span class="keyword">int</span> protocol)</span></span>;</span><br></pre></td></tr></table></figure>
<h5 id="1-domain：即协议域，又称为协议族（family）- 地址族。"><a href="#1-domain：即协议域，又称为协议族（family）- 地址族。" class="headerlink" title="(1) domain：即协议域，又称为协议族（family）, 地址族。"></a>(1) domain：即协议域，又称为协议族（family）, 地址族。</h5><p>常用的协议族有，AF_INET、AF_INET6、AF_LOCAL（或称 AF_UNIX，Unix 域 socket）、AF_ROUTE 等等。协议族决定了 socket 的地址类型，在通信中必须采用对应的地址，如 AF_INET 决定了要用 ipv4 地址（32 位的）与端口号（16 位的）的组合、AF_UNIX 决定了要用一个绝对路径名作为地址。</p>
<h5 id="2-type：指定 -socket- 类型。"><a href="#2-type：指定 -socket- 类型。" class="headerlink" title="(2) type：指定 socket 类型。"></a>(2) type：指定 socket 类型。</h5><p>常用的 socket 类型有，SOCK_STREAM、SOCK_DGRAM、SOCK_RAW、SOCK_PACKET、SOCK_SEQPACKET 等等（socket 的类型有哪些？）。这个参数指定一个套接口的类型，套接口可能的类型有：SOCK_STREAM、SOCK_DGRAM、SOCK_SEQPACKET、SOCK_RAW 等等，它们分别表明字节流、数据报、有序分组、原始套接口。这实际上是指定内核为我们提供的服务抽象，比如我们要一个字节流。需要注意的，并不是每一种协议簇都支持这里的所有的类型，所以类型与协议簇要匹配。</p>
<h5 id="3-protocol：故名思意，就是指定协议。"><a href="#3-protocol：故名思意，就是指定协议。" class="headerlink" title="(3) protocol：故名思意，就是指定协议。"></a>(3) protocol：故名思意，就是指定协议。</h5><p>常用的协议有，IPPROTO_TCP、IPPTOTO_UDP、IPPROTO_SCTP、IPPROTO_TIPC 等，它们分别对应 TCP 传输协议、UDP 传输协议、STCP 传输协议、TIPC 传输协议。详见 usr/include/linux/in.h。<br>当 protocol 为 0 时，会自动选择 type 类型对应的默认协议。</p>
<h5 id="4- 返回值"><a href="#4- 返回值" class="headerlink" title="(4) 返回值"></a>(4) 返回值 </h5><p> 当我们调用 socket 创建一个 socket 时，返回的 socket 描述字它存在于协议族（address family，AF_XXX）空间中，但没有一个具体的地址。如果想要给它赋值一个地址，就必须调用 bind () 函数，否则就当调用 connect ()、listen () 时系统会自动随机分配一个端口。</p>
<h4 id="2-memset- 函数"><a href="#2-memset- 函数" class="headerlink" title="2.memset () 函数"></a>2.memset () 函数</h4><p>string.h 的函数 memset () 将某一内存块的前 n 个字元全部设定为某一资字元。<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> s [];</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;% s\n&quot;</span>, <span class="built_in">memset</span> (s, <span class="string">&#x27;n&#x27;</span>, <span class="number">13</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="3-htons- 函数"><a href="#3-htons- 函数" class="headerlink" title="3.htons () 函数"></a>3.htons () 函数</h4><h4 id="4-inet-pton- 函数"><a href="#4-inet-pton- 函数" class="headerlink" title="4.inet_pton () 函数"></a>4.inet_pton () 函数</h4><h4 id="5-bind- 函数"><a href="#5-bind- 函数" class="headerlink" title="5.bind () 函数"></a>5.bind () 函数</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bind</span> <span class="params">(<span class="keyword">int</span> sockfd, struct sockaddr *my_addr, <span class="keyword">socklen_t</span> addrlen)</span></span>;</span><br></pre></td></tr></table></figure>
<p>当一个套接字被创建后，存在一个名字空间（地址族），但它没有被命名。bind () 将套接字地址（包括本地主机地址和本地端口地址）与所创建的套接字号联系起来，即将名字赋予套接字，以对 socket 定位。</p>
<p>bind () 用来设置给参数 sockfd 的 socket 一个名称。此名称由参数 my_addr 指向一 sockaddr 结构，对于不同的 socket domain 定义了一个通用的数据结构。<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr</span> &#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> <span class="keyword">int</span> sa_family;</span><br><span class="line">    <span class="keyword">char</span> sa_data [<span class="number">14</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure> sa_family 为调用 socket () 时的 domain 参数，即 AF_xxxx 值。<br>sa_data 最多使用 14 个字符长度。</p>
<p>此 sockaddr 结构会因使用不同的 socket domain 而有不同结构定义，例如使用 AF_INET domain，其 socketaddr 结构定义便为：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">socketaddr_in</span> &#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> <span class="keyword">int</span> sin_family;</span><br><span class="line">    <span class="keyword">uint16_t</span> sin_port;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">sin_addr</span>;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> sin_zero [<span class="number">8</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> &#123;</span></span><br><span class="line">    <span class="keyword">uint32_t</span> s_addr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure> sin_family 即为 sa_family<br>sin_port 为使用的 port 编号<br>sin_addr.s_addr 为 IP 地址<br>sin_zero 未使用，是为了让 sockaddr 与 sockaddr_in 两个数据结构保持大小相同而保留的空字节。</p>
<h5 id="6-connect- 函数"><a href="#6-connect- 函数" class="headerlink" title="6.connect () 函数"></a>6.connect () 函数</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">connect</span> <span class="params">(<span class="keyword">int</span>  sockfd,  <span class="keyword">const</span> struct sockaddr *serv_addr, <span class="keyword">socklen_t</span> addrlen)</span></span>;</span><br></pre></td></tr></table></figure>
<p>connect () 用来将参数 sockfd 的 socket 连至参数 serv_addr 指定的网络地址。参数 addrlen 为 sockaddr 的结构长度。<br>返回值：成功则返回 0，失败返回 - 1，错误原因存于 errno 中。</p>
<h5 id="7-fgets- 函数"><a href="#7-fgets- 函数" class="headerlink" title="7.fgets () 函数"></a>7.fgets () 函数 </h5><p> 虽然用 gets () 时有空格也可以直接输入，但是 gets () 有一个非常大的缺陷，即它不检查预留存储区是否能够容纳实际输入的数据，换句话说，如果输入的字符数目大于数组的长度，gets 无法检测到这个问题，就会发生内存越界，所以编程时建议使用 fgets ()。<br>fgets () 的原型为：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">fgets</span> <span class="params">(<span class="keyword">char</span> *s, <span class="keyword">int</span> size, FILE *stream)</span></span>;</span><br></pre></td></tr></table></figure><br>fgets () 虽然比 gets () 安全，但安全是要付出代价的，代价就是它的使用比 gets () 要麻烦一点，有三个参数。它的功能是从 stream 流中读取 size 个字符存储到字符指针变量 s 所指向的内存空间。它的返回值是一个指针，指向字符串中第一个字符的地址。</p>
<h5 id="8-write- 函数"><a href="#8-write- 函数" class="headerlink" title="8.write () 函数"></a>8.write () 函数</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">write</span> <span class="params">(<span class="keyword">int</span> filedes, <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> nbytes)</span></span>;</span><br><span class="line"><span class="comment">// 返回：若成功则返回写入的字节数，若出错则返回 - 1</span></span><br><span class="line"><span class="comment">//filedes：文件描述符</span></span><br><span class="line"><span class="comment">//buf: 待写入数据缓存区</span></span><br><span class="line"><span class="comment">//nbytes: 要写入的字节数</span></span><br></pre></td></tr></table></figure>
<h5 id="9-read- 函数"><a href="#9-read- 函数" class="headerlink" title="9.read () 函数"></a>9.read () 函数 </h5><h4 id="实现"><a href="# 实现" class="headerlink" title="实现"></a> 实现</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>* argv [])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 让用户输入端口</span></span><br><span class="line">	<span class="keyword">if</span> (argc &lt; <span class="number">2</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span> (<span class="string">&quot;eg: ./a.out port\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> port = <span class="built_in">atoi</span> (argv [<span class="number">1</span>]);</span><br><span class="line">	<span class="comment">// 创建套接字</span></span><br><span class="line">	<span class="keyword">int</span> fd = <span class="built_in">socket</span> (AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 连接服务器</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serv</span>;</span></span><br><span class="line">	serv.sin_family = AF_INET;</span><br><span class="line">	serv.sin_port = <span class="built_in">htons</span> (port);</span><br><span class="line">	<span class="comment">//serv.sin_addr.s_addr = htonl ();</span></span><br><span class="line">	<span class="built_in">inet_pton</span> (AF_INET, <span class="string">&quot;127.0.0.1&quot;</span>, &amp;serv.sin_addr.s_addr);</span><br><span class="line">	<span class="built_in">connect</span> (fd, (struct sockaddr*)&amp;serv, <span class="built_in"><span class="keyword">sizeof</span></span> (serv));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通信</span></span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">        <span class="comment">// 发送数据</span></span><br><span class="line">        <span class="keyword">char</span> buf [<span class="number">1024</span>];</span><br><span class="line">        <span class="built_in">printf</span> (<span class="string">&quot; 请输入要发送方的字符串：\n&quot;</span>)</span><br><span class="line">        <span class="built_in">fgets</span> (buf, <span class="built_in"><span class="keyword">sizeof</span></span> (buf), stdin);</span><br><span class="line">        <span class="built_in">write</span> (fd, buf, <span class="built_in">strlen</span> (buf));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 等待接收数据</span></span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">read</span> (fd, buf, <span class="built_in"><span class="keyword">sizeof</span></span> (buf));</span><br><span class="line">        <span class="keyword">if</span> (len == <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">        	<span class="built_in">perror</span> (<span class="string">&quot;read error&quot;</span>);</span><br><span class="line">        	<span class="built_in">exit</span> (<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (len == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">        	<span class="comment">// 服务器关闭连接，read () 函数就不会阻塞</span></span><br><span class="line">        	<span class="built_in">printf</span> (<span class="string">&quot; 服务器关闭了连接 \n&quot;</span>);</span><br><span class="line">        	<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">        	<span class="built_in">printf</span> (<span class="string">&quot;recv buf: % s\n&quot;</span>, buf);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">close</span> (fd);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="二、TCP- 服务器端编程"><a href="# 二、TCP- 服务器端编程" class="headerlink" title="二、TCP 服务器端编程"></a>二、TCP 服务器端编程 </h3><h3 id="三、TCP- 三次握手"><a href="# 三、TCP- 三次握手" class="headerlink" title="三、TCP 三次握手"></a> 三、TCP 三次握手 </h3><p> 开启 socket 的时候，操作系统会自动握手；关闭 socket 的时候，操作系统会自动挥手。所以这两个概念只要了解就行了。</p>
<h3 id="三、TCP- 四次挥手"><a href="# 三、TCP- 四次挥手" class="headerlink" title="三、TCP 四次挥手"></a>三、TCP 四次挥手 </h3><h3 id="四、滑动窗口"><a href="# 四、滑动窗口" class="headerlink" title="四、滑动窗口"></a> 四、滑动窗口 </h3><h3 id="五、错误处理函数封装"><a href="# 五、错误处理函数封装" class="headerlink" title="五、错误处理函数封装"></a> 五、错误处理函数封装 </h3><p> 如果一个函数有部分不符合你的需求，可以自己封装，例如：淘宝封装 nginx</p>
<h3 id="六、TCP- 多进程并发服务器"><a href="# 六、TCP- 多进程并发服务器" class="headerlink" title="六、TCP 多进程并发服务器"></a>六、TCP 多进程并发服务器 </h3><p> 进程和线程的数据共享模式不一样。</p>
<h3 id="七、TCP- 多线程并发服务器"><a href="# 七、TCP- 多线程并发服务器" class="headerlink" title="七、TCP 多线程并发服务器"></a>七、TCP 多线程并发服务器</h3><h3 id="C-advance- 文章总览"><a href="#C-advance- 文章总览" class="headerlink" title="C++ advance 文章总览"></a>C++ advance 文章总览</h3><p><a href="https://wangxchun.github.io/2021/04/14/C++%20advance4.1/">C++ advance（四）Linux 命令基础 —1.Linux 常用命令</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance4.2/">C++ advance（四）Linux 命令基础 —2.vim 和 gcc 和 library</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance4.3/">C++ advance（四）Linux 命令基础 —3.makefile 和 gdb 和 IO</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance4.4/">C++ advance（四）Linux 命令基础 —4.stat 和 readdir 和 dup2</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advanc5.1/">C++ advance（五）Linux 进程和线程 —1. 进程控制</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.2/">C++ advance（五）Linux 进程和线程 —2. 进程间通信</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.3/">C++ advance（五）Linux 进程和线程 —3. 信号</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.4/">C++ advance（五）Linux 进程和线程 —4. 进程和线程</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.5/">C++ advance（五）Linux 进程和线程 —5. 线程同步</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.1/">C++ advance（六）Linux 高并发网络编程开发 —1. 网络编程基础 socket</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.2/">C++ advance（六）Linux 高并发网络编程开发 —2.tcp 三次握手 - 并发</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.3/">C++ advance（六）Linux 高并发网络编程开发 —3.tcp 状态转换 - selcet poll</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.4/">C++ advance（六）Linux 高并发网络编程开发 —4.epoll udp</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.5/">C++ advance（六）Linux 高并发网络编程开发 —5. 广播 - 组播 - 本地套接字</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.6">C++ advance（六）Linux 高并发网络编程开发 —6.libevent</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.7">C++ advance（六）Linux 高并发网络编程开发 —7.xml json</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance7.1">C++ advance（七）Linux 高并发 web 服务器开发 —1.</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance7.2">C++ advance（七）Linux 高并发 web 服务器开发 —2.</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance7.3">C++ advance（七）Linux 高并发 web 服务器开发 —3.</a></p>
]]></content>
      <categories>
        <category>C++ advance</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>高并发网络编程开发</tag>
        <tag>tcp</tag>
        <tag>三次握手</tag>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ advance（五）Linux 进程和线程 --5. 线程同步</title>
    <url>/2021/04/16/C++%20advance5.5/</url>
    <content><![CDATA[<span id="more"></span>
<h3 id="C-advance- 文章总览"><a href="#C-advance- 文章总览" class="headerlink" title="C++ advance 文章总览"></a>C++ advance 文章总览 </h3><p><a href="https://wangxchun.github.io/2021/04/14/C++%20advance4.1/">C++ advance（四）Linux 命令基础 —1.Linux 常用命令 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance4.2/">C++ advance（四）Linux 命令基础 —2.vim 和 gcc 和 library</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance4.3/">C++ advance（四）Linux 命令基础 —3.makefile 和 gdb 和 IO</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance4.4/">C++ advance（四）Linux 命令基础 —4.stat 和 readdir 和 dup2</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advanc5.1/">C++ advance（五）Linux 进程和线程 —1. 进程控制 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.2/">C++ advance（五）Linux 进程和线程 —2. 进程间通信 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.3/">C++ advance（五）Linux 进程和线程 —3. 信号 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.4/">C++ advance（五）Linux 进程和线程 —4. 进程和线程 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.5/">C++ advance（五）Linux 进程和线程 —5. 线程同步 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.1/">C++ advance（六）Linux 高并发网络编程开发 —1. 网络编程基础 socket</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.2/">C++ advance（六）Linux 高并发网络编程开发 —2.tcp 三次握手 - 并发 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.3/">C++ advance（六）Linux 高并发网络编程开发 —3.tcp 状态转换 - selcet poll</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.4/">C++ advance（六）Linux 高并发网络编程开发 —4.epoll udp</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.5/">C++ advance（六）Linux 高并发网络编程开发 —5. 广播 - 组播 - 本地套接字 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.6">C++ advance（六）Linux 高并发网络编程开发 —6.libevent</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.7">C++ advance（六）Linux 高并发网络编程开发 —7.xml json</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance7.1">C++ advance（七）Linux 高并发 web 服务器开发 —1.</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance7.2">C++ advance（七）Linux 高并发 web 服务器开发 —2.</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance7.3">C++ advance（七）Linux 高并发 web 服务器开发 —3.</a></p>
]]></content>
      <categories>
        <category>C++ advance</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>线程同步</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ advance（六）Linux 高并发网络编程开发 --3.tcp 状态转换 - selcet-poll</title>
    <url>/2021/04/16/C++%20advance6.3/</url>
    <content><![CDATA[<span id="more"></span>
<h3 id="C-advance- 文章总览"><a href="#C-advance- 文章总览" class="headerlink" title="C++ advance 文章总览"></a>C++ advance 文章总览 </h3><p><a href="https://wangxchun.github.io/2021/04/14/C++%20advance4.1/">C++ advance（四）Linux 命令基础 —1.Linux 常用命令 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance4.2/">C++ advance（四）Linux 命令基础 —2.vim 和 gcc 和 library</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance4.3/">C++ advance（四）Linux 命令基础 —3.makefile 和 gdb 和 IO</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance4.4/">C++ advance（四）Linux 命令基础 —4.stat 和 readdir 和 dup2</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advanc5.1/">C++ advance（五）Linux 进程和线程 —1. 进程控制 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.2/">C++ advance（五）Linux 进程和线程 —2. 进程间通信 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.3/">C++ advance（五）Linux 进程和线程 —3. 信号 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.4/">C++ advance（五）Linux 进程和线程 —4. 进程和线程 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.5/">C++ advance（五）Linux 进程和线程 —5. 线程同步 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.1/">C++ advance（六）Linux 高并发网络编程开发 —1. 网络编程基础 socket</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.2/">C++ advance（六）Linux 高并发网络编程开发 —2.tcp 三次握手 - 并发 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.3/">C++ advance（六）Linux 高并发网络编程开发 —3.tcp 状态转换 - selcet poll</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.4/">C++ advance（六）Linux 高并发网络编程开发 —4.epoll udp</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.5/">C++ advance（六）Linux 高并发网络编程开发 —5. 广播 - 组播 - 本地套接字 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.6">C++ advance（六）Linux 高并发网络编程开发 —6.libevent</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.7">C++ advance（六）Linux 高并发网络编程开发 —7.xml json</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance7.1">C++ advance（七）Linux 高并发 web 服务器开发 —1.</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance7.2">C++ advance（七）Linux 高并发 web 服务器开发 —2.</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance7.3">C++ advance（七）Linux 高并发 web 服务器开发 —3.</a></p>
]]></content>
      <categories>
        <category>C++ advance</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>高并发网络编程开发</tag>
        <tag>tcp</tag>
        <tag>状态转换</tag>
        <tag>selcet</tag>
        <tag>poll</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ advance（六）Linux 高并发网络编程开发 --4.epoll-udp</title>
    <url>/2021/04/16/C++%20advance6.4/</url>
    <content><![CDATA[<span id="more"></span>
<h3 id="C-advance- 文章总览"><a href="#C-advance- 文章总览" class="headerlink" title="C++ advance 文章总览"></a>C++ advance 文章总览 </h3><p><a href="https://wangxchun.github.io/2021/04/14/C++%20advance4.1/">C++ advance（四）Linux 命令基础 —1.Linux 常用命令 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance4.2/">C++ advance（四）Linux 命令基础 —2.vim 和 gcc 和 library</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance4.3/">C++ advance（四）Linux 命令基础 —3.makefile 和 gdb 和 IO</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance4.4/">C++ advance（四）Linux 命令基础 —4.stat 和 readdir 和 dup2</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advanc5.1/">C++ advance（五）Linux 进程和线程 —1. 进程控制 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.2/">C++ advance（五）Linux 进程和线程 —2. 进程间通信 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.3/">C++ advance（五）Linux 进程和线程 —3. 信号 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.4/">C++ advance（五）Linux 进程和线程 —4. 进程和线程 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.5/">C++ advance（五）Linux 进程和线程 —5. 线程同步 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.1/">C++ advance（六）Linux 高并发网络编程开发 —1. 网络编程基础 socket</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.2/">C++ advance（六）Linux 高并发网络编程开发 —2.tcp 三次握手 - 并发 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.3/">C++ advance（六）Linux 高并发网络编程开发 —3.tcp 状态转换 - selcet poll</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.4/">C++ advance（六）Linux 高并发网络编程开发 —4.epoll udp</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.5/">C++ advance（六）Linux 高并发网络编程开发 —5. 广播 - 组播 - 本地套接字 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.6">C++ advance（六）Linux 高并发网络编程开发 —6.libevent</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.7">C++ advance（六）Linux 高并发网络编程开发 —7.xml json</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance7.1">C++ advance（七）Linux 高并发 web 服务器开发 —1.</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance7.2">C++ advance（七）Linux 高并发 web 服务器开发 —2.</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance7.3">C++ advance（七）Linux 高并发 web 服务器开发 —3.</a></p>
]]></content>
      <categories>
        <category>C++ advance</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>高并发网络编程开发</tag>
        <tag>epoll udp</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ advance（六）Linux 高并发网络编程开发 --5. 广播 - 组播 - 本地套接字</title>
    <url>/2021/04/16/C++%20advance6.5/</url>
    <content><![CDATA[<span id="more"></span>
<h3 id="C-advance- 文章总览"><a href="#C-advance- 文章总览" class="headerlink" title="C++ advance 文章总览"></a>C++ advance 文章总览 </h3><p><a href="https://wangxchun.github.io/2021/04/14/C++%20advance4.1/">C++ advance（四）Linux 命令基础 —1.Linux 常用命令 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance4.2/">C++ advance（四）Linux 命令基础 —2.vim 和 gcc 和 library</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance4.3/">C++ advance（四）Linux 命令基础 —3.makefile 和 gdb 和 IO</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance4.4/">C++ advance（四）Linux 命令基础 —4.stat 和 readdir 和 dup2</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advanc5.1/">C++ advance（五）Linux 进程和线程 —1. 进程控制 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.2/">C++ advance（五）Linux 进程和线程 —2. 进程间通信 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.3/">C++ advance（五）Linux 进程和线程 —3. 信号 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.4/">C++ advance（五）Linux 进程和线程 —4. 进程和线程 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.5/">C++ advance（五）Linux 进程和线程 —5. 线程同步 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.1/">C++ advance（六）Linux 高并发网络编程开发 —1. 网络编程基础 socket</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.2/">C++ advance（六）Linux 高并发网络编程开发 —2.tcp 三次握手 - 并发 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.3/">C++ advance（六）Linux 高并发网络编程开发 —3.tcp 状态转换 - selcet poll</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.4/">C++ advance（六）Linux 高并发网络编程开发 —4.epoll udp</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.5/">C++ advance（六）Linux 高并发网络编程开发 —5. 广播 - 组播 - 本地套接字 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.6">C++ advance（六）Linux 高并发网络编程开发 —6.libevent</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.7">C++ advance（六）Linux 高并发网络编程开发 —7.xml json</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance7.1">C++ advance（七）Linux 高并发 web 服务器开发 —1.</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance7.2">C++ advance（七）Linux 高并发 web 服务器开发 —2.</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance7.3">C++ advance（七）Linux 高并发 web 服务器开发 —3.</a></p>
]]></content>
      <categories>
        <category>C++ advance</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>高并发网络编程开发</tag>
        <tag>广播</tag>
        <tag>组播</tag>
        <tag>本地套接字</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ advance（六）Linux 高并发网络编程开发 --6.libevent</title>
    <url>/2021/04/16/C++%20advance6.6/</url>
    <content><![CDATA[<span id="more"></span>
<h3 id="C-advance- 文章总览"><a href="#C-advance- 文章总览" class="headerlink" title="C++ advance 文章总览"></a>C++ advance 文章总览 </h3><p><a href="https://wangxchun.github.io/2021/04/14/C++%20advance4.1/">C++ advance（四）Linux 命令基础 —1.Linux 常用命令 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance4.2/">C++ advance（四）Linux 命令基础 —2.vim 和 gcc 和 library</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance4.3/">C++ advance（四）Linux 命令基础 —3.makefile 和 gdb 和 IO</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance4.4/">C++ advance（四）Linux 命令基础 —4.stat 和 readdir 和 dup2</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advanc5.1/">C++ advance（五）Linux 进程和线程 —1. 进程控制 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.2/">C++ advance（五）Linux 进程和线程 —2. 进程间通信 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.3/">C++ advance（五）Linux 进程和线程 —3. 信号 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.4/">C++ advance（五）Linux 进程和线程 —4. 进程和线程 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.5/">C++ advance（五）Linux 进程和线程 —5. 线程同步 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.1/">C++ advance（六）Linux 高并发网络编程开发 —1. 网络编程基础 socket</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.2/">C++ advance（六）Linux 高并发网络编程开发 —2.tcp 三次握手 - 并发 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.3/">C++ advance（六）Linux 高并发网络编程开发 —3.tcp 状态转换 - selcet poll</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.4/">C++ advance（六）Linux 高并发网络编程开发 —4.epoll udp</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.5/">C++ advance（六）Linux 高并发网络编程开发 —5. 广播 - 组播 - 本地套接字 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.6">C++ advance（六）Linux 高并发网络编程开发 —6.libevent</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.7">C++ advance（六）Linux 高并发网络编程开发 —7.xml json</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance7.1">C++ advance（七）Linux 高并发 web 服务器开发 —1.</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance7.2">C++ advance（七）Linux 高并发 web 服务器开发 —2.</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance7.3">C++ advance（七）Linux 高并发 web 服务器开发 —3.</a></p>
]]></content>
      <categories>
        <category>C++ advance</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>高并发网络编程开发</tag>
        <tag>libevent</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ advance（六）Linux 高并发网络编程开发 --7.xml json</title>
    <url>/2021/04/16/C++%20advance6.7/</url>
    <content><![CDATA[<span id="more"></span>
<h3 id="C-advance- 文章总览"><a href="#C-advance- 文章总览" class="headerlink" title="C++ advance 文章总览"></a>C++ advance 文章总览 </h3><p><a href="https://wangxchun.github.io/2021/04/14/C++%20advance4.1/">C++ advance（四）Linux 命令基础 —1.Linux 常用命令 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance4.2/">C++ advance（四）Linux 命令基础 —2.vim 和 gcc 和 library</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance4.3/">C++ advance（四）Linux 命令基础 —3.makefile 和 gdb 和 IO</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance4.4/">C++ advance（四）Linux 命令基础 —4.stat 和 readdir 和 dup2</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advanc5.1/">C++ advance（五）Linux 进程和线程 —1. 进程控制 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.2/">C++ advance（五）Linux 进程和线程 —2. 进程间通信 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.3/">C++ advance（五）Linux 进程和线程 —3. 信号 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.4/">C++ advance（五）Linux 进程和线程 —4. 进程和线程 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.5/">C++ advance（五）Linux 进程和线程 —5. 线程同步 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.1/">C++ advance（六）Linux 高并发网络编程开发 —1. 网络编程基础 socket</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.2/">C++ advance（六）Linux 高并发网络编程开发 —2.tcp 三次握手 - 并发 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.3/">C++ advance（六）Linux 高并发网络编程开发 —3.tcp 状态转换 - selcet poll</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.4/">C++ advance（六）Linux 高并发网络编程开发 —4.epoll udp</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.5/">C++ advance（六）Linux 高并发网络编程开发 —5. 广播 - 组播 - 本地套接字 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.6">C++ advance（六）Linux 高并发网络编程开发 —6.libevent</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.7">C++ advance（六）Linux 高并发网络编程开发 —7.xml json</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance7.1">C++ advance（七）Linux 高并发 web 服务器开发 —1.</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance7.2">C++ advance（七）Linux 高并发 web 服务器开发 —2.</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance7.3">C++ advance（七）Linux 高并发 web 服务器开发 —3.</a></p>
]]></content>
      <categories>
        <category>C++ advance</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>高并发网络编程开发</tag>
        <tag>xml</tag>
        <tag>json</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ advance7.1</title>
    <url>/2021/04/16/C++%20advance7.1/</url>
    <content><![CDATA[<span id="more"></span>
<h3 id="C-advance- 文章总览"><a href="#C-advance- 文章总览" class="headerlink" title="C++ advance 文章总览"></a>C++ advance 文章总览 </h3><p><a href="https://wangxchun.github.io/2021/04/14/C++%20advance4.1/">C++ advance（四）Linux 命令基础 —1.Linux 常用命令 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance4.2/">C++ advance（四）Linux 命令基础 —2.vim 和 gcc 和 library</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance4.3/">C++ advance（四）Linux 命令基础 —3.makefile 和 gdb 和 IO</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance4.4/">C++ advance（四）Linux 命令基础 —4.stat 和 readdir 和 dup2</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advanc5.1/">C++ advance（五）Linux 进程和线程 —1. 进程控制 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.2/">C++ advance（五）Linux 进程和线程 —2. 进程间通信 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.3/">C++ advance（五）Linux 进程和线程 —3. 信号 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.4/">C++ advance（五）Linux 进程和线程 —4. 进程和线程 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.5/">C++ advance（五）Linux 进程和线程 —5. 线程同步 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.1/">C++ advance（六）Linux 高并发网络编程开发 —1. 网络编程基础 socket</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.2/">C++ advance（六）Linux 高并发网络编程开发 —2.tcp 三次握手 - 并发 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.3/">C++ advance（六）Linux 高并发网络编程开发 —3.tcp 状态转换 - selcet poll</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.4/">C++ advance（六）Linux 高并发网络编程开发 —4.epoll udp</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.5/">C++ advance（六）Linux 高并发网络编程开发 —5. 广播 - 组播 - 本地套接字 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.6">C++ advance（六）Linux 高并发网络编程开发 —6.libevent</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.7">C++ advance（六）Linux 高并发网络编程开发 —7.xml json</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance7.1">C++ advance（七）Linux 高并发 web 服务器开发 —1.</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance7.2">C++ advance（七）Linux 高并发 web 服务器开发 —2.</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance7.3">C++ advance（七）Linux 高并发 web 服务器开发 —3.</a></p>
]]></content>
      <categories>
        <category>C++ advance</category>
      </categories>
  </entry>
  <entry>
    <title>C++ advance7.2</title>
    <url>/2021/04/16/C++%20advance7.2/</url>
    <content><![CDATA[<span id="more"></span>
<h3 id="C-advance- 文章总览"><a href="#C-advance- 文章总览" class="headerlink" title="C++ advance 文章总览"></a>C++ advance 文章总览 </h3><p><a href="https://wangxchun.github.io/2021/04/14/C++%20advance4.1/">C++ advance（四）Linux 命令基础 —1.Linux 常用命令 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance4.2/">C++ advance（四）Linux 命令基础 —2.vim 和 gcc 和 library</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance4.3/">C++ advance（四）Linux 命令基础 —3.makefile 和 gdb 和 IO</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance4.4/">C++ advance（四）Linux 命令基础 —4.stat 和 readdir 和 dup2</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advanc5.1/">C++ advance（五）Linux 进程和线程 —1. 进程控制 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.2/">C++ advance（五）Linux 进程和线程 —2. 进程间通信 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.3/">C++ advance（五）Linux 进程和线程 —3. 信号 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.4/">C++ advance（五）Linux 进程和线程 —4. 进程和线程 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.5/">C++ advance（五）Linux 进程和线程 —5. 线程同步 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.1/">C++ advance（六）Linux 高并发网络编程开发 —1. 网络编程基础 socket</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.2/">C++ advance（六）Linux 高并发网络编程开发 —2.tcp 三次握手 - 并发 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.3/">C++ advance（六）Linux 高并发网络编程开发 —3.tcp 状态转换 - selcet poll</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.4/">C++ advance（六）Linux 高并发网络编程开发 —4.epoll udp</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.5/">C++ advance（六）Linux 高并发网络编程开发 —5. 广播 - 组播 - 本地套接字 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.6">C++ advance（六）Linux 高并发网络编程开发 —6.libevent</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.7">C++ advance（六）Linux 高并发网络编程开发 —7.xml json</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance7.1">C++ advance（七）Linux 高并发 web 服务器开发 —1.</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance7.2">C++ advance（七）Linux 高并发 web 服务器开发 —2.</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance7.3">C++ advance（七）Linux 高并发 web 服务器开发 —3.</a></p>
]]></content>
      <categories>
        <category>C++ advance</category>
      </categories>
  </entry>
  <entry>
    <title>C++ advance7.3</title>
    <url>/2021/04/16/C++%20advance7.3/</url>
    <content><![CDATA[<span id="more"></span>
<h3 id="C-advance- 文章总览"><a href="#C-advance- 文章总览" class="headerlink" title="C++ advance 文章总览"></a>C++ advance 文章总览 </h3><p><a href="https://wangxchun.github.io/2021/04/14/C++%20advance4.1/">C++ advance（四）Linux 命令基础 —1.Linux 常用命令 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance4.2/">C++ advance（四）Linux 命令基础 —2.vim 和 gcc 和 library</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance4.3/">C++ advance（四）Linux 命令基础 —3.makefile 和 gdb 和 IO</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance4.4/">C++ advance（四）Linux 命令基础 —4.stat 和 readdir 和 dup2</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advanc5.1/">C++ advance（五）Linux 进程和线程 —1. 进程控制 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.2/">C++ advance（五）Linux 进程和线程 —2. 进程间通信 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.3/">C++ advance（五）Linux 进程和线程 —3. 信号 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.4/">C++ advance（五）Linux 进程和线程 —4. 进程和线程 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance5.5/">C++ advance（五）Linux 进程和线程 —5. 线程同步 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.1/">C++ advance（六）Linux 高并发网络编程开发 —1. 网络编程基础 socket</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.2/">C++ advance（六）Linux 高并发网络编程开发 —2.tcp 三次握手 - 并发 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.3/">C++ advance（六）Linux 高并发网络编程开发 —3.tcp 状态转换 - selcet poll</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.4/">C++ advance（六）Linux 高并发网络编程开发 —4.epoll udp</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.5/">C++ advance（六）Linux 高并发网络编程开发 —5. 广播 - 组播 - 本地套接字 </a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.6">C++ advance（六）Linux 高并发网络编程开发 —6.libevent</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance6.7">C++ advance（六）Linux 高并发网络编程开发 —7.xml json</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance7.1">C++ advance（七）Linux 高并发 web 服务器开发 —1.</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance7.2">C++ advance（七）Linux 高并发 web 服务器开发 —2.</a><br><a href="https://wangxchun.github.io/2021/04/16/C++%20advance7.3">C++ advance（七）Linux 高并发 web 服务器开发 —3.</a></p>
]]></content>
      <categories>
        <category>C++ advance</category>
      </categories>
  </entry>
  <entry>
    <title>dev C++ error:Id returned 1 exit status</title>
    <url>/2018/10/03/C++%20error%20Id%20returned%201%20exit%20status/</url>
    <content><![CDATA[<p><a href="https://wangxchun.github.io/2018/10/03/C++%20error%20Id%20returned%201%20exit%20status/">dev C++ error:Id returned 1 exit status</a><br><a href="https://wangxchun.github.io/2018/10/24/C++%20error%20no%20matching%20function%20for%20call%20to%20transform/">C++ error:no matching function for call to transform</a><br><a href="https://wangxchun.github.io/2018/10/29/C++%20error%20invalid-types-for-array-subscript/">C++ error: invalid types for array subscript</a></p>
<p> 可能有如下原因：</p>
<p>1、库函数拼写错误。如：printf，scanf, 等 <br><span id="more"></span><br>2、定义的函数名在调用时，函数名拼写错误 </p>
<p>3、在执行函数时可能函数体本身的问题 </p>
<p>4、关于其他人说的有程序在运行 </p>
]]></content>
      <categories>
        <category>C++ error</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Dev C++</tag>
        <tag>Id returned 1 exit status</tag>
        <tag>error</tag>
        <tag>错误</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ error crosses initialization of...</title>
    <url>/2021/04/27/C++%20error%20crosses-initialization-of/</url>
    <content><![CDATA[<p>原因</p>
<h4 id="1-switch- 的 -case- 中有定义变量"><a href="#1-switch- 的 -case- 中有定义变量" class="headerlink" title="1.switch 的 case 中有定义变量"></a>1.switch 的 case 中有定义变量 </h4><h4 id="2-goto- 跳过了变量的定义"><a href="#2-goto- 跳过了变量的定义" class="headerlink" title="2.goto 跳过了变量的定义"></a>2.goto 跳过了变量的定义</h4><p> 但后来我没有解决，因为 goto 是不被推荐使用的函数，所以我换了个方式写</p>
]]></content>
      <categories>
        <category>C++ error</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>error</tag>
        <tag>错误</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ error:invalid types for array subscript</title>
    <url>/2018/10/29/C++%20error%20invalid-types-for-array-subscript/</url>
    <content><![CDATA[<p><a href="https://wangxchun.github.io/2018/10/03/C++%20error%20Id%20returned%201%20exit%20status/">dev C++ error:Id returned 1 exit status</a><br><a href="https://wangxchun.github.io/2018/10/24/C++%20error%20no%20matching%20function%20for%20call%20to%20transform/">C++ error:no matching function for call to transform</a><br><a href="https://wangxchun.github.io/2018/10/29/C++%20error%20invalid-types-for-array-subscript/">C++ error: invalid types for array subscript</a></p>
<p>當全域性變數與區域性變數為同名，格式卻不同的時候會報此錯 <br> 如全域性中 int a [10]; 主函式中 int a=1；<br><span id="more"></span><br>再次使用 a [] 時會報錯</p>
]]></content>
      <categories>
        <category>C++ error</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>error</tag>
        <tag>错误</tag>
        <tag>invalid types for array subscript</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ error:no matching function for call to transform</title>
    <url>/2018/10/24/C++%20error%20no%20matching%20function%20for%20call%20to%20transform/</url>
    <content><![CDATA[<p><a href="https://wangxchun.github.io/2018/10/03/C++%20error%20Id%20returned%201%20exit%20status/">dev C++ error:Id returned 1 exit status</a><br><a href="https://wangxchun.github.io/2018/10/24/C++%20error%20no%20matching%20function%20for%20call%20to%20transform/">C++ error:no matching function for call to transform</a><br><a href="https://wangxchun.github.io/2018/10/29/C++%20error%20invalid-types-for-array-subscript/">C++ error: invalid types for array subscript</a></p>
<h3 id="報錯"><a href="# 報錯" class="headerlink" title="報錯"></a> 報錯 </h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	string str = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">	<span class="built_in">transform</span> (str.<span class="built_in">begin</span> (), str.<span class="built_in">end</span> (), str.<span class="built_in">begin</span> (), ::toupper);</span><br><span class="line">	cout &lt;&lt; str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p> 報錯：no matching function for call to transform</p>
<h3 id="有三種解決方法："><a href="# 有三種解決方法：" class="headerlink" title="有三種解決方法："></a> 有三種解決方法：</h3><h4 id="1- 因為在全域性名稱空間中有實現的函式（而不是巨集），所以我們明確名稱空間，這並不是總奏效，但是在我的 -g- 環境中沒有問題："><a href="#1- 因為在全域性名稱空間中有實現的函式（而不是巨集），所以我們明確名稱空間，這並不是總奏效，但是在我的 -g- 環境中沒有問題：" class="headerlink" title="1. 因為在全域性名稱空間中有實現的函式（而不是巨集），所以我們明確名稱空間，這並不是總奏效，但是在我的 g++ 環境中沒有問題："></a>1. 因為在全域性名稱空間中有實現的函式（而不是巨集），所以我們明確名稱空間，這並不是總奏效，但是在我的 g++ 環境中沒有問題：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">transform</span> (str.<span class="built_in">begin</span> (), str.<span class="built_in">end</span> (), str.<span class="built_in">begin</span> (), ::toupper);</span><br></pre></td></tr></table></figure>
<h4 id="2- 自己寫一個函數出來 -—wraper"><a href="#2- 自己寫一個函數出來 -—wraper" class="headerlink" title="2. 自己寫一個函數出來 —wraper"></a>2. 自己寫一個函數出來 —wraper</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">charToUpper</span> <span class="params">(<span class="keyword">char</span> c)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">return</span> std::<span class="built_in">toupper</span> (c); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3- 強制轉化：將 -toupper- 轉換為一個返回值為 -int，引數只有一個 -int- 的函數指標。"><a href="#3- 強制轉化：將 -toupper- 轉換為一個返回值為 -int，引數只有一個 -int- 的函數指標。" class="headerlink" title="3. 強制轉化：將 toupper 轉換為一個返回值為 int，引數只有一個 int 的函數指標。"></a>3. 強制轉化：將 toupper 轉換為一個返回值為 int，引數只有一個 int 的函數指標。</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">transform</span> (str.<span class="built_in">begin</span> (), str.<span class="built_in">end</span> (), str.<span class="built_in">begin</span> (), (<span class="built_in"><span class="keyword">int</span></span> (*)(<span class="keyword">int</span>)) toupper);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C++ error</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>error</tag>
        <tag>错误</tag>
        <tag>no matching function for call to transform</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 解釋一個語句</title>
    <url>/2018/10/28/C++%20explain-a-sentence/</url>
    <content><![CDATA[<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">A += B == <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>在邏輯上等於：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> b = B == <span class="number">1</span>;</span><br><span class="line">A += b;</span><br></pre></td></tr></table></figure></p>
<h3 id="C-learing- 总览"><a href="#C-learing- 总览" class="headerlink" title="C++ learing 总览"></a>C++ learing 总览 </h3><p><a href="https://wangxchun.github.io/2019/03/17/C++%20rounding/">C++ 四舍五入</a><br><a href="https://wangxchun.github.io/2019/03/16/C++%20get-out-each-digit-of-the-number/">C++ 取出一個數的每一位</a><br><a href="https://wangxchun.github.io/2019/03/14/C++%20rand/">C++ 利用 rand () 產生隨機數</a><br><a href="https://wangxchun.github.io/2018/11/05/C++%20small-summary/">C++ 小知识点总结</a><br><a href="https://wangxchun.github.io/2018/10/28/C++%20explain-a-sentence/">C++ 解釋一個語句</a><br><a href="https://wangxchun.github.io/2018/10/27/C++%20include/">C++ #include</a><br><a href="https://wangxchun.github.io/2018/10/27/C++%20RALL/">C++ RALL</a><br><a href="https://wangxchun.github.io/2018/09/23/C++%20operator/">C++ 运算符</a><br><a href="https://wangxchun.github.io/2018/09/27/C++%20universal-header-files/">C++ 万能标头档</a><br><a href="https://wangxchun.github.io/2018/09/27/Dev%20C++11/"> 讓 Dev C++ 支持 C++11</a></p>
]]></content>
      <categories>
        <category>C++ learn</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 取出一個數的每一位</title>
    <url>/2019/03/16/C++%20get-out-each-digit-of-the-number/</url>
    <content><![CDATA[<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line">&lt;!-- more --&gt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">long</span> t = <span class="number">123456789</span>;</span><br><span class="line">	<span class="keyword">int</span> arr [<span class="number">9</span>]; </span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=<span class="number">8</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		arr [i] = t /<span class="built_in"><span class="keyword">int</span></span> (<span class="built_in">pow</span> (<span class="number">10</span>,i)) % <span class="number">10</span>;</span><br><span class="line">		cout &lt;&lt; arr [i];</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="C-learing- 总览"><a href="#C-learing- 总览" class="headerlink" title="C++ learing 总览"></a>C++ learing 总览 </h3><p><a href="https://wangxchun.github.io/2019/03/17/C++%20rounding/">C++ 四舍五入</a><br><a href="https://wangxchun.github.io/2019/03/16/C++%20get-out-each-digit-of-the-number/">C++ 取出一個數的每一位</a><br><a href="https://wangxchun.github.io/2019/03/14/C++%20rand/">C++ 利用 rand () 產生隨機數</a><br><a href="https://wangxchun.github.io/2018/11/05/C++%20small-summary/">C++ 小知识点总结</a><br><a href="https://wangxchun.github.io/2018/10/28/C++%20explain-a-sentence/">C++ 解釋一個語句</a><br><a href="https://wangxchun.github.io/2018/10/27/C++%20include/">C++ #include</a><br><a href="https://wangxchun.github.io/2018/10/27/C++%20RALL/">C++ RALL</a><br><a href="https://wangxchun.github.io/2018/09/23/C++%20operator/">C++ 运算符</a><br><a href="https://wangxchun.github.io/2018/09/27/C++%20universal-header-files/">C++ 万能标头档</a><br><a href="https://wangxchun.github.io/2018/09/27/Dev%20C++11/"> 讓 Dev C++ 支持 C++11</a></p>
]]></content>
      <categories>
        <category>C++ learn</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ include</title>
    <url>/2018/10/27/C++%20include/</url>
    <content><![CDATA[<h3 id="被 -include- 的 -header-file- 中最常見的內容分為哪幾類？"><a href="# 被 -include- 的 -header-file- 中最常見的內容分為哪幾類？" class="headerlink" title="被 #include 的 header file 中最常見的內容分為哪幾類？"></a>被 #include 的 header file 中最常見的內容分為哪幾類？</h3><h5 id="1- 巨集定義"><a href="#1- 巨集定義" class="headerlink" title="(1) 巨集定義"></a>(1) 巨集定義</h5><h5 id="2-typedef"><a href="#2-typedef" class="headerlink" title="(2) typedef"></a>(2) typedef</h5><span id="more"></span>
<h5 id="3- 包含別的標頭檔案"><a href="#3- 包含別的標頭檔案" class="headerlink" title="(3) 包含別的標頭檔案"></a>(3) 包含別的標頭檔案 </h5><h5 id="4-inline- 函式定義"><a href="#4-inline- 函式定義" class="headerlink" title="(4) inline 函式定義"></a>(4) inline 函式定義</h5><h5 id="5- 函式宣告"><a href="#5- 函式宣告" class="headerlink" title="(5) 函式宣告"></a>(5) 函式宣告</h5><h5 id="6-struct-union-enum- 型別定義"><a href="#6-struct-union-enum- 型別定義" class="headerlink" title="(6) struct,union,enum 型別定義"></a>(6) struct,union,enum 型別定義</h5><h3 id="如何防止重複 -include？（更確切的表述為 -“重複 -include- 時如何防止重複定義 - 宣告？”）需要說出 -2- 種方案，並說明各自的優缺點？"><a href="# 如何防止重複 -include？（更確切的表述為 -“重複 -include- 時如何防止重複定義 - 宣告？”）需要說出 -2- 種方案，並說明各自的優缺點？" class="headerlink" title="如何防止重複 #include？（更確切的表述為 “重複 #include 時如何防止重複定義 / 宣告？”）需要說出 2 種方案，並說明各自的優缺點？"></a> 如何防止重複 #include？（更確切的表述為 “重複 #include 時如何防止重複定義 / 宣告？”）需要說出 2 種方案，並說明各自的優缺點？</h3><h4 id="1-pragma-once"><a href="#1-pragma-once" class="headerlink" title="(1) #pragma once"></a>(1) #pragma once</h4><p>優點：不會出現巨集名重複   缺點：某些老的編譯器不支援</p>
<h4 id="2-ifndef-XXX"><a href="#2-ifndef-XXX" class="headerlink" title="(2) ifndef XXX"></a>(2) ifndef XXX</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> XXX</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span>     優點：所以的編譯器都支援   缺點：出現巨集名重複</span></span><br></pre></td></tr></table></figure>
<p>一般我們看到大多都是選擇方案二，我們只要避免巨集名重複就行了</p>
<h3 id="C-learing- 总览"><a href="#C-learing- 总览" class="headerlink" title="C++ learing 总览"></a>C++ learing 总览 </h3><p><a href="https://wangxchun.github.io/2019/03/17/C++%20rounding/">C++ 四舍五入</a><br><a href="https://wangxchun.github.io/2019/03/16/C++%20get-out-each-digit-of-the-number/">C++ 取出一個數的每一位</a><br><a href="https://wangxchun.github.io/2019/03/14/C++%20rand/">C++ 利用 rand () 產生隨機數</a><br><a href="https://wangxchun.github.io/2018/11/05/C++%20small-summary/">C++ 小知识点总结</a><br><a href="https://wangxchun.github.io/2018/10/28/C++%20explain-a-sentence/">C++ 解釋一個語句</a><br><a href="https://wangxchun.github.io/2018/10/27/C++%20include/">C++ #include</a><br><a href="https://wangxchun.github.io/2018/10/27/C++%20RALL/">C++ RALL</a><br><a href="https://wangxchun.github.io/2018/09/23/C++%20operator/">C++ 运算符</a><br><a href="https://wangxchun.github.io/2018/09/27/C++%20universal-header-files/">C++ 万能标头档</a><br><a href="https://wangxchun.github.io/2018/09/27/Dev%20C++11/"> 讓 Dev C++ 支持 C++11</a></p>
]]></content>
      <categories>
        <category>C++ learn</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>include</tag>
        <tag>预处理</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 运算符</title>
    <url>/2018/09/23/C++%20operator/</url>
    <content><![CDATA[<h4 id="使用运算符要注意：接受的操作数、优先级、结合性、返回值。"><a href="# 使用运算符要注意：接受的操作数、优先级、结合性、返回值。" class="headerlink" title="使用运算符要注意：接受的操作数、优先级、结合性、返回值。"></a>使用运算符要注意：接受的操作数、优先级、结合性、返回值。</h4><p>C++ 中的运算符几乎 都可以写成函数调用的形式，因此不难理解表达式通常都有其返回值。赋值运算符的返回值是赋值后左操作数的引用。== 的返回值是一个布尔值，表示两边的操作数是否相等。以表达式 <em>a = 15 </em> 6 / 5 为例，它的返回值就是赋值后的 *a ，即 18。 sizeof 的返回值的意义比较多，篇幅所限，这里不分析它。<br><span id="more"></span></p>
<h4 id="是右结核性"><a href="# 是右结核性" class="headerlink" title="= 是右结核性"></a>= 是右结核性 </h4><p> 连续使用 = 会怎么样？<br>以 a = b = c 为例。<br>由于赋值运算符是右结合性的，原表达式相当于 a = (b = c)，所以先计算 b = c，然后返回 b；那么表达式就变成了 a = b，a 的值变为 b 的值。最后的结果就是 a 和 b 的值都变成 c 的值了。—— 这是符合人的直观感受的。可以证明，对于超过两个连续使用的赋值运算符，其结果都与上面的类似。这样做是不会引发编译器或者程序员的误解的。</p>
<h4 id="是左结合性"><a href="# 是左结合性" class="headerlink" title="== 是左结合性"></a>== 是左结合性 </h4><p> 连续使用 == 会怎么样？<br>以 a == b == c 为例。不妨假设其中三个变量都是 int 型，对于其他情况，分析方法类似。<br>左结合性：原表达式相当于 (a == b) == c 先计算 a == b，返回 true 或者 false。由于 c 是 int 型，因此会发生隐式类型转换，true 或者 false 会 <br> 被转换为 int 型的 1 或者 0。最后表达式就变成 1 == c 或者 0 == c。这显然不是在检查 a、b、c 三个变量是否相等，会引起误解。可以证明，对 <br> 于超过两个连续使用的 == 运算符，都会引起类似的误解。</p>
<h3 id="C-learing- 总览"><a href="#C-learing- 总览" class="headerlink" title="C++ learing 总览"></a>C++ learing 总览 </h3><p><a href="https://wangxchun.github.io/2019/03/17/C++%20rounding/">C++ 四舍五入</a><br><a href="https://wangxchun.github.io/2019/03/16/C++%20get-out-each-digit-of-the-number/">C++ 取出一個數的每一位</a><br><a href="https://wangxchun.github.io/2019/03/14/C++%20rand/">C++ 利用 rand () 產生隨機數</a><br><a href="https://wangxchun.github.io/2018/11/05/C++%20small-summary/">C++ 小知识点总结</a><br><a href="https://wangxchun.github.io/2018/10/28/C++%20explain-a-sentence/">C++ 解釋一個語句</a><br><a href="https://wangxchun.github.io/2018/10/27/C++%20include/">C++ #include</a><br><a href="https://wangxchun.github.io/2018/10/27/C++%20RALL/">C++ RALL</a><br><a href="https://wangxchun.github.io/2018/09/23/C++%20operator/">C++ 运算符</a><br><a href="https://wangxchun.github.io/2018/09/27/C++%20universal-header-files/">C++ 万能标头档</a><br><a href="https://wangxchun.github.io/2018/09/27/Dev%20C++11/"> 讓 Dev C++ 支持 C++11</a></p>
]]></content>
      <categories>
        <category>C++ learn</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>运算符</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 利用 rand () 產生隨機數</title>
    <url>/2019/03/14/C++%20rand/</url>
    <content><![CDATA[<h4 id="1-rand- 函數介紹"><a href="#1-rand- 函數介紹" class="headerlink" title="1.rand () 函數介紹"></a>1.rand () 函數介紹 </h4><p>rand () 的效果可以產生從 0~RAND_MAX (int 的最大值) 之間的隨機整數。<br><span id="more"></span><br> 在模擬亂數時，需要設定一個亂數種子，所以如果要讓每次執行程式的結果都不一樣的話，必須要設定不同的亂數種子，設定亂數種子的函數為 srand (int)。<br>一般來說，會在程式加上 srand (time (NULL)); 這一行，讓亂數種子以現在的時間做設定，這樣每次執行程式的結果就不同了。</p>
<h4 id="2- 任意浮點數範圍或是任意整數範圍的隨機數"><a href="#2- 任意浮點數範圍或是任意整數範圍的隨機數" class="headerlink" title="2. 任意浮點數範圍或是任意整數範圍的隨機數"></a>2. 任意浮點數範圍或是任意整數範圍的隨機數</h4><p>0~1 之間的隨機浮點數<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> x = (<span class="keyword">double</span>) <span class="built_in">rand</span> () / (RAND_MAX + <span class="number">1.0</span>);</span><br></pre></td></tr></table></figure><br>a~b 之間的隨機浮點數<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> x = (b - a) * <span class="built_in">rand</span> () / (RAND_MAX + <span class="number">1.0</span>) + a;</span><br></pre></td></tr></table></figure><br>a~b 之間的隨機整數<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> x = <span class="built_in">rand</span> () % (b - a + <span class="number">1</span>) + a;</span><br></pre></td></tr></table></figure></p>
<h4 id="3- 不公平的骰子"><a href="#3- 不公平的骰子" class="headerlink" title="3. 不公平的骰子"></a>3. 不公平的骰子 </h4><h3 id="C-learing- 总览"><a href="#C-learing- 总览" class="headerlink" title="C++ learing 总览"></a>C++ learing 总览</h3><p><a href="https://wangxchun.github.io/2019/03/17/C++%20rounding/">C++ 四舍五入</a><br><a href="https://wangxchun.github.io/2019/03/16/C++%20get-out-each-digit-of-the-number/">C++ 取出一個數的每一位</a><br><a href="https://wangxchun.github.io/2019/03/14/C++%20rand/">C++ 利用 rand () 產生隨機數</a><br><a href="https://wangxchun.github.io/2018/11/05/C++%20small-summary/">C++ 小知识点总结</a><br><a href="https://wangxchun.github.io/2018/10/28/C++%20explain-a-sentence/">C++ 解釋一個語句</a><br><a href="https://wangxchun.github.io/2018/10/27/C++%20include/">C++ #include</a><br><a href="https://wangxchun.github.io/2018/10/27/C++%20RALL/">C++ RALL</a><br><a href="https://wangxchun.github.io/2018/09/23/C++%20operator/">C++ 运算符</a><br><a href="https://wangxchun.github.io/2018/09/27/C++%20universal-header-files/">C++ 万能标头档</a><br><a href="https://wangxchun.github.io/2018/09/27/Dev%20C++11/"> 讓 Dev C++ 支持 C++11</a></p>
]]></content>
      <categories>
        <category>C++ learn</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>rand</tag>
        <tag>产生随机数</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ review(1)</title>
    <url>/2018/09/30/C++%20review1/</url>
    <content><![CDATA[<p><a href="https://wangxchun.github.io/2018/09/30/C++%20review1/">C++ review (1)</a><br><a href="https://wangxchun.github.io/2018/10/14/C++%20review2/">C++ review (2)</a><br><a href="https://wangxchun.github.io/2018/10/14/C++%20review3/">C++ review (3)</a></p>
<h3 id="一、認識 -C"><a href="# 一、認識 -C" class="headerlink" title="一、認識 C++"></a>一、認識 C++</h3><h3 id="二、數據類型"><a href="# 二、數據類型" class="headerlink" title="二、數據類型"></a>二、數據類型 </h3><h4 id="1- 基本數據類型"><a href="#1- 基本數據類型" class="headerlink" title="1. 基本數據類型"></a>1. 基本數據類型</h4><h4 id="2- 變量"><a href="#2- 變量" class="headerlink" title="2. 變量"></a>2. 變量</h4><h5 id="1- 變量的聲明和定義"><a href="#1- 變量的聲明和定義" class="headerlink" title="(1) 變量的聲明和定義"></a>(1) 變量的聲明和定義</h5><p> 聲明一個變量只是將變量名稱標識符的有關信息告訴編譯器，使編譯器 “認識” 該標識符，不一定分配記憶體空間。<br><span id="more"></span><br>定義一個變量意味著給變量分配内存空間，變量名就是對相應記憶體單元的命名。<br>在 C++ 程式中，大多數情況下，聲明變量的同時也就完成了變量的定義，只有聲明外部變量時例外。</p>
<h5 id="2- 外部變量"><a href="#2- 外部變量" class="headerlink" title="(2) 外部變量"></a>(2) 外部變量 </h5><p> 外部變量：一個變量除了在定義它的原始檔案中可以使用，還能被其他檔案使用。<br>命名空間作用域中定義的變量，默認情況下都是外部變量，若其他檔案要使用，則要加上 extern 關鍵字聲明。<br>定義性聲明（1. 命名空間中不加 extern 關鍵字的聲明 2.extern 聲明同時指定了初值）<br>引用性聲明（只有使用 extern 關鍵字，extern int i;）</p>
<h5 id="3- 變量的存儲類型"><a href="#3- 變量的存儲類型" class="headerlink" title="(3) 變量的存儲類型"></a>(3) 變量的存儲類型 </h5><p>(a) auto：采用堆棧方式分配記憶體空間，屬於暫時性存儲。<br> 函數中的形參和在函數中定義的局部變量（包括符合語句中的局部變量）都屬於此類。<br>(b) register：存放在通用寄存器中。(register 存取速度優於 RAM)<br>register 只是請求寄存器變量，不一定能夠成功 <br>(c) extern：在所有函數和程式段中都可以引用。<br>(d) static：在記憶體中是以固定地址存放的，在整個程式運行期間都有效。<br>static 在修飾全局變量時，該變量只能在當前文件中使用，其他文件無法訪問和使用。<br> 希望函數中的局部變量的值在函數調用結束後不消失而繼續保留原值。<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//extern 用法 </span></span><br><span class="line"><span class="comment">//-------------main.cpp-------------</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> a;<span class="comment">//extern 一定要加</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">f</span> <span class="params">()</span></span>;<span class="comment">//extern 可加可不加</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	a=<span class="number">100</span>;</span><br><span class="line">	<span class="built_in">f</span> ();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------f.cpp-------------</span></span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">print</span> (<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>(a) 靜態局部變量<br> 靜態局部變量的生存期為整個源程式，但是其作用域仍與自動變量相同，只能在定義該變量的函數内使用該變量。雖然離開定義它的函數後不能使用，但如再次調用定義它的函數，它又可繼續使用，且保存了前次被調用後留下的值。<br>因此，當多次調用一個函數且要求在調用之間保留某些變量的值時，可考慮采用靜態局部變量。雖然用全局變量也可以達到上述目的，但全局變量有時會造成意外的副作用（全局變量在離開函數之後，依舊可以操作）。<br>(b) 靜態全局變量（與 static 函數類似，内部函數和外部函數，内部函數又稱爲靜態函數）<br>非靜態全局變量的作用域是整個源程式，當一個源程式由多個原始檔案組成時，非靜態的全局變量在各個原始檔案中都是有效的（只要加上 extern 聲明）。<br>而靜態全局變量則只在定義該變量的原始檔案内有效，在同一個源程式中的其他原始檔案不能使用它，因此可以避免在其他原始檔案中引起錯誤。<br>    把局部變量改變成靜態變量後是改變了它的存儲方式，即改變了它的生存期。<br>    把全局變量改變成靜態變量，則是改變了它的作用域，限制了它的使用範圍。<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 靜態函數 </span></span><br><span class="line"><span class="comment">//-------------foo.h-------------</span></span><br><span class="line"><span class="comment">//f1 被定義爲 static，意思是只可以在這個 Compilation Unit 中生效</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f1</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;f1 ()&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//f2 沒有被定義為 static，可以被其他 Compilation Unit 訪問</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f2</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;f2 ()&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="/2018/09/30/C++%20review1/photo.png" alt><br>Foo.h 的 f1 雖然在每個 .cpp 檔也被定義了，但經過編譯後，所有的 f1 也會被隱藏在自己的目的檔中，連結器在找尋 symbol 的過程中，是會忽略的。<br> 但 f2 就不同了，所有的 f2 在目的檔中，是不會被隱藏，所以在連結器找尋 symbol，會找到多份的 f2，那連結就會有錯誤了。<br>所以在大部份的情況下，在 Header 檔中定義函數，也是需要 static 這個 keyword 的。</p>
<h4 id="3- 常量"><a href="#3- 常量" class="headerlink" title="3. 常量"></a>3. 常量 </h4><h5 id="1- 宏常量"><a href="#1- 宏常量" class="headerlink" title="(1) 宏常量"></a>(1) 宏常量</h5><p> 宏常量也称为符号常量，是指用一个标识符号来表示的常量，宏常量是由宏定义编译预处理命令来定义的。<br>使用宏定义的优点：可提高源程序的可维护性；可提高源程序的可移植性；减少源程序中重复书写字符串的工作量。<br>使用宏常量的最大问题是，宏常量没有数据类型。<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> day 7</span></span><br></pre></td></tr></table></figure></p>
<h5 id="2-const- 修飾的變量"><a href="#2-const- 修飾的變量" class="headerlink" title="(2) const 修飾的變量"></a>(2) const 修飾的變量</h5><p>const int month = 12;</p>
<h4 id="4- 關鍵字"><a href="#4- 關鍵字" class="headerlink" title="4. 關鍵字"></a>4. 關鍵字 </h4><h4 id="5- 標識符命名規則"><a href="#5- 標識符命名規則" class="headerlink" title="5. 標識符命名規則"></a>5. 標識符命名規則</h4><h3 id="三、運算符、表達式、語句"><a href="# 三、運算符、表達式、語句" class="headerlink" title="三、運算符、表達式、語句"></a> 三、運算符、表達式、語句 </h3><h3 id="四、程式流程控制"><a href="# 四、程式流程控制" class="headerlink" title="四、程式流程控制"></a> 四、程式流程控制 </h3><h3 id="五、陣列"><a href="# 五、陣列" class="headerlink" title="五、陣列"></a> 五、陣列 </h3><h4 id="1- 一維陣列"><a href="#1- 一維陣列" class="headerlink" title="1. 一維陣列"></a>1. 一維陣列</h4><h5 id="1- 陣列名"><a href="#1- 陣列名" class="headerlink" title="(1) 陣列名"></a>(1) 陣列名</h5><p> 在大多數用到陣列的表達式中，陣列會自動轉換成指向陣列首元素的指針，例如：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> ia [<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> *p = ia;</span><br></pre></td></tr></table></figure><br>但在以下情形，上述轉換不會發生<br>(a) 當陣列被用作 decltype 關鍵字的參數時<br>(b) 作爲取地址符 (&amp;)、sizeof、typeid 等運算符的運算對象時<br><img src="/2018/09/30/C++%20review1/test1.png" alt></p>
<pre><code>補充：類型轉換
(1) 舊有 C 風格的强制轉換是不推薦的，因爲不顯眼，容易被忽略
    (int) x;
    int (x);
(2) 隱式轉換
    (a) 將比較小的整型值提升到較大的整數類型
    (b) 在條件判斷中，將非 bool 類型轉換成 bool 類型
    (c) 初始化過程中，初始化值轉換成變量的類型；賦值語句中，右側運算對象轉換成左側運算對象的類型
    (d) 函數調用的時候會發生實參類型轉換
(3) 顯式轉換：C++ 四種 explicit 關鍵字
    (a) static_cast &lt;new_type&gt; (expression)
        static_cast 也不能去掉 expression 的 const、volitale、或者__unaligned 屬性
    (b) const_cast &lt;new_type&gt; (expression)
        它僅僅把一個它作用的表達式轉換成常量。它可以使一個本來不是 const 類型的數據轉換成 const 類型的，或者把 const 屬性去掉。
        const int p = 0;
        int &amp;rb = const_cast&lt;int&amp;&gt;(p);// 正確
        rb =10;
    (c) dynamic_cast &lt;new_type&gt; (expression)
    (d) reinterpret_cast &lt;new_type&gt; (expression)
</code></pre><h5 id="2- 找最大 - 小 - 值"><a href="#2- 找最大 - 小 - 值" class="headerlink" title="(2) 找最大 (小) 值"></a>(2) 找最大 (小) 值 </h5><p> 要找一個陣列中的最大值，可以設定一個變量，然後遍歷整個陣列，如果找到更大的數就更新該變量</p>
<h5 id="3- 排序"><a href="#3- 排序" class="headerlink" title="(3) 排序"></a>(3) 排序 </h5><p> 冒泡排序</p>
<h4 id="2- 二維陣列"><a href="#2- 二維陣列" class="headerlink" title="2. 二維陣列"></a>2. 二維陣列 </h4><h4 id="3- 從函數返回數組"><a href="#3- 從函數返回數組" class="headerlink" title="3. 從函數返回數組"></a>3. 從函數返回數組</h4><p> 如果想要從函數返回一個一維數組，必須聲明一個返回指針的函數 <br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">myFunction</span> <span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><br> 實例：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span> <span class="comment">//rand () 函數</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">getRandom</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> r [<span class="number">10</span>];</span><br><span class="line">	<span class="comment">// 設置種子</span></span><br><span class="line">	<span class="built_in">srand</span> ((unsingned) <span class="built_in">time</span> (<span class="literal">NULL</span>));</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)</span><br><span class="line">		r [i] = <span class="built_in">rand</span> ();</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> *p;</span><br><span class="line">	p = <span class="built_in">getRandom</span> ();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; *(p+i) &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="六、函數"><a href="# 六、函數" class="headerlink" title="六、函數"></a>六、函數 </h3><h4 id="1- 函數的分檔案編寫：讓程式結構更加清晰"><a href="#1- 函數的分檔案編寫：讓程式結構更加清晰" class="headerlink" title="1. 函數的分檔案編寫：讓程式結構更加清晰"></a>1. 函數的分檔案編寫：讓程式結構更加清晰</h4><h5 id="1- 創建後綴名為 -h- 的頭檔案，並在頭檔案中寫函數的聲明，例如：swap-h"><a href="#1- 創建後綴名為 -h- 的頭檔案，並在頭檔案中寫函數的聲明，例如：swap-h" class="headerlink" title="(1) 創建後綴名為.h 的頭檔案，並在頭檔案中寫函數的聲明，例如：swap.h"></a>(1) 創建後綴名為.h 的頭檔案，並在頭檔案中寫函數的聲明，例如：swap.h</h5><h5 id="2- 創建後綴名為 -cpp- 的原始檔案，在原始檔案中 -include-“swap-h”- 並寫函數的定義"><a href="#2- 創建後綴名為 -cpp- 的原始檔案，在原始檔案中 -include-“swap-h”- 並寫函數的定義" class="headerlink" title="(2) 創建後綴名為.cpp 的原始檔案，在原始檔案中 #include “swap.h” 並寫函數的定義"></a>(2) 創建後綴名為.cpp 的原始檔案，在原始檔案中 #include “swap.h” 並寫函數的定義</h5><h5 id="3- 在 -main- 函數檔案中，-include-“swap-h”，並可以使用該函數"><a href="#3- 在 -main- 函數檔案中，-include-“swap-h”，並可以使用該函數" class="headerlink" title="(3) 在 main 函數檔案中，#include “swap.h”，並可以使用該函數"></a>(3) 在 main 函數檔案中，#include “swap.h”，並可以使用該函數</h5><pre><code> 補充：
#include 實質的作用是預編譯的時候 copy include 標頭檔案的內容到當前列
#include 的路徑 (&quot;&quot; 和 &lt;&gt; 的區別)
#include &quot;swap.h&quot; 通常為自定義函數，在 Project 所在的路徑，若 complier 找不到則會去系統設定的目錄底下找
#include &lt;iostream&gt; 為 C++ 系統的函數庫，complier 會去系統設定的目錄底下去找
</code></pre><p>將需要分配記憶體空間的定義放在原始檔案中，例如：函數的定義，命名空間作用域中變量的定義；<br>而將不需要分配空間的聲明放在頭檔案中，例如：類聲明、外部函數的原型聲明、外部變量的聲明、基本數據類型常量的聲明。<br>内聯函數由於需要嵌入到每個調用它的函數之中，應該被編譯單元可見，定義應該出現在頭檔案當中。</p>
<h4 id="2- 外部函數"><a href="#2- 外部函數" class="headerlink" title="2. 外部函數"></a>2. 外部函數 </h4><p> 非成員函數，都是命名空間作用域的，如果沒有特殊説明，可以在不同的編譯單元中被調用，只要在調用之前聲明即可。</p>
<h4 id="3-static- 修飾命名空間作用域的變量或函數"><a href="#3-static- 修飾命名空間作用域的變量或函數" class="headerlink" title="3.static 修飾命名空間作用域的變量或函數"></a>3.static 修飾命名空間作用域的變量或函數 </h4><p> 命名空間作用域中聲明的變量或函數，在默認情況下都可以被其他編譯單元訪問，但有時並不希望被其他原始檔案引用，可以使用 static。<br>然而，ISO C++ 2.0 標準中，不鼓勵使用這種方式隱藏，而是使用匿名空間：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">f</span> <span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		n++;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="七、指針"><a href="# 七、指針" class="headerlink" title="七、指針"></a>七、指針</h3><h4 id="1- 指針的概念與使用"><a href="#1- 指針的概念與使用" class="headerlink" title="1. 指針的概念與使用"></a>1. 指針的概念與使用</h4><p>(1) 可以通過 &amp; 符號獲取變量的地址<br>(2) 利用指針可以記錄地址<br>(3) 對指針變量解引用 (*)，可以操作指針指向的記憶體存放的數據<br><img src="/2018/09/30/C++%20review1/test2.png" alt></p>
<h4 id="2- 指針所佔的記憶體空間"><a href="#2- 指針所佔的記憶體空間" class="headerlink" title="2. 指針所佔的記憶體空間"></a>2. 指針所佔的記憶體空間 </h4><p> 所有指針類型在 32 位作業系統下是 4 字節；在 64 位作業系統是 8 字節</p>
<h4 id="3- 空指針和野指針"><a href="#3- 空指針和野指針" class="headerlink" title="3. 空指針和野指針"></a>3. 空指針和野指針 </h4><p> 空指針指向記憶體中編號為 0 的空間，是用來初始化指針變量的 <br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> *p = <span class="literal">NULL</span>;</span><br><span class="line">cout &lt;&lt; *p &lt;&lt; endl; <span class="comment">// 訪問空指針報錯</span></span><br></pre></td></tr></table></figure><br> 空指針指向的記憶體是不可以訪問的（記憶體編號 0-255 為系統占用記憶體，不允許用戶訪問）<br>野指針指向非法的記憶體空間，也是不可以訪問的</p>
<h4 id="4-const- 和指針"><a href="#4-const- 和指針" class="headerlink" title="4.const 和指針"></a>4.const 和指針 </h4><h5 id="1- 指向常量的指針，稱爲常量指針"><a href="#1- 指向常量的指針，稱爲常量指針" class="headerlink" title="(1) 指向常量的指針，稱爲常量指針"></a>(1) 指向常量的指針，稱爲常量指針</h5><p> 只能防止通過指針修改記憶體中的數據，並不能保護指針所指向的對象。<br>可以將一個常量的地址賦值給常量指針。<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>, b = <span class="number">20</span>; <span class="comment">//const 在星號 * 前</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> *p1 = &amp;a;</span><br><span class="line">p1 = &amp;b; <span class="comment">// 正確</span></span><br><span class="line">*p1 = <span class="number">100</span>; <span class="comment">// 報錯</span></span><br></pre></td></tr></table></figure></p>
<h5 id="2- 指針本身是一個常量，指針指向的記憶體位置不能改變，稱爲指針常量"><a href="#2- 指針本身是一個常量，指針指向的記憶體位置不能改變，稱爲指針常量" class="headerlink" title="(2) 指針本身是一個常量，指針指向的記憶體位置不能改變，稱爲指針常量"></a>(2) 指針本身是一個常量，指針指向的記憶體位置不能改變，稱爲指針常量 </h5><p> 指針常量必須在聲明的時候同時初始化，這和聲明一般的常量是一樣的<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>, b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> * <span class="keyword">const</span> p2 = &amp;a; <span class="comment">//const 在星號 * 後</span></span><br><span class="line">*p2 =<span class="number">100</span>; <span class="comment">// 正確</span></span><br><span class="line">p2 = &amp;b; <span class="comment">// 報錯</span></span><br></pre></td></tr></table></figure></p>
<h5 id="3-const- 既修飾指針又修飾常量"><a href="#3-const- 既修飾指針又修飾常量" class="headerlink" title="(3) const 既修飾指針又修飾常量"></a>(3) const 既修飾指針又修飾常量</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>, b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> * <span class="keyword">const</span> p2 = &amp;a; <span class="comment">//const 在星號 * 前後都有</span></span><br><span class="line">*p2 =<span class="number">100</span>; <span class="comment">// 報錯</span></span><br><span class="line">p2 = &amp;b; <span class="comment">// 報錯</span></span><br></pre></td></tr></table></figure>
<h4 id="5- 指針和陣列"><a href="#5- 指針和陣列" class="headerlink" title="5. 指針和陣列"></a>5. 指針和陣列 </h4><p> 利用指針訪問陣列中的元素<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> arr [] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> *p = arr; <span class="comment">// 陣列名轉換成指向陣列第一個元素的指針</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">	cout &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line">	p++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="6- 指針和函數"><a href="#6- 指針和函數" class="headerlink" title="6. 指針和函數"></a>6. 指針和函數 </h4><p> 利用指針作爲函數的參數，可以修改實參的值<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span> <span class="params">(<span class="keyword">int</span>* p1, <span class="keyword">int</span>* p2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> temp = *p1;</span><br><span class="line">	*p1 = *p2;</span><br><span class="line">	*p2 = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>, b=<span class="number">20</span>;</span><br><span class="line">	<span class="built_in">swap</span> (&amp;a, &amp;b);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;a =&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;b =&quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></p>
<h4 id="7- 當陣列名傳入到函數作爲參數時，被退化為指向陣列首元素的指針"><a href="#7- 當陣列名傳入到函數作爲參數時，被退化為指向陣列首元素的指針" class="headerlink" title="7. 當陣列名傳入到函數作爲參數時，被退化為指向陣列首元素的指針"></a>7. 當陣列名傳入到函數作爲參數時，被退化為指向陣列首元素的指針 </h4><p> 例如：可以封裝一個函數，利用冒泡排序，實現對整型陣列的升序排序<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span> <span class="params">(<span class="keyword">int</span>* arr, <span class="keyword">int</span> len)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span> <span class="params">(<span class="keyword">int</span> arr [], <span class="keyword">int</span> len)</span></span>;</span><br><span class="line"><span class="comment">// 以上兩者是一樣的</span></span><br></pre></td></tr></table></figure></p>
<h4 id="8- 函數返回指針"><a href="#8- 函數返回指針" class="headerlink" title="8. 函數返回指針"></a>8. 函數返回指針 </h4><p> 如果想要從函數返回一個一維數組，必須聲明一個返回指針的函數</p>
<h4 id="9- 多級指針"><a href="#9- 多級指針" class="headerlink" title="9. 多級指針"></a>9. 多級指針 </h4><h3 id="八、結構體"><a href="# 八、結構體" class="headerlink" title="八、結構體"></a> 八、結構體</h3><h4 id="1- 結構體變量通過 -“-”- 訪問結構體成員"><a href="#1- 結構體變量通過 -“-”- 訪問結構體成員" class="headerlink" title="1. 結構體變量通過 “.” 訪問結構體成員"></a>1. 結構體變量通過 “.” 訪問結構體成員</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> // 類型名的首字母習慣大寫</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	string name; <span class="comment">// 姓名</span></span><br><span class="line">	<span class="keyword">int</span> age; <span class="comment">// 年齡</span></span><br><span class="line">	<span class="keyword">int</span> score; <span class="comment">// 分數</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">stu1</span> =</span> &#123; <span class="string">&quot; 李四 &quot;</span>,<span class="number">19</span>,<span class="number">60</span> &#125;;</span><br><span class="line">	stu1.name = <span class="string">&quot; 王五 &quot;</span>；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2- 結構體陣列"><a href="#2- 結構體陣列" class="headerlink" title="2. 結構體陣列"></a>2. 結構體陣列 </h4><p> 把自定義的結構體放到陣列中方便維護<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	string name; <span class="comment">// 姓名</span></span><br><span class="line">	<span class="keyword">int</span> age; <span class="comment">// 年齡</span></span><br><span class="line">	<span class="keyword">int</span> score; <span class="comment">// 分數</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Student arr [<span class="number">3</span>]=</span><br><span class="line">	&#123;</span><br><span class="line">		&#123;<span class="string">&quot; 张三 &quot;</span>,<span class="number">18</span>,<span class="number">80</span> &#125;,</span><br><span class="line">		&#123;<span class="string">&quot; 李四 &quot;</span>,<span class="number">19</span>,<span class="number">60</span> &#125;,</span><br><span class="line">		&#123;<span class="string">&quot; 王五 &quot;</span>,<span class="number">20</span>,<span class="number">70</span> &#125;</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot; 姓名：&quot;</span> &lt;&lt; arr [i].name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; arr [i].age &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; arr [i].score &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="3- 結構體指針可以通過 -gt- 操作符來訪問結構體成員"><a href="#3- 結構體指針可以通過 -gt- 操作符來訪問結構體成員" class="headerlink" title="3. 結構體指針可以通過 -&gt; 操作符來訪問結構體成員"></a>3. 結構體指針可以通過 -&gt; 操作符來訪問結構體成員</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	string name; <span class="comment">// 姓名</span></span><br><span class="line">	<span class="keyword">int</span> age; <span class="comment">// 年齡</span></span><br><span class="line">	<span class="keyword">int</span> score; <span class="comment">// 分數</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Student stu1 = &#123; <span class="string">&quot; 李四 &quot;</span>,<span class="number">19</span>,<span class="number">60</span> &#125;;</span><br><span class="line">	Student* p = &amp;stu1;</span><br><span class="line">	p-&gt;acore = <span class="number">80</span>;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">weekday</span> <span class="params">(struct week *wd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    wd-&gt;sleep_time = <span class="number">7.0</span>;       <span class="comment">// 7 小时</span></span><br><span class="line">    wd-&gt;work_time = <span class="number">8.5</span>;        <span class="comment">// 8.5 小时</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">weekend</span> <span class="params">(struct week *we)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    we-&gt;sleep_time = <span class="number">9.0</span>;       <span class="comment">// 9 小时</span></span><br><span class="line">    we-&gt;work_time = <span class="number">2.5</span>;        <span class="comment">// 2.5 小时</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">week</span> <span class="title">w</span>;</span></span><br><span class="line">    <span class="built_in">weekday</span> (&amp;w);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;weekday: sleep time =&quot;</span> &lt;&lt; w.sleep_time; &lt;&lt; <span class="string">&quot;, work time =&quot;</span> &lt;&lt; w.work_time;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">weekend</span> (&amp;w);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;weekend: sleep time =&quot;</span> &lt;&lt; w.sleep_time; &lt;&lt; <span class="string">&quot;, work time =&quot;</span> &lt;&lt; w.work_time;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4- 結構體嵌套結構體"><a href="#4- 結構體嵌套結構體" class="headerlink" title="4. 結構體嵌套結構體"></a>4. 結構體嵌套結構體 </h4><p> 結構體中的成員可以是另一個結構體 <br> 例如：每一個老師輔導一個學員，一個老師的結構體中，記錄一個學生的結構體<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	string name;</span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">	<span class="keyword">int</span> score;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> id;</span><br><span class="line">	string name;</span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">	Student stu;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 訪問老師輔導的學生的成績</span></span><br><span class="line"><span class="comment">//Teacher t1 = &#123;...&#125;;</span></span><br><span class="line"><span class="comment">//t1.stu.score = 80;</span></span><br></pre></td></tr></table></figure></p>
<h4 id="5- 結構體作爲函數參數"><a href="#5- 結構體作爲函數參數" class="headerlink" title="5. 結構體作爲函數參數"></a>5. 結構體作爲函數參數 </h4><p> 如果不想修改主函數中的數據，用值傳遞，反之用地址傳遞<br>(還有一種情形是爲了避免占用太多記憶體，用址傳遞，但是不想修改數據，則可以使用 const)<br>void printStudent (Student stu);<br>void setStudent (Student* stu);</p>
<h4 id="6- 結構體中 -const- 使用場景"><a href="#6- 結構體中 -const- 使用場景" class="headerlink" title="6. 結構體中 const 使用場景"></a>6. 結構體中 const 使用場景 </h4><p> 若結構體數據量太大，用值傳遞會占用太多記憶體，用址傳遞，指針只占用 8 個字節 (64 位作業系統)<br>加入 const 修飾，若在函數中不小心修改實參，編譯器會檢測出問題，讓 programmer 修改<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printStudent</span> <span class="params">(<span class="keyword">const</span> Student *stu)</span></span>;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>C++ review</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>環境配置</tag>
        <tag>數據類型</tag>
        <tag>運算符</tag>
        <tag>陣列</tag>
        <tag>指針</tag>
        <tag>結構體</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ review(3)</title>
    <url>/2018/10/14/C++%20review3/</url>
    <content><![CDATA[<p><a href="https://wangxchun.github.io/2018/09/30/C++%20review1/">C++ review (1)</a><br><a href="https://wangxchun.github.io/2018/10/14/C++%20review2/">C++ review (2)</a><br><a href="https://wangxchun.github.io/2018/10/14/C++%20review3/">C++ review (3)</a></p>
<h3 id="一、模板"><a href="# 一、模板" class="headerlink" title="一、模板"></a>一、模板</h3><span id="more"></span>
<h4 id="1- 模板的概念"><a href="#1- 模板的概念" class="headerlink" title="1. 模板的概念"></a>1. 模板的概念 </h4><h4 id="2- 函數模板"><a href="#2- 函數模板" class="headerlink" title="2. 函數模板"></a>2. 函數模板</h4><h4 id="3- 類模板"><a href="#3- 類模板" class="headerlink" title="3. 類模板"></a>3. 類模板</h4><h3 id="二、STL- 初識"><a href="# 二、STL- 初識" class="headerlink" title="二、STL 初識"></a> 二、STL 初識 </h3><h3 id="三、STL- 常用容器"><a href="# 三、STL- 常用容器" class="headerlink" title="三、STL 常用容器"></a> 三、STL 常用容器 </h3><h3 id="四、STL- 函數對象"><a href="# 四、STL- 函數對象" class="headerlink" title="四、STL 函數對象"></a> 四、STL 函數對象 </h3><h3 id="五、STL- 常用算法"><a href="# 五、STL- 常用算法" class="headerlink" title="五、STL 常用算法"></a> 五、STL 常用算法</h3>]]></content>
      <categories>
        <category>C++ review</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 四捨五入</title>
    <url>/2019/03/17/C++%20rounding/</url>
    <content><![CDATA[<p>round (a)：回傳 a 之小數經四捨五入後之值。<br>floor (a)：回傳 a 之小數無條件捨去後之值。<br>ceil (a)：回傳 a 之小數無條件進位後之值。<br><span id="more"></span><br>setprecision () 是輸入 / 輸出操縱器庫 <iomanip> 的一個操作符，可以用來修改浮點數的預設精度。<br>使用 setprecision (n) 可控制輸出流顯示浮點數的數字個數。C++ 預設的流輸出數值有效位是 6。<br>如果 setprecision (n) 與 setiosflags (ios::fixed) 合用，可以控制小數點右邊的數字個數。<br>setiosflags (ios::fixed) 是用定點方式表示實數</iomanip></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span> <span class="comment">// 輸出流控制，setiosflags (ios::fixed)，setprecision (n) 的標頭檔案</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">double</span> n = <span class="number">50.26548</span>;</span><br><span class="line">	<span class="built_in">printf</span> (<span class="string">&quot;%.4f&quot;</span>, n); cout &lt;&lt; endl; <span class="comment">// 列印輸出小數點後 4 位，會四捨五入</span></span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="built_in">setprecision</span> (<span class="number">4</span>) &lt;&lt; n &lt;&lt; endl;<span class="comment">// 輸出 4 位有效數字，包括整數和小數部分，會四捨五入 </span></span><br><span class="line">	cout &lt;&lt; <span class="built_in">setiosflags</span> (ios::fixed) &lt;&lt; <span class="built_in">setprecision</span> (<span class="number">4</span>) &lt;&lt; n &lt;&lt; endl;<span class="comment">// 輸出小數點後 4 位，會四捨五入，會影響後面的 setprecision () 輸出</span></span><br><span class="line">	cout &lt;&lt; <span class="built_in">setprecision</span> (<span class="number">4</span>) &lt;&lt; n &lt;&lt; endl;<span class="comment">// 只輸出小數點後 4 位，而不再是包括整數部分的 7 位，會四捨五入（但是此處受到前面影響，所以會輸出包含整數）</span></span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="built_in">setiosflags</span> (ios::fixed) &lt;&lt; <span class="built_in">setprecision</span> (<span class="number">4</span>)&lt;&lt; <span class="built_in">floor</span> (n * <span class="number">10000</span>)/<span class="number">10000</span>&lt;&lt; endl;<span class="comment">// 不會四捨五入，保留幾位小數就乘和除 10 的幾次方</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="C-learing- 总览"><a href="#C-learing- 总览" class="headerlink" title="C++ learing 总览"></a>C++ learing 总览 </h3><p><a href="https://wangxchun.github.io/2019/03/17/C++%20rounding/">C++ 四舍五入</a><br><a href="https://wangxchun.github.io/2019/03/16/C++%20get-out-each-digit-of-the-number/">C++ 取出一個數的每一位</a><br><a href="https://wangxchun.github.io/2019/03/14/C++%20rand/">C++ 利用 rand () 產生隨機數</a><br><a href="https://wangxchun.github.io/2018/11/05/C++%20small-summary/">C++ 小知识点总结</a><br><a href="https://wangxchun.github.io/2018/10/28/C++%20explain-a-sentence/">C++ 解釋一個語句</a><br><a href="https://wangxchun.github.io/2018/10/27/C++%20include/">C++ #include</a><br><a href="https://wangxchun.github.io/2018/10/27/C++%20RALL/">C++ RALL</a><br><a href="https://wangxchun.github.io/2018/09/23/C++%20operator/">C++ 运算符</a><br><a href="https://wangxchun.github.io/2018/09/27/C++%20universal-header-files/">C++ 万能标头档</a><br><a href="https://wangxchun.github.io/2018/09/27/Dev%20C++11/"> 讓 Dev C++ 支持 C++11</a></p>
]]></content>
      <categories>
        <category>C++ learn</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>刷題</tag>
        <tag>四捨五入</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 小知识点总结</title>
    <url>/2018/11/05/C++%20small-summary/</url>
    <content><![CDATA[<h3 id="返回多个参数的方法："><a href="# 返回多个参数的方法：" class="headerlink" title="返回多个参数的方法："></a>返回多个参数的方法：</h3><h4 id="1- 定义结构体"><a href="#1- 定义结构体" class="headerlink" title="1. 定义结构体"></a>1. 定义结构体 </h4><h4 id="2- 利用引用参数"><a href="#2- 利用引用参数" class="headerlink" title="2. 利用引用参数"></a>2. 利用引用参数</h4><h3 id="解决 -“数组大小必须事先决定”- 这个问题"><a href="# 解决 -“数组大小必须事先决定”- 这个问题" class="headerlink" title="解决 “数组大小必须事先决定” 这个问题"></a> 解决 “数组大小必须事先决定” 这个问题</h3><h4 id="1- 使用 -new- 和 -delete，有程序员自行分配内"><a href="#1- 使用 -new- 和 -delete，有程序员自行分配内" class="headerlink" title="1. 使用 new 和 delete，有程序员自行分配内"></a>1. 使用 new 和 delete，有程序员自行分配内</h4><span id="more"></span>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span> </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> size = <span class="number">0</span>; </span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot; 输入长度：&quot;</span>; </span><br><span class="line">    cin &gt;&gt; size; </span><br><span class="line">    <span class="keyword">int</span> *arr = <span class="keyword">new</span> <span class="keyword">int</span> [size]&#123;<span class="number">0</span>&#125;; </span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot; 输入元素值：&quot;</span> &lt;&lt; endl; </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123; </span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;arr [&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;] =&quot;</span>; </span><br><span class="line">        cin &gt;&gt; arr [i]; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot; 显示元素值：&quot;</span> &lt;&lt; endl; </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;arr [&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;] =&quot;</span> &lt;&lt; arr [i]</span><br><span class="line">             &lt;&lt; endl; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> [] arr; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注释：二维矩阵就是多段一维数组 <br> 例如需要一个 3X6 的矩阵<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span> </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> **arr = <span class="keyword">new</span> <span class="keyword">int</span>*[<span class="number">3</span>]; <span class="comment">//arr [0] 和 arr [1] 分别存储一维数组的位置</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        arr [i] = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">6</span>]&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 既然可以动态分配，那每一段数组的长度当然可以不一样</span></span><br><span class="line">    <span class="comment">//arr [0] = new int [3]&#123;0&#125;;</span></span><br><span class="line">    <span class="comment">//arr [1] = new int [5]&#123;0&#125;;</span></span><br><span class="line">    <span class="comment">//arr [3] = new int [3]&#123;0&#125;;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; j++) &#123;</span><br><span class="line">            cout &lt;&lt; arr [i][j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">delete</span> [] arr [i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> [] arr; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="2- 动态分配会使得程序难以理解，在需要建立长度不定的容器时，建议使用 -vector- 之类的容器"><a href="#2- 动态分配会使得程序难以理解，在需要建立长度不定的容器时，建议使用 -vector- 之类的容器" class="headerlink" title="2. 动态分配会使得程序难以理解，在需要建立长度不定的容器时，建议使用 vector 之类的容器"></a>2. 动态分配会使得程序难以理解，在需要建立长度不定的容器时，建议使用 vector 之类的容器 </h4><h3 id="static- 的使用时机"><a href="#static- 的使用时机" class="headerlink" title="static 的使用时机"></a>static 的使用时机</h3><h4 id="1- 改变变量的存储方式和生存周期"><a href="#1- 改变变量的存储方式和生存周期" class="headerlink" title="1. 改变变量的存储方式和生存周期"></a>1. 改变变量的存储方式和生存周期</h4><p> 局部变量</p>
<h4 id="2- 限制作用域"><a href="#2- 限制作用域" class="headerlink" title="2. 限制作用域"></a>2. 限制作用域 </h4><p> 全局函数和变量</p>
<h4 id="3- 唯一性"><a href="#3- 唯一性" class="headerlink" title="3. 唯一性"></a>3. 唯一性 </h4><p> 函数成员</p>
<h3 id="堆和栈的比较"><a href="# 堆和栈的比较" class="headerlink" title="堆和栈的比较"></a>堆和栈的比较 </h3><h4 id="堆是由低地址向高地址扩充的"><a href="# 堆是由低地址向高地址扩充的" class="headerlink" title="堆是由低地址向高地址扩充的"></a> 堆是由低地址向高地址扩充的 </h4><h4 id="堆是不连续的空间"><a href="# 堆是不连续的空间" class="headerlink" title="堆是不连续的空间"></a> 堆是不连续的空间 </h4><h4 id="在申请空间后，栈的分配要比堆还快"><a href="# 在申请空间后，栈的分配要比堆还快" class="headerlink" title="在申请空间后，栈的分配要比堆还快"></a> 在申请空间后，栈的分配要比堆还快 </h4><h4 id="生命周期"><a href="# 生命周期" class="headerlink" title="生命周期"></a> 生命周期</h4><h3 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h3><p>volatile 可以保证对特殊地址的稳定访问，通常用到如下几个地方</p>
<h4 id="1- 中断服务程式修改的供其他程式检测的变量"><a href="#1- 中断服务程式修改的供其他程式检测的变量" class="headerlink" title="1. 中断服务程式修改的供其他程式检测的变量"></a>1. 中断服务程式修改的供其他程式检测的变量 </h4><h4 id="2- 多工环境下各任务共享的标志"><a href="#2- 多工环境下各任务共享的标志" class="headerlink" title="2. 多工环境下各任务共享的标志"></a>2. 多工环境下各任务共享的标志</h4><h4 id="3- 存储器对应的硬体暂存器也要加 -volatile- 说明，因为每次对它的读写都可能有不同意义"><a href="#3- 存储器对应的硬体暂存器也要加 -volatile- 说明，因为每次对它的读写都可能有不同意义" class="headerlink" title="3. 存储器对应的硬体暂存器也要加 volatile 说明，因为每次对它的读写都可能有不同意义"></a>3. 存储器对应的硬体暂存器也要加 volatile 说明，因为每次对它的读写都可能有不同意义</h4><h3 id="输入"><a href="# 输入" class="headerlink" title="输入"></a> 输入</h3><p>C++ 输入 cin,cin.get (),cin.getline () 详细比较及例子<br><img src="/2018/11/05/C++%20small-summary/photo1.png" alt><br><a href="https://blog.csdn.net/a1015553840/article/details/50579396">https://blog.csdn.net/a1015553840/article/details/50579396</a><br><a href="https://blog.csdn.net/liangjiubujiu/article/details/83347325">https://blog.csdn.net/liangjiubujiu/article/details/83347325</a></p>
<h4 id="声明一个 -char- 数组，然后用 -gets- 函数，要 -include"><a href="# 声明一个 -char- 数组，然后用 -gets- 函数，要 -include" class="headerlink" title="声明一个 char 数组，然后用 gets () 函数，要 #include"></a>声明一个 char 数组，然后用 gets () 函数，要 #include<cstring></cstring></h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; words [i]!=<span class="string">&#x27;\0&#x27;</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因为 gets () 函数连空格也会接收，直到接收到 ‘\n’ 换行会停止 <br> 所以为了防止前面输入数据的换行被 gets () 接收，可以使用 char ch = getchar ();<br>或是 fflush (stdin); 清空缓存区（亲测无效，不知道为什么）</p>
<h4 id="声明一个 -string- 变量，然后使用 -cin"><a href="# 声明一个 -string- 变量，然后使用 -cin" class="headerlink" title="声明一个 string 变量，然后使用 cin"></a>声明一个 string 变量，然后使用 cin</h4><h3 id="C- 如何获取数组长度"><a href="#C- 如何获取数组长度" class="headerlink" title="C++ 如何获取数组长度"></a>C++ 如何获取数组长度</h3><h4 id="sizeof-array-sizeof-array-0"><a href="#sizeof-array-sizeof-array-0" class="headerlink" title="sizeof (array) /sizeof (array [0])"></a>sizeof (array) /sizeof (array [0])</h4><h3 id="C- 如何求字符串长度"><a href="#C- 如何求字符串长度" class="headerlink" title="C++ 如何求字符串长度"></a>C++ 如何求字符串长度</h3><h4 id="strlen"><a href="#strlen" class="headerlink" title="strlen ()"></a>strlen ()</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> str [<span class="number">20</span>]=<span class="string">&quot;0123456789&quot;</span>; </span><br><span class="line"><span class="keyword">int</span>   a=<span class="built_in">strlen</span> (str); <span class="comment">//a=10;strlen 计算字符串的长度，以 \0&#x27; 为字符串结束标记。 </span></span><br><span class="line"><span class="comment">//strlen 不区分是数组还是指针，就读到 \0 为止返回长度。而且 strlen 是不把 \0 计入字符串的长度的。</span></span><br></pre></td></tr></table></figure>
<pre><code>sizeof (...) 是运算符，在头文件中 typedef 为 unsigned int，其值在编译时即计算好了，参数可以是数组、指针、类型、对象、函数等。
它的功能是：获得保证能容纳实现所建立的最大对象的字节大小。
由于在编译时计算，因此 sizeof 不能用来返回动态分配的内存空间的大小。实际上，用 sizeof 来返回类型以及静态分配的对象、结构或数组所占的空间，返回值跟对象、结构、数组所存储的内容没有关系。
具体而言，当参数分别如下时，sizeof 返回的值表示的含义如下：
数组 —— 编译时分配的数组空间大小；
指针 —— 存储该指针所用的空间大小（存储该指针的地址的长度，是长整型，应该为 4）；
类型 —— 该类型所占的空间大小；
对象 —— 对象的实际占用空间大小；
函数 —— 函数的返回类型所占的空间大小。函数的返回类型不能是 void。
</code></pre><h4 id="sizeof"><a href="#sizeof" class="headerlink" title="sizeof ()"></a>sizeof ()</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>   b=<span class="built_in"><span class="keyword">sizeof</span></span> (str); <span class="comment">//b=20;sizeof 计算的则是分配的数组 str [20] 占的内存空间的大小，不受里面存储的内容影响。</span></span><br><span class="line"><span class="keyword">char</span> str2 []=<span class="string">&quot;absde&quot;</span>; <span class="comment">//sizeof (str2)=6，共有 a b s d e \0 六个字符。</span></span><br></pre></td></tr></table></figure>
<h3 id="string- 类型的字符串"><a href="#string- 类型的字符串" class="headerlink" title="string 类型的字符串"></a>string 类型的字符串</h3><p>str.length () 和 str.size () 是用于求 string 类对象的成员函数</p>
<h3 id="补充：string- 字符串 -gt-c- 字符串转换"><a href="# 补充：string- 字符串 -gt-c- 字符串转换" class="headerlink" title="补充：string 字符串 -&gt;c 字符串转换"></a>补充：string 字符串 -&gt;c 字符串转换</h3><p>string s1 = “far away”;<br>const char* c = s1.c_str ();</p>
<h3 id="大小写转换"><a href="# 大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h3><h4 id="string- 字符"><a href="#string- 字符" class="headerlink" title="string 字符"></a>string 字符</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string str=<span class="string">&quot;how are you&quot;</span>;</span><br><span class="line">    <span class="built_in">transform</span> (str.<span class="built_in">begin</span> (),str.<span class="built_in">end</span> (),str.<span class="built_in">begin</span> (),::toupper);</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="字符转换成数字"><a href="# 字符转换成数字" class="headerlink" title="字符转换成数字"></a>字符转换成数字</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> ch = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">int</span> num = ch - <span class="number">0</span>;</span><br><span class="line">cout &lt;&lt; num &lt;&lt; endl;</span><br></pre></td></tr></table></figure>
<h3 id="string- 和 -int- 的转换"><a href="#string- 和 -int- 的转换" class="headerlink" title="string 和 int 的转换"></a>string 和 int 的转换</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//int --&gt; string</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">5</span>;</span><br><span class="line">string s = <span class="built_in">to_string</span> (i);</span><br><span class="line"><span class="comment">//string --&gt; int;</span></span><br><span class="line">string s = <span class="string">&quot;123.257&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="built_in">stoi</span> (s) &lt;&lt; endl;</span><br></pre></td></tr></table></figure>
<h3 id="atoi- 和 -stoi- 的区别"><a href="#atoi- 和 -stoi- 的区别" class="headerlink" title="atoi () 和 stoi () 的区别"></a>atoi () 和 stoi () 的区别 </h3><p> 相同点：</p>
<ol>
<li>都是 C++ 的字符处理函数，把数字字符串转换成 int 输出</li>
<li>头文件都是 #include<cstring><br>不同点：<br>1.atoi () 的参数是 const char<em> , 因此对于一个字符串 str 我们必须调用 c_str () 的方法把这个 string 转换成 const char </em> 类型的，而 stoi () 的参数是 const string<em>, 不需要转化为 const char</em><br>2.stoi () 会做范围检查，默认范围是在 int 的范围内的，如果超出范围的话则会 runtime error；而 atoi () 不会做范围检查，如果超出范围的话，超出上界，则输出上界，超出下界，则输出下界</cstring></li>
</ol>
<h3 id="26- 个字母和数字符号 -ASCII- 码对照表"><a href="#26- 个字母和数字符号 -ASCII- 码对照表" class="headerlink" title="26 个字母和数字符号 ASCII 码对照表"></a>26 个字母和数字符号 ASCII 码对照表</h3><p><a href="https://blog.csdn.net/Lucky_bo/article/details/52247939">https://blog.csdn.net/Lucky_bo/article/details/52247939</a><br><a href="http://www.eion.com.tw/Blogger/?Pid=1128">http://www.eion.com.tw/Blogger/?Pid=1128</a></p>
<h3 id="c- 将一个 -char- 转化为 -string"><a href="#c- 将一个 -char- 转化为 -string" class="headerlink" title="c++ 将一个 char 转化为 string"></a>c++ 将一个 char 转化为 string</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> c = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="comment">// 使用 string 的构造函数</span></span><br><span class="line"><span class="function">string <span class="title">s</span> <span class="params">(<span class="number">1</span>,c)</span></span>;</span><br></pre></td></tr></table></figure>
<h3 id="C-learing- 总览"><a href="#C-learing- 总览" class="headerlink" title="C++ learing 总览"></a>C++ learing 总览 </h3><p><a href="https://wangxchun.github.io/2019/03/17/C++%20rounding/">C++ 四舍五入</a><br><a href="https://wangxchun.github.io/2019/03/16/C++%20get-out-each-digit-of-the-number/">C++ 取出一個數的每一位</a><br><a href="https://wangxchun.github.io/2019/03/14/C++%20rand/">C++ 利用 rand () 產生隨機數</a><br><a href="https://wangxchun.github.io/2018/11/05/C++%20small-summary/">C++ 小知识点总结</a><br><a href="https://wangxchun.github.io/2018/10/28/C++%20explain-a-sentence/">C++ 解釋一個語句</a><br><a href="https://wangxchun.github.io/2018/10/27/C++%20include/">C++ #include</a><br><a href="https://wangxchun.github.io/2018/10/27/C++%20RALL/">C++ RALL</a><br><a href="https://wangxchun.github.io/2018/09/23/C++%20operator/">C++ 运算符</a><br><a href="https://wangxchun.github.io/2018/09/27/C++%20universal-header-files/">C++ 万能标头档</a><br><a href="https://wangxchun.github.io/2018/09/27/Dev%20C++11/"> 讓 Dev C++ 支持 C++11</a></p>
]]></content>
      <categories>
        <category>C++ learn</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 万能标头档</title>
    <url>/2018/09/27/C++%20universal-header-files/</url>
    <content><![CDATA[<p>C++ 万能标头档<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<h3 id="C-learing- 总览"><a href="#C-learing- 总览" class="headerlink" title="C++ learing 总览"></a>C++ learing 总览 </h3><p><a href="https://wangxchun.github.io/2019/03/17/C++%20rounding/">C++ 四舍五入</a><br><a href="https://wangxchun.github.io/2019/03/16/C++%20get-out-each-digit-of-the-number/">C++ 取出一個數的每一位</a><br><a href="https://wangxchun.github.io/2019/03/14/C++%20rand/">C++ 利用 rand () 產生隨機數</a><br><a href="https://wangxchun.github.io/2018/11/05/C++%20small-summary/">C++ 小知识点总结</a><br><a href="https://wangxchun.github.io/2018/10/28/C++%20explain-a-sentence/">C++ 解釋一個語句</a><br><a href="https://wangxchun.github.io/2018/10/27/C++%20include/">C++ #include</a><br><a href="https://wangxchun.github.io/2018/10/27/C++%20RALL/">C++ RALL</a><br><a href="https://wangxchun.github.io/2018/09/23/C++%20operator/">C++ 运算符</a><br><a href="https://wangxchun.github.io/2018/09/27/C++%20universal-header-files/">C++ 万能标头档</a><br><a href="https://wangxchun.github.io/2018/09/27/Dev%20C++11/"> 讓 Dev C++ 支持 C++11</a></p>
]]></content>
      <categories>
        <category>C++ learn</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 資料結構與算法 -- 一。線性表 --1. 線性表的存儲結構</title>
    <url>/2019/06/02/C++%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B%E8%88%87%E7%AE%97%E6%B3%95-%E7%B7%9A%E6%80%A7%E8%A1%A8%E7%9A%84%E5%AD%98%E5%84%B2%E7%B5%90%E6%A7%8B/</url>
    <content><![CDATA[<h3 id="一、順序表"><a href="# 一、順序表" class="headerlink" title="一、順序表"></a> 一、順序表 </h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="二、單鏈表（Single-Linked-List）"><a href="# 二、單鏈表（Single-Linked-List）" class="headerlink" title="二、單鏈表（Single Linked List）"></a> 二、單鏈表（Single Linked List）</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 單鏈表的節點定義 </span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    T data;</span><br><span class="line">    LinkNode&lt;T&gt; *next;</span><br><span class="line">    <span class="built_in">LinkNode</span> (LinkNode&lt;T&gt; *ptr = <span class="literal">NULL</span>)&#123;next = ptr;&#125;</span><br><span class="line">    <span class="built_in">LinkNode</span> (<span class="keyword">const</span> T &amp;item, LinkNode&lt;T&gt; *ptr = <span class="literal">NULL</span>)    </span><br><span class="line">    &#123;</span><br><span class="line">        next = ptr;</span><br><span class="line">        data = item;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 帶頭節點的單鏈表定義 </span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkList</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 無參數的構造函數 </span></span><br><span class="line">    <span class="built_in">LinkList</span> ()&#123;head = <span class="keyword">new</span> LinkNode&lt;T&gt;;&#125;</span><br><span class="line">    <span class="comment">// 帶參數的構造函數 </span></span><br><span class="line">    <span class="built_in">LinkList</span> (<span class="keyword">const</span> T &amp;item)&#123;head = <span class="keyword">new</span> LinkNode&lt;T&gt;(item);&#125;</span><br><span class="line">    <span class="comment">// 複製構造函數 </span></span><br><span class="line">    <span class="built_in">LinkList</span> (LinkList&lt;T&gt; &amp;List);</span><br><span class="line">    <span class="comment">// 析構函數 </span></span><br><span class="line">    ~<span class="built_in">LinkList</span> ()&#123;<span class="built_in">Clear</span> ();&#125;</span><br><span class="line">    <span class="comment">// 重載函數：賦值 </span></span><br><span class="line">    LinkList&lt;T&gt;&amp; <span class="keyword">operator</span>=(LinkList&lt;T&gt; &amp;List);</span><br><span class="line">   	<span class="comment">// 定位指定的位置，返回該位置上的節點指針 </span></span><br><span class="line">   	<span class="function">LinkNode&lt;T&gt;* <span class="title">Locate</span> <span class="params">(<span class="keyword">int</span> pos)</span></span>;</span><br><span class="line">   	<span class="comment">// 在指定位置 pos 插入值为 item 的節點，失敗返回 false</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">Insert</span> <span class="params">(T &amp;item, <span class="keyword">int</span> pos)</span></span>;</span><br><span class="line">    <span class="comment">// 删除指定位置 pos 上的節點，item 就是該節點的值，失敗返回 false</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">Remove</span> <span class="params">(<span class="keyword">int</span> pos, T &amp;item)</span></span>;</span><br><span class="line">    <span class="comment">// 鏈表清空 </span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Clear</span> <span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 獲取鏈表長度 </span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Length</span> <span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="comment">// 打印鏈表 </span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Print</span> <span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="comment">// 獲取鏈表頭節點 </span></span><br><span class="line">    <span class="function">LinkNode&lt;T&gt;* <span class="title">GetHead</span> <span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="comment">// 設置鏈表頭節點 </span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetHead</span> <span class="params">(LinkNode&lt;T&gt; *p)</span></span>;</span><br><span class="line">    <span class="comment">// 查找數據的位置，返回第一個找到的滿足該數值的節點指針 </span></span><br><span class="line">    <span class="function">LinkNode&lt;T&gt;* <span class="title">Find</span> <span class="params">(T &amp;item)</span></span>;</span><br><span class="line">    <span class="comment">// 獲取指定位置 pos 的節點的值，失敗返回 false</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">GetData</span> <span class="params">(<span class="keyword">int</span> pos, T &amp;item)</span></span>;</span><br><span class="line">    <span class="comment">// 設置指定位置 pos 的節點的值，失敗返回 false</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">SetData</span> <span class="params">(<span class="keyword">int</span> pos, T &amp;item)</span></span>;</span><br><span class="line">    <span class="comment">// 判斷鏈表是否為空 </span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">IsEmpty</span> <span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="comment">// 鏈表排序 </span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Sort</span> <span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 鏈表逆置 </span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Reverse</span> <span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    LinkNode&lt;T&gt; *head;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="三、靜態表"><a href="# 三、靜態表" class="headerlink" title="三、靜態表"></a> 三、靜態表 </h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="二、棧（Stack）"><a href="# 二、棧（Stack）" class="headerlink" title="二、棧（Stack）"></a> 二、棧（Stack）</h3><h3 id="三、隊列（Queue）"><a href="# 三、隊列（Queue）" class="headerlink" title="三、隊列（Queue）"></a> 三、隊列（Queue）</h3><h3 id="四、串（String）"><a href="# 四、串（String）" class="headerlink" title="四、串（String）"></a> 四、串（String）</h3><h3 id="五、陣列（Array）"><a href="# 五、陣列（Array）" class="headerlink" title="五、陣列（Array）"></a> 五、陣列（Array）</h3><h3 id="六、廣義表（Generalize-List）"><a href="# 六、廣義表（Generalize-List）" class="headerlink" title="六、廣義表（Generalize List）"></a> 六、廣義表（Generalize List）</h3>]]></content>
      <categories>
        <category>C++資料結構</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>讓 Dev C++ 支持 C++11</title>
    <url>/2018/09/27/Dev%20C++11/</url>
    <content><![CDATA[<p>在 DevC++ 中 <br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">set&lt;<span class="keyword">int</span>&gt; a &#123;i/<span class="number">100</span>, i/<span class="number">10</span>%<span class="number">10</span>, i%<span class="number">10</span>&#125;;</span><br></pre></td></tr></table></figure><br> 會出現如下錯誤<br><img src="/2018/09/27/Dev%20C++11/wrong1.png" alt><br><span id="more"></span></p>
<h3 id="解決方法"><a href="# 解決方法" class="headerlink" title="解決方法"></a>解決方法</h3><p>(1) 先在 dev 的 [工具] 里找到 [編譯選項]<br>(2) 勾選 [編譯時加入以下命令] 欄位並填入 - std=c++11</p>
<h3 id="C-learing- 总览"><a href="#C-learing- 总览" class="headerlink" title="C++ learing 总览"></a>C++ learing 总览 </h3><p><a href="https://wangxchun.github.io/2019/03/17/C++%20rounding/">C++ 四舍五入</a><br><a href="https://wangxchun.github.io/2019/03/16/C++%20get-out-each-digit-of-the-number/">C++ 取出一個數的每一位</a><br><a href="https://wangxchun.github.io/2019/03/14/C++%20rand/">C++ 利用 rand () 產生隨機數</a><br><a href="https://wangxchun.github.io/2018/11/05/C++%20small-summary/">C++ 小知识点总结</a><br><a href="https://wangxchun.github.io/2018/10/28/C++%20explain-a-sentence/">C++ 解釋一個語句</a><br><a href="https://wangxchun.github.io/2018/10/27/C++%20include/">C++ #include</a><br><a href="https://wangxchun.github.io/2018/10/27/C++%20RALL/">C++ RALL</a><br><a href="https://wangxchun.github.io/2018/09/23/C++%20operator/">C++ 运算符</a><br><a href="https://wangxchun.github.io/2018/09/27/C++%20universal-header-files/">C++ 万能标头档</a><br><a href="https://wangxchun.github.io/2018/09/27/Dev%20C++11/"> 讓 Dev C++ 支持 C++11</a></p>
]]></content>
      <categories>
        <category>C++ learn</category>
      </categories>
      <tags>
        <tag>Dev C++</tag>
        <tag>C++ 11</tag>
      </tags>
  </entry>
  <entry>
    <title>工程实践与科技创新 2A--(1) 时钟选择与 GPIO 操作</title>
    <url>/2021/04/28/Engineering-Practice-2A-1/</url>
    <content><![CDATA[<h3 id="一、编程开发环境安装与配置"><a href="# 一、编程开发环境安装与配置" class="headerlink" title="一、编程开发环境安装与配置"></a>一、编程开发环境安装与配置 </h3><p> 基于 TM4C1294NCPDT 微控制器，编程开发环境安装与配置（Keil5 + TivaWare）<br>TM4C1294 属于 TI 公司基于 ARM Cortex M4 内核的 Tiva C 系列的 MCU<br>TivaWare 是 TI 公司提供的针对 Tiva C 系列 MCU 的一套软件开发包</p>
<h4 id="1- 开发板介绍"><a href="#1- 开发板介绍" class="headerlink" title="1. 开发板介绍"></a>1. 开发板介绍</h4><p><img src="/2021/04/28/Engineering-Practice-2A-1/photo1.jpg" alt></p>
<h5 id="1-MCU"><a href="#1-MCU" class="headerlink" title="(1) MCU"></a>(1) MCU</h5><h5 id="2- 仿真器电路：将在电脑上写的程式下载到 -MCU- 中"><a href="#2- 仿真器电路：将在电脑上写的程式下载到 -MCU- 中" class="headerlink" title="(2) 仿真器电路：将在电脑上写的程式下载到 MCU 中"></a>(2) 仿真器电路：将在电脑上写的程式下载到 MCU 中</h5><h5 id="3- 引脚"><a href="#3- 引脚" class="headerlink" title="(3) 引脚"></a>(3) 引脚</h5><p><img src="/2021/04/28/Engineering-Practice-2A-1/photo2.png" alt="软件包安装"><center> 软件包安装 </center></p>
<h4 id="2-Keil5- 集成开发环境安装"><a href="#2-Keil5- 集成开发环境安装" class="headerlink" title="2.Keil5 集成开发环境安装"></a>2.Keil5 集成开发环境安装 </h4><h4 id="3-TM4C- 系列芯片及板卡的 -DFP- 安装"><a href="#3-TM4C- 系列芯片及板卡的 -DFP- 安装" class="headerlink" title="3.TM4C 系列芯片及板卡的 DFP 安装"></a>3.TM4C 系列芯片及板卡的 DFP 安装</h4><p> 完成 Keil.TM4C_DFP.1.1.0.pack 安装后，<br>可以在 Keil 集成开发环境中选择 TI 公司的 TM4C 系列芯片</p>
<h4 id="4-TM4C1294XL- 的驱动库及样例程序安装"><a href="#4-TM4C1294XL- 的驱动库及样例程序安装" class="headerlink" title="4.TM4C1294XL 的驱动库及样例程序安装"></a>4.TM4C1294XL 的驱动库及样例程序安装 </h4><p> 运行 SW-EK-TM4C1294XL-2.1.4.178.exe</p>
<h4 id="5-Stellaris-ICDI- 调试驱动安装"><a href="#5-Stellaris-ICDI- 调试驱动安装" class="headerlink" title="5.Stellaris ICDI 调试驱动安装"></a>5.Stellaris ICDI 调试驱动安装 </h4><p> 将 TM4C1294XL LaunchPad 开发板通过 USB 线与电脑相连 <br> 打开电脑的设备管理器（如果没有安装 Stellaris ICDI 设备驱动，会显示无法识别该设备）<br>更新驱动程式，从电脑中选择驱动软件，老师给的软件安装包中有<br><img src="/2021/04/28/Engineering-Practice-2A-1/photo8.png" alt="安装驱动成功之后"></p>
<h3 id="二、在 -Keil5- 中建立基于 -TivaWare- 库的 -TM4C1294- 项目"><a href="# 二、在 -Keil5- 中建立基于 -TivaWare- 库的 -TM4C1294- 项目" class="headerlink" title="二、在 Keil5 中建立基于 TivaWare 库的 TM4C1294 项目"></a>二、在 Keil5 中建立基于 TivaWare 库的 TM4C1294 项目 </h3><h4 id="1- 介绍安装的文件夹"><a href="#1- 介绍安装的文件夹" class="headerlink" title="1. 介绍安装的文件夹"></a>1. 介绍安装的文件夹</h4><p> 安装默认路径：C:\ti\TivaWare_C_Series-2.1.4.178<br>(1) 目录 \inc 中包含针对 TM4C1294XL 系列芯片开发的.h 文件 <br>(2) 目录 \drivelib 中包含针对 TM4C1294XL 系列芯片开发的各种功能.c 源文件以及对应的.h 文件<br> 这些文件被编译在一个.lib 文件中 (drivelib)<br>不同开发软件所编译的库文件格式有所不同<br>Keil 所生成的库文件 drivelib.lib 位于目录 \driverlib\rvmdk</p>
<h4 id="2- 建立项目"><a href="#2- 建立项目" class="headerlink" title="2. 建立项目"></a>2. 建立项目 </h4><p> 新建用户目录设为 C:\A2000TM4\EXP0<br>从 C:\ti\TivaWare_C_Series-2.1.4.178 中，将 \inc 和 \driverlib 两个子目录拷贝到用户目录中<br><div class="pdf-container" data-target="./instruction.pdf" data-height="500px"></div></p>
<h3 id="三、TivaWare- 库"><a href="# 三、TivaWare- 库" class="headerlink" title="三、TivaWare 库"></a>三、TivaWare 库 </h3><h4 id="1- 数据手册和用户指南"><a href="#1- 数据手册和用户指南" class="headerlink" title="1. 数据手册和用户指南"></a>1. 数据手册和用户指南</h4><p><img src="/2021/04/28/Engineering-Practice-2A-1/photo9.png" alt="数据手册和用户指南"><br> 数据手册主要用于芯片选型和设计原理图时参考；用户指南主要用于在编程时查阅<br>TM4C1294NCPDT 微控制器采用 128 脚的 TQFP 封装，从左上角按逆时针方向，引脚编号从 1 到 128</p>
<h4 id="2- 主板"><a href="#2- 主板" class="headerlink" title="2. 主板"></a>2. 主板</h4><p><img src="/2021/04/28/Engineering-Practice-2A-1/photo10.png" alt="主要参数"><br><img src="/2021/04/28/Engineering-Practice-2A-1/photo11.png" alt="主板"></p>
<h4 id="3- 引脚 -1"><a href="#3- 引脚 -1" class="headerlink" title="3. 引脚"></a>3. 引脚 </h4><p><img src="/2021/04/28/Engineering-Practice-2A-1/photo12.png" alt="主板"><br> 详细引脚信息参考用户指南 <br> 一个 IO 口可以复用多个功能，即一脚多用 <br> 例如 Header A1 第 5 个引脚，默认值为 GPIO-PC6<br>经过 GPIOPCTL 寄存器来配置选择，可以用作 U5Rx 或 EPI05S<br>IO 复用功能，可以方便在设计原理图和编程时灵活选用</p>
<h4 id="4-MCU- 编程的两种方式"><a href="#4-MCU- 编程的两种方式" class="headerlink" title="4.MCU 编程的两种方式"></a>4.MCU 编程的两种方式 </h4><h5 id="1- 寄存器编程"><a href="#1- 寄存器编程" class="headerlink" title="(1) 寄存器编程"></a>(1) 寄存器编程</h5><h5 id="2- 函数库编程"><a href="#2- 函数库编程" class="headerlink" title="(2) 函数库编程"></a>(2) 函数库编程</h5><p> 函数库编程是在寄存器编程的基础上升级而来的一种易于学习和开发的编程方式</p>
<h4 id="5-TivaWare- 函数库"><a href="#5-TivaWare- 函数库" class="headerlink" title="5.TivaWare 函数库"></a>5.TivaWare 函数库 </h4><p> 在 C:/ti/TivaWare_C_Series-2.1.4.178/docs 文件夹里是 TI 公司提供的 TivaWare 库函数各种用户指南 <br>SW-TM4C-DRL-UG-2.1.4.178.pdf 是外设驱动库用户指南<br>SW-TM4C-EXAMPLES-UG-2.1.4.178.pdf 是示例用户指南<br> 在 C:/ti/TivaWare_C_Series-2.1.4.178/examples 文件夹里是 TI 提供的样例程序</p>
<h3 id="四、时钟信号与 -GPIO- 工作原理"><a href="# 四、时钟信号与 -GPIO- 工作原理" class="headerlink" title="四、时钟信号与 GPIO 工作原理"></a>四、时钟信号与 GPIO 工作原理</h3><p><img src="/2021/04/28/Engineering-Practice-2A-1/photo3.png" alt="时钟树"></p>
<h4 id="1-TM4C1294NCPDT- 微控制器有 -4- 种时钟源"><a href="#1-TM4C1294NCPDT- 微控制器有 -4- 种时钟源" class="headerlink" title="1.TM4C1294NCPDT 微控制器有 4 种时钟源"></a>1.TM4C1294NCPDT 微控制器有 4 种时钟源</h4><h5 id="1-PIOSC-Precision-Internal-Oscillator- 内部精密时钟"><a href="#1-PIOSC-Precision-Internal-Oscillator- 内部精密时钟" class="headerlink" title="(1) PIOSC (Precision Internal Oscillator) 内部精密时钟"></a>(1) PIOSC (Precision Internal Oscillator) 内部精密时钟</h5><p>16Hz，未校正时精度有限，容易受温度与供电电压影响</p>
<h5 id="2-MOSC-Main-Oscillator- 主时钟"><a href="#2-MOSC-Main-Oscillator- 主时钟" class="headerlink" title="(2) MOSC (Main Oscillator) 主时钟"></a>(2) MOSC (Main Oscillator) 主时钟 </h5><p> 实验板上焊接了一个 25Hz 的石英晶体振荡器，可作为高精度时钟源使用</p>
<h5 id="3-LFIOSC-Low-Frequency-Internal-Osc- 内部低频率时钟"><a href="#3-LFIOSC-Low-Frequency-Internal-Osc- 内部低频率时钟" class="headerlink" title="(3) LFIOSC (Low Frequency Internal Osc) 内部低频率时钟"></a>(3) LFIOSC (Low Frequency Internal Osc) 内部低频率时钟 </h5><p> 通常接入 33KHz 振荡源，用于节能模式</p>
<h5 id="4-RTCOSC-Hibernation-Module-RTC-Osc- 冬眠模式实时时钟"><a href="#4-RTCOSC-Hibernation-Module-RTC-Osc- 冬眠模式实时时钟" class="headerlink" title="(4) RTCOSC (Hibernation Module RTC Osc) 冬眠模式实时时钟"></a>(4) RTCOSC (Hibernation Module RTC Osc) 冬眠模式实时时钟 </h5><p> 接入 32.768kHz 振荡器</p>
<p>SYSCLK，系统时钟，可以来源于上述 4 种时钟源之一。<br>微控制器内部有一个 PLL 模块，主要作用是对时钟进行倍频，然后把时钟输入到各个功能部件。<br>PIOSC (16MHz) 和 MOSC (25MHz) 可以通过 PLL 模块将 PLL 频率配置成 320MHz 或是 480MHz，然后从此 PLL 频率经过分频 (1-1024) 到想要的时钟频率。</p>
<h4 id="2- 系统时钟在不同的工作模式下使用不同的时钟源"><a href="#2- 系统时钟在不同的工作模式下使用不同的时钟源" class="headerlink" title="2. 系统时钟在不同的工作模式下使用不同的时钟源"></a>2. 系统时钟在不同的工作模式下使用不同的时钟源 </h4><p> 微控制器可以工作在 RUN，SLEEP，DEEP SLEEP 模式下，<br>默认情况下，微控制器工作在 RUN 模式下，PIOSC (16MHz) 作为 SYSCLK 的时钟源</p>
<h4 id="3- 系统时钟配置"><a href="#3- 系统时钟配置" class="headerlink" title="3. 系统时钟配置"></a>3. 系统时钟配置</h4><p>SysClockFreqSet 函数完成系统时钟的设置，详细使用方法可以阅读 driverlib/sysctl.c<br><img src="/2021/04/28/Engineering-Practice-2A-1/photo4.png" alt="SysClockFreqSet 函数"></p>
<h4 id="4- 通用输入输出端口 -GPIO"><a href="#4- 通用输入输出端口 -GPIO" class="headerlink" title="4. 通用输入输出端口 (GPIO)"></a>4. 通用输入输出端口 (GPIO)</h4><h5 id="1-15- 个物理 -GPIO- 模块，每一个模块对应一个端口，Port-A-H、J-N、P、Q"><a href="#1-15- 个物理 -GPIO- 模块，每一个模块对应一个端口，Port-A-H、J-N、P、Q" class="headerlink" title="(1) 15 个物理 GPIO 模块，每一个模块对应一个端口，Port A~H、J~N、P、Q"></a>(1) 15 个物理 GPIO 模块，每一个模块对应一个端口，Port A~H、J~N、P、Q</h5><p>共 90 个输入 / 输出引脚</p>
<h5 id="2-GPIO- 模块具有如下特性"><a href="#2-GPIO- 模块具有如下特性" class="headerlink" title="(2) GPIO 模块具有如下特性"></a>(2) GPIO 模块具有如下特性</h5><p>(a) 可编程控制的 GPIO 引脚配置</p>
<ul>
<li>设置上拉电阻或下拉电阻 <br> 功能：抗干扰 (因为引脚悬空加上电磁干扰产生的) 或是预设默认电平值 <br> 在电路断开的时候，下拉电阻会得到 low，上拉电阻会得到 High<br><img src="/2021/04/28/Engineering-Practice-2A-1/photo5.png" alt="上拉电阻和下拉电阻"></li>
<li>推免输出 / 开漏输出 <br> 推挽输出：可以输出高，低电平，连接数字器件；<br>推挽结构一般是指两个三极管分别受两互补信号的控制，总是在一个三极管导通的时候另一个截止</li>
<li>输出时可配置为 2/4/6/8/10/12mA 驱动电流 <br> 对于需要大电流的应用最多有四个引脚可以配置为 18mA<br>8/10/12mA 驱动的斜率控制</li>
<li>数字输入 / 模拟输入<br>(b) 配置为输入模式可承受 0~3.3V 电压<br>(c) 高灵活度的复用引脚，可以用作 GPIO，或是一种或多种的外设功能</li>
</ul>
<h4 id="5-GPIO- 函数"><a href="#5-GPIO- 函数" class="headerlink" title="5.GPIO 函数"></a>5.GPIO 函数</h4><p><img src="/2021/04/28/Engineering-Practice-2A-1/photo6.png" alt="GPIO 函数"><br><img src="/2021/04/28/Engineering-Practice-2A-1/photo7.png" alt="GPIO 函数"></p>
<h3 id="五、常用调试方法"><a href="# 五、常用调试方法" class="headerlink" title="五、常用调试方法"></a>五、常用调试方法</h3>]]></content>
      <categories>
        <category>大学课程-工程实践与科技创新2A</category>
      </categories>
  </entry>
  <entry>
    <title>工程实践与科技创新 2A-- 实验前准备</title>
    <url>/2021/04/28/Engineering-Practice-2A-prepare/</url>
    <content><![CDATA[<div class="pdf-container" data-target="./S800" data-height="板介绍"></div>
<p><img src="/2021/04/28/Engineering-Practice-2A-prepare/photo1.png" alt="Keil 目录"></p>
<ol>
<li> 新建一个 WorkSpace 文件夹，将三个 lab 的文件夹放进去 </li>
<li> 打开 Keil，Open project 打开 lab 文件夹中的 exp1.uvprojx</li>
<li> 编译 build 之后，就可以 load 下载到实验板上 <br><img src="/2021/04/28/Engineering-Practice-2A-prepare/photo2.png" alt="数据手册和用户指南"></li>
</ol>
]]></content>
      <categories>
        <category>大学课程-工程实践与科技创新2A</category>
      </categories>
  </entry>
  <entry>
    <title>GNN-1</title>
    <url>/2021/07/03/GNN-1/</url>
    <content><![CDATA[<p>AttributeError: module ‘matplotlib.cbook’ has no attribute ‘iterable’<br>matplotlib 版本问题，降到 3 以下即可 <br><a href="https://zhuanlan.zhihu.com/p/262476516">《Python 数据可视化之美》勘误更新 </a></p>
]]></content>
  </entry>
  <entry>
    <title>数据结构与算法 --1. 线性表</title>
    <url>/2019/03/21/algorithm-1-linearTable/</url>
    <content><![CDATA[<p>存储结构：顺序，链接，索引，哈希</p>
<h3 id="一、顺序表"><a href="# 一、顺序表" class="headerlink" title="一、顺序表"></a>一、顺序表 </h3><p> 线性表的寻顺序存储又称为顺序表</p>
<h4 id="1- 随机存储"><a href="#1- 随机存储" class="headerlink" title="1. 随机存储"></a>1. 随机存储 </h4><p> 相同数据类型，所以可以用公式 LOC (A) + (i-1) xsize (ElemType)<br><span id="more"></span></p>
<h4 id="2- 类型描述"><a href="#2- 类型描述" class="headerlink" title="2. 类型描述"></a>2. 类型描述</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> InitSize 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	ElemType *data;</span><br><span class="line">	<span class="keyword">int</span> MaxSize, length;</span><br><span class="line">&#125; SeqList;</span><br><span class="line"></span><br><span class="line">SeqList L;</span><br><span class="line">L.data = <span class="keyword">new</span> ElemType [InitSize];</span><br></pre></td></tr></table></figure>
<h4 id="3- 操作与实现"><a href="#3- 操作与实现" class="headerlink" title="3. 操作与实现"></a>3. 操作与实现 </h4><p> 删除，插入，按值查找</p>
<h4 id="4- 例题"><a href="#4- 例题" class="headerlink" title="4. 例题"></a>4. 例题 </h4><p> 若长度为 n 的非空线性表釆用顺序存储结构，在表的第 i 个位置插入一个数据元素，i 的合法值应该是？<br>A. 1&lt;=i&lt;=n     B. 1&lt;=i&lt;=n+l     C. 0&lt;=i&lt;=n-1     D. 0&lt;=i&lt;=n<br>答案：B 表元素序号从 1 开始，而在第 n+1 个位置插入相当于在表尾追加</p>
<p>求两个升序序列 A 和 B 的合并序列 C：<br>分别用游标 i 和 j 指向序列 A 和 B 的序列头，<br>依次比较 A [i] 和 B [j]，比较小的就放入序列 C</p>
<p>方法 1：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">search_median</span> <span class="params">(<span class="keyword">int</span> A [], <span class="keyword">int</span> B [], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i=<span class="number">0</span>, j=<span class="number">0</span>, cnt=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cnt++;</span><br><span class="line">		<span class="keyword">if</span> (cnt == n)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> A [i]&lt;B [j]?A [i]:B [j];</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (A [i] &lt; B [j]) i++;</span><br><span class="line">		<span class="keyword">else</span> j++;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>方法 2：分治<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></p>
<h3 id="二、单链表"><a href="# 二、单链表" class="headerlink" title="二、单链表"></a>二、单链表 </h3><h4 id="1- 实现"><a href="#1- 实现" class="headerlink" title="1. 实现"></a>1. 实现</h4><p> 线性表的链式存储又称为单链表<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	ElemType data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125; LNode, *LinkList;</span><br><span class="line"><span class="comment">// 指向节点的指针就是链表</span></span><br></pre></td></tr></table></figure></p>
<h4 id="2- 操作"><a href="#2- 操作" class="headerlink" title="2. 操作"></a>2. 操作 </h4><h5 id="1- 建立表"><a href="#1- 建立表" class="headerlink" title="(1) 建立表"></a>(1) 建立表</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">(a) 采用头插法建立单链表（插入 S）</span><br><span class="line">s-&gt;next = L-&gt;next;</span><br><span class="line">L-&gt;next = s;</span><br><span class="line">(b) 采用头插法建立单链表（插入 S）</span><br><span class="line"> 需要有一个尾指针 r</span><br><span class="line">r-&gt;next = s;</span><br><span class="line">r = s;</span><br></pre></td></tr></table></figure>
<h5 id="2- 按序号查找节点值（遍历 - 计数器）"><a href="#2- 按序号查找节点值（遍历 - 计数器）" class="headerlink" title="(2) 按序号查找节点值（遍历 + 计数器）"></a>(2) 按序号查找节点值（遍历 + 计数器）</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>, LNode* p = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">for</span> (p = L-&gt;next; p != <span class="literal">NULL</span>; p = p-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line">	cnt++;</span><br><span class="line">	<span class="keyword">if</span> (cnt == i)</span><br><span class="line">		<span class="keyword">return</span> p;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h5 id="3- 按值查找表节点"><a href="#3- 按值查找表节点" class="headerlink" title="(3) 按值查找表节点"></a>(3) 按值查找表节点</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">LNode* p = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">for</span> (p=L-&gt;next; p!=<span class="literal">NULL</span>; p=p-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (p-&gt;data == e)</span><br><span class="line">		<span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>
<h5 id="4- 插入节点"><a href="#4- 插入节点" class="headerlink" title="(4) 插入节点"></a>(4) 插入节点 </h5><p> 先检查插入位置的合法性，找到待插入位置的前驱节点 p，再在其后插入新节点（i 前插）<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">s-&gt;next = p-&gt;next;</span><br><span class="line">p-&gt;next = s;</span><br><span class="line"><span class="comment">//p-&gt;next 一定是在最后一步修改</span></span><br><span class="line">i 前插 = (i<span class="number">-1</span>) 后插 = i 后插，交换 i 和 i+<span class="number">1</span> 的 data</span><br><span class="line">(在有了指向 i 节点的指针，且是单链表的情况下，可以用这个技巧降低时间复杂度)</span><br></pre></td></tr></table></figure></p>
<h5 id="5- 删除节点"><a href="#5- 删除节点" class="headerlink" title="(5) 删除节点"></a>(5) 删除节点 </h5><p> 先检查删除位置 q 的合法性，找到待删除位置的前驱节点<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">p-&gt;next = q-&gt;next;</span><br><span class="line"><span class="built_in">free</span> (q);<span class="comment">// 没有释放会导致内存泄漏</span></span><br></pre></td></tr></table></figure></p>
<h5 id="6- 求表长（遍历 - 计数器）"><a href="#6- 求表长（遍历 - 计数器）" class="headerlink" title="(6) 求表长（遍历 + 计数器）"></a>(6) 求表长（遍历 + 计数器）</h5><p>int cnt=0, LNode* p;<br>for (p=L-&gt;next; p!=NULL; p=p-&gt;next)<br>{<br>    cnt++;<br>}<br>return cnt;</p>
<h3 id="三、双链表"><a href="# 三、双链表" class="headerlink" title="三、双链表"></a>三、双链表</h3><p>ex：单链表的插入算法，要先找到欲插入位置的前驱，就要花费 O (n) 的时间</p>
<h4 id="1- 实现 -1"><a href="#1- 实现 -1" class="headerlink" title="1. 实现"></a>1. 实现</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	ElemType data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">DNode</span> *<span class="title">prior</span>, *<span class="title">next</span>;</span></span><br><span class="line">&#125; DNode, *DLinklist;</span><br></pre></td></tr></table></figure>
<h4 id="2- 操作 -1"><a href="#2- 操作 -1" class="headerlink" title="2. 操作"></a>2. 操作</h4><h5 id="1- 插入节点"><a href="#1- 插入节点" class="headerlink" title="(1) 插入节点"></a>(1) 插入节点</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">s-&gt;next = p-&gt;next;</span><br><span class="line">p-&gt;next-&gt;prior = s;</span><br><span class="line">s-&gt;prior = p;</span><br><span class="line">p-&gt;next = s;</span><br></pre></td></tr></table></figure>
<h6 id="2- 删除节点"><a href="#2- 删除节点" class="headerlink" title="(2) 删除节点"></a>(2) 删除节点 </h6><p> 删除双链表中节点 <em> p 和后继节点 </em> q<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">p-&gt;next = q-&gt;next;</span><br><span class="line">q-&gt;next-&gt;prior = p;</span><br><span class="line"><span class="built_in">free</span> (q);</span><br></pre></td></tr></table></figure></p>
<h3 id="四、循环链表（分为循环单链表和循环双链表）"><a href="# 四、循环链表（分为循环单链表和循环双链表）" class="headerlink" title="四、循环链表（分为循环单链表和循环双链表）"></a>四、循环链表（分为循环单链表和循环双链表）</h3><h4 id="1- 循环单链表"><a href="#1- 循环单链表" class="headerlink" title="1. 循环单链表"></a>1. 循环单链表 </h4><p>L 是头指针，r 是尾指针<br>r-&gt;next = L-&gt;next;<br> 判空条件：L-&gt;next == L;</p>
<h4 id="2- 循环双链表"><a href="#2- 循环双链表" class="headerlink" title="2. 循环双链表"></a>2. 循环双链表 </h4><p> 判空条件：L-&gt;next==L &amp;&amp; L-&gt;prior==L;</p>
<h3 id="五、静态链表"><a href="# 五、静态链表" class="headerlink" title="五、静态链表"></a>五、静态链表 </h3><p> 移动 -&gt; 使用链表 <br> 查找 -&gt; 使用顺序表 <br> 移动又查找 -&gt; 使用静态链表 <br> 既有前向操作又有后向操作 -&gt; 选择双向链表</p>
<h3 id="数据结构与算法系列"><a href="# 数据结构与算法系列" class="headerlink" title="数据结构与算法系列"></a>数据结构与算法系列 </h3><p><a href="https://wangxchun.github.io/2019/03/21/algorithm-linearTable/"> 数据结构与算法 —1. 线性表 </a><br><a href="https://wangxchun.github.io/2019/03/23/algorithm-tree/"> 数据结构与算法 —2. 树 </a><br><a href="https://wangxchun.github.io/2019/03/27/algorithm-graph/"> 数据结构与算法 —3. 图 </a><br><a href="https://wangxchun.github.io/2019/03/31/algorithm-find/"> 数据结构与算法 —4. 查找 </a><br><a href="https://wangxchun.github.io/2019/04/03/algorithm-sort/"> 数据结构与算法 —5. 排序</a></p>
]]></content>
      <categories>
        <category>大学课程-数据结构与算法</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>算法</tag>
        <tag>线性表</tag>
        <tag>单链表</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构与算法 --2. 树</title>
    <url>/2019/03/23/algorithm-2-tree/</url>
    <content><![CDATA[<h3 id="一、基本概念"><a href="# 一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念 </h3><h4 id="1- 树的定义：递归定义"><a href="#1- 树的定义：递归定义" class="headerlink" title="1. 树的定义：递归定义"></a>1. 树的定义：递归定义</h4><h4 id="2- 基本术语"><a href="#2- 基本术语" class="headerlink" title="2. 基本术语"></a>2. 基本术语</h4><p> 父节点，子节点，兄弟节点 <br> 根节点，叶节点 <br> 层 (深度)，高度 (树的高度 = 根节点的高度)<br>有序树 (兄弟节点之间是有顺序的)，无序树 <br><span id="more"></span><br> 路径 (树的边是单向的)，路径长度 (一条路径边的个数)，带权路径 <br> 节点的度 (子节点的数量)，树的度 (最大的度)</p>
<h4 id="3- 树的性质"><a href="#3- 树的性质" class="headerlink" title="3. 树的性质"></a>3. 树的性质 </h4><h5 id="1-n-e-1- 树中的节点数等于所有结点的度数加 -1"><a href="#1-n-e-1- 树中的节点数等于所有结点的度数加 -1" class="headerlink" title="(1) $n=e+1$ 树中的节点数等于所有结点的度数加 1"></a>(1) $n=e+1$ 树中的节点数等于所有结点的度数加 1</h5><p> 边数 $d$，度数 $e$，$d=e$<br>可以用归纳法证明</p>
<h5 id="2- 度为 -m- 的树中，第 -i- 层上至多有 -m-i-1- 个节点 -i-geq-1"><a href="#2- 度为 -m- 的树中，第 -i- 层上至多有 -m-i-1- 个节点 -i-geq-1" class="headerlink" title="(2) 度为 $m$ 的树中，第 $i$ 层上至多有 $m^{i-1}$ 个节点 ($i \geq 1$)"></a>(2) 度为 $m$ 的树中，第 $i$ 层上至多有 $m^{i-1}$ 个节点 ($i \geq 1$)</h5><h5 id="3- 高度为 -h- 的 -m- 叉树中至多有 -displaystyle-m-h-1-over-m-1- 个节点"><a href="#3- 高度为 -h- 的 -m- 叉树中至多有 -displaystyle-m-h-1-over-m-1- 个节点" class="headerlink" title="(3) 高度为 $h$ 的 $m$ 叉树中至多有 $\displaystyle {(m^h-1) \over (m-1)}$ 个节点"></a>(3) 高度为 $h$ 的 $m$ 叉树中至多有 $\displaystyle {(m^h-1) \over (m-1)}$ 个节点 </h5><p> 由性质（2）可得：$n \leq 1+m+m^2+…+m^{h-1}$<br>$\displaystyle n \leq {(m^h-1) \over (m-1)}$</p>
<h5 id="4- 具有 -n- 个节点的 -m- 叉树的最小高度为 -lceil-log-m-n-m-1-1-rceil"><a href="#4- 具有 -n- 个节点的 -m- 叉树的最小高度为 -lceil-log-m-n-m-1-1-rceil" class="headerlink" title="(4) 具有 $n$ 个节点的 $m$ 叉树的最小高度为 $\lceil \log_m {(n (m-1)+1)} \rceil$"></a>(4) 具有 $n$ 个节点的 $m$ 叉树的最小高度为 $\lceil \log_m {(n (m-1)+1)} \rceil$</h5><p>由性质（3）可得：$h \geq \log_m {n (m-1)+1}$</p>
<h5 id="5- 叶节点个数"><a href="#5- 叶节点个数" class="headerlink" title="(5) 叶节点个数"></a>(5) 叶节点个数</h5><p>$n=k_0+k_1+…+k_m -(1)$<br>$n=\sum_{i=0}^n d_i +1 \quad (d_i = 节点 n_i 的度数)$<br>$\quad =\sum_{i=0}^m i \cdot k_i \quad (k_i = 度为 i 的节点的数量)$<br>$\quad =k_1+2k_2+…+mk_m+1 -(2)$<br>$ 由式 (1) 和式 (2) 可得 $<br>$k_0=k_2+k_3+…+(m-1) k_m+1$</p>
<h3 id="二、二叉树"><a href="# 二、二叉树" class="headerlink" title="二、二叉树"></a>二、二叉树 </h3><h4 id="1- 与 - 度为 -2- 的有序树 - 不同"><a href="#1- 与 - 度为 -2- 的有序树 - 不同" class="headerlink" title="1. 与 {度为 2 的有序树} 不同"></a>1. 与 {度为 2 的有序树} 不同</h4><p> 只有一个根节点不属于 {度为 2 的有序树}</p>
<h4 id="2- 特殊二叉树种类"><a href="#2- 特殊二叉树种类" class="headerlink" title="2. 特殊二叉树种类"></a>2. 特殊二叉树种类 </h4><p> 满二叉树，完全二叉树</p>
<h4 id="3- 性质"><a href="#3- 性质" class="headerlink" title="3. 性质"></a>3. 性质</h4><p>$n=k_0+k_1+k_2$<br>$k_0=k_2+1$<br>$ 两式相减得：k_0-n=1-k_0-k_1$<br>$2k_0=n+1-k_1$<br>$\displaystyle 当 k_1=0，n 为奇数，k_0={(n+1) \over 2}$<br>$\displaystyle 当 k_1=0，n 为偶数，k_0={n \over 2}$<br>$\displaystyle 结论：在完成二叉树或满二叉树中，k_0=\lceil {n \over 2} \rceil$</p>
<h4 id="4- 存储结构"><a href="#4- 存储结构" class="headerlink" title="4. 存储结构"></a>4. 存储结构 </h4><h5 id="1- 顺序存储"><a href="#1- 顺序存储" class="headerlink" title="(1) 顺序存储"></a>(1) 顺序存储</h5><p> 按照完全二叉树的顺序，父节点和子节点之间有简单的关系 <br> 但是可能会造成空间浪费</p>
<h5 id="2- 链式存储"><a href="#2- 链式存储" class="headerlink" title="(2) 链式存储"></a>(2) 链式存储</h5><figure class="highlight gauss"><figcaption><span>C++</span></figcaption><table><tr><td class="code"><pre><span class="line">typedef <span class="keyword">struct</span> <span class="type">BiTNode</span></span><br><span class="line">&#123;</span><br><span class="line">	ElemType data;</span><br><span class="line">	<span class="keyword">struct</span> <span class="type">BiTNode</span> *ichild, *rchild;</span><br><span class="line">&#125; BiTNode, *BiTree;</span><br></pre></td></tr></table></figure>
<h4 id="5- 二叉树的遍历"><a href="#5- 二叉树的遍历" class="headerlink" title="5. 二叉树的遍历"></a>5. 二叉树的遍历</h4><h5 id="1- 遍历有先序 -NLR-、中序 -LNR-、后序 -LRN- 三种遍历算法，其中 -“序”- 指的是根节点在何时被访问"><a href="#1- 遍历有先序 -NLR-、中序 -LNR-、后序 -LRN- 三种遍历算法，其中 -“序”- 指的是根节点在何时被访问" class="headerlink" title="(1) 遍历有先序 (NLR)、中序 (LNR)、后序 (LRN) 三种遍历算法，其中 “序” 指的是根节点在何时被访问"></a>(1) 遍历有先序 (NLR)、中序 (LNR)、后序 (LRN) 三种遍历算法，其中 “序” 指的是根节点在何时被访问</h5><figure class="highlight gcode"><figcaption><span>C++</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// 先序遍历</span></span><br><span class="line">void PreOrder <span class="comment">(BiTree T)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> <span class="comment">(T!=NULL)</span></span><br><span class="line">	&#123;</span><br><span class="line">		visit <span class="comment">(T)</span>;            <span class="comment">// 访问根节点</span></span><br><span class="line">		PreOrder <span class="comment">(T-&gt;ichild)</span>; <span class="comment">// 递归遍历左子树</span></span><br><span class="line">		PreOrder <span class="comment">(T-&gt;echild)</span>; <span class="comment">// 递归遍历右子树</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="2- 非递归算法"><a href="#2- 非递归算法" class="headerlink" title="(2) 非递归算法"></a>(2) 非递归算法</h5><figure class="highlight xl"><figcaption><span>C++</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// 中序遍历的非递归算法</span></span><br><span class="line">void InOrder2 (BiTree T)</span><br><span class="line">&#123;</span><br><span class="line">	InitStack (S); BiTree p = T;</span><br><span class="line">	<span class="keyword">while</span> (p || !IsEmpty (S))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (p)</span><br><span class="line">		&#123;</span><br><span class="line">			Push (S,p);</span><br><span class="line">			<span class="function"><span class="title">p</span> = p-&gt;</span>lchild;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			Pop (S,p); visit (p);</span><br><span class="line">			<span class="function"><span class="title">p</span> = p-&gt;</span>rchild;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 入栈序列：先序</span></span><br><span class="line"><span class="comment">// 出栈序列：中序</span></span><br></pre></td></tr></table></figure>
<h5 id="3- 层次遍历"><a href="#3- 层次遍历" class="headerlink" title="(3) 层次遍历"></a>(3) 层次遍历 </h5><p> 利用队列：<br>将根节点入队 <br> 若队列不为空：队头元素出队，访问队头元素若有子节点，子节点入队</p>
<h5 id="4- 由遍历序列构造二叉树"><a href="#4- 由遍历序列构造二叉树" class="headerlink" title="(4) 由遍历序列构造二叉树"></a>(4) 由遍历序列构造二叉树 </h5><h6 id="a- 先序 - 中序"><a href="#a- 先序 - 中序" class="headerlink" title="(a) 先序 + 中序"></a>(a) 先序 + 中序</h6><p> 中序遍历最左端元素第一个访问，排序树的插入会用到这个性质 <br> 先序序列第一个元素是根节点</p>
<h6 id="b- 后序 - 中序"><a href="#b- 后序 - 中序" class="headerlink" title="(b) 后序 + 中序"></a>(b) 后序 + 中序 </h6><h6 id="c- 层次 - 中序"><a href="#c- 层次 - 中序" class="headerlink" title="(c) 层次 + 中序"></a>(c) 层次 + 中序</h6><h3 id="数据结构与算法系列"><a href="# 数据结构与算法系列" class="headerlink" title="数据结构与算法系列"></a> 数据结构与算法系列 </h3><p><a href="https://wangxchun.github.io/2019/03/21/algorithm-linearTable/"> 数据结构与算法 —1. 线性表 </a><br><a href="https://wangxchun.github.io/2019/03/23/algorithm-tree/"> 数据结构与算法 —2. 树 </a><br><a href="https://wangxchun.github.io/2019/03/27/algorithm-graph/"> 数据结构与算法 —3. 图 </a><br><a href="https://wangxchun.github.io/2019/03/31/algorithm-find/"> 数据结构与算法 —4. 查找 </a><br><a href="https://wangxchun.github.io/2019/04/03/algorithm-sort/"> 数据结构与算法 —5. 排序</a></p>
]]></content>
      <categories>
        <category>大学课程-数据结构与算法</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>算法</tag>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构与算法 --3. 图</title>
    <url>/2019/03/27/algorithm-3-graph/</url>
    <content><![CDATA[<h3 id="一、图的定义"><a href="# 一、图的定义" class="headerlink" title="一、图的定义"></a>一、图的定义 </h3><p> 图 $G$ 由顶点集 $V$ 和边集 $E$ 组成，记为 $G=(V,E)$<br>$V={v_1,v_2,…,v_n}, \quad |V|$ 表示图中顶点的个数，也称为图 G 的阶 <br>$E=\lbrace (u,v)|u \in V,v \in V \rbrace$<br> 注释：图不能为空集</p>
<h3 id="二、图的分类和术语"><a href="# 二、图的分类和术语" class="headerlink" title="二、图的分类和术语"></a>二、图的分类和术语</h3><span id="more"></span>
<h4 id="1- 有向图 - 无向图"><a href="#1- 有向图 - 无向图" class="headerlink" title="1. 有向图 / 无向图"></a>1. 有向图 / 无向图 </h4><h4 id="2- 简单图 - 多重图"><a href="#2- 简单图 - 多重图" class="headerlink" title="2. 简单图 / 多重图"></a>2. 简单图 / 多重图</h4><p> 简单图：(1) 不存在重复边 (2) 不存在 $(u,u)$ 点</p>
<h4 id="3- 完全图 - 有向完全图 - 无向完全图"><a href="#3- 完全图 - 有向完全图 - 无向完全图" class="headerlink" title="3. 完全图 (有向完全图 / 无向完全图)"></a>3. 完全图 (有向完全图 / 无向完全图)</h4><p>任意两个点 $(u,v)$ 之间存在边 $(u,v)$</p>
<h4 id="4- 子图"><a href="#4- 子图" class="headerlink" title="4. 子图"></a>4. 子图 </h4><p> 对于图 $G=(V,E)$ 和图 $G’=(V’,E’)$，如果 $V’ \in V$，$E’ \in E$，则 $G’$ 是 $G$ 的一个子图，默认图的自身也是子图</p>
<h4 id="5- 连通，连通图，连通分量（无向图中考虑）"><a href="#5- 连通，连通图，连通分量（无向图中考虑）" class="headerlink" title="5. 连通，连通图，连通分量（无向图中考虑）"></a>5. 连通，连通图，连通分量（无向图中考虑）</h4><p>连通：当且仅当 $u,v$ 存在一条路径，称为 $u,v$ 连通 <br> 连通图：图中任意两点皆连通 <br> 连通分量：极大连通子图</p>
<h4 id="6- 强连通，强连通图，强连通分量（有向图中讨论）"><a href="#6- 强连通，强连通图，强连通分量（有向图中讨论）" class="headerlink" title="6. 强连通，强连通图，强连通分量（有向图中讨论）"></a>6. 强连通，强连通图，强连通分量（有向图中讨论）</h4><h4 id="7- 生成树，生成森林"><a href="#7- 生成树，生成森林" class="headerlink" title="7. 生成树，生成森林"></a>7. 生成树，生成森林 </h4><p> 只有连通图可以考虑生成树，非连通图只能考虑生成森林 <br> 生成树：极小连通子图 $V’=V$（极小指的是边最少）<br>生成森林：非连通图的每个连通分量都有一个生成树</p>
<h4 id="8- 顶点的度（无向图或无向图），入度 - 出度（有向图）"><a href="#8- 顶点的度（无向图或无向图），入度 - 出度（有向图）" class="headerlink" title="8. 顶点的度（无向图或无向图），入度 / 出度（有向图）"></a>8. 顶点的度（无向图或无向图），入度 / 出度（有向图）</h4><p>$d_i:v_i$ 的边数<br>$\sum d_i = 2e$<br>$\sum id_i = e$<br>$\sum od_i = e$</p>
<h4 id="9- 边的权值，网 - 带权图"><a href="#9- 边的权值，网 - 带权图" class="headerlink" title="9. 边的权值，网 (带权图)"></a>9. 边的权值，网 (带权图)</h4><h4 id="10- 稠密图，稀疏图（没有严格的定义）"><a href="#10- 稠密图，稀疏图（没有严格的定义）" class="headerlink" title="10. 稠密图，稀疏图（没有严格的定义）"></a>10. 稠密图，稀疏图（没有严格的定义）</h4><p>$|E| &lt; |V|log|V|$</p>
<h4 id="11- 路径，路径长度，回路 - 环 - 圈"><a href="#11- 路径，路径长度，回路 - 环 - 圈" class="headerlink" title="11. 路径，路径长度，回路 / 环 / 圈"></a>11. 路径，路径长度，回路 / 环 / 圈 </h4><p> 路径长度：$u$ 到 $v$ 经过的边数<br>$e &lt; n-1$：非连通<br>$e &gt; n-1$：一定有环</p>
<h4 id="12- 简单路径，简单回路"><a href="#12- 简单路径，简单回路" class="headerlink" title="12. 简单路径，简单回路"></a>12. 简单路径，简单回路 </h4><p> 简单路径：顶点不重复 <br> 简单回路：除首末节点，不存在重复顶点</p>
<h4 id="13- 距离"><a href="#13- 距离" class="headerlink" title="13. 距离"></a>13. 距离 </h4><p> 若 $u,v$ 存在路径，最短的路径长度称为距离</p>
<h4 id="14- 有向树"><a href="#14- 有向树" class="headerlink" title="14. 有向树"></a>14. 有向树 </h4><p>${\exists} v_o, \;\; id_{v_o}=0$<br> 其余 $v_i \;\; id_{v_o}=1$</p>
<h3 id="三、图的存储和基本操作"><a href="# 三、图的存储和基本操作" class="headerlink" title="三、图的存储和基本操作"></a>三、图的存储和基本操作 </h3><h4 id="1- 邻接矩阵法：有 -n- 个顶点，用一个 -n-times-n- 的矩阵存储"><a href="#1- 邻接矩阵法：有 -n- 个顶点，用一个 -n-times-n- 的矩阵存储" class="headerlink" title="1. 邻接矩阵法：有 $n$ 个顶点，用一个 $n \times n$ 的矩阵存储"></a>1. 邻接矩阵法：有 $n$ 个顶点，用一个 $n \times n$ 的矩阵存储</h4><p>$a [i,j]$ 用来表示顶点 $i$ 到顶点 $j$ 是否有边<br> 有向权值图的权值可能是 0 也可能是负数，所以用 $\infty$ 表示 $u,v$ 之间不存在边<br>$A^n [i][j]$：表示顶点 $i$ 到顶点 $j$ 当中路径长度 $=n$ 的路径条数（后面会证明）</p>
<h4 id="2- 邻接表"><a href="#2- 邻接表" class="headerlink" title="2. 邻接表"></a>2. 邻接表 </h4><p> 优点：方便找到与顶点相邻的边</p>
<h4 id="3- 十字链表"><a href="#3- 十字链表" class="headerlink" title="3. 十字链表"></a>3. 十字链表</h4><p><img src="/2019/03/27/algorithm-3-graph/photo3.png" alt><br>Q：怎么画十字链表？<br><img src="/2019/03/27/algorithm-3-graph/photo1.png" alt><br><img src="/2019/03/27/algorithm-3-graph/photo2.png" alt></p>
<h4 id="4- 邻接多重表"><a href="#4- 邻接多重表" class="headerlink" title="4. 邻接多重表"></a>4. 邻接多重表</h4><p><img src="/2019/03/27/algorithm-3-graph/photo4.png" alt></p>
<h3 id="四、图的遍历"><a href="# 四、图的遍历" class="headerlink" title="四、图的遍历"></a>四、图的遍历 </h3><h4 id="1- 广度优先搜索 -BFS"><a href="#1- 广度优先搜索 -BFS" class="headerlink" title="1. 广度优先搜索 BFS"></a>1. 广度优先搜索 BFS</h4><h5 id="操作"><a href="# 操作" class="headerlink" title="操作"></a> 操作 </h5><p> 标记起始节点，并把起始节点入队 <br> 从队列中弹出一个元素，访问，并把该元素的未标记的相邻节点入队</p>
<h5 id="复杂度"><a href="# 复杂度" class="headerlink" title="复杂度"></a>复杂度 </h5><p> 时间复杂度：$\begin {cases}<br>O (n^2),  &amp; \text {邻接矩阵} \\<br>O (n+e), &amp; \text {邻接表}<br>\end {cases}$<br>空间复杂度：$O (n)$</p>
<h5 id="无权值图的最短路径"><a href="# 无权值图的最短路径" class="headerlink" title="无权值图的最短路径"></a>无权值图的最短路径 </h5><h5 id="广度优先生成树"><a href="# 广度优先生成树" class="headerlink" title="广度优先生成树"></a> 广度优先生成树 </h5><h4 id="2- 深度优先搜索 -DFS"><a href="#2- 深度优先搜索 -DFS" class="headerlink" title="2. 深度优先搜索 DFS"></a>2. 深度优先搜索 DFS</h4><h5 id="操作 -1"><a href="# 操作 -1" class="headerlink" title="操作"></a> 操作 </h5><p> 访问相邻的未标记节点 <br> 如果没有相邻的未标记节点，则向上回溯</p>
<h5 id="复杂度 -1"><a href="# 复杂度 -1" class="headerlink" title="复杂度"></a>复杂度 </h5><p> 时间复杂度：$\begin {cases}<br>O (n^2),  &amp; \text {邻接矩阵} \\<br>O (n+e), &amp; \text {邻接表}<br>\end {cases}$<br>空间复杂度：$O (n)$</p>
<h5 id="连通性、连通片数量"><a href="# 连通性、连通片数量" class="headerlink" title="连通性、连通片数量"></a>连通性、连通片数量 </h5><p> 如果回溯到了起始节点，但是还有未标记的节点，代表图是非连通的 <br> 则在未标记的节点中随机选择一个节点，并重复遍历动作 <br> 可以根据 DFS 被调用的次数，判断连通片的数量</p>
<h5 id="深度优先生成树"><a href="# 深度优先生成树" class="headerlink" title="深度优先生成树"></a>深度优先生成树 </h5><h3 id="五、最小生成树"><a href="# 五、最小生成树" class="headerlink" title="五、最小生成树"></a> 五、最小生成树 </h3><h4 id="1- 概念"><a href="#1- 概念" class="headerlink" title="1. 概念"></a>1. 概念</h4><p> 生成树：连通图中的最小连通子图（边最少）<br>最小生成树：带权图中权值和最小的生成树 <br> 不同的最小生成树，权值合都是相同的</p>
<h4 id="2- 算法"><a href="#2- 算法" class="headerlink" title="2. 算法"></a>2. 算法 </h4><h5 id="1-Prim- 算法：保持连通，选最小边及其顶点（最小边 - 最权值小的边）"><a href="#1-Prim- 算法：保持连通，选最小边及其顶点（最小边 - 最权值小的边）" class="headerlink" title="(1) Prim 算法：保持连通，选最小边及其顶点（最小边 = 最权值小的边）"></a>(1) Prim 算法：保持连通，选最小边及其顶点（最小边 = 最权值小的边）</h5><p> 从某一个顶点开始，不断加顶点和边 <br> 思路：贪心算法（每一步都考虑当前最优，结果恰好是全局最优，前提是满足最优子结构）<br>时间复杂度：$O (n^2)$<br><img src="/2019/03/27/algorithm-3-graph/photo5.png" alt></p>
<h5 id="2-Krushal- 算法：保持无圈，选最小边"><a href="#2-Krushal- 算法：保持无圈，选最小边" class="headerlink" title="(2) Krushal 算法：保持无圈，选最小边"></a>(2) Krushal 算法：保持无圈，选最小边 </h5><p> 先包含全部的节点，因为生成树的节点数都是一样的 <br> 思路：贪心算法 <br> 时间复杂度：$O (eloge)$</p>
<h5 id="3- 破圈法：找一个圈，删除最大边"><a href="#3- 破圈法：找一个圈，删除最大边" class="headerlink" title="(3) 破圈法：找一个圈，删除最大边"></a>(3) 破圈法：找一个圈，删除最大边 </h5><p><img src="/2019/03/27/algorithm-3-graph/graph1.jpg" alt><br> 圈：$abdeca$，删除 $de$ 边 <br><img src="/2019/03/27/algorithm-3-graph/graph2.jpg" alt><br> 圈：$abdca$，删除 $dc$ 边 <br><img src="/2019/03/27/algorithm-3-graph/graph3.jpg" alt><br> 圈：$abeca$，删除 $be$ 边<br><img src="/2019/03/27/algorithm-3-graph/graph4.jpg" alt></p>
<h3 id="六、最短路径"><a href="# 六、最短路径" class="headerlink" title="六、最短路径"></a>六、最短路径 </h3><h4 id="1-Dijkstra- 算法：求单源最短距离（权值非负的有向图）"><a href="#1-Dijkstra- 算法：求单源最短距离（权值非负的有向图）" class="headerlink" title="1.Dijkstra 算法：求单源最短距离（权值非负的有向图）"></a>1.Dijkstra 算法：求单源最短距离（权值非负的有向图）</h4><p> 思想：贪心算法<br><img src="/2019/03/27/algorithm-3-graph/photo6.png" alt></p>
<h5 id="1- 将每个点标记一个距离值"><a href="#1- 将每个点标记一个距离值" class="headerlink" title="(1) 将每个点标记一个距离值"></a>(1) 将每个点标记一个距离值</h5><p><img src="/2019/03/27/algorithm-3-graph/photo7.png" alt></p>
<h5 id="2- 选取最小的顶点，加进来"><a href="#2- 选取最小的顶点，加进来" class="headerlink" title="(2) 选取最小的顶点，加进来"></a>(2) 选取最小的顶点，加进来 </h5><h5 id="3- 修改该点的出边的距离值"><a href="#3- 修改该点的出边的距离值" class="headerlink" title="(3) 修改该点的出边的距离值"></a>(3) 修改该点的出边的距离值</h5><p> 若通过该点到达的距离比较近，则修改距离值，并标记前驱节点<br><img src="/2019/03/27/algorithm-3-graph/photo8.png" alt></p>
<h5 id="4- 重复该过程，直到全部的点被加进来"><a href="#4- 重复该过程，直到全部的点被加进来" class="headerlink" title="(4) 重复该过程，直到全部的点被加进来"></a>(4) 重复该过程，直到全部的点被加进来 </h5><p><img src="/2019/03/27/algorithm-3-graph/photo9.jpg" alt><br><img src="/2019/03/27/algorithm-3-graph/photo10.jpg" alt><br> 时间复杂度：$O (n)$<br>例：节点 1 到节点 4 的最短路径？<br>找节点 4 的前驱标记，是 3；再找节点 3 的前驱标记，依次重复<br>1-&gt;3-&gt;2-&gt;4</p>
<h4 id="2-Floyd- 算法：求各顶点值间最短路径（可以有负权值，但不可以有含负权值的环）"><a href="#2-Floyd- 算法：求各顶点值间最短路径（可以有负权值，但不可以有含负权值的环）" class="headerlink" title="2.Floyd 算法：求各顶点值间最短路径（可以有负权值，但不可以有含负权值的环）"></a>2.Floyd 算法：求各顶点值间最短路径（可以有负权值，但不可以有含负权值的环）</h4><p>思想：动态规划 <br>$A^{(k)}_{i,j}$：$i$-&gt;$j$ 在顶点集 $\lbrace 1,2,…,k \rbrace$ 中的最短路径<br> 路径集合 $S^{(k)}$ 有两种：<br>(1) 包含 k 的：$A^{(k-1)}_{i,k}+A^{(k-1)}_{k,j}$<br><img src="/2019/03/27/algorithm-3-graph/photo11.png" alt><br>(2) 不包含 k 的：$A^{(k-1)}_{i,j}$<br>于是可以推得公式：$A^{(k)}_{i,j}=min \lbrace A^{(k-1)}_{i,j},A^{(k-1)}_{i,k}+A^{(k-1)}_{k,j} \rbrace$</p>
<h3 id="七、拓扑排序"><a href="# 七、拓扑排序" class="headerlink" title="七、拓扑排序"></a>七、拓扑排序 </h3><p> 应用场景：有向无环图 (AOV 网)，顶点代表的是事件<br><img src="/2019/03/27/algorithm-3-graph/photo12.png" alt><br>$i$-&gt;$j$：$i$ 必须完成，才能开始 $j$</p>
<h4 id="1- 选择一个入度 -0- 的点"><a href="#1- 选择一个入度 -0- 的点" class="headerlink" title="(1) 选择一个入度 = 0 的点"></a>(1) 选择一个入度 = 0 的点 </h4><h4 id="2- 删除该点的所有出边"><a href="#2- 删除该点的所有出边" class="headerlink" title="(2) 删除该点的所有出边"></a>(2) 删除该点的所有出边</h4><h4 id="3- 重复这两个步骤，直到"><a href="#3- 重复这两个步骤，直到" class="headerlink" title="(3) 重复这两个步骤，直到"></a>(3) 重复这两个步骤，直到</h4><p>$\begin {cases}<br> 没有点了：得到一个合法的拓扑排序  &amp; \text {} \\<br>有点但是没有入度为 0 的点：图中有环 &amp; \text {}<br>\end {cases}$</p>
<h3 id="八、关键路径"><a href="# 八、关键路径" class="headerlink" title="八、关键路径"></a>八、关键路径 </h3><h4 id="1- 概念 -1"><a href="#1- 概念 -1" class="headerlink" title="1. 概念"></a>1. 概念</h4><p> 应用场景：有向带权图，顶点代表事件，边代表活动，权值代表开销 (时间)-&gt;AOE 网 <br> 顶点不是重点，顶点只是表示入边代表的事件已经完成了 <br> 关键路径：在 AOE 网中寻找最长路径（最短工期：完成 $e_1-e_5$ 最少需要的时间）<br>关键路径是不唯一的 <br> 目的：缩短关键路径，缩短工期 <br> 关键活动：关键路径上的边所代表的活动</p>
<h4 id="2- 算法概念"><a href="#2- 算法概念" class="headerlink" title="2. 算法概念"></a>2. 算法概念</h4><p><img src="/2019/03/27/algorithm-3-graph/photo13.png" alt><br>(1) $ve (k)$：顶点 k 的最早时间<br>$ve ($ 源点 $)=0$<br>$ve (k)=max \lbrace ve (i)+w (i,k) \rbrace$<br>(2) $vl (k)$：顶点 k 最迟时间<br>(3) $ve (k)=vl (k)$：工期不变<br>$vl (k$$)=min \lbrace vl (j)-w (k,j) \rbrace$<br>(4) $e ()$：边的最早时间<br>$e (e_ik)=ve (i)$<br>(5) $l ()$：边的最迟时间<br>$l (e_kj)=l (j)-w (k,j)$<br>(6) $d ()=l ()-e ()$<br>$d ()=0$ 是关键活动</p>
<h4 id="3- 例子"><a href="#3- 例子" class="headerlink" title="3. 例子"></a>3. 例子</h4><h4 id="4- 缩短工期：缩短所有关键路径"><a href="#4- 缩短工期：缩短所有关键路径" class="headerlink" title="4. 缩短工期：缩短所有关键路径"></a>4. 缩短工期：缩短所有关键路径</h4><p>(1) 公共边<br>(2) 每个路径选一个</p>
<h4 id="5- 总结"><a href="#5- 总结" class="headerlink" title="5. 总结"></a>5. 总结</h4><p>$ve ()$：起点加权取最大<br>$vl ()$：终点减权取最小<br>$e ()$：就取起点最早值<br>$l ()$：终点最迟减权值</p>
<h3 id="数据结构与算法系列"><a href="# 数据结构与算法系列" class="headerlink" title="数据结构与算法系列"></a>数据结构与算法系列 </h3><p><a href="https://wangxchun.github.io/2019/03/21/algorithm-linearTable/"> 数据结构与算法 —1. 线性表 </a><br><a href="https://wangxchun.github.io/2019/03/23/algorithm-tree/"> 数据结构与算法 —2. 树 </a><br><a href="https://wangxchun.github.io/2019/03/27/algorithm-graph/"> 数据结构与算法 —3. 图 </a><br><a href="https://wangxchun.github.io/2019/03/31/algorithm-find/"> 数据结构与算法 —4. 查找 </a><br><a href="https://wangxchun.github.io/2019/04/03/algorithm-sort/"> 数据结构与算法 —5. 排序</a></p>
]]></content>
      <categories>
        <category>大学课程-数据结构与算法</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>算法</tag>
        <tag>图</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构与算法 --4. 查找</title>
    <url>/2019/03/31/algorithm-4-find/</url>
    <content><![CDATA[<h3 id="一、概念"><a href="# 一、概念" class="headerlink" title="一、概念"></a>一、概念 </h3><h4 id="1- 查找：在数据集合 - 查找表 - 中寻找满足某种条件的数据元素的过程。"><a href="#1- 查找：在数据集合 - 查找表 - 中寻找满足某种条件的数据元素的过程。" class="headerlink" title="1. 查找：在数据集合 (查找表) 中寻找满足某种条件的数据元素的过程。"></a>1. 查找：在数据集合 (查找表) 中寻找满足某种条件的数据元素的过程。</h4><p> 查找表：$\begin {cases}<br>静态查找表：  &amp; \text {} \\<br>动态查找表：有增删 &amp; \text {}<br>\end {cases}$<br>查找的结果一般分为两种：<br>(1) 查找成功：在数据集合中找到了满足条件的数据元素<br>(2) 查找失败<br><span id="more"></span></p>
<h4 id="2- 关键字"><a href="#2- 关键字" class="headerlink" title="2. 关键字"></a>2. 关键字 </h4><h4 id="3- 平均查找长度 -ASL-sum-i-0-n-P-iC-i"><a href="#3- 平均查找长度 -ASL-sum-i-0-n-P-iC-i" class="headerlink" title="3. 平均查找长度 $ASL = \sum_{i=0}^n P_iC_i$"></a>3. 平均查找长度 $ASL = \sum_{i=0}^n P_iC_i$</h4><h3 id="二、顺序查找、折半查找、分块查找"><a href="# 二、顺序查找、折半查找、分块查找" class="headerlink" title="二、顺序查找、折半查找、分块查找"></a> 二、顺序查找、折半查找、分块查找</h3><h4 id="1- 顺序查找：依次查找表中元素"><a href="#1- 顺序查找：依次查找表中元素" class="headerlink" title="1. 顺序查找：依次查找表中元素"></a>1. 顺序查找：依次查找表中元素</h4><h5 id="1- 一般线性表 - 无序 - 中的查找"><a href="#1- 一般线性表 - 无序 - 中的查找" class="headerlink" title="(1) 一般线性表 (无序) 中的查找"></a>(1) 一般线性表 (无序) 中的查找</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>, i&lt;n, i++)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 对 a [i] 判断</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>$ASL_{成功} = \displaystyle {1 \over n}(1+2+…+n)={n+1 \over 2}$<br>$ASL_{失败} = n$</p>
<h5 id="2- 有序表的顺序查找：失败时，可提前返回"><a href="#2- 有序表的顺序查找：失败时，可提前返回" class="headerlink" title="(2) 有序表的顺序查找：失败时，可提前返回"></a>(2) 有序表的顺序查找：失败时，可提前返回</h5><p>$ASL_{成功} = \displaystyle {n+1 \over 2}$<br>$ASL_{失败} = \displaystyle {1 \over n+1}(1+2+…+n+n) = {n \over 2} + {n \over n+1}$<br>$n$ 个分支节点是树有 $n+1$ 个叶子</p>
<h4 id="2- 折半查找：有序的顺序表中"><a href="#2- 折半查找：有序的顺序表中" class="headerlink" title="2. 折半查找：有序的顺序表中"></a>2. 折半查找：有序的顺序表中</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Binary_Search</span> <span class="params">(SeqList L, ElemType key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> low=<span class="number">0</span>, high=L.TableLen<span class="number">-1</span>, mid;</span><br><span class="line">	<span class="keyword">while</span> (low &lt; high)</span><br><span class="line">	&#123;</span><br><span class="line">	    mid = (low + high) / <span class="number">2</span>;</span><br><span class="line">	    <span class="keyword">if</span> (L.elem [mid] == key)</span><br><span class="line">	        <span class="keyword">return</span> mid;</span><br><span class="line">	    <span class="keyword">else</span> <span class="keyword">if</span> (L.elem [mid] &gt; key)</span><br><span class="line">	        high = mid - <span class="number">1</span>;</span><br><span class="line">	    <span class="keyword">else</span></span><br><span class="line">	    	low = mid + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2019/03/31/algorithm-4-find/photo1.png" alt><br>判定树是一个平衡二叉树 <br> 判定树的高度：$\lceil log_2 (n+1) \rceil$ 或 $\lfloor log_2 (n) \rfloor + 1$<br>$ASL_{成功} = \displaystyle {1 \over 11}(1 \times 1 + 2 \times 2 + 3 \times 4 + 4 \times 4) = 3$<br>$ASL_{失败} = \displaystyle {1 \over 12}(3 \times 4 + 4 \times 8) = {11 \over 3}$<br>可以构成折半查找的序列：某数字后面的数字都与其有相同的大小关系</p>
<h4 id="3- 分块查找：块间有序，块内无序"><a href="#3- 分块查找：块间有序，块内无序" class="headerlink" title="3. 分块查找：块间有序，块内无序"></a>3. 分块查找：块间有序，块内无序 </h4><p> 快的索引表是有序的，所以也可以顺序查找或是二分查找 <br> 问题：怎么分块，效率最高？<br>假设有 $n$ 个元素，$s$ 个元素一个块，块数总共有 $\displaystyle \lceil {n \over s} \rceil$<br>$ASL_{成功} = \displaystyle \frac {\frac {n}{s}+1}{2} + {s+1 \over 2}$</p>
<p>$\quad \quad \quad  \; \displaystyle ={s \over 2} + {n \over 2s} + 1$</p>
<p>$\quad \quad \quad  \; \geq \displaystyle 2 \sqrt {\frac {s}{2} \times \frac {n}{2s}} + 1 $</p>
<p>$\quad \quad \quad  \; = \sqrt {n} + 1 $</p>
<p>等号成立的条件：$\displaystyle {s \over 2} = {n \over 2s} $ =&gt; $s=\sqrt {n}$</p>
<h3 id="三、B- 树（多路平衡查找树）"><a href="# 三、B- 树（多路平衡查找树）" class="headerlink" title="三、B 树（多路平衡查找树）"></a>三、B 树（多路平衡查找树）</h3><h4 id="1-B- 树及其基本操作"><a href="#1-B- 树及其基本操作" class="headerlink" title="1.B 树及其基本操作"></a>1.B 树及其基本操作</h4><p>B 树中所有节点的孩子节点数的最大值称为 B 树的阶，通常用 $m$ 表示</p>
<h5 id="1- 树中每个节点至多有 -m- 棵子树"><a href="#1- 树中每个节点至多有 -m- 棵子树" class="headerlink" title="(1) 树中每个节点至多有 $m$ 棵子树"></a>(1) 树中每个节点至多有 $m$ 棵子树</h5><h5 id="2- 若根节点不是终端节点，则至少有两棵子树"><a href="#2- 若根节点不是终端节点，则至少有两棵子树" class="headerlink" title="(2) 若根节点不是终端节点，则至少有两棵子树"></a>(2) 若根节点不是终端节点，则至少有两棵子树</h5><h5 id="3- 除根节点外的所有非叶节点至少有 -displaystyle-lceil-m-over-2-rceil- 个"><a href="#3- 除根节点外的所有非叶节点至少有 -displaystyle-lceil-m-over-2-rceil- 个" class="headerlink" title="(3) 除根节点外的所有非叶节点至少有 $\displaystyle \lceil {m \over 2} \rceil$ 个"></a>(3) 除根节点外的所有非叶节点至少有 $\displaystyle \lceil {m \over 2} \rceil$ 个</h5><h5 id="4- 非叶节点的结构如下"><a href="#4- 非叶节点的结构如下" class="headerlink" title="(4) 非叶节点的结构如下"></a>(4) 非叶节点的结构如下</h5><p><img src="/2019/03/31/algorithm-4-find/photo2.png" alt><br>$n$：关键字的个数（$\displaystyle \lceil {m \over 2} \rceil -1 \leq n \leq m-1$）</p>
<h5 id="5- 关键字 -1- 子树数"><a href="#5- 关键字 -1- 子树数" class="headerlink" title="(5) 关键字 $+1=$ 子树数"></a>(5) 关键字 $+1=$ 子树数 </h5><p>$\displaystyle \lceil {m \over 2} \rceil \leq $ 子树数 $ \leq m$<br> 根是特殊情形：$2 \leq $ 子树数 $ \leq m$</p>
<h5 id="6- 关键字数 -m- 与高度 -h- 的关系"><a href="#6- 关键字数 -m- 与高度 -h- 的关系" class="headerlink" title="(6) 关键字数 $m$ 与高度 $h$ 的关系"></a>(6) 关键字数 $m$ 与高度 $h$ 的关系 </h5><p> 每个节点最多有 $m$ 个子树，第 $m$ 层最多总共有 $m^i$ 个子树，总共有 $(m-1) m^i$ 个关键字</p>
<p>$1+2 (\lceil {m \over 2} \rceil -1)(1+ \lceil {m \over 2} \rceil + …+{\lceil {m \over 2} \rceil}^{h-2}) \leq n \leq (m-1)[1+m+m^2+…+m^{h-1}]$</p>
<p>$1+2 \times (\lceil \frac {m}{2} \rceil -1) \times \displaystyle \frac {{\lceil \frac {m}{2} \rceil}^{h-1} - 1}{\lceil \frac {m}{2} \rceil -1} \leq n \leq (m-1) \times {m^h-1 \over m-1}$</p>
<p>$2 {\lceil \frac {m}{2} \rceil}^{h-1} - 1 \leq n \leq m^h - 1$</p>
<p>$log_m (n+1) \leq h \leq log_{\lceil \frac {m}{2} \rceil} \displaystyle ({n+1 \over 2}) +1$</p>
<h4 id="2- 查找"><a href="#2- 查找" class="headerlink" title="2. 查找"></a>2. 查找 </h4><p> 节点上查找 $\begin {cases}<br>成功  &amp; \text {} \\<br>失败：子树查找 &amp; \text {}<br>\end {cases}$</p>
<h4 id="3-B- 树插入"><a href="#3-B- 树插入" class="headerlink" title="3.B 树插入"></a>3.B 树插入 </h4><h5 id="1- 定位：某个非叶节点"><a href="#1- 定位：某个非叶节点" class="headerlink" title="(1) 定位：某个非叶节点"></a>(1) 定位：某个非叶节点</h5><h5 id="2- 插入：若插入之后，关键字数目 -m-，分裂，将 -displaystyle-lceil-frac-m-2-rceil- 关键字插入父节点"><a href="#2- 插入：若插入之后，关键字数目 -m-，分裂，将 -displaystyle-lceil-frac-m-2-rceil- 关键字插入父节点" class="headerlink" title="(2) 插入：若插入之后，关键字数目 $=m$，分裂，将 $\displaystyle \lceil \frac {m}{2} \rceil$ 关键字插入父节点"></a>(2) 插入：若插入之后，关键字数目 $=m$，分裂，将 $\displaystyle \lceil \frac {m}{2} \rceil$ 关键字插入父节点</h5><h4 id="4-B- 树删除"><a href="#4-B- 树删除" class="headerlink" title="4.B 树删除"></a>4.B 树删除</h4><p> 分层两大类情形：</p>
<h5 id="1- 删除的节点是最底层分支"><a href="#1- 删除的节点是最底层分支" class="headerlink" title="(1) 删除的节点是最底层分支"></a>(1) 删除的节点是最底层分支 </h5><p>$\quad$(a) 欲删除节点的父节点关键字 $&gt; \lceil \frac {m}{2} \rceil -1$，直接删除<br>$\quad$(b) 欲删除节点的父节点关键字 $= \lceil \frac {m}{2} \rceil -1$<br>$\quad \quad$ (i) 兄弟节点够借：关键字 $\leq \lceil \frac {m}{2} \rceil -1$<br>$\quad \quad \quad$ 父子易位，再平衡<br><img src="/2019/03/31/algorithm-4-find/photo3.jpg" alt><br><img src="/2019/03/31/algorithm-4-find/photo4.jpg" alt><br>$\quad \quad$ (ii) 兄弟节点不够借：关键字 $= \lceil \frac {m}{2} \rceil -1$<br>$\quad \quad \quad$ 合并 (左 / 右 + 父亲 + 自己)<br><img src="/2019/03/31/algorithm-4-find/photo5.jpg" alt><br>Q：为什么能合并，不会超过关键字数量的上界吗？<br> 合并：$(\lceil \frac {m}{2} \rceil -1) + 1 + (\lceil \frac {m}{2} \rceil -2)=$</p>
<h5 id="2- 删除的节点不是最底层分支"><a href="#2- 删除的节点不是最底层分支" class="headerlink" title="(2) 删除的节点不是最底层分支"></a>(2) 删除的节点不是最底层分支 </h5><h3 id="数据结构与算法系列"><a href="# 数据结构与算法系列" class="headerlink" title="数据结构与算法系列"></a> 数据结构与算法系列 </h3><p><a href="https://wangxchun.github.io/2019/03/21/algorithm-linearTable/"> 数据结构与算法 —1. 线性表 </a><br><a href="https://wangxchun.github.io/2019/03/23/algorithm-tree/"> 数据结构与算法 —2. 树 </a><br><a href="https://wangxchun.github.io/2019/03/27/algorithm-graph/"> 数据结构与算法 —3. 图 </a><br><a href="https://wangxchun.github.io/2019/03/31/algorithm-find/"> 数据结构与算法 —4. 查找 </a><br><a href="https://wangxchun.github.io/2019/04/03/algorithm-sort/"> 数据结构与算法 —5. 排序</a></p>
]]></content>
      <categories>
        <category>大学课程-数据结构与算法</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>算法</tag>
        <tag>查找</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构与算法 --5. 排序</title>
    <url>/2019/04/03/algorithm-5-sort/</url>
    <content><![CDATA[<h3 id="数据结构与算法系列"><a href="# 数据结构与算法系列" class="headerlink" title="数据结构与算法系列"></a>数据结构与算法系列 </h3><p><a href="https://wangxchun.github.io/2019/03/21/algorithm-linearTable/"> 数据结构与算法 —1. 线性表 </a><br><a href="https://wangxchun.github.io/2019/03/23/algorithm-tree/"> 数据结构与算法 —2. 树 </a><br><a href="https://wangxchun.github.io/2019/03/27/algorithm-graph/"> 数据结构与算法 —3. 图 </a><br><a href="https://wangxchun.github.io/2019/03/31/algorithm-find/"> 数据结构与算法 —4. 查找 </a><br><a href="https://wangxchun.github.io/2019/04/03/algorithm-sort/"> 数据结构与算法 —5. 排序</a><br><span id="more"></span></p>
]]></content>
      <categories>
        <category>大学课程-数据结构与算法</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>算法</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>毕业设计 -(1) 前期准备</title>
    <url>/2022/02/14/bishe-1/</url>
    <content><![CDATA[<h3 id="一、安装"><a href="# 一、安装" class="headerlink" title="一、安装"></a>一、安装</h3><p><a href="https://zhuanlan.zhihu.com/p/343592923">PyCharm+Anaconda+CUDA+Pytorch 安装教程（个人经验帖）</a></p>
<h4 id="1- 工具的作用"><a href="#1- 工具的作用" class="headerlink" title="1. 工具的作用"></a>1. 工具的作用</h4><h5 id="1-PyCharm"><a href="#1-PyCharm" class="headerlink" title="(1) PyCharm"></a>(1) PyCharm</h5><p>PyCharm 是一个 Python 语言的一个开发工具，类似于 Eclipse（Java）</p>
<h5 id="2-Anaconda"><a href="#2-Anaconda" class="headerlink" title="(2) Anaconda"></a>(2) Anaconda</h5><p>Anaconda 里面集成了很多关于 python 科学计算的第三方库。我们安装了它，就安装了很多我们需要用到的工具包</p>
<h5 id="3-CUDA（Compute-Unified-Device-Architecture"><a href="#3-CUDA（Compute-Unified-Device-Architecture" class="headerlink" title="(3) CUDA（Compute Unified Device Architecture"></a>(3) CUDA（Compute Unified Device Architecture</h5><p>CUDA 是显卡厂商 NVIDIA 推出的运算平台，可以针对 GPU 做加速神经网络计算。<br>CUDA™是一种由 NVIDIA 推出的通用并行计算架构，该架构使 GPU 能够解决复杂的计算问题。<br>cudnn 是 pytorch 搭建深度学习模型的依赖，没有它，不能运行卷积等操作。</p>
<h5 id="4-PyTorch- 是一个开源的 -Python- 机器学习库，不仅能够实现强大的 -GPU- 加速，同时还支持动态神经网络"><a href="#4-PyTorch- 是一个开源的 -Python- 机器学习库，不仅能够实现强大的 -GPU- 加速，同时还支持动态神经网络" class="headerlink" title="(4) PyTorch 是一个开源的 Python 机器学习库，不仅能够实现强大的 GPU 加速，同时还支持动态神经网络"></a>(4) PyTorch 是一个开源的 Python 机器学习库，不仅能够实现强大的 GPU 加速，同时还支持动态神经网络</h5><h4 id="2- 安装"><a href="#2- 安装" class="headerlink" title="2. 安装"></a>2. 安装</h4><h5 id="1- 安装 -Anaconda"><a href="#1- 安装 -Anaconda" class="headerlink" title="(1) 安装 Anaconda"></a>(1) 安装 Anaconda</h5><h5 id="2- 打开 -Anaconda-Prompt"><a href="#2- 打开 -Anaconda-Prompt" class="headerlink" title="(2) 打开 Anaconda Prompt"></a>(2) 打开 Anaconda Prompt</h5><h5 id="3- 显卡配置（没有独立显卡，略）"><a href="#3- 显卡配置（没有独立显卡，略）" class="headerlink" title="(3) 显卡配置（没有独立显卡，略）"></a>(3) 显卡配置（没有独立显卡，略）</h5><p>CUDN 安装<br>cuDNN 下载</p>
<h5 id="4- 激活环境"><a href="#4- 激活环境" class="headerlink" title="(4) 激活环境"></a>(4) 激活环境 </h5><p> 检查 Python 版本：在 cmd 输入 python<br>管理环境<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在 Anaconda Prompt 中输入</span></span><br><span class="line">conda create -n pytorch python=<span class="number">3.7</span></span><br><span class="line">conda activate pytorch</span><br></pre></td></tr></table></figure></p>
<h5 id="5- 安装 -pytorch"><a href="#5- 安装 -pytorch" class="headerlink" title="(5) 安装 pytorch"></a>(5) 安装 pytorch</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 到 pytorch 官网查询安装指令</span></span><br><span class="line">conda install pytorch torchvision cpuonly -c pytorch</span><br><span class="line"><span class="comment"># -c 参数指明了下载 pytorch 的通道，优先级比清华镜像更高</span></span><br><span class="line"><span class="comment">#（如果你有更改镜像源，会被盖过去）</span></span><br></pre></td></tr></table></figure>
<h5 id="6- 验证 -PyTorch- 安装成功"><a href="#6- 验证 -PyTorch- 安装成功" class="headerlink" title="(6) 验证 PyTorch 安装成功"></a>(6) 验证 PyTorch 安装成功</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"># 在 Anaconda Prompt 中的 pytorch 环境中</span><br><span class="line"># 输入 python 进到 python 界面</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvison</span><br><span class="line"><span class="built_in">print</span> (torch)</span><br></pre></td></tr></table></figure>
<h4 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h4><h5 id="1"><a href="#1" class="headerlink" title="(1)"></a>(1)</h5><h5 id="2"><a href="#2" class="headerlink" title="(2)"></a>(2)</h5><h5 id="3-1"><a href="#3-1" class="headerlink" title="(3)"></a>(3)</h5><h5 id="4"><a href="#4" class="headerlink" title="(4)"></a>(4)</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure>
<p><a href>Windows10 系统中配置安装 PyTorch 环境，无显卡配置</a><br><span id="more"></span></p>
<h3 id="二、python- 语法"><a href="# 二、python- 语法" class="headerlink" title="二、python 语法"></a>二、python 语法</h3><h4 id="1-Python- 类中的实例属性与类属性"><a href="#1-Python- 类中的实例属性与类属性" class="headerlink" title="1.Python 类中的实例属性与类属性"></a>1.Python 类中的实例属性与类属性</h4><h5 id="1- 实例属性"><a href="#1- 实例属性" class="headerlink" title="(1) 实例属性"></a>(1) 实例属性</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> (<span class="params"><span class="built_in">object</span></span>):</span>  <span class="comment"># 创建 Circle 类</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, r</span>):</span> <span class="comment"># 初始化一个属性 r（不要忘记 self 参数，他是类下面所有方法必须的参数）</span></span><br><span class="line">       self.r = r  <span class="comment"># 表示给我们将要创建的实例赋予属性 r 赋值</span></span><br></pre></td></tr></table></figure>
<p><strong>init</strong>() 方法的第一个参数必须是 self（self 代表类的实例，可以用别的名字，但建议使用约定成俗的 self），后续参数则可以自由指定，和定义函数没有任何区别。</p>
<p><strong>init</strong>() 方法的用法类似 java 中的构造方法，但它不是构造方法，</p>
<p>Q：创建类时，类方法中的 self 是什么？<br>self 代表类的实例，是通过类创建的实例 (注意，在定义类时这个实例我们还没有创建，它表示的我们使用类时创建的那个实例)</p>
<h5 id="2- 类属性"><a href="#2- 类属性" class="headerlink" title="(2) 类属性"></a>(2) 类属性 </h5><p> 类本身也是一个对象，如果在类上绑定属性，则所有实例都可以访问该类的属性，并且所有实例访问的类属性都是同一个！实例属性每个实例各自拥有，互相独立，而类属性有且只有一份。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> (<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">   pi = <span class="number">3.14</span>  <span class="comment"># 类属性</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, r</span>):</span></span><br><span class="line">       self.r = r</span><br></pre></td></tr></table></figure></p>
<h4 id="2-super"><a href="#2-super" class="headerlink" title="2.super"></a>2.super</h4><p>在类的继承中，如果重定义某个方法，该方法会覆盖父类的同名方法，但有时，我们希望能同时实现父类的功能，这时，我们就需要调用父类的方法了，可通过使用 super 来实现，比如：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> (<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">greet</span> (<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;Hello, I am % s.&#x27;</span> % self.name</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> (<span class="params">Animal</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">greet</span> (<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span> (Dog, self).greet ()   <span class="comment"># Python3 可使用 super ().greet ()</span></span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;WangWang...&#x27;</span></span><br></pre></td></tr></table></figure><br><a href="https://wiki.jikexueyuan.com/project/explore-python/Class/super.html">你不知道的 super</a></p>
<h3 id="三、"><a href="# 三、" class="headerlink" title="三、"></a>三、</h3>]]></content>
      <categories>
        <category>C++ advance</category>
      </categories>
  </entry>
  <entry>
    <title>毕业设计 -(2) 知识学习</title>
    <url>/2022/02/14/bishe-2/</url>
    <content><![CDATA[<h3 id="一、深度学习基础"><a href="# 一、深度学习基础" class="headerlink" title="一、深度学习基础"></a>一、深度学习基础 </h3><h4 id="1- 前言"><a href="#1- 前言" class="headerlink" title="1. 前言"></a>1. 前言</h4><p>(1) 领域专家，数据科学家，AI 专家<br>Q：数据科学家和 AI 专家的区别？<br> 数据科学家可以有两条职业规划 <br> 广：不断开拓模型在不同领域的应用 <br> 深：专攻一个领域，成为该领域的专家<br>(2) <a href="https://kopu.chat/2012-deeplearning-nvidia-gpu/">2012 年令深度學習和 NVIDIA 股價火爆起來的真正關鍵──GPU</a><br>(3) 模型的可解释性<br>(4) 符号学可以和深度学习结合吗？可以，例如图神经网络<br>(5) 学习的阶段：看 -&gt; 听 -&gt; 看 + 听 -&gt; 动手做 -&gt; 讲解一遍给自己或别人听</p>
<h4 id="2- 深度学习基础 - 线性神经网络，多层感知器"><a href="#2- 深度学习基础 - 线性神经网络，多层感知器" class="headerlink" title="2. 深度学习基础 - 线性神经网络，多层感知器"></a>2. 深度学习基础 - 线性神经网络，多层感知器</h4><h4 id="3- 卷积神经网络 -LeNet-Alexnet-VGG-Inception-Resnet"><a href="#3- 卷积神经网络 -LeNet-Alexnet-VGG-Inception-Resnet" class="headerlink" title="3. 卷积神经网络 - LeNet, Alexnet, VGG, Inception, Resnet"></a>3. 卷积神经网络 - LeNet, Alexnet, VGG, Inception, Resnet</h4><h4 id="4- 循环神经网络 -RNN-GRU-LSTM-seq2seq"><a href="#4- 循环神经网络 -RNN-GRU-LSTM-seq2seq" class="headerlink" title="4. 循环神经网络 - RNN, GRU, LSTM, seq2seq"></a>4. 循环神经网络 - RNN, GRU, LSTM, seq2seq</h4><h4 id="5- 注意力机制 -Attention-Transformer"><a href="#5- 注意力机制 -Attention-Transformer" class="headerlink" title="5. 注意力机制 - Attention, Transformer"></a>5. 注意力机制 - Attention, Transformer</h4><h4 id="6- 优化算法 -SGD-Momentum-Adam"><a href="#6- 优化算法 -SGD-Momentum-Adam" class="headerlink" title="6. 优化算法 - SGD, Momentum, Adam"></a>6. 优化算法 - SGD, Momentum, Adam</h4><h4 id="7- 高性能算法 - 并行，多 -GPU- 分布式"><a href="#7- 高性能算法 - 并行，多 -GPU- 分布式" class="headerlink" title="7. 高性能算法 -  并行，多 GPU, 分布式"></a>7. 高性能算法 -  并行，多 GPU, 分布式</h4><h4 id="8- 计算机视觉 - 目标检测，语义分析"><a href="#8- 计算机视觉 - 目标检测，语义分析" class="headerlink" title="8. 计算机视觉 - 目标检测，语义分析"></a>8. 计算机视觉 - 目标检测，语义分析</h4><h4 id="9- 自然语言处理 - 词嵌入，BERT"><a href="#9- 自然语言处理 - 词嵌入，BERT" class="headerlink" title="9. 自然语言处理 - 词嵌入，BERT"></a>9. 自然语言处理 - 词嵌入，BERT</h4><span id="more"></span>
<h3 id="二、pytorch"><a href="# 二、pytorch" class="headerlink" title="二、pytorch"></a>二、pytorch</h3><h4 id="1- 创建张量"><a href="#1- 创建张量" class="headerlink" title="1. 创建张量"></a>1. 创建张量</h4><p><img src="/2022/02/14/bishe-2/photo1.png" alt><br><img src="/2022/02/14/bishe-2/photo2.png" alt><br>Q: 张量和多维数组有什么不同？</p>
<h4 id="2- 广播机制"><a href="#2- 广播机制" class="headerlink" title="2. 广播机制"></a>2. 广播机制</h4><h4 id="3- 减少内存"><a href="#3- 减少内存" class="headerlink" title="3. 减少内存"></a>3. 减少内存</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">before = <span class="built_in">id</span> (Y)  <span class="comment"># id () 函数提供了内存中引用对象的确切地址</span></span><br><span class="line">Y = Y + X</span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">id</span> (Y) == before)</span><br><span class="line"></span><br><span class="line">before = <span class="built_in">id</span> (X)</span><br><span class="line">X += Y</span><br><span class="line"><span class="comment"># X [:] = X + Y</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">id</span> (X) == before)  <span class="comment"># 使用 X [:] = X + Y 或 X += Y 来减少操作的内存开销。</span></span><br></pre></td></tr></table></figure>
<h4 id="4-Numpy- 是 -python- 中最基础的多元数组运算框架"><a href="#4-Numpy- 是 -python- 中最基础的多元数组运算框架" class="headerlink" title="4.Numpy 是 python 中最基础的多元数组运算框架"></a>4.Numpy 是 python 中最基础的多元数组运算框架</h4><h4 id="5- 转换为其他 -Python- 对象"><a href="#5- 转换为其他 -Python- 对象" class="headerlink" title="5. 转换为其他 Python 对象"></a>5. 转换为其他 Python 对象</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Y = torch.tensor ([[<span class="number">2.0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]])</span><br><span class="line">A = Y.numpy ()</span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">type</span> (A))  <span class="comment"># 打印 A 的类型</span></span><br><span class="line"><span class="built_in">print</span> (A)</span><br><span class="line">B = torch.tensor (A)</span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">type</span> (B))  <span class="comment"># 打印 B 的类型</span></span><br><span class="line"><span class="built_in">print</span> (B)</span><br><span class="line"></span><br><span class="line">a = torch.tensor ([<span class="number">3.5</span>])</span><br><span class="line"><span class="built_in">print</span> (a, a.item (), <span class="built_in">float</span> (a), <span class="built_in">int</span> (a))</span><br></pre></td></tr></table></figure>
<h4 id="6-pytorch- 和 -reshape- 和 -view- 有什么不同"><a href="#6-pytorch- 和 -reshape- 和 -view- 有什么不同" class="headerlink" title="6.pytorch 和 reshape 和 view 有什么不同"></a>6.pytorch 和 reshape 和 view 有什么不同</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = torch.arange (<span class="number">12</span>)</span><br><span class="line">b = a.reshape ((<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">b [:] = <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span> (a)</span><br></pre></td></tr></table></figure>
<h4 id="7-torch- 的 -tensor- 和 -numpy- 的 -array- 类似吗？"><a href="#7-torch- 的 -tensor- 和 -numpy- 的 -array- 类似吗？" class="headerlink" title="7.torch 的 tensor 和 numpy 的 array 类似吗？"></a>7.torch 的 tensor 和 numpy 的 array 类似吗？</h4><h4 id="8-tensor- 有数学定义，array- 只是计算机产物，但是其实是一样的东西"><a href="#8-tensor- 有数学定义，array- 只是计算机产物，但是其实是一样的东西" class="headerlink" title="8.tensor 有数学定义，array 只是计算机产物，但是其实是一样的东西"></a>8.tensor 有数学定义，array 只是计算机产物，但是其实是一样的东西 </h4><h4 id="9- 可以使用 -jax- 取代 -jupyter- 吗？"><a href="#9- 可以使用 -jax- 取代 -jupyter- 吗？" class="headerlink" title="9. 可以使用 jax 取代 jupyter 吗？"></a>9. 可以使用 jax 取代 jupyter 吗？</h4><h3 id="三、数据预处理"><a href="# 三、数据预处理" class="headerlink" title="三、数据预处理"></a> 三、数据预处理 </h3><p> 读写文件背景 <br> 读写文件是最常见的 IO 操作。Python 内置了读写文件的函数，用法和 C 是兼容的。</p>
<p>在磁盘上读写文件的功能都是由操作系统提供的，现代操作系统不允许普通的程序直接操作磁盘。</p>
<p>读写文件就是请求操作系统打开一个文件对象（通常称为文件描述符），然后，通过操作系统提供的接口从这个文件对象中读取数据（读文件），或者把数据写入这个文件对象（写文件）。</p>
<h3 id="四、数学"><a href="# 四、数学" class="headerlink" title="四、数学"></a>四、数学 </h3><h4 id="1- 线性代数"><a href="#1- 线性代数" class="headerlink" title="1. 线性代数"></a>1. 线性代数</h4><p>axis=0 代表往跨 raw（down)，而 axis=1 代表 column（across)<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">u = torch.tensor ([<span class="number">3.0</span>, -<span class="number">4.0</span>])</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27; 向量的𝐿2 范数:&#x27;</span>, torch.norm (u))  <span class="comment"># 向量的𝐿2 范数</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27; 向量的𝐿1 范数:&#x27;</span>, torch.<span class="built_in">abs</span> (u).<span class="built_in">sum</span> ())  <span class="comment"># 向量的𝐿1 范数</span></span><br><span class="line">v = torch.ones ((<span class="number">4</span>, <span class="number">9</span>))</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;v:&#x27;</span>, v)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27; 矩阵的𝐿2 范数:&#x27;</span>, torch.norm (v))  <span class="comment"># 矩阵的𝐿2 范数</span></span><br></pre></td></tr></table></figure><br> 一维向量是一个 row vector（从计算机的角度来说就是一个数组）<br>在 pytorch 中 column vector 是一个矩阵，要区分 row vector 和 column vector 可以用二维数组</p>
<h4 id="2- 微积分"><a href="#2- 微积分" class="headerlink" title="2. 微积分"></a>2. 微积分 </h4><h3 id="五、深度学习"><a href="# 五、深度学习" class="headerlink" title="五、深度学习"></a> 五、深度学习 </h3><h3 id="六、图像分类"><a href="# 六、图像分类" class="headerlink" title="六、图像分类"></a> 六、图像分类 </h3><h3 id="七、目标检测"><a href="# 七、目标检测" class="headerlink" title="七、目标检测"></a> 七、目标检测</h3><p>Ross Girshick (rbg 大神）2014 年提出 R-CNN 架构，可谓给 object detection 领域一个里程碑的前进，在此之前 object detection 性能已经好些年没有大的提高了。</p>
<h3 id="八、图像分割"><a href="# 八、图像分割" class="headerlink" title="八、图像分割"></a>八、图像分割 </h3><h3 id="九、花书精读"><a href="# 九、花书精读" class="headerlink" title="九、花书精读"></a> 九、花书精读 </h3><h3 id="十、李飞飞 -CS231"><a href="# 十、李飞飞 -CS231" class="headerlink" title="十、李飞飞 CS231"></a> 十、李飞飞 CS231</h3><p>参考：<br><a href="https://blog.csdn.net/qq_37541097">太阳花的小绿豆 </a><br><a href="https://zh-v2.d2l.ai/"> 李沐 动手学深度学习</a></p>
]]></content>
      <categories>
        <category>C++ advance</category>
      </categories>
  </entry>
  <entry>
    <title>經典電影 - 歷史篇</title>
    <url>/2022/01/07/classic-movie-history/</url>
    <content><![CDATA[<h3 id="《桂河大橋》"><a href="#《桂河大橋》" class="headerlink" title="《桂河大橋》"></a>《桂河大橋》</h3><h4 id="英國導演 -David-Lean- 的史詩三部曲"><a href="# 英國導演 -David-Lean- 的史詩三部曲" class="headerlink" title="英國導演 David Lean 的史詩三部曲"></a>英國導演 David Lean 的史詩三部曲</h4><p>《桂河大橋 The Bridge on the River Kwai》(1957)<br>《阿拉伯的勞倫斯 Lawrence of Arabia》(1962)<br>《齊瓦哥醫生 Doctor Zhivago》(1965) </p>
<h4 id="主要演員"><a href="# 主要演員" class="headerlink" title="主要演員"></a>主要演員</h4><p>William Holden<br>Alec Guinness</p>
<h4 id="改編自同名小説"><a href="# 改編自同名小説" class="headerlink" title="改編自同名小説"></a>改編自同名小説 </h4><h4 id="背景"><a href="# 背景" class="headerlink" title="背景"></a> 背景</h4><p>1942 年 6 月 - 1943 年 10 月，占領泰緬兩國的日軍强迫 6 多萬名盟軍戰俘和 30 多萬亞洲勞工，修建連接曼谷和仰光的泰緬鐵路，期間大量戰俘和勞工喪生。桂河大橋是死亡鐵路的咽喉，成爲盟軍重點攻擊的戰略目標。</p>
<pre><code>二戰主要國陣營
同盟國：英、法、俄、美、中華民國
軸心國：德、義、日

背景：各國關稅壁壘，德國和日本經濟大恐慌，爲了解決經濟問題，積極對外擴張（法西斯主義、軍國主義）
1939 年德國違反協議，進攻波蘭（閃電戰）
1937 年日本發動七七事變（盧溝橋戰爭）
珍珠港事件使得東西方戰場合一，亦是美國對軸心國宣戰的主要理由之一
結束：1945 年簽訂波茨坦條約
</code></pre><h4 id="借由造橋再炸橋凸顯出戰爭的荒謬"><a href="# 借由造橋再炸橋凸顯出戰爭的荒謬" class="headerlink" title="借由造橋再炸橋凸顯出戰爭的荒謬"></a>借由造橋再炸橋凸顯出戰爭的荒謬 </h4><p> 日：齋藤大佐被盟軍刺死是為天皇效忠 <br> 美：希爾斯的死是以生命換取任務的完成，戰爭的勝利是英雄的悲歌 <br> 英：炸橋是英軍的命令，但他由於是戰俘而不知道，反而去阻止而死（認爲是英軍精神象徵）</p>
<h3 id="《辛德勒的名單》（Schindler’s-List）-Steven-Allan-Spielberg"><a href="#《辛德勒的名單》（Schindler’s-List）-Steven-Allan-Spielberg" class="headerlink" title="《辛德勒的名單》（Schindler’s List）-Steven Allan Spielberg"></a>《辛德勒的名單》（Schindler’s List）-Steven Allan Spielberg</h3><p>納粹德國大肆屠殺波蘭猶太人 <br> 德國商人奧斯卡。辛德勒從普通的投機者，（紅衣女陔）變成將猶太人雇用到自己的工廠，最後不惜傾家蕩產，保護他們</p>
<h4 id="世界最著名的探戈：一步之遙 -Por-una-Cabeza"><a href="# 世界最著名的探戈：一步之遙 -Por-una-Cabeza" class="headerlink" title="世界最著名的探戈：一步之遙 Por una Cabeza"></a>世界最著名的探戈：一步之遙 Por una Cabeza</h4><h3 id="《帝國的毀滅》"><a href="#《帝國的毀滅》" class="headerlink" title="《帝國的毀滅》"></a>《帝國的毀滅》</h3>]]></content>
      <categories>
        <category>經典電影</category>
      </categories>
  </entry>
  <entry>
    <title>通信原理 --（7）最佳接收</title>
    <url>/2020/10/15/communicationSystem-BestAccepted/</url>
    <content><![CDATA[<p><a href="https://wangxchun.github.io/2020/09/10/communicationSystem-introduction/">通信原理 —（1）绪论 </a><br><a href="https://wangxchun.github.io/2020/09/14/communicationSystem-channel/"> 通信原理 —（2）信道 </a><br><a href="https://wangxchun.github.io/2020/09/17/communicationSystem-analogModulation/"> 通信原理 —（3）模拟调制技术 </a><br><a href="https://wangxchun.github.io/2020/09/23/communicationSystem-digitization/"> 通信原理 —（4）模拟信号数字化 </a><br><a href="https://wangxchun.github.io/2020/09/29/communicationSystem-digitalBasebandTransmission/"> 通信原理 —（5）数字基带传输 </a><br><a href="https://wangxchun.github.io/2020/10/03/communicationSystem-digitalFrequencyBandTransmission/"> 通信原理 —（6）数字频带传输 </a><br><a href="https://wangxchun.github.io/2020/10/15/communicationSystem-BestAccepted/"> 通信原理 —（7）最佳接收 </a><br><a href="https://wangxchun.github.io/2020/10/21/communicationSystem-synchronize/"> 通信原理 —（8）同步</a></p>
<h3 id="一、不同类型数字信号的最佳接收及其误码性能"><a href="# 一、不同类型数字信号的最佳接收及其误码性能" class="headerlink" title="一、不同类型数字信号的最佳接收及其误码性能"></a>一、不同类型数字信号的最佳接收及其误码性能</h3><span id="more"></span>
<h3 id="二、数字信号的匹配滤波接收"><a href="# 二、数字信号的匹配滤波接收" class="headerlink" title="二、数字信号的匹配滤波接收"></a>二、数字信号的匹配滤波接收 </h3><h3 id="三、最佳基带传输系统"><a href="# 三、最佳基带传输系统" class="headerlink" title="三、最佳基带传输系统"></a> 三、最佳基带传输系统</h3>]]></content>
      <categories>
        <category>大学课程-通信原理</category>
      </categories>
      <tags>
        <tag>通信原理</tag>
        <tag>最佳接收</tag>
        <tag>匹配滤波接收</tag>
      </tags>
  </entry>
  <entry>
    <title>經典電影 - 人生篇</title>
    <url>/2022/01/07/classic-movie-life/</url>
    <content><![CDATA[<h3 id="《肖申克的救贖 - 刺激 -1995》（The-Shawshank-Redemption）-Frank-Darabont"><a href="#《肖申克的救贖 - 刺激 -1995》（The-Shawshank-Redemption）-Frank-Darabont" class="headerlink" title="《肖申克的救贖 / 刺激 1995》（The Shawshank Redemption）-Frank Darabont"></a>《肖申克的救贖 / 刺激 1995》（The Shawshank Redemption）-Frank Darabont</h3><h4 id="希望的勇氣 - 不被體制化"><a href="# 希望的勇氣 - 不被體制化" class="headerlink" title="希望的勇氣 不被體制化"></a>希望的勇氣 不被體制化 </h4><p> 體制化：人對環境產生了依賴，一旦限制消失，本能反應還是想尋找舊體制的約束 <br> 舒適圈 - 在監獄生活大半輩子的 Brooks 獲得假釋 <br> 典獄長 Norton 消滅證人，請警長槍殺 Tommy<br>Reed 出獄后覺得不融入，考慮過自殺</p>
<h4 id="宗教"><a href="# 宗教" class="headerlink" title="宗教"></a>宗教 </h4><p> 亞當和夏娃的子孫有原罪，基督獻身拯救大家 <br>Andy - 救贖肖申克的神<br> 典獄長 Norton - 魔鬼</p>
<h4 id="出埃及記"><a href="# 出埃及記" class="headerlink" title="出埃及記"></a>出埃及記 </h4><p> 希伯來人長期遭受埃及法老奴役迫害，他們所受的苦被神得知，神派遣先知摩西去救贖他們 <br> 摩西通過和希伯來人的周旋，最終救贖了希伯來人，並給了法老致命懲罰</p>
<h4 id="Andy- 的救贖"><a href="#Andy- 的救贖" class="headerlink" title="Andy 的救贖"></a>Andy 的救贖</h4><p>(1) 憑藉銀行家的知識，為獄友贏得了啤酒 -&gt; 耶穌把水變成美酒<br>(2) 播放歌劇 《莫扎特 費加羅的婚禮》-&gt; 耶穌治好癱瘓病人 (心靈上沒有反抗意識的心靈癱瘓者)<br>(3) 擴建圖書館 -&gt; 耶穌五丙二魚喂飽五千人 (書籍是精神糧食)<br>(4) 幫獄友 Yommy 拿到文憑 -&gt; 耶穌醫治瞎眼<br>(5) 自我救贖，想要翻案，逃獄 -&gt; 重回天國<br>(6) Andy 對 Reed 的救贖 -&gt; 耶穌讓拉撒路死而復活</p>
<h4 id="電影畫面"><a href="# 電影畫面" class="headerlink" title="電影畫面"></a>電影畫面 </h4><p> 畫面從暖色調轉爲冷色調 <br>Adny 和 Reed 的談話，Andy 從暗處走到亮處<br> 畫面越過槍支，落到指北針上面，暗示 Andy 給 Reed 指引方向</p>
<h4 id="基督山伯爵"><a href="# 基督山伯爵" class="headerlink" title="基督山伯爵"></a>基督山伯爵</h4><h3 id="《這個殺手不太冷 - 終極追殺令》（法：Leon，美：The-Professional）-Luc-Besson"><a href="#《這個殺手不太冷 - 終極追殺令》（法：Leon，美：The-Professional）-Luc-Besson" class="headerlink" title="《這個殺手不太冷 / 終極追殺令》（法：Léon，美：The Professional）-Luc Besson"></a>《這個殺手不太冷 / 終極追殺令》（法：Léon，美：The Professional）-Luc Besson</h3><h5 id="《回魂夜》致敬《這個殺手不太冷》"><a href="#《回魂夜》致敬《這個殺手不太冷》" class="headerlink" title="《回魂夜》致敬《這個殺手不太冷》"></a>《回魂夜》致敬《這個殺手不太冷》</h5><p><a href="https://www.youtube.com/watch?v=EQ_ktwIi_PY">【終極追殺令】與【回魂夜】的相似之處</a></p>
<h5 id="Mathilda- 和 -Leon：兩個一無所有的靈魂互相依靠，愛上彼此"><a href="#Mathilda- 和 -Leon：兩個一無所有的靈魂互相依靠，愛上彼此" class="headerlink" title="Mathilda 和 Leon：兩個一無所有的靈魂互相依靠，愛上彼此"></a>Mathilda 和 Leon：兩個一無所有的靈魂互相依靠，愛上彼此</h5><h3 id="《盜夢空間 - 全面啓動》（Inception）-Christopher-Nolan"><a href="#《盜夢空間 - 全面啓動》（Inception）-Christopher-Nolan" class="headerlink" title="《盜夢空間 / 全面啓動》（Inception）-Christopher Nolan"></a>《盜夢空間 / 全面啓動》（Inception）-Christopher Nolan</h3><p>Leonardo DiCaprio<br>Elliot Page<br>Joseph Gordon-Levitt<br>Edward “Chips” Hardy<br>Cillian Murphy</p>
<h4 id><a href="#" class="headerlink" title=" "></a> </h4><p>在夢境中，大腦運轉速度會大幅提升，所以現實中的五分鐘是夢境中的一小時 <br> 在夢中可以做現實中做不到的事，但是如果異常，就會受到夢中其他人的攻擊 <br> 如果在夢境中死亡或受到刺激，就會從夢境中醒來 <br>（note：瑞克與莫蒂 說在夢境中死亡，現實中也會死亡 -&gt; 深層夢境，之後會説）<br> 用陀螺區分自己是否在夢境中</p>
<h4 id="開始造夢"><a href="# 開始造夢" class="headerlink" title="開始造夢"></a>開始造夢 </h4><p> 藥劑師，在夢中死了也很難醒來，可能在潛意識邊界迷失，唯一能醒來的方式就是從高空中墜落</p>
<h4 id="Fisher- 受過反盜夢訓練"><a href="#Fisher- 受過反盜夢訓練" class="headerlink" title="Fisher 受過反盜夢訓練"></a>Fisher 受過反盜夢訓練</h4><h3 id="《海上鋼琴師》"><a href="#《海上鋼琴師》" class="headerlink" title="《海上鋼琴師》"></a>《海上鋼琴師》</h3><h4 id="Giuseppe-Tornatore「時空三部曲」"><a href="#Giuseppe-Tornatore「時空三部曲」" class="headerlink" title="Giuseppe Tornatore「時空三部曲」"></a>Giuseppe Tornatore「時空三部曲」</h4><p>《天堂電影院》（Last Film Show）<br>《海上鋼琴師》（The Legend of 1900）<br>《西西里的美麗傳說》</p>
<h4 id="義大利電影配樂大師 -Ennio-Morricone"><a href="# 義大利電影配樂大師 -Ennio-Morricone" class="headerlink" title="義大利電影配樂大師 Ennio Morricone"></a>義大利電影配樂大師 Ennio Morricone</h4><p>《海上鋼琴師》《美國往事》《天堂電影院》《西西里的美麗傳說》《黃金三鏢客》《西部往事》</p>
<h4 id="爲什麽不下船"><a href="# 爲什麽不下船" class="headerlink" title="爲什麽不下船"></a>爲什麽不下船 </h4><p> 在有限的 88 個鋼琴鍵上，可以彈奏出無限的音樂 <br> 陸地上的世界就像有無限琴鍵的鋼琴，除了上帝沒有人可以彈奏出樂曲</p>
<h4 id="電影名稱寓意"><a href="# 電影名稱寓意" class="headerlink" title="電影名稱寓意"></a>電影名稱寓意 </h4><p>20 世紀初，大量過得不如意的歐洲人遠渡美國去追求成功的夢想<br>-&gt;《泰坦尼克號》 《布達佩斯大飯店》<br> 離開了歐洲的家，卻上不了美國的岸，時代的困惑（歐洲優雅 vs 美國工業效率）</p>
<h3 id="《布達佩斯大飯店》（The-Grand-Budapest-Hotel）-Wes-Anderson"><a href="#《布達佩斯大飯店》（The-Grand-Budapest-Hotel）-Wes-Anderson" class="headerlink" title="《布達佩斯大飯店》（The Grand Budapest Hotel）-Wes Anderson"></a>《布達佩斯大飯店》（The Grand Budapest Hotel）-Wes Anderson</h3><h4 id="作家在飯店遇到零。穆斯塔法"><a href="# 作家在飯店遇到零。穆斯塔法" class="headerlink" title="作家在飯店遇到零。穆斯塔法"></a>作家在飯店遇到零。穆斯塔法 </h4><p> 飯店第一代門房 1932 古斯塔夫（遇到門童 零）<br>零認識了蛋糕店員工 阿加莎 <br>D 夫人死了<br> 古斯塔夫被指控殺了 D 夫人，入獄 <br> 蛋糕分給室友，逃獄</p>
<h3 id="歷史片：歐洲文明衰落這一精神內涵"><a href="# 歷史片：歐洲文明衰落這一精神內涵" class="headerlink" title="歷史片：歐洲文明衰落這一精神內涵"></a>歷史片：歐洲文明衰落這一精神內涵 </h3><p>《布達佩斯大飯店》這個名字，讓人以為故事發生在匈牙利，雖然匈牙利酒店業是很發達，一萬福林就可以租一套別墅來住，但電影內容似乎和匈牙利沒有關係。電影取景是在德國，原著隱喻是在 1918 年到 1938 年之間的奧地利。<br> 奧地利，小巴黎，歐洲的文化藝術的心臟，歐洲精神和思想的搖籃，也是希特勒「水晶之夜」排猶殺猶焚書坑儒的地方。故事的場景就是小說作者茨威格本人的祖國。</p>
<h3 id="紀錄片：記錄劉別謙、希區柯克（存在爭議）、羅西里尼、卓柏林等人留下的經典電影手法"><a href="# 紀錄片：記錄劉別謙、希區柯克（存在爭議）、羅西里尼、卓柏林等人留下的經典電影手法" class="headerlink" title="紀錄片：記錄劉別謙、希區柯克（存在爭議）、羅西里尼、卓柏林等人留下的經典電影手法"></a>紀錄片：記錄劉別謙、希區柯克（存在爭議）、羅西里尼、卓柏林等人留下的經典電影手法 </h3><h3 id="文藝片：色調和風格"><a href="# 文藝片：色調和風格" class="headerlink" title="文藝片：色調和風格"></a> 文藝片：色調和風格 </h3><h3 id="茨威格：奧地利流亡作家、猶太人、歐洲傳統文化的捍衛者，受到納粹德國迫害，最後在巴西自殺身亡。"><a href="# 茨威格：奧地利流亡作家、猶太人、歐洲傳統文化的捍衛者，受到納粹德國迫害，最後在巴西自殺身亡。" class="headerlink" title="茨威格：奧地利流亡作家、猶太人、歐洲傳統文化的捍衛者，受到納粹德國迫害，最後在巴西自殺身亡。"></a> 茨威格：奧地利流亡作家、猶太人、歐洲傳統文化的捍衛者，受到納粹德國迫害，最後在巴西自殺身亡。</h3><h3 id="各種比喻"><a href="# 各種比喻" class="headerlink" title="各種比喻"></a>各種比喻 </h3><p><a href="https://www.zhihu.com/question/22619618/answer/27061477">《布达佩斯大饭店》的创作背景是什么？有哪些作品和它的题材类似？</a><br> 電影中的大堂經理，古斯塔夫：滿足顧客 -&gt; 茨威格的自畫像</p>
<p>《蘋果男孩》是歐洲貴族留給古斯塔夫的財富，是靠他細緻入微，給古斯塔夫引來殺身之禍的價值連城的名畫。<br>-&gt; 隱喻整個猶太民族精打細算，左右逢源，從耶路撒冷撒向全世界，逐漸繼承了歐洲的物質和精神財富。</p>
<p>死者的兒子德米特里，一個只關心財富的實用主義者，他暴虐粗魯，無視法律和契約，修改遺囑，謀殺律師，追殺證人，但是對遺產卻又有著變態的依戀。-&gt; 希特勒，作為同一文化的繼承人，他想佔有祖先的所有遺產，但是卻完全沒有繼承到其精髓，同時撕毀停戰條約，窮兵黷武，屠殺猶太人。<br>德米特里 <br> 現實中，茨威格是在巴西自殺的。然而電影中，古斯塔夫是在火車上怒斥納粹，被槍斃在冰冷的荒原里，茨威格和納粹叫板了一生，何嘗不希望勇敢的站出來和他們抗爭到底。但是現實里他沒有勇氣這樣做。而電影里就不一樣了，有傳承人，見證人 ZERO，古斯塔夫要把這個種子保護和延續下去，付出了自己的生命，也許，這是經過藝術加工後，茨威格最最理想的結局。</p>
<p>德米特里家的打手是個牛高馬大，少言寡語，出手殘忍，效忠主人的令人不寒而慄的男人，其戲劇形象就像弗蘭克斯坦（科學怪人），或者《007》裡面的鋼牙。他的戲就只有一個內容 —— 追殺，殺人不見血。直到最後雪橇追車一幕，才讓人想起點什麼，他停好摩托車，豎起雪橇，以幾乎是軍姿的方式站在原地喝威士忌。皮衣，軍姿，殺人不眨眼，愚忠，恐怖，執行命令不動腦子，就是德國軍隊的寫照，尤其是黨衛軍或者蓋世太保的寫照。</p>
<p>德米特里拿的是 PPK，卡爾・瓦爾特兵工廠的 PPK（卡爾・畢而瑟）是二戰時最著名最先進的手槍，納粹黨於 1931 年奪得政權後，由於該槍械輕、小，便於攜帶，性能傑出，主要配發給高級將領，非作戰參謀人員，蓋世太保等或者贈送給外賓。雖然我們看到很多二戰題材的電影里德軍軍官使用最多的是魯格 P08 或者 P38，但那是作戰人員用的武器，而 PPK 更有身份象徵的特點。（PPK, 國產零零七也用的是這個）</p>
<p>飯店中的亂戰 -&gt; 一個武器代表一個國家或者一個陣營。</p>
<p>《三傻大鬧寶萊塢 / 三個傻瓜》（Three Idiots）-Rajkumar Hirani</p>
<p>姜文、陸川、寧浩</p>
]]></content>
      <categories>
        <category>經典電影</category>
      </categories>
  </entry>
  <entry>
    <title>通信原理 --（3）模拟调制技术</title>
    <url>/2020/09/17/communicationSystem-analogModulation/</url>
    <content><![CDATA[<p><a href="https://wangxchun.github.io/2020/09/10/communicationSystem-introduction/">通信原理 —（1）绪论 </a><br><a href="https://wangxchun.github.io/2020/09/14/communicationSystem-channel/"> 通信原理 —（2）信道 </a><br><a href="https://wangxchun.github.io/2020/09/17/communicationSystem-analogModulation/"> 通信原理 —（3）模拟调制技术 </a><br><a href="https://wangxchun.github.io/2020/09/23/communicationSystem-digitization/"> 通信原理 —（4）模拟信号数字化 </a><br><a href="https://wangxchun.github.io/2020/09/29/communicationSystem-digitalBasebandTransmission/"> 通信原理 —（5）数字基带传输 </a><br><a href="https://wangxchun.github.io/2020/10/03/communicationSystem-digitalFrequencyBandTransmission/"> 通信原理 —（6）数字频带传输 </a><br><a href="https://wangxchun.github.io/2020/10/15/communicationSystem-BestAccepted/"> 通信原理 —（7）最佳接收 </a><br><a href="https://wangxchun.github.io/2020/10/21/communicationSystem-synchronize/"> 通信原理 —（8）同步</a></p>
<h3 id="一、调制的概念和幅度调制"><a href="# 一、调制的概念和幅度调制" class="headerlink" title="一、调制的概念和幅度调制"></a>一、调制的概念和幅度调制 </h3><h4 id="1- 调制的概念"><a href="#1- 调制的概念" class="headerlink" title="1. 调制的概念"></a>1. 调制的概念</h4><p>Q：为什么调制之后，扩展信号带宽，可以提高系统抗干扰能力、抗衰弱能力<br> 思路 1：根据香浓公式，传输带宽和信噪比之间可以互换。</p>
<h4 id="2- 幅度调制基本原理"><a href="#2- 幅度调制基本原理" class="headerlink" title="2. 幅度调制基本原理"></a>2. 幅度调制基本原理 </h4><h5 id="1- 幅度调制的时域和频域"><a href="#1- 幅度调制的时域和频域" class="headerlink" title="(1) 幅度调制的时域和频域"></a>(1) 幅度调制的时域和频域</h5><p> 时域：$s_m (t) = Am (t) cos (\omega_c t + \varphi_0)$<br>频域：$\displaystyle S_m (\omega) = {A \over 2}[M (\omega+\omega_c) + M (\omega-\omega_c)]$<span id="more"></span></p>
<h5 id="2- 幅度调制的一般模型"><a href="#2- 幅度调制的一般模型" class="headerlink" title="(2) 幅度调制的一般模型"></a>(2) 幅度调制的一般模型 </h5><p>(a) 滤波法<br><img src="/2020/09/17/communicationSystem-analogModulation/photo1.jpg" alt="滤波法"><br> 不同滤波器的设计，完成不同形式的幅度调制 (AM、DSB…)<br>(b) 相移法 <br><img src="/2020/09/17/communicationSystem-analogModulation/photo2.jpg" alt="相移法"><br> 已调信号的频谱完全是基带信号频谱在频域内的简单搬移，由于这种搬移是线性的，因此幅度调制又称为线性调制。这里的 “线性” 并不意味着已调信号和调制信号之间符合线性变换关系。</p>
<h4 id="3- 幅度调制 -AM"><a href="#3- 幅度调制 -AM" class="headerlink" title="3. 幅度调制 AM"></a>3. 幅度调制 AM</h4><p>时域：$s_{AM}(t) = [A_0 + m (t)] cos \omega_c t + m (t) cos \omega_c t$<br>频谱：$S_{AM}(\omega) = \pi A_0 [\delta (\omega + \omega_c) + \delta (\omega - \omega_c)] + {1 \over 2}[M (\omega + \omega_c) + M (\omega - \omega_c)]$<br>功率 $\displaystyle P_{AM} = {A_0^2 \over 2} + {\overline {m^2 (t)} \over 2} = P_c + P_s = $ 载波功率 $+$ 边带功率 <br> 调制效率 $\displaystyle \eta_{AM} = {P_s \over P_{AM}} = \frac {\frac {\overline {m^2 (t)}}{2}} {A_0^2 + \overline {m^2 (t)}} $</p>
<h4 id="4- 双边带调制 -DSB"><a href="#4- 双边带调制 -DSB" class="headerlink" title="4. 双边带调制 DSB"></a>4. 双边带调制 DSB</h4><p>优点：调制效率 100%，节省了载波功率 <br> 缺点：不能用包络检波，需采用相干解调，较复杂</p>
<h4 id="5- 单边带调制 -SSB"><a href="#5- 单边带调制 -SSB" class="headerlink" title="5. 单边带调制 SSB"></a>5. 单边带调制 SSB</h4><h5 id="1- 滤波法产生 -SSB- 信号"><a href="#1- 滤波法产生 -SSB- 信号" class="headerlink" title="(1) 滤波法产生 SSB 信号"></a>(1) 滤波法产生 SSB 信号 </h5><p> 滤波特性很难做到具有陡峭的截止特性 <br> 可以采用多级 (一般采用两级) DSB 调制及边带滤波</p>
<h5 id="2- 相移法产生 -SSB- 信号"><a href="#2- 相移法产生 -SSB- 信号" class="headerlink" title="(2) 相移法产生 SSB 信号"></a>(2) 相移法产生 SSB 信号</h5><p><img src="/2020/09/17/communicationSystem-analogModulation/photo3.jpg" alt="SSB 相移法"></p>
<p>优点：不需要滤波器具有陡峭的截止特性 <br> 缺点：宽带相移网络难用硬件实现</p>
<h4 id="6- 残留边带调制 -VSB"><a href="#6- 残留边带调制 -VSB" class="headerlink" title="6. 残留边带调制 VSB"></a>6. 残留边带调制 VSB</h4><p><img src="/2020/09/17/communicationSystem-analogModulation/photo4.png" alt><br><img src="/2020/09/17/communicationSystem-analogModulation/photo5.png" alt><br>$S_d (\omega) = \displaystyle {1 \over 4} M (\omega)[H_{VSB}(\omega + \omega_c) + H_{VSB}(\omega - \omega_c)]$<br>为保证相干解调的输出无失真的恢复调制信号 $m (t)$，要求：<br>$[H_{VSB}(\omega + \omega_c) + H_{VSB}(\omega - \omega_c) = constant$，$|\omega| \leq \omega_H$</p>
<h3 id="二、幅度调制系统的抗噪声性能"><a href="# 二、幅度调制系统的抗噪声性能" class="headerlink" title="二、幅度调制系统的抗噪声性能"></a>二、幅度调制系统的抗噪声性能 </h3><h4 id="1- 分析模型"><a href="#1- 分析模型" class="headerlink" title="1. 分析模型"></a>1. 分析模型</h4><h4 id="2- 幅度调制相干解调的抗噪声性能"><a href="#2- 幅度调制相干解调的抗噪声性能" class="headerlink" title="2. 幅度调制相干解调的抗噪声性能"></a>2. 幅度调制相干解调的抗噪声性能</h4><h4 id="3-AM- 信号检波的抗噪声性能"><a href="#3-AM- 信号检波的抗噪声性能" class="headerlink" title="3.AM 信号检波的抗噪声性能"></a>3.AM 信号检波的抗噪声性能</h4><h3 id="三、模拟角度调制"><a href="# 三、模拟角度调制" class="headerlink" title="三、模拟角度调制"></a> 三、模拟角度调制 </h3><h3 id="四、调频系统的抗噪声性能"><a href="# 四、调频系统的抗噪声性能" class="headerlink" title="四、调频系统的抗噪声性能"></a> 四、调频系统的抗噪声性能 </h3><h3 id="五、频分复用和模拟调制技术的应用"><a href="# 五、频分复用和模拟调制技术的应用" class="headerlink" title="五、频分复用和模拟调制技术的应用"></a> 五、频分复用和模拟调制技术的应用</h3>]]></content>
      <categories>
        <category>大学课程-通信原理</category>
      </categories>
      <tags>
        <tag>通信原理</tag>
        <tag>模拟调制技术</tag>
        <tag>抗噪声性能</tag>
        <tag>频分复用</tag>
      </tags>
  </entry>
  <entry>
    <title>通信原理 --（2）信道</title>
    <url>/2020/09/14/communicationSystem-channel/</url>
    <content><![CDATA[<p><a href="https://wangxchun.github.io/2020/09/10/communicationSystem-introduction/">通信原理 —（1）绪论 </a><br><a href="https://wangxchun.github.io/2020/09/14/communicationSystem-channel/"> 通信原理 —（2）信道 </a><br><a href="https://wangxchun.github.io/2020/09/17/communicationSystem-analogModulation/"> 通信原理 —（3）模拟调制技术 </a><br><a href="https://wangxchun.github.io/2020/09/23/communicationSystem-digitization/"> 通信原理 —（4）模拟信号数字化 </a><br><a href="https://wangxchun.github.io/2020/09/29/communicationSystem-digitalBasebandTransmission/"> 通信原理 —（5）数字基带传输 </a><br><a href="https://wangxchun.github.io/2020/10/03/communicationSystem-digitalFrequencyBandTransmission/"> 通信原理 —（6）数字频带传输 </a><br><a href="https://wangxchun.github.io/2020/10/15/communicationSystem-BestAccepted/"> 通信原理 —（7）最佳接收 </a><br><a href="https://wangxchun.github.io/2020/10/21/communicationSystem-synchronize/"> 通信原理 —（8）同步</a></p>
<h3 id="一、信道的概念和实际信道"><a href="# 一、信道的概念和实际信道" class="headerlink" title="一、信道的概念和实际信道"></a>一、信道的概念和实际信道 </h3><h4 id="1- 信道的概念"><a href="#1- 信道的概念" class="headerlink" title="1. 信道的概念"></a>1. 信道的概念</h4><p> 为什么要研究信道？因为信道会导致信号的变化 <br> 如何研究信道？建立数学模型 <br><img src="/2020/09/14/communicationSystem-channel/photo1.jpg" alt><br>$r (t) = s (t) \oplus h (t) + n (t)$<br> 从信号处理角度看，信道就是一个滤波器，$h (t)$ 是滤波器的冲激响应。<br>从信号与系统的角度看，信道就是一个系统，$h (t)$ 是系统的冲激响应。<br>对于信道来说，$h (t)$ 就是信道的冲激响应，也称信道的特性。<br><span id="more"></span></p>
<h4 id="2- 实际无线信道"><a href="#2- 实际无线信道" class="headerlink" title="2. 实际无线信道"></a>2. 实际无线信道</h4><h5 id="1- 电磁波频谱划分"><a href="#1- 电磁波频谱划分" class="headerlink" title="(1) 电磁波频谱划分"></a>(1) 电磁波频谱划分</h5><p><img src="/2020/09/14/communicationSystem-channel/photo2.jpg" alt></p>
<h5 id="2- 电磁波的特性"><a href="#2- 电磁波的特性" class="headerlink" title="(2) 电磁波的特性"></a>(2) 电磁波的特性 </h5><p> 电磁波频率越高，通信波束越窄 (功率利用越充分)，天线发射效率越高 (天线口径可越小)，<br>穿透能力越强，绕射能力越弱</p>
<h5 id="3- 电磁波主要传播方式"><a href="#3- 电磁波主要传播方式" class="headerlink" title="(3) 电磁波主要传播方式"></a>(3) 电磁波主要传播方式</h5><p>(a) 天波传播：短波 (3M-30MHz)、电离层的反射 (频率低易反射)<br>(b) 地波传播：长波、绕射<br>(c) 散射传播：微波、对流程的散射、大容量战略通信<br>(d) 视距传播：超短波、微波（地面的远距传播必须设置中继站）</p>
<h4 id="3- 实际有线信道"><a href="#3- 实际有线信道" class="headerlink" title="3. 实际有线信道"></a>3. 实际有线信道</h4><p><img src="/2020/09/14/communicationSystem-channel/photo3.jpg" alt></p>
<h5 id="1- 双绞线"><a href="#1- 双绞线" class="headerlink" title="(1) 双绞线"></a>(1) 双绞线</h5><p>Q：为什么要进行扭绞？<br>A：为了提高抗干扰性能，绞度越大，抗干扰能力越好，同时成本也越高<br>Q：为什么纽绞可以提高抗干扰特性？<br>A：从理论上讲，电路形成的环路围绕的面积越大，就月容易被干扰信号影响。双绞线将环路面积减到最小，所以抗干扰能力强。两根非常接近的铜线都在传导电信号时，就会出现一定的电磁干扰，这种干扰称作串扰。如果把电极相反的一根铜线相互绞在一起，可以减少串扰以及信号放射程度，每一根缠绕着的导线在导电时，发出的电磁幅射被绞合的另一根线上发出的电磁辐射所抵消，随着单位长度电缆中所缠绕的线的对数的增加，防止串饶的能力也增加。</p>
<h5 id="2- 同轴电缆"><a href="#2- 同轴电缆" class="headerlink" title="(2) 同轴电缆"></a>(2) 同轴电缆 </h5><h5 id="3- 光纤"><a href="#3- 光纤" class="headerlink" title="(3) 光纤"></a>(3) 光纤</h5><p> 光纤的色散限制了光纤的无中继传输距离 <br> 延申阅读：如何利用光子的轨道角动量 (OAM) 进一步提高光通信的传输速率和频带利用率？关于 OAM 的光通信要解决的关键问题有哪些？如何解决？</p>
<h3 id="二、信道的数字模型和信道特性"><a href="# 二、信道的数字模型和信道特性" class="headerlink" title="二、信道的数字模型和信道特性"></a>二、信道的数字模型和信道特性</h3><h4 id="1- 信道特性及其数学模型"><a href="#1- 信道特性及其数学模型" class="headerlink" title="1. 信道特性及其数学模型"></a>1. 信道特性及其数学模型</h4><h5 id="1- 调制信道和编码信道"><a href="#1- 调制信道和编码信道" class="headerlink" title="(1) 调制信道和编码信道"></a>(1) 调制信道和编码信道</h5><p><img src="/2020/09/14/communicationSystem-channel/photo4.jpg" alt></p>
<h5 id="2- 二对端的调制信道模型"><a href="#2- 二对端的调制信道模型" class="headerlink" title="(2) 二对端的调制信道模型"></a>(2) 二对端的调制信道模型 </h5><p>$e_o (t) = k (t) \cdot e_i (t) + n (t)$<br> 加性干扰 $n (t)$：即使没有信号输入，接收端仍有信号输出 <br> 乘性干扰 $k (t)$：恒参信道、随参信道<br>(a) 加性噪声恒参信道<br><img src="/2020/09/14/communicationSystem-channel/photo5.jpg" alt><br>(b) 具有加性噪声的线性滤波信<br><img src="/2020/09/14/communicationSystem-channel/photo6.jpg" alt><br>(c) 具有加性噪声的时变线性滤波信道<br><img src="/2020/09/14/communicationSystem-channel/photo7.jpg" alt></p>
<h5 id="3- 编码信道模型：采用数字信号的转移概率来描述"><a href="#3- 编码信道模型：采用数字信号的转移概率来描述" class="headerlink" title="(3) 编码信道模型：采用数字信号的转移概率来描述"></a>(3) 编码信道模型：采用数字信号的转移概率来描述</h5><p><img src="/2020/09/14/communicationSystem-channel/photo8.jpg" alt></p>
<h4 id="2- 信道特性对信号传输的影响"><a href="#2- 信道特性对信号传输的影响" class="headerlink" title="2. 信道特性对信号传输的影响"></a>2. 信道特性对信号传输的影响 </h4><p> 信道的传输特性可以用其幅频特性和相频特性来描述 (适用于恒参信道)。<br>信道引起的失真：</p>
<h5 id="1- 码间串扰"><a href="#1- 码间串扰" class="headerlink" title="(1) 码间串扰"></a>(1) 码间串扰</h5><p>(a) 传输特性不理想，导致前后码元波形畸变并使前面波形出现拖尾，从而对当前码元的判决造成干扰。<br>(b) 多径延迟使得基带码元重叠，也会造成码间串扰。</p>
<h5 id="2- 频率偏移：多普勒效应"><a href="#2- 频率偏移：多普勒效应" class="headerlink" title="(2) 频率偏移：多普勒效应"></a>(2) 频率偏移：多普勒效应 </h5><h5 id="3- 信号衰落"><a href="#3- 信号衰落" class="headerlink" title="(3) 信号衰落"></a>(3) 信号衰落</h5><pre><code> 移动通信中信号随接受机与发射机之间的距离不断变化即产生了衰落。其中，信号强度曲线的中直呈现慢速变化
，称为慢衰落；曲线的瞬时值呈快速变化，称快衰落。可见快衰落与慢衰落并不是两个独立的衰落（虽然他们的
产生原因不同），快衰落反映的是瞬时值，慢衰落反映的是瞬时值加权平均后的中值。
</code></pre><p>(a) 快衰落：主要原因是多径传输。<br>快衰一般服从瑞利（Rayleigh）分布、莱斯（Rice）分布或纳卡迦米（Nakagami）分布。</p>
<ul>
<li>时间选择性衰落：主要原因是多普勒效应，交织编码可以克服时间选择性衰落。</li>
<li>频率选择性衰落：原因多是时延扩展</li>
<li>空间选择性衰落：在无线通信系统中天线的点波束产生了扩散而引起了空间选择性衰落。<br>(b) 慢衰落：主要原因是传输媒质结构发生变化。<br>对流层散射传播中，慢衰落通常服从对数正态分布。 </li>
</ul>
<p># 时延扩展：<br>多径效应（同一信号的不同分量到达的时间不同）引起的接受信号脉冲宽度扩展的现象称为时延扩展。<br>时延扩展（多径信号最快和最慢的时间差）小于码元周期可以避免码间串扰，超过一个码元周期（WCDMA 中一个码片）需要用分集接收，均衡算法来接收。<br># 相关带宽：<br>相关带宽内各频率分量的衰落时一致的也叫相关的，不会失真。<br>载波宽度大于相关带宽就会引起频率选择性衰了使接收信号失真。</p>
<h4 id="3- 信道中的噪声和干扰"><a href="#3- 信道中的噪声和干扰" class="headerlink" title="3. 信道中的噪声和干扰"></a>3. 信道中的噪声和干扰 </h4><h3 id="三、信道容量"><a href="# 三、信道容量" class="headerlink" title="三、信道容量"></a> 三、信道容量 </h3><h4 id="1- 信道容量的概念"><a href="#1- 信道容量的概念" class="headerlink" title="1. 信道容量的概念"></a>1. 信道容量的概念</h4><p> 信道中信息能够无差错传输的最大平均信息速率。</p>
<h4 id="2- 连续信道的信道容量"><a href="#2- 连续信道的信道容量" class="headerlink" title="2. 连续信道的信道容量"></a>2. 连续信道的信道容量 </h4><h5 id="1- 香浓公式"><a href="#1- 香浓公式" class="headerlink" title="(1) 香浓公式"></a>(1) 香浓公式</h5><p> 对于带宽有限、平均功率有限的高斯白噪声连续信道，设信道带宽为 $B (Hz)$，信道输出信号功率为 $S (W)$，输出加性高斯白噪声功率为 $N (W)$，则可以证明该信道的信道容量为 $\displaystyle C = B \log_2 (1 + {S \over N}) (b/s)$<br>令加性高斯白噪声的单边功率谱密度为 $n_0$，则 $N=n_0 B$</p>
<h5 id="2- 信道容量极限：即使带宽无穷大，信道容量也是有限值"><a href="#2- 信道容量极限：即使带宽无穷大，信道容量也是有限值" class="headerlink" title="(2) 信道容量极限：即使带宽无穷大，信道容量也是有限值"></a>(2) 信道容量极限：即使带宽无穷大，信道容量也是有限值</h5><p>$\displaystyle \lim \limits_{B \to \infty} C = \lim \limits_{B \to \infty} [{B n_0 \over S} \log_2 (1+ {S \over Bn_0})] \cdot {S \over n_0} = 1.44 {S \over n_0}$</p>
<p>使用到极限：$\displaystyle \lim \limits_{x \to 0} \log {1+x \over x} = 1$<br>证明：<br>$\displaystyle \lim \limits_{x \to 0} \log {1+x \over x}$<br>$= \displaystyle \lim \limits_{x \to 0} {1 \over x} \cdot \log (1+x) $<br>$= \displaystyle \lim \limits_{x \to 0} \log (1+x)^{1 \over x}$<br>$= \log e$<br>$= 1$<br>若底数为 $2$，利用换底公式：$\displaystyle \log_a N = {log_m N \over log_m a}$</p>
<h5 id="3- 带宽无穷大，保证无差错极限信息传输速率的最小信噪比为 -1-6dB"><a href="#3- 带宽无穷大，保证无差错极限信息传输速率的最小信噪比为 -1-6dB" class="headerlink" title="(3) 带宽无穷大，保证无差错极限信息传输速率的最小信噪比为 $-1.6dB$"></a>(3) 带宽无穷大，保证无差错极限信息传输速率的最小信噪比为 $-1.6dB$</h5><p>该值通常称为 $AWGN$ 信道的极限信噪比，或是香浓极限。<br>推导：<br>令信息传输速率 $R=C$，比特平均能量为 $E_b$，信道容量极限可以表示为：<br>$\displaystyle \lim \limits_{B \to \infty} = 1.44 {S \over n_0} = 1.44 {E_b C \over n_0}$<br>$=&gt; \displaystyle {E_b \over n_0} = {1 \over 1.44} = -1.6dB$</p>
<h4 id="3- 离散信道的信道容量"><a href="#3- 离散信道的信道容量" class="headerlink" title="3. 离散信道的信道容量"></a>3. 离散信道的信道容量 </h4><h3 id="习题"><a href="# 习题" class="headerlink" title="习题"></a> 习题</h3><ol>
<li>恒参信道等效模型如图，试分析信号通过该信道传输时会产生哪些失真？<img src="/2020/09/14/communicationSystem-channel/photo10.png" alt><br>由《信号与系统》课程可知，<br>网络的传输特性 $H (w)$ 通常可用幅频特性 $|H (w)|$ 和相频特性 $\phi (w)$ 来表征 $H (w) = |H (w)| e^{\phi (w)}$。<br><img src="/2020/09/14/communicationSystem-channel/photo11.png" alt></li>
</ol>
]]></content>
      <categories>
        <category>大学课程-通信原理</category>
      </categories>
      <tags>
        <tag>通信原理</tag>
        <tag>信道</tag>
        <tag>信道容量</tag>
      </tags>
  </entry>
  <entry>
    <title>通信原理 --（5）数字基带传输</title>
    <url>/2020/09/29/communicationSystem-digitalBasebandTransmission/</url>
    <content><![CDATA[<p><a href="https://wangxchun.github.io/2020/09/10/communicationSystem-introduction/">通信原理 —（1）绪论 </a><br><a href="https://wangxchun.github.io/2020/09/14/communicationSystem-channel/"> 通信原理 —（2）信道 </a><br><a href="https://wangxchun.github.io/2020/09/17/communicationSystem-analogModulation/"> 通信原理 —（3）模拟调制技术 </a><br><a href="https://wangxchun.github.io/2020/09/23/communicationSystem-digitization/"> 通信原理 —（4）模拟信号数字化 </a><br><a href="https://wangxchun.github.io/2020/09/29/communicationSystem-digitalBasebandTransmission/"> 通信原理 —（5）数字基带传输 </a><br><a href="https://wangxchun.github.io/2020/10/03/communicationSystem-digitalFrequencyBandTransmission/"> 通信原理 —（6）数字频带传输 </a><br><a href="https://wangxchun.github.io/2020/10/15/communicationSystem-BestAccepted/"> 通信原理 —（7）最佳接收 </a><br><a href="https://wangxchun.github.io/2020/10/21/communicationSystem-synchronize/"> 通信原理 —（8）同步</a></p>
<h3 id="一、数字基带信号及其频谱特性"><a href="# 一、数字基带信号及其频谱特性" class="headerlink" title="一、数字基带信号及其频谱特性"></a>一、数字基带信号及其频谱特性 </h3><h4 id="1- 引言"><a href="#1- 引言" class="headerlink" title="1. 引言"></a>1. 引言</h4><p> 数字基带信号：未经调制的数字信号，所占据频谱从零频或低频率开始 <br> 如果传输数字基带信号？<br>(1) 数字基带传输：数字基带信号不经载波调制而直接在信道上传输<br>(2) 数字频带传输：数字基带信号经载波调制后在信道上传输<br><span id="more"></span><br><img src="/2020/09/29/communicationSystem-digitalBasebandTransmission/photo1.jpg" alt="数字基带传输系统模型"></p>
<center> 数字基带传输系统模型 </center>

<h4 id="2- 几种基本的数字基带信号"><a href="#2- 几种基本的数字基带信号" class="headerlink" title="2. 几种基本的数字基带信号"></a>2. 几种基本的数字基带信号 </h4><h5 id="1- 单极性 - 不归零 - 波形"><a href="#1- 单极性 - 不归零 - 波形" class="headerlink" title="(1) 单极性 (不归零) 波形"></a>(1) 单极性 (不归零) 波形</h5><p> 有直流成分 <br> 不能直接提取同步信号</p>
<h5 id="2- 双极性 - 不归零 - 波形"><a href="#2- 双极性 - 不归零 - 波形" class="headerlink" title="(2) 双极性 (不归零) 波形"></a>(2) 双极性 (不归零) 波形 </h5><p>01 等概时，无直流成分<br> 不能直接提取同步信号</p>
<h5 id="3- 单极性归零波形"><a href="#3- 单极性归零波形" class="headerlink" title="(3) 单极性归零波形"></a>(3) 单极性归零波形 </h5><p> 可以直接提取定位信息</p>
<h5 id="4- 双极性归零波形"><a href="#4- 双极性归零波形" class="headerlink" title="(4) 双极性归零波形"></a>(4) 双极性归零波形 </h5><p> 通过全波整流电路之后，可以变换为单极性归零码</p>
<h5 id="5- 差分波形"><a href="#5- 差分波形" class="headerlink" title="(5) 差分波形"></a>(5) 差分波形 </h5><p> 传号差分：幅值为 1 的时候跳变 <br> 空号差分：幅值为 0 的时候跳变 <br> 可以消除设备初始状态的影响，特别是在相位调制系统中用于解决载波相位模糊的问题</p>
<h5 id="6- 多进制波形"><a href="#6- 多进制波形" class="headerlink" title="(6) 多进制波形"></a>(6) 多进制波形</h5><h4 id="3- 数字基带信号的频谱分析"><a href="#3- 数字基带信号的频谱分析" class="headerlink" title="3. 数字基带信号的频谱分析"></a>3. 数字基带信号的频谱分析</h4><h5 id="1- 数学推导"><a href="#1- 数学推导" class="headerlink" title="(1) 数学推导"></a>(1) 数学推导</h5><p>M 进制基带信号的表示式：$s (t) = \sum_{n=-\infty}^\infty a_n g (t - nT_s) $</p>
<p>频谱：$\displaystyle \Phi_{ss}(f) = {\sigma_a^2 \over T_s}|G (f)|^2 + {m_a^2 \over T_s} \sum_{n=-\infty}^\infty |G (mf_s)|^2 \cdot \delta (f - mf_s)$<br>(a) 连续谱 <br> 连续谱的形状由脉冲波形 $g (t)$ 频谱决定，信息序列 ${a_n}$ 的方差起加权作用，连续谱可确定频谱的带宽。<br>可以通过设计 $g (t)$ 来得到 $s (t)$ 的频谱特性（基带成型滤波器的设计）。<br>(b) 离散谱 <br> 离散谱是否存在取决于 $m_s$ 和 $G (mf_s)$<br>如果 $mf_s$ 处存在离散谱线，可以用来提取码元同步信息</p>
<h5 id="2- 各种频谱"><a href="#2- 各种频谱" class="headerlink" title="(2) 各种频谱"></a>(2) 各种频谱 </h5><p>(a) 单极性非归零码 NRZ<br><img src="/2020/09/29/communicationSystem-digitalBasebandTransmission/photo2.jpg" alt><br>(b) 单极性归零码 RZ<br><img src="/2020/09/29/communicationSystem-digitalBasebandTransmission/photo3.jpg" alt><br>(c) 双极性 NRZ（0、1 等概）<br><img src="/2020/09/29/communicationSystem-digitalBasebandTransmission/photo4.jpg" alt><br> 结论：</p>
<ul>
<li>二进制基带信号的带宽主要依赖单个码元波形的频谱函数 $G (f)$。<br>时间波形的占空比越小，占用频宽越宽。</li>
<li>若以谱的第 1 个零点计算，$NRZ (\tau = T_s)$ 基带信号的带宽为 ${1 \over \tau} = f_s$；<br>$RZ (\tau = T_s/2)$ 基带信号的带宽为 ${1 \over \tau} = 2f_s$。<br>$f_s = {1 \over T_s}$ 是位定时信号的频率，它在数值上与码元速率 $R_B$ 相等</li>
</ul>
<h3 id="二、基带传输的常用码型和码间串扰"><a href="# 二、基带传输的常用码型和码间串扰" class="headerlink" title="二、基带传输的常用码型和码间串扰"></a>二、基带传输的常用码型和码间串扰</h3><h4 id="1- 基带传输的常用码型"><a href="#1- 基带传输的常用码型" class="headerlink" title="1. 基带传输的常用码型"></a>1. 基带传输的常用码型</h4><h5 id="1-AMI- 码"><a href="#1-AMI- 码" class="headerlink" title="(1) AMI 码"></a>(1) AMI 码</h5><p><img src="/2020/09/29/communicationSystem-digitalBasebandTransmission/photo5.jpg" alt> 问题：连 0</p>
<h5 id="2-HDB-3- 码"><a href="#2-HDB-3- 码" class="headerlink" title="(2) $HDB_3$ 码"></a>(2) $HDB_3$ 码</h5><p><img src="/2020/09/29/communicationSystem-digitalBasebandTransmission/photo6.jpg" alt> 克服了 AMI 码的不足</p>
<h5 id="3- 数字双向码 - 曼彻斯特码"><a href="#3- 数字双向码 - 曼彻斯特码" class="headerlink" title="(3) 数字双向码 (曼彻斯特码)"></a>(3) 数字双向码 (曼彻斯特码)</h5><p><img src="/2020/09/29/communicationSystem-digitalBasebandTransmission/photo7.jpg" alt> 优点：有丰富的定时信息，且没有直流分量 <br> 缺点：占用带宽加倍，使频带利用率低</p>
<h5 id="4- 密勒码 - 延迟调制码"><a href="#4- 密勒码 - 延迟调制码" class="headerlink" title="(4) 密勒码 (延迟调制码)"></a>(4) 密勒码 (延迟调制码)</h5><p><img src="/2020/09/29/communicationSystem-digitalBasebandTransmission/photo8.jpg" alt></p>
<h5 id="5-CMI- 码 - 传号反转码"><a href="#5-CMI- 码 - 传号反转码" class="headerlink" title="(5) CMI 码 (传号反转码)"></a>(5) CMI 码 (传号反转码)</h5><p><img src="/2020/09/29/communicationSystem-digitalBasebandTransmission/photo9.jpg" alt></p>
<h5 id="6- 块编码"><a href="#6- 块编码" class="headerlink" title="(6) 块编码"></a>(6) 块编码 </h5><p>(a) nBmB 码：将 n 个二进制码变换成 m 和二进制码<br> 双向码、密勒码、CMI 码都可以看作 1B2B 码 <br> 提供了良好的同步和检错功能，但带宽增大<br>(b) nBmT 码：将 n 个二进制码变换成 m 和三进制码</p>
<h4 id="2- 数字基带传输中的码间串扰"><a href="#2- 数字基带传输中的码间串扰" class="headerlink" title="2. 数字基带传输中的码间串扰"></a>2. 数字基带传输中的码间串扰 </h4><h5 id="1- 数字基带信号传输的过程"><a href="#1- 数字基带信号传输的过程" class="headerlink" title="(1) 数字基带信号传输的过程"></a>(1) 数字基带信号传输的过程</h5><p><img src="/2020/09/29/communicationSystem-digitalBasebandTransmission/photo10.jpg" alt><br><img src="/2020/09/29/communicationSystem-digitalBasebandTransmission/photo11.jpg" alt><br><img src="/2020/09/29/communicationSystem-digitalBasebandTransmission/photo12.jpg" alt><br> 产生无码的原因：信道噪声、码间串扰</p>
<h5 id="2- 码间串扰 -ISI"><a href="#2- 码间串扰 -ISI" class="headerlink" title="(2) 码间串扰 (ISI)"></a>(2) 码间串扰 (ISI)</h5><p>系统传输特性不理想，导致前后码元的波形畸变并使前面波形出现很长的拖尾，<br>从而对当前码元的判决造成干扰。</p>
<h5 id="3- 码间串扰的定量分析"><a href="#3- 码间串扰的定量分析" class="headerlink" title="(3) 码间串扰的定量分析"></a>(3) 码间串扰的定量分析 </h5><p><img src="/2020/09/29/communicationSystem-digitalBasebandTransmission/photo13.jpg" alt><br><img src="/2020/09/29/communicationSystem-digitalBasebandTransmission/photo14.jpg" alt><br> 问题：$H (f)$ 满足什么条件，输出信号 $y (t)$ 无码间串扰，判决正确，恢复发送序列的估计序列 ${a_n’}$？</p>
<h3 id="三、无码间串扰的基带传输特性"><a href="# 三、无码间串扰的基带传输特性" class="headerlink" title="三、无码间串扰的基带传输特性"></a>三、无码间串扰的基带传输特性 </h3><h3 id="四、基带传输系统的抗噪声性能与眼图"><a href="# 四、基带传输系统的抗噪声性能与眼图" class="headerlink" title="四、基带传输系统的抗噪声性能与眼图"></a> 四、基带传输系统的抗噪声性能与眼图 </h3><h3 id="五、部分响应系统"><a href="# 五、部分响应系统" class="headerlink" title="五、部分响应系统"></a> 五、部分响应系统 </h3><h3 id="六、均衡原理"><a href="# 六、均衡原理" class="headerlink" title="六、均衡原理"></a> 六、均衡原理</h3>]]></content>
      <categories>
        <category>大学课程-通信原理</category>
      </categories>
      <tags>
        <tag>通信原理</tag>
        <tag>抗噪声性能</tag>
        <tag>数字基带传输</tag>
        <tag>无码间串扰</tag>
        <tag>眼图</tag>
        <tag>部分响应系统</tag>
      </tags>
  </entry>
  <entry>
    <title>通信原理 --（6）数字频带传输</title>
    <url>/2020/10/03/communicationSystem-digitalFrequencyBandTransmission/</url>
    <content><![CDATA[<p><a href="https://wangxchun.github.io/2020/09/10/communicationSystem-introduction/">通信原理 —（1）绪论 </a><br><a href="https://wangxchun.github.io/2020/09/14/communicationSystem-channel/"> 通信原理 —（2）信道 </a><br><a href="https://wangxchun.github.io/2020/09/17/communicationSystem-analogModulation/"> 通信原理 —（3）模拟调制技术 </a><br><a href="https://wangxchun.github.io/2020/09/23/communicationSystem-digitization/"> 通信原理 —（4）模拟信号数字化 </a><br><a href="https://wangxchun.github.io/2020/09/29/communicationSystem-digitalBasebandTransmission/"> 通信原理 —（5）数字基带传输 </a><br><a href="https://wangxchun.github.io/2020/10/03/communicationSystem-digitalFrequencyBandTransmission/"> 通信原理 —（6）数字频带传输 </a><br><a href="https://wangxchun.github.io/2020/10/15/communicationSystem-BestAccepted/"> 通信原理 —（7）最佳接收 </a><br><a href="https://wangxchun.github.io/2020/10/21/communicationSystem-synchronize/"> 通信原理 —（8）同步</a></p>
<h3 id="一、二进制振幅键控 -2ASK- 和二进制频移键控 -2FSK"><a href="# 一、二进制振幅键控 -2ASK- 和二进制频移键控 -2FSK" class="headerlink" title="一、二进制振幅键控 2ASK 和二进制频移键控 2FSK"></a>一、二进制振幅键控 2ASK 和二进制频移键控 2FSK</h3><span id="more"></span>
<h3 id="二、二进制相移键控 -2PSK- 和差分相移键控"><a href="# 二、二进制相移键控 -2PSK- 和差分相移键控" class="headerlink" title="二、二进制相移键控 2PSK 和差分相移键控"></a>二、二进制相移键控 2PSK 和差分相移键控 </h3><h3 id="三、多进制数字调制"><a href="# 三、多进制数字调制" class="headerlink" title="三、多进制数字调制"></a> 三、多进制数字调制 </h3><h3 id="四、正交幅度调制 -QAM"><a href="# 四、正交幅度调制 -QAM" class="headerlink" title="四、正交幅度调制 QAM"></a> 四、正交幅度调制 QAM</h3><h3 id="五、最小频移键控 -MSK"><a href="# 五、最小频移键控 -MSK" class="headerlink" title="五、最小频移键控 MSK"></a>五、最小频移键控 MSK</h3><h3 id="六、正交频分复用 -OFDM"><a href="# 六、正交频分复用 -OFDM" class="headerlink" title="六、正交频分复用 OFDM"></a>六、正交频分复用 OFDM</h3>]]></content>
      <categories>
        <category>大学课程-通信原理</category>
      </categories>
  </entry>
  <entry>
    <title>通信原理 --（4）模拟信号数字化</title>
    <url>/2020/09/23/communicationSystem-digitization/</url>
    <content><![CDATA[<p><a href="https://wangxchun.github.io/2020/09/10/communicationSystem-introduction/">通信原理 —（1）绪论 </a><br><a href="https://wangxchun.github.io/2020/09/14/communicationSystem-channel/"> 通信原理 —（2）信道 </a><br><a href="https://wangxchun.github.io/2020/09/17/communicationSystem-analogModulation/"> 通信原理 —（3）模拟调制技术 </a><br><a href="https://wangxchun.github.io/2020/09/23/communicationSystem-digitization/"> 通信原理 —（4）模拟信号数字化 </a><br><a href="https://wangxchun.github.io/2020/09/29/communicationSystem-digitalBasebandTransmission/"> 通信原理 —（5）数字基带传输 </a><br><a href="https://wangxchun.github.io/2020/10/03/communicationSystem-digitalFrequencyBandTransmission/"> 通信原理 —（6）数字频带传输 </a><br><a href="https://wangxchun.github.io/2020/10/15/communicationSystem-BestAccepted/"> 通信原理 —（7）最佳接收 </a><br><a href="https://wangxchun.github.io/2020/10/21/communicationSystem-synchronize/"> 通信原理 —（8）同步</a></p>
<p>问题 1：如何实现数字通信系统传输模拟信号？<br><img src="/2020/09/23/communicationSystem-digitization/photo1.jpg" alt><br>问题 2：如何实现模拟信号的数字化？<br><img src="/2020/09/23/communicationSystem-digitization/photo2.jpg" alt></p>
<h3 id="一、模拟信号的抽样"><a href="# 一、模拟信号的抽样" class="headerlink" title="一、模拟信号的抽样"></a>一、模拟信号的抽样 </h3><h4 id="1- 低通模拟信号的抽样定理"><a href="#1- 低通模拟信号的抽样定理" class="headerlink" title="1. 低通模拟信号的抽样定理"></a>1. 低通模拟信号的抽样定理</h4><p> 时域：$m_s (t) = m (t) \delta_{T_s}(t)$<br>频域：$M_s (f) = M (f) * \Delta_\Omega (f) = {1 \over T_s} \sum_{n= -\infty}^\infty M (f - nf_s)$<br>$\Delta_\Omega (f)$ 是周期性单位冲激脉冲的频谱 $\Delta_\Omega (f) = {1 \over T_s} \sum_{n= -\infty}^\infty \delta (f - nf_s)$<br>恢复信号的条件：$f_s \geq 2f_H$ 奈奎斯特抽样频率</p>
<h4 id="2- 带通模拟信号的抽样定理"><a href="#2- 带通模拟信号的抽样定理" class="headerlink" title="2. 带通模拟信号的抽样定理"></a>2. 带通模拟信号的抽样定理 </h4><h4 id="3- 实际抽样"><a href="#3- 实际抽样" class="headerlink" title="3. 实际抽样"></a>3. 实际抽样</h4><h3 id="二、抽样信号的量化"><a href="# 二、抽样信号的量化" class="headerlink" title="二、抽样信号的量化"></a> 二、抽样信号的量化 </h3><h3 id="三、脉冲编码调制"><a href="# 三、脉冲编码调制" class="headerlink" title="三、脉冲编码调制"></a> 三、脉冲编码调制 </h3><h3 id="四、差分脉码调制与增量调制"><a href="# 四、差分脉码调制与增量调制" class="headerlink" title="四、差分脉码调制与增量调制"></a> 四、差分脉码调制与增量调制 </h3><h3 id="五、时分复用"><a href="# 五、时分复用" class="headerlink" title="五、时分复用"></a> 五、时分复用</h3>]]></content>
      <categories>
        <category>大学课程-通信原理</category>
      </categories>
      <tags>
        <tag>通信原理</tag>
        <tag>抽样</tag>
        <tag>量化</tag>
        <tag>脉冲编码调制</tag>
        <tag>差分脉码调制</tag>
        <tag>增量调制</tag>
        <tag>时分复用</tag>
      </tags>
  </entry>
  <entry>
    <title>通信原理 --（1）绪论</title>
    <url>/2020/09/10/communicationSystem-introduction/</url>
    <content><![CDATA[<p><a href="https://wangxchun.github.io/2020/09/10/communicationSystem-introduction/">通信原理 —（1）绪论 </a><br><a href="https://wangxchun.github.io/2020/09/14/communicationSystem-channel/"> 通信原理 —（2）信道 </a><br><a href="https://wangxchun.github.io/2020/09/17/communicationSystem-analogModulation/"> 通信原理 —（3）模拟调制技术 </a><br><a href="https://wangxchun.github.io/2020/09/23/communicationSystem-digitization/"> 通信原理 —（4）模拟信号数字化 </a><br><a href="https://wangxchun.github.io/2020/09/29/communicationSystem-digitalBasebandTransmission/"> 通信原理 —（5）数字基带传输 </a><br><a href="https://wangxchun.github.io/2020/10/03/communicationSystem-digitalFrequencyBandTransmission/"> 通信原理 —（6）数字频带传输 </a><br><a href="https://wangxchun.github.io/2020/10/15/communicationSystem-BestAccepted/"> 通信原理 —（7）最佳接收 </a><br><a href="https://wangxchun.github.io/2020/10/21/communicationSystem-synchronize/"> 通信原理 —（8）同步</a></p>
<h3 id="一、通信的基本概念和通信系统的组成"><a href="# 一、通信的基本概念和通信系统的组成" class="headerlink" title="一、通信的基本概念和通信系统的组成"></a>一、通信的基本概念和通信系统的组成</h3><h4 id="1- 通信的基本概念和技术发展"><a href="#1- 通信的基本概念和技术发展" class="headerlink" title="1. 通信的基本概念和技术发展"></a>1. 通信的基本概念和技术发展</h4><p>1837 年，莫尔斯电码<br>1876 年，贝尔发明电话<br>1864 年，麦克斯从理论上预言了电磁波的存在<br>1887 年，赫兹实验证实了电磁波的存在 <span id="more"></span><br>1896 年，马可尼发明无线电<br>1962 年，美国发射第一颗通信人造卫星<br>1969 年，ARPANET 问世<br>1977 年，第一个光纤通信系统投入使用</p>
<h4 id="2- 通信系统的组成"><a href="#2- 通信系统的组成" class="headerlink" title="2. 通信系统的组成"></a>2. 通信系统的组成 </h4><p><img src="/2020/09/10/communicationSystem-introduction/photo1.jpg" alt="数字信号系统"><br><img src="/2020/09/10/communicationSystem-introduction/photo2.jpg" alt="模拟信号系统"><br> 数字通信面临的主要挑战：<br>(1) 数据速率快，占用频带宽<br>(2) 同步要求高<br>(3) 实验复杂度高</p>
<h4 id="3- 通信系统的分类"><a href="#3- 通信系统的分类" class="headerlink" title="3. 通信系统的分类"></a>3. 通信系统的分类 </h4><h5 id="传输信号的特征"><a href="# 传输信号的特征" class="headerlink" title="传输信号的特征"></a> 传输信号的特征 </h5><p> 数字通信、模拟通信</p>
<h5 id="传输媒介"><a href="# 传输媒介" class="headerlink" title="传输媒介"></a>传输媒介 </h5><p> 有线通信、模拟通信</p>
<h5 id="是否调制"><a href="# 是否调制" class="headerlink" title="是否调制"></a>是否调制 </h5><p> 基带传输、调制传输</p>
<h5 id="调制方式"><a href="# 调制方式" class="headerlink" title="调制方式"></a>调制方式 </h5><p> 连续波模拟调制：AM、DSB-SC、SSB、VSB、FM、PM<br>连续波数字调制：ASK、FSK、(PSK、QPSK、DPSK)、(QAM、MSK)<br>脉冲模拟调制：PAM、PDM (PWM)、PPM<br>脉冲数字调制：PCM、DM、DPCM、(ADPCM、LPC)</p>
<h5 id="传送信号的复用方式"><a href="# 传送信号的复用方式" class="headerlink" title="传送信号的复用方式"></a>传送信号的复用方式</h5><p>FDM、TDM、CDM、WDM</p>
<h5 id="传送信号的多址方式"><a href="# 传送信号的多址方式" class="headerlink" title="传送信号的多址方式"></a>传送信号的多址方式</h5><p>FDMA、TDMA、CDMA</p>
<h5 id="工作波段"><a href="# 工作波段" class="headerlink" title="工作波段"></a>工作波段 </h5><h5 id="无线通信的频带利用方式"><a href="# 无线通信的频带利用方式" class="headerlink" title="无线通信的频带利用方式"></a> 无线通信的频带利用方式 </h5><p> 定频窄带通信、跳频通信、扩频通信</p>
<h5 id="消息传送的方向和时间"><a href="# 消息传送的方向和时间" class="headerlink" title="消息传送的方向和时间"></a>消息传送的方向和时间 </h5><p> 单工通信、半双工通信、双工通信</p>
<h5 id="数据代码排列方式"><a href="# 数据代码排列方式" class="headerlink" title="数据代码排列方式"></a>数据代码排列方式 </h5><p> 并行（可用于频带传输系统：MCM，例如 OFDM）、串行</p>
<h3 id="二、信息的度量和通信系统的性能指标"><a href="# 二、信息的度量和通信系统的性能指标" class="headerlink" title="二、信息的度量和通信系统的性能指标"></a>二、信息的度量和通信系统的性能指标 </h3><h4 id="1- 信息及其度量"><a href="#1- 信息及其度量" class="headerlink" title="1. 信息及其度量"></a>1. 信息及其度量</h4><h5 id="信息、消息、信号"><a href="# 信息、消息、信号" class="headerlink" title="信息、消息、信号"></a> 信息、消息、信号</h5><p><img src="/2020/09/10/communicationSystem-introduction/photo3.jpg" alt></p>
<h4 id="2- 信息的度量"><a href="#2- 信息的度量" class="headerlink" title="2. 信息的度量"></a>2. 信息的度量 </h4><p><img src="/2020/09/10/communicationSystem-introduction/photo4.jpg" alt><br> 信源的平均信息量 = 信源中每个符号所包含的信息量的统计平均值 <br>$ \bar I$ 与热力学中的熵形式相似，故通常称为信源的熵，记为 $H (x)$，单位为 bit / 符号<br> 对于离散信源，当各信源符号等概率分布时，信源的熵最大</p>
<h4 id="3- 通信系统的主要性能指标"><a href="#3- 通信系统的主要性能指标" class="headerlink" title="3. 通信系统的主要性能指标"></a>3. 通信系统的主要性能指标 </h4><h5 id="1- 有效性指标"><a href="#1- 有效性指标" class="headerlink" title="(1) 有效性指标"></a>(1) 有效性指标</h5><p> 模拟通信系统：频带利用率 <br> 数字通信系统：传输速率、频带利用率</p>
<h5 id="2- 可靠性指标"><a href="#2- 可靠性指标" class="headerlink" title="(2) 可靠性指标"></a>(2) 可靠性指标 </h5><p> 模拟通信系统：接收端最终输出的信噪比 <br> 数字通信系统：误码率、误信率</p>
<p>延申阅读：机器学习如何应用在通信系统中？</p>
]]></content>
      <categories>
        <category>大学课程-通信原理</category>
      </categories>
      <tags>
        <tag>通信原理</tag>
        <tag>基本概念</tag>
        <tag>组成</tag>
        <tag>性能指标</tag>
      </tags>
  </entry>
  <entry>
    <title>通信原理 --（8）同步</title>
    <url>/2020/10/21/communicationSystem-synchronize/</url>
    <content><![CDATA[<p><a href="https://wangxchun.github.io/2020/09/10/communicationSystem-introduction/">通信原理 —（1）绪论 </a><br><a href="https://wangxchun.github.io/2020/09/14/communicationSystem-channel/"> 通信原理 —（2）信道 </a><br><a href="https://wangxchun.github.io/2020/09/17/communicationSystem-analogModulation/"> 通信原理 —（3）模拟调制技术 </a><br><a href="https://wangxchun.github.io/2020/09/23/communicationSystem-digitization/"> 通信原理 —（4）模拟信号数字化 </a><br><a href="https://wangxchun.github.io/2020/09/29/communicationSystem-digitalBasebandTransmission/"> 通信原理 —（5）数字基带传输 </a><br><a href="https://wangxchun.github.io/2020/10/03/communicationSystem-digitalFrequencyBandTransmission/"> 通信原理 —（6）数字频带传输 </a><br><a href="https://wangxchun.github.io/2020/10/15/communicationSystem-BestAccepted/"> 通信原理 —（7）最佳接收 </a><br><a href="https://wangxchun.github.io/2020/10/21/communicationSystem-synchronize/"> 通信原理 —（8）同步</a></p>
<h3 id="一、同步的概念和载波同步"><a href="# 一、同步的概念和载波同步" class="headerlink" title="一、同步的概念和载波同步"></a>一、同步的概念和载波同步</h3><span id="more"></span>
<h3 id="二、码元同步"><a href="# 二、码元同步" class="headerlink" title="二、码元同步"></a>二、码元同步 </h3><h3 id="三、帧同步、网同步和数字复接"><a href="# 三、帧同步、网同步和数字复接" class="headerlink" title="三、帧同步、网同步和数字复接"></a> 三、帧同步、网同步和数字复接</h3>]]></content>
      <categories>
        <category>大学课程-通信原理</category>
      </categories>
      <tags>
        <tag>通信原理</tag>
        <tag>同步</tag>
        <tag>载波同步</tag>
        <tag>码元同步</tag>
        <tag>帧同步</tag>
        <tag>网同步</tag>
        <tag>数字复接</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机体系结构：(一) 硬件 --3. 通信概述</title>
    <url>/2020/09/03/computer-architecture-1.3-communication-overview/</url>
    <content><![CDATA[<h3 id="一、电子设备的通信过程"><a href="# 一、电子设备的通信过程" class="headerlink" title="一、电子设备的通信过程"></a>一、电子设备的通信过程</h3><p><img src="/2020/09/03/computer-architecture-1.3-communication-overview/photo1.jpg" alt></p>
<h4 id="1- 协议：通信规则"><a href="#1- 协议：通信规则" class="headerlink" title="1. 协议：通信规则"></a>1. 协议：通信规则</h4><p><img src="/2020/09/03/computer-architecture-1.3-communication-overview/photo2.jpg" alt></p>
<h5 id="简单通信协议：只有底层协议"><a href="# 简单通信协议：只有底层协议" class="headerlink" title="简单通信协议：只有底层协议"></a>简单通信协议：只有底层协议 </h5><p>Ex：单片机中的 SPI，I2C，UART (串口通信) 等短距离通信<br> 编写程序需参考硬件的 “时序图”<br><span id="more"></span></p>
<h5 id="复杂通信协议：底层和高层协议组合而成"><a href="# 复杂通信协议：底层和高层协议组合而成" class="headerlink" title="复杂通信协议：底层和高层协议组合而成"></a>复杂通信协议：底层和高层协议组合而成 </h5><p> 编程者要做的是学会调用 “协议程序” 的函数接口</p>
<h4 id="2- 数据编码"><a href="#2- 数据编码" class="headerlink" title="2. 数据编码"></a>2. 数据编码 </h4><p> 不一定要 ex：单片机的串口的 SPI，I2C 通信</p>
<h4 id="3- 调制"><a href="#3- 调制" class="headerlink" title="3. 调制"></a>3. 调制 </h4><h5 id="1- 为什么需要调制？"><a href="#1- 为什么需要调制？" class="headerlink" title="(1) 为什么需要调制？"></a>(1) 为什么需要调制？</h5><p>(a) 便于制作小尺寸天线<br> 无线通信中，无线的尺寸与电磁波波长成正比，如果基波信号很低，用频率高的载波信后，就可以用尺寸小的天线接收 <br>(b) 便于对信道进行频分复用<br>(c) 能够提高信号的抗噪能力<br> 当我们说某个天线通信为 XXXX Hz 时，指的都是载波信号，而不是基带信号的频率</p>
<h5 id="2- 调制种类"><a href="#2- 调制种类" class="headerlink" title="(2) 调制种类"></a>(2) 调制种类 </h5><p>(a) 数字调制技术：<br>ASK、FSK、PSK<br>(b) 模拟调制技术：<br> 幅度调制：DSB，AM，SSB，VSB<br>角度调制：FM，PM</p>
<h3 id="二、通信的分类"><a href="# 二、通信的分类" class="headerlink" title="二、通信的分类"></a>二、通信的分类 </h3><h4 id="1- 串行和并行"><a href="#1- 串行和并行" class="headerlink" title="1. 串行和并行"></a>1. 串行和并行</h4><h4 id="2- 同步和异步，阻塞和非阻塞"><a href="#2- 同步和异步，阻塞和非阻塞" class="headerlink" title="2. 同步和异步，阻塞和非阻塞"></a>2. 同步和异步，阻塞和非阻塞</h4><p> 串行通信中分为同步通信和异步通信</p>
<h5 id="同步通信：事先通过 -“应答机制 -“来约定碰头时间点，双方都会对这个时间点做好准备"><a href="# 同步通信：事先通过 -“应答机制 -“来约定碰头时间点，双方都会对这个时间点做好准备" class="headerlink" title="同步通信：事先通过 “应答机制 “来约定碰头时间点，双方都会对这个时间点做好准备"></a>同步通信：事先通过 “应答机制 “来约定碰头时间点，双方都会对这个时间点做好准备</h5><p>Ex：单片机的 I2C 和 SPI 通信<br>(1) 阻塞等：什么都不做，等约定时间点到<br>(2) 非阻塞等：继续做自己的事，等约定时间点到</p>
<h5 id="异步通信：碰头时间点是随机的"><a href="# 异步通信：碰头时间点是随机的" class="headerlink" title="异步通信：碰头时间点是随机的"></a>异步通信：碰头时间点是随机的 </h5><p>Ex：单片机的串口 (UART) 通信<br>(1) 阻塞等：什么都不做，等随机时间到<br>(2) 非阻塞等：继续做自己的事，等随机时间到<br> 对异步通信来说，非阻塞等比较靠谱</p>
<h4 id="3- 单工，半双工，全双工"><a href="#3- 单工，半双工，全双工" class="headerlink" title="3. 单工，半双工，全双工"></a>3. 单工，半双工，全双工 </h4><h3 id="三、噪声"><a href="# 三、噪声" class="headerlink" title="三、噪声"></a> 三、噪声 </h3><h4 id="不同的传输距离"><a href="# 不同的传输距离" class="headerlink" title="不同的传输距离"></a> 不同的传输距离 </h4><p> 短距离通信：主要考虑内部噪声的影响，外部噪声的影响可以忽略 <br>Ex：I2C，SPI，RS232 (串口)，usb<br> 中长距离通信：除了考虑内部噪声，还要考虑外部噪声<br>Ex：中距离通信：RS485<br>Ex：长距离通信：网络通信，电话通信，广播通信</p>
<h4 id="如何降低噪声影响？"><a href="# 如何降低噪声影响？" class="headerlink" title="如何降低噪声影响？"></a>如何降低噪声影响？</h4><h4 id="1- 内部噪声：通过各种滤波电路过滤噪声"><a href="#1- 内部噪声：通过各种滤波电路过滤噪声" class="headerlink" title="1. 内部噪声：通过各种滤波电路过滤噪声"></a>1. 内部噪声：通过各种滤波电路过滤噪声 </h4><h4 id="2- 外部噪声"><a href="#2- 外部噪声" class="headerlink" title="2. 外部噪声"></a>2. 外部噪声</h4><p>(1) 提高信号能量，提高信号的抗干扰能力（无线传输可用）<br>(2) 屏蔽网 (屏蔽网) (有线传输)<br>(3) 传输差分信号（有线传输）<br>Ex：USB (距离近，使用是为了提高质量)，RS485 (无中继器传输距离不超过 1200 米)，网络<br> 芯片外部 90% 通信都是串行通信，传输距离较长时需使用差分信号传输<br>(例外，ex：CPU 芯片和内存芯片的通信时并行的)</p>
<h3 id="四、通信例子"><a href="# 四、通信例子" class="headerlink" title="四、通信例子"></a>四、通信例子 </h3><h4 id="1- 有线通信"><a href="#1- 有线通信" class="headerlink" title="1. 有线通信"></a>1. 有线通信</h4><h4 id="2- 无线远距离"><a href="#2- 无线远距离" class="headerlink" title="2. 无线远距离"></a>2. 无线远距离</h4><h4 id="3- 无线近距离"><a href="#3- 无线近距离" class="headerlink" title="3. 无线近距离"></a>3. 无线近距离</h4><h3 id="计算机体系结构文章总览"><a href="# 计算机体系结构文章总览" class="headerlink" title="计算机体系结构文章总览"></a> 计算机体系结构文章总览 </h3><p><a href="https://wangxchun.github.io/2020/09/03/computer-architecture-1.3-communication-overview/"> 计算机体系结构：(一) 硬件 —3. 通信概述</a></p>
]]></content>
      <categories>
        <category>大学课程-计算机体系结构</category>
      </categories>
      <tags>
        <tag>计算机体系结构</tag>
        <tag>硬件</tag>
        <tag>通信概述</tag>
        <tag>协议</tag>
        <tag>调制</tag>
        <tag>噪声</tag>
        <tag>分类</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络 lab1</title>
    <url>/2021/03/20/computerNetwork-lab1/</url>
    <content><![CDATA[<h3 id="Lab-1-Set-Up-Environment-and-Test-Basic-Softwares"><a href="#Lab-1-Set-Up-Environment-and-Test-Basic-Softwares" class="headerlink" title="Lab 1: Set Up Environment and Test Basic Softwares"></a>Lab 1: Set Up Environment and Test Basic Softwares</h3><p>准备工作：</p>
<h5 id="1- 安装 -Virtualbox"><a href="#1- 安装 -Virtualbox" class="headerlink" title="(1) 安装 Virtualbox"></a>(1) 安装 Virtualbox</h5><h5 id="2- 在 -Virtualbox- 中建立安装 -ubuntu- 作业系统的虚拟机"><a href="#2- 在 -Virtualbox- 中建立安装 -ubuntu- 作业系统的虚拟机" class="headerlink" title="(2) 在 Virtualbox 中建立安装 ubuntu 作业系统的虚拟机"></a>(2) 在 Virtualbox 中建立安装 ubuntu 作业系统的虚拟机 </h5><p> 在 Windows 下安裝 VirtualBox 及 Ubuntu 18.04：<br>(Ubuntu18.04 可以在官网下载，或是下载阿里镜像)<br><span id="more"></span><br><a href="https://hth322.pixnet.net/blog/post/183391361-%">https://hth322.pixnet.net/blog/post/183391361-%</a> E5% AE%89% E8% A3%9Dubuntu% E5%9C% A8oracle-vm-virtualbox% E7% B4% AE% E8% A8%98<br><a href="https://murphymind.blogspot.com/2020/01/windows-virtualbox-ubuntu-1804.html">https://murphymind.blogspot.com/2020/01/windows-virtualbox-ubuntu-1804.html</a></p>
<h5 id="3- 设置虚拟机网卡（net-hostonly）"><a href="#3- 设置虚拟机网卡（net-hostonly）" class="headerlink" title="(3) 设置虚拟机网卡（net + hostonly）"></a>(3) 设置虚拟机网卡（net + hostonly）</h5><p><img src="/2021/03/20/computerNetwork-lab1/photo4.png" alt></p>
<h5 id="4- 在 -linux- 上安装 -wireshark"><a href="#4- 在 -linux- 上安装 -wireshark" class="headerlink" title="(4) 在 linux 上安装 wireshark"></a>(4) 在 linux 上安装 wireshark</h5><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">$ dpkg -l |grep wrieshark<span class="regexp">//</span> 查看系统是否有这个包</span><br><span class="line"><span class="regexp">//</span> 如果没有，在网络原配置好的情况下</span><br><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install wireshark <span class="regexp">//</span> 等待安装完成</span><br></pre></td></tr></table></figure>
<p>若出现 “Should non-superusers be able to capture packages?” ，选择 yes<br>若没有，则手动设置 <br><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">$ dpkg-reconfigure wireshark-<span class="meta">common</span></span><br></pre></td></tr></table></figure><br> 把当前用户加入到 wireshark 组当中:<br><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">$ sudo adduser $<span class="keyword">USER</span> <span class="title">wireshark</span></span><br></pre></td></tr></table></figure></p>
<h5 id="5- 运行 -wireshark，选择要检测的端口"><a href="#5- 运行 -wireshark，选择要检测的端口" class="headerlink" title="(5) 运行 wireshark，选择要检测的端口"></a>(5) 运行 wireshark，选择要检测的端口</h5><p><img src="/2021/03/20/computerNetwork-lab1/photo5.png" alt></p>
<h4 id="1-What-protocol-does-“ping”-and-“traceroute”-use-10-points"><a href="#1-What-protocol-does-“ping”-and-“traceroute”-use-10-points" class="headerlink" title="1. What protocol does “ping” and “traceroute” use? (10 points)"></a>1. What protocol does “ping” and “traceroute” use? (10 points)</h4><p>打开 wireshark 开始监测<br><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">$ ping google.com<span class="regexp">//</span> 可以看到使用的协议是 ICMP</span><br><span class="line">$ traceroute google.com<span class="regexp">//</span> 可以看到使用的协议是 UDP</span><br></pre></td></tr></table></figure></p>
<h4 id="2-What-is-the-IP-address-of-www-sjtu-edu-cn-10-points"><a href="#2-What-is-the-IP-address-of-www-sjtu-edu-cn-10-points" class="headerlink" title="2. What is the IP address of www.sjtu.edu.cn? (10 points)"></a>2. What is the IP address of www.sjtu.edu.cn? (10 points)</h4><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">$ ping www<span class="selector-class">.sjtu</span><span class="selector-class">.edu</span>.cn<span class="comment">// 可以看到 IP</span></span><br></pre></td></tr></table></figure>
<p><img src="/2021/03/20/computerNetwork-lab1/photo7.png" alt></p>
<h4 id="3-What-is-the-average-round-trip-time-RTT-from-your-VM-to-www-sjtu-edu-cn-and-mit-edu"><a href="#3-What-is-the-average-round-trip-time-RTT-from-your-VM-to-www-sjtu-edu-cn-and-mit-edu" class="headerlink" title="3. What is the average round trip time (RTT) from your VM to www.sjtu.edu.cn and mit.edu."></a>3. What is the average round trip time (RTT) from your VM to www.sjtu.edu.cn and mit.edu.</h4><p>Analyze the reason for the difference of their RTTs. (25 points)<br>(1) ping to send 10 packets and get the average RTT<br><img src="/2021/03/20/computerNetwork-lab1/photo8.png" alt><br><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">$ ping www<span class="selector-class">.sjtu</span><span class="selector-class">.edu</span><span class="selector-class">.cn</span> -c <span class="number">10</span> <span class="comment">// 可以看到 rtt</span></span><br></pre></td></tr></table></figure></p>
<h4 id="4-What-is-the-TCP-bandwidth-between-your-two-VMs-25-points"><a href="#4-What-is-the-TCP-bandwidth-between-your-two-VMs-25-points" class="headerlink" title="4. What is the TCP bandwidth between your two VMs? (25 points)"></a>4. What is the TCP bandwidth between your two VMs? (25 points)</h4><p>(1) 安裝 iPerf3<br><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">$ sudo apt-<span class="builtin-name">get</span> install iperf3</span><br></pre></td></tr></table></figure><br>(2) 测试网络频宽 <br>Server 端:<br><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>iperf3 -s</span><br></pre></td></tr></table></figure><br>Client 端<br><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>iperf3 -c SERVER_IP</span><br></pre></td></tr></table></figure><br>(3) connection timeout 问题解决<br><a href="https://www.mdeditor.tw/pl/2NjU/zh-tw">https://www.mdeditor.tw/pl/2NjU/zh-tw</a><br> 如何诊断：<br><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span> 檢查 ipv4 forwarding 是否開啟 </span><br><span class="line">$ sysctl net.ipv4.ip_forward</span><br><span class="line"><span class="regexp">//</span>net.ipv4.ip_forward = <span class="number">0</span>，意味著未開啟</span><br></pre></td></tr></table></figure><br> 如何修復：<br><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="comment">//this will turn things back on a live server</span></span><br><span class="line">$ sysctl -w <span class="keyword">net</span>.ipv4.ip_forward=1</span><br><span class="line"><span class="comment">//on Centos this will make the setting apply after reboot</span></span><br><span class="line">$ echo <span class="keyword">net</span>.ipv4.ip_forward=1 &gt;&gt; /etc/sysconf.<span class="keyword">d</span>/10-ipv4-forwarding-<span class="keyword">on</span>.<span class="keyword">conf</span></span><br><span class="line"><span class="comment">// 驗證並生效</span></span><br><span class="line">$ sysctl -p</span><br></pre></td></tr></table></figure></p>
<p>如何診斷：<br><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 檢查 bridge netfilter 是否開啟 </span></span><br><span class="line">$ sysctl net<span class="selector-class">.bridge</span>.bridge-nf-call-iptables</span><br><span class="line">net<span class="selector-class">.bridge</span><span class="selector-class">.bridge-nf-call-iptables</span> = <span class="number">0</span>，表示未開啟</span><br></pre></td></tr></table></figure><br> 如何修復：<br><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">Note some distributions may have <span class="keyword">this</span> compiled with kernel,</span><br><span class="line">check with cat <span class="regexp">/lib/m</span>odules<span class="regexp">/$ (uname -r)/m</span>odules.builtin | <span class="keyword">grep</span> netfilter</span><br><span class="line">$ modprobe br_netfilter</span><br><span class="line">開啟這個 iptables 設定</span><br><span class="line">$ sysctl -w net.bridge.bridge-nf-<span class="keyword">call</span>-iptables=<span class="number">1</span></span><br><span class="line">$ echo net.bridge.bridge-nf-<span class="keyword">call</span>-iptables=<span class="number">1</span> &gt;&gt; <span class="regexp">/etc/</span>sysconf.d/<span class="number">10</span>-bridge-nf-<span class="keyword">call</span>-iptables.conf</span><br><span class="line">$ sysctl -p</span><br></pre></td></tr></table></figure></p>
<p><a href="https://gist.github.com/iamcryptoki/ed6925ce95f047673e7709f23e0b9939">https://gist.github.com/iamcryptoki/ed6925ce95f047673e7709f23e0b9939</a><br>Fix sysctl: cannot stat /proc/sys/net/bridge/bridge-nf-call-iptables.<br><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">$  modprobe bridge</span><br><span class="line">$  echo <span class="string">&quot;net.bridge.bridge-nf-call-iptables = 1&quot;</span> &gt;&gt; <span class="regexp">/etc/</span>sysctl.conf</span><br><span class="line">$  sysctl -p <span class="regexp">/etc/</span>sysctl.conf</span><br><span class="line"></span><br><span class="line">sysctl: cannot stat <span class="regexp">/proc/</span>sys<span class="regexp">/net/</span>bridge<span class="regexp">/bridge-nf-call-iptables: No such file or directory sysctl: cannot stat /</span>proc<span class="regexp">/sys/</span>net<span class="regexp">/bridge/</span>bridge-nf-<span class="keyword">call</span>-ip6tables: No such <span class="keyword">file</span> or directory</span><br><span class="line"></span><br><span class="line"><span class="comment">// SOLUTION</span></span><br><span class="line">$  modprobe br_netfilter</span><br><span class="line">$  sysctl -p <span class="regexp">/etc/</span>sysctl.conf</span><br></pre></td></tr></table></figure></p>
<h4 id="5-Select-a-VM-as-your-host-machine-and-another-VM-as-your-server-machine-then-use-ssh-on-your-host-to-connect-to-the-server-15-points"><a href="#5-Select-a-VM-as-your-host-machine-and-another-VM-as-your-server-machine-then-use-ssh-on-your-host-to-connect-to-the-server-15-points" class="headerlink" title="5. Select a VM as your host machine, and another VM as your server machine, then use ssh on your host to connect to the server. (15 points)"></a>5. Select a VM as your host machine, and another VM as your server machine, then use ssh on your host to connect to the server. (15 points)</h4><h5 id="1- 在 -UBuntu- 安装 -ssh"><a href="#1- 在 -UBuntu- 安装 -ssh" class="headerlink" title="(1) 在 UBuntu 安装 ssh"></a>(1) 在 UBuntu 安装 ssh</h5><p>(a) 开启 terminal<br>(b) 更新套件清单<br><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">$ sudo apt-<span class="keyword">get</span> <span class="keyword">update</span></span><br></pre></td></tr></table></figure><br>(c) 安装 OpenSSH Server<br><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">$ sudo apt-<span class="keyword">get</span> install -y openssh-<span class="keyword">server</span></span><br></pre></td></tr></table></figure><br>(d) 确认 SSH 服务<br><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>sudo service ssh status</span><br></pre></td></tr></table></figure><br>(e) 查询 Ubuntu 的 IP<br><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">$ ifconfig <span class="regexp">//</span>server 的 IP</span><br></pre></td></tr></table></figure><br>(f) 在 host mechine 上，ssh 到 server<br><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ssh</span> chris@<span class="number">192</span>.<span class="number">158</span>.xx.xxx</span><br></pre></td></tr></table></figure></p>
<h4 id="6-Use-scp-to-copy-a-file-from-your-host-to-the-server-15-points"><a href="#6-Use-scp-to-copy-a-file-from-your-host-to-the-server-15-points" class="headerlink" title="6. Use scp to copy a file from your host to the server. (15 points)"></a>6. Use scp to copy a file from your host to the server. (15 points)</h4><h5 id="1- 本地端 -Host- 需安装 -openssh-client- 套件"><a href="#1- 本地端 -Host- 需安装 -openssh-client- 套件" class="headerlink" title="(1) 本地端 Host 需安装 openssh-client 套件"></a>(1) 本地端 Host 需安装 openssh-client 套件</h5><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">$ sudo apt-<span class="builtin-name">get</span> install openssh-client</span><br></pre></td></tr></table></figure>
<h5 id="2- 远端 -Server- 需安装 -openssh-server- 套件"><a href="#2- 远端 -Server- 需安装 -openssh-server- 套件" class="headerlink" title="(2) 远端 Server 需安装 openssh-server 套件"></a>(2) 远端 Server 需安装 openssh-server 套件</h5><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">$ sudo apt-<span class="keyword">get</span> install openssh-<span class="keyword">server</span></span><br></pre></td></tr></table></figure>
<h5 id="3- 将文件从本机 -Host- 复制到远端主机 -Server"><a href="#3- 将文件从本机 -Host- 复制到远端主机 -Server" class="headerlink" title="(3) 将文件从本机 Host 复制到远端主机 Server"></a>(3) 将文件从本机 Host 复制到远端主机 Server</h5><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">$ sudo chmod <span class="number">777</span> <span class="regexp">/home/</span>test<span class="regexp">//</span> 改变权限</span><br><span class="line">$ scp a.txt chris@<span class="number">192.168</span>.xx.xxx</span><br></pre></td></tr></table></figure>
<h3 id="问题解决"><a href="# 问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><h4 id="E- 无法获取 -dpkg- 前端锁 -var-lib-dpkg-lock-frontend-，是否有其他进程正占用它？"><a href="#E- 无法获取 -dpkg- 前端锁 -var-lib-dpkg-lock-frontend-，是否有其他进程正占用它？" class="headerlink" title="E: 无法获取 dpkg 前端锁 (/var/lib/dpkg/lock-frontend)，是否有其他进程正占用它？"></a>E: 无法获取 dpkg 前端锁 (/var/lib/dpkg/lock-frontend)，是否有其他进程正占用它？</h4><p>(1) 杀死进程<br><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">ps</span> <span class="literal">-e</span>|grep apt<span class="literal">-get</span></span><br><span class="line">sudo <span class="built_in">kill</span> [进程]</span><br></pre></td></tr></table></figure><br>(2) 重新启动</p>
<h3 id="知识补充"><a href="# 知识补充" class="headerlink" title="知识补充"></a>知识补充 </h3><h4 id="1- 本地接口列表包含一个 -Random-packet-generator，这是什么"><a href="#1- 本地接口列表包含一个 -Random-packet-generator，这是什么" class="headerlink" title="1. 本地接口列表包含一个 Random packet generator，这是什么"></a>1. 本地接口列表包含一个 Random packet generator，这是什么</h4><p> 这是 wireshark 提供的一个模拟；每次随机生成某种协议的 1000 个包；供研究学习使用。</p>
<h5 id="透过 -wireshark- 查看封包，可以了解到為什麼端到端加密很重要。"><a href="# 透过 -wireshark- 查看封包，可以了解到為什麼端到端加密很重要。" class="headerlink" title="透过 wireshark 查看封包，可以了解到為什麼端到端加密很重要。"></a>透过 wireshark 查看封包，可以了解到為什麼端到端加密很重要。</h5><p>假設你正在登入一個不使用 HTTPS 的網站。與你在同一網路上的任何人都可以嗅探封包，並在原始資料中看到使用者名稱和密碼。<br>這就是為什麼現在大多數聊天應用程式使用端到端加密，而大多數網站使用 https (而不是 http)</p>
<h4 id="2-Traceroute- 工作原理"><a href="#2-Traceroute- 工作原理" class="headerlink" title="2. Traceroute 工作原理"></a>2. Traceroute 工作原理</h4><p><img src="/2021/03/20/computerNetwork-lab1/photo6.png" alt><br>Traceroute 最简单的基本用法是：traceroute hostname<br>    Traceroute 程序的设计是利用 ICMP 及 IP header 的 TTL (Time To Live) 栏位 (field)。首先，traceroute 送出一个 TTL 是 1 的 IP datagram（其实，每次送出的为 3 个 40 字节的包括源地址，目的地址和包发出的时间标签）到目的地，当路径上的第一个路由器 (router) 收到这个 datagram 时，它将 TTL 减 1。此时，TTL 变为 0 了，所以路由器会将此 datagram 丢掉，并送回一个「ICMP time exceeded」消息（包括发 IP 包的源地址，IP 包的所有内容及路由器的 IP 地址），traceroute 收到这个消息后，便知道这个路由器存在于这个路径上，接着 traceroute 再送出另一个 TTL 是 2 的 datagram，发现第 2 个路由器…… traceroute 每次将送出的 datagram 的 TTL 加 1 来发现另一个路由器，这个重复的动作一直持续到某个 datagram 目的地。当 datagram 到达目的地后，该主机并不会送回 ICMP time exceed 消息，因为它已经是目的地了，那么 traceroute 如何得知目的地到达了呢？</p>
<p>Traceroute 在送出 UDP datagrams 到目的地时，它所选择送达的 port number 是一个一般应用程序都不会用的号码（30000 以上），所以当此 UDP datagram 到达目的地后该主机会送回一个「ICMP port unreachable」的消息，而当 traceroute 收到这个消息时，便知道目的地已经到达了。所以 traceroute 在 Server 也是没有所谓的 Daemon 程式。<br>Traceroute 提取发 ICMP TTL 到期消息设备的 IP 地址并作域名解析。每次，Traceroute 都打印出一系列数据，包括所经过的路由设备的域名及 IP 地址，三个包每次来回所花时间。其中 CDN (内容分发网络) 就是为了降低与用户路由的个数而设计的。</p>
<h4 id="3-Ping- 工作原理"><a href="#3-Ping- 工作原理" class="headerlink" title="3. Ping 工作原理"></a>3. Ping 工作原理 </h4><p> 運作原理：向目標主機傳出一個要求封包，並等待接收回應封包。程式會按時間和成功回應的次數估算封包遺失率（丟包率）和封包來回的時間（即 RTT）</p>
<h3 id="操作补充"><a href="# 操作补充" class="headerlink" title="操作补充"></a>操作补充</h3><h4 id="1- 查看主机 -ip- 地址方式："><a href="#1- 查看主机 -ip- 地址方式：" class="headerlink" title="1. 查看主机 ip 地址方式："></a>1. 查看主机 ip 地址方式：</h4><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">$ ifconfig</span><br><span class="line"><span class="regexp">//</span>windows cmd 是使用 $ ipconfig</span><br></pre></td></tr></table></figure>
<h4 id="2-Linux- 从一般用户切换到 -root- 用户"><a href="#2-Linux- 从一般用户切换到 -root- 用户" class="headerlink" title="2.Linux 从一般用户切换到 root 用户"></a>2.Linux 从一般用户切换到 root 用户</h4><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">$ sudo su</span><br><span class="line">$ <span class="keyword">exit</span> <span class="regexp">//</span> 从 root 切换回一般用户</span><br></pre></td></tr></table></figure>
<h4 id="3-vim- 常用指令"><a href="#3-vim- 常用指令" class="headerlink" title="3.vim 常用指令"></a>3.vim 常用指令</h4><p><img src="/2021/03/20/computerNetwork-lab1/photo9.png" alt><br><img src="/2021/03/20/computerNetwork-lab1/photo10.png" alt></p>
<h3 id="详细名词解释"><a href="# 详细名词解释" class="headerlink" title="详细名词解释"></a>详细名词解释</h3><p><a href="https://sls.weco.net/node/28883">https://sls.weco.net/node/28883</a></p>
<h3 id="讨论：安装 -VirtualBox-VMWare-or-Parallels- 哪个比较好？"><a href="# 讨论：安装 -VirtualBox-VMWare-or-Parallels- 哪个比较好？" class="headerlink" title="讨论：安装 VirtualBox, VMWare, or Parallels 哪个比较好？"></a>讨论：安装 VirtualBox, VMWare, or Parallels 哪个比较好？</h3><h3 id="计算机网络系列"><a href="# 计算机网络系列" class="headerlink" title="计算机网络系列"></a>计算机网络系列 </h3><p><a href="https://wangxchun.github.io/2021/03/20/computerNetwork-lab1/"> 计算机网络 lab1</a><br><a href="https://wangxchun.github.io/2021/03/30/computerNetwork-lab2-Mininet/">计算机网络 lab2 使用 Mininet 创建网络拓扑 </a><br><a href="https://wangxchun.github.io/2021/04/24/computerNetwork-lab3-1/"> 计算机网络 lab3 使用 Socket 完成多人聊天室 — 原理 </a><br><a href="https://wangxchun.github.io/2021/04/27/computerNetwork-lab3-2/"> 计算机网络 lab3 使用 Socket 完成多人聊天室 — 实作 </a><br><a href="https://wangxchun.github.io/2021/05/20/computerNetwork-lab4/"> 计算机网络 lab4 Overlay Network 和 VXLAN</a></p>
]]></content>
      <categories>
        <category>大学课程-计算机网络</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
        <tag>lab</tag>
        <tag>虚拟机</tag>
        <tag>虚拟机网卡</tag>
        <tag>安装</tag>
        <tag>Ubuntu</tag>
        <tag>wireshark</tag>
        <tag>IP</tag>
        <tag>ping</tag>
        <tag>traceout</tag>
        <tag>ICMP</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络 lab2 使用 Mininet 创建网络拓扑</title>
    <url>/2021/03/30/computerNetwork-lab2-Mininet/</url>
    <content><![CDATA[<h3 id="一、Miniset- 简介"><a href="# 一、Miniset- 简介" class="headerlink" title="一、Miniset 简介"></a>一、Miniset 简介</h3><p>Miniset 是一个开源的网络仿真器，是一个轻量级软件定义网络和测试平台，支持 OpenFlow 和 OpenSwitch 等协议。<br>Miniset 上运行的代码可以轻松移植到支持 OpenFlow 的硬件设备上。<br>Mininet 提供 python API，简单易用</p>
<h3 id="二、环境搭建"><a href="# 二、环境搭建" class="headerlink" title="二、环境搭建"></a>二、环境搭建 </h3><h4 id="安装 -mininet"><a href="# 安装 -mininet" class="headerlink" title="安装 mininet"></a> 安装 mininet</h4><span id="more"></span>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="symbol">$</span> su root</span><br><span class="line"><span class="symbol">$</span> apt-get install git</span><br><span class="line"><span class="symbol">$</span> git clone http:<span class="comment">//github.com/mininet/mininet.git</span></span><br><span class="line"><span class="symbol">$</span> cd mininet/util</span><br><span class="line">#./install.sh n3v</span><br><span class="line"><span class="comment">//n：安装 mininet 的依赖和核心文件</span></span><br><span class="line"><span class="comment">//3：安装 Openflow 1.3 版本</span></span><br><span class="line"><span class="comment">//v：安装 Open Switch</span></span><br><span class="line"><span class="symbol">$</span> mn <span class="comment">// 创建默认最小的网络拓扑，测试 mininet 是否安装成功</span></span><br><span class="line">miniset&gt; pingall <span class="comment">// 查看连通性</span></span><br><span class="line">miniset&gt; exit <span class="comment">// 退出 miniset</span></span><br><span class="line">#### 安装 ryu</span><br><span class="line"><span class="symbol">$</span> wget https:<span class="comment">//bootstrap.pypa.io/get-pip.py//pip 是一个通用的 python 包管理工具</span></span><br><span class="line"><span class="comment">//wget 是从指定的 url 下载文件</span></span><br><span class="line"><span class="symbol">$</span> python get-pip.py</span><br><span class="line"><span class="symbol">$</span> git clone https:<span class="comment">//github.com/osrg/ryu.git</span></span><br><span class="line"><span class="symbol">$</span> cd ryu</span><br><span class="line"><span class="symbol">$</span> pip install -r tools/pip-requires<span class="comment">// 安装 ryu 之前先安装 ryu 的依赖</span></span><br><span class="line"><span class="comment">// 这一步要按照的依赖比较多，可能因为下载不全而出现报错，这时就重新执行一遍</span></span><br><span class="line"><span class="comment">// 报错 2</span></span><br><span class="line"><span class="symbol">$</span> python setup.py install </span><br><span class="line"><span class="symbol">$</span> cd ryu/app<span class="comment">// 验证 ryu 是否按照成功</span></span><br><span class="line"><span class="symbol">$</span> ryu-manager example_switch_13.py<span class="comment">// 先不要点击 enter，先打开另一个终端运行</span></span><br><span class="line"><span class="comment">//su root</span></span><br><span class="line"><span class="comment">//mn --controller=remote</span></span><br><span class="line"><span class="comment">// 创建完网络拓扑之后，可以执行 ryu-manager</span></span><br></pre></td></tr></table></figure>
<p><a href="https://joechang0113.github.io/2020/02/18/mininet-ryu-install.html">https://joechang0113.github.io/2020/02/18/mininet-ryu-install.html</a><br>尝试打开可视化界面:<br><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">cd</span> <span class="string">/mininet/mininet/examples</span></span><br><span class="line">$ <span class="string">./miniedit.py</span></span><br></pre></td></tr></table></figure><br>报错 1：运行 miniedit.py 时报错 ImportError: No module named mininet.log<br>是 python 版本的问题 <br><a href="http://shangdixinxi.com/detail-1528015.html">http://shangdixinxi.com/detail-1528015.html</a><br> 报错 2：pip install，Error：Cannot uninstall ‘PyYAML’.<br>原因：从 pip 10 开始就不支持卸载 distutils 的包了 <br> 解决方法：pip install —ignore-installed PyYAML<br><a href="https://www.twblogs.net/a/5e50e655bd9eee2117bff2c9">https://www.twblogs.net/a/5e50e655bd9eee2117bff2c9</a><br>报错 3：<br>有些错误是因为 ubuntu 的 python 默认版本是 2.7 导致的 <br> 所以按照以下方式改变 python 的默认版本 <br><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">$ update-alternatives --list python <span class="regexp">//</span> 列出所有可用的 python 替代版本信息</span><br><span class="line">$ update-alternatives --install <span class="regexp">/usr/</span>bin<span class="regexp">/python python /u</span>sr<span class="regexp">/bin/</span>python2.<span class="number">7</span> <span class="number">1</span></span><br><span class="line">$ update-alternatives --install <span class="regexp">/usr/</span>bin<span class="regexp">/python python /u</span>sr<span class="regexp">/bin/</span>python3.<span class="number">6</span> <span class="number">2</span></span><br><span class="line">$ update-alternatives --install <span class="regexp">/usr/</span>bin<span class="regexp">/python python /u</span>sr<span class="regexp">/bin/</span>python3.<span class="number">7</span> <span class="number">3</span></span><br><span class="line">$ update-alternatives --config python</span><br><span class="line"><span class="comment"># 第一个参数: --install 表示向 update-alternatives 注册服务名。</span></span><br><span class="line"><span class="comment"># 第二个参数：注册最终地址，成功后将会把命令在这个固定的目的地址做真实命令的软链，以后管理就是管理这个软链；</span></span><br><span class="line"><span class="comment"># 第三个参数：服务名，以后管理时以它为关联依据。</span></span><br><span class="line"><span class="comment"># 第四个参数：被管理的命令绝对路径。</span></span><br><span class="line"><span class="comment"># 第五个参数：优先级，数字越大优先级越高。</span></span><br><span class="line">https:<span class="regexp">//</span>www.jianshu.com<span class="regexp">/p/</span><span class="number">3</span>d8304f4fb4a</span><br></pre></td></tr></table></figure><br> 报错 4：terminal 打不开 <br><a href="https://blog.csdn.net/u011622434/article/details/103121262">https://blog.csdn.net/u011622434/article/details/103121262</a><br> 首先，按 ctrl+alt+F1（我是 ctrl+alt+F5）进入命令行模式，也就是无图形界面，这时候会让你输入用户名和密码 <br><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>gnome-terminal</span><br></pre></td></tr></table></figure><br> 该指令是查看出现的终端错误，我有两处错误 <br> 错误一：No module named “apt_pkg”，解决方法如下 <br><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">$ sudo apt-<span class="built_in">get</span> <span class="built_in">remove</span> --purge <span class="keyword">python</span>-apt</span><br><span class="line">$ sudo apt-<span class="built_in">get</span> install <span class="keyword">python</span>-apt -<span class="keyword">f</span></span><br><span class="line">$ <span class="keyword">cd</span> /usr/lib/<span class="keyword">python3</span>/dist-packages/</span><br><span class="line">$ sudo <span class="keyword">cp</span> apt_pkg.cpython-<span class="number">35</span><span class="keyword">m</span>-x86_64-linux-gnu.<span class="keyword">so</span> apt_pkg.cpython-<span class="number">36</span><span class="keyword">m</span>-x86_64-linux-gnu.<span class="keyword">so</span></span><br></pre></td></tr></table></figure><br> 错误二：cannot import name ‘_gi’，解决方法如下<br><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">cd</span> /usr/lib/python<span class="number">3</span>/dist-packages/gi/</span><br><span class="line"><span class="attribute">sudo</span> cp _gi.cpython-<span class="number">35</span>m-x<span class="number">86</span>_<span class="number">64</span>-linux-gnu.so _gi.cpython-<span class="number">36</span>m-x<span class="number">86</span>_<span class="number">64</span>-linux-gnu.so</span><br><span class="line"><span class="attribute">sudo</span> cp _gi_cairo.cpython-<span class="number">35</span>m-x<span class="number">86</span>_<span class="number">64</span>-linux-gnu.so _gi_cairo.cpython-<span class="number">36</span>m-x<span class="number">86</span>_<span class="number">64</span>-linux-gnu.so</span><br></pre></td></tr></table></figure></p>
<h3 id="三、Mininet- 常用指令"><a href="# 三、Mininet- 常用指令" class="headerlink" title="三、Mininet 常用指令"></a>三、Mininet 常用指令</h3><p><a href="https://blog.csdn.net/weixin_42896572/article/details/109447236">Mininet 安装与使用教程</a></p>
<h3 id="四、熟悉常用指令"><a href="# 四、熟悉常用指令" class="headerlink" title="四、熟悉常用指令"></a>四、熟悉常用指令</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ su root</span><br><span class="line">$ cd mininet/mininet</span><br><span class="line">$ cd examples</span><br><span class="line">// 里面有很多 python 脚本，可以随便选择一个执行，熟悉</span><br><span class="line">// 在执行之前，要在另一个终端将 ryu 控制器打开</span><br><span class="line">//$ su root</span><br><span class="line">//$ cd</span><br><span class="line">//$ cd ryu/app</span><br><span class="line">//$ ryumanager simple_switch.py</span><br><span class="line">$ python <span class="number">427.</span>py</span><br><span class="line">miniset&gt; nodes // 显示节点列表</span><br><span class="line">miniset&gt; pingall // 查看连通性</span><br><span class="line">miniset&gt; net // 查看网络拓扑</span><br><span class="line">miniset&gt; links // 查看网阔健壮性</span><br><span class="line">miniset&gt; dump // 节点的接口设置和进程 PID</span><br><span class="line">miniset&gt; iperf h1 h2 // 网络带宽设置</span><br><span class="line">miniset&gt; <span class="built_in">help</span> // 帮助</span><br><span class="line">miniset&gt; exit // 退出 miniset</span><br></pre></td></tr></table></figure>
<h3 id="五、Mini- 搭建网络拓扑的三种方式"><a href="# 五、Mini- 搭建网络拓扑的三种方式" class="headerlink" title="五、Mini 搭建网络拓扑的三种方式"></a>五、Mini 搭建网络拓扑的三种方式 </h3><h4 id="1- 通过命令行 -terminal"><a href="#1- 通过命令行 -terminal" class="headerlink" title="1. 通过命令行 terminal"></a>1. 通过命令行 terminal</h4><h5 id="单一拓扑 -Single"><a href="# 单一拓扑 -Single" class="headerlink" title="单一拓扑 (Single)"></a> 单一拓扑 (Single)</h5><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo mn <span class="attribute">--topo</span>=single,3</span><br></pre></td></tr></table></figure>
<p><img src="/2021/03/30/computerNetwork-lab2-Mininet/photo1.png" alt></p>
<h5 id="线性拓扑"><a href="# 线性拓扑" class="headerlink" title="线性拓扑"></a>线性拓扑</h5><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo mn <span class="attribute">--topo</span>=linear,3</span><br></pre></td></tr></table></figure>
<p><img src="/2021/03/30/computerNetwork-lab2-Mininet/photo2.png" alt></p>
<h5 id="树形拓扑"><a href="# 树形拓扑" class="headerlink" title="树形拓扑"></a>树形拓扑</h5><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">sudo mn <span class="attr">--topo=tree,depth=2,fanout=3</span></span><br><span class="line">//<span class="attr">depth=2</span> 表示交换机有两层，<span class="attr">fanout=3</span> 表示每台交换机均下挂 <span class="number">3</span> 台设备</span><br></pre></td></tr></table></figure>
<p><img src="/2021/03/30/computerNetwork-lab2-Mininet/photo3.png" alt></p>
<h5 id="自定义拓扑"><a href="# 自定义拓扑" class="headerlink" title="自定义拓扑"></a>自定义拓扑 </h5><h4 id="通过 -python- 文件"><a href="# 通过 -python- 文件" class="headerlink" title="通过 python 文件"></a> 通过 python 文件</h4><p>py net.addSwitch (‘s3’) // 添加交换机 23<br>py net.addHost (‘h3’) // 添加主机 h3<br>py net.addLink (s1, net.get (‘h3’)) // 添加 s1 和 h3 之间的链接<br>py s1.attach (‘s1-eth3’) //s1 上添加 eth3 接口 (端口)<br>py net.get (‘h3’).cmd (‘ifconfig h3-eth0 10.3’) // 给 h3 配置 ip 地址为 10.0.0.3</p>
<h4 id="通过可视化界面"><a href="# 通过可视化界面" class="headerlink" title="通过可视化界面"></a>通过可视化界面</h4><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">cd</span> <span class="string">/mininet/mininet/examples</span></span><br><span class="line">$ <span class="string">./miniedit.py</span></span><br></pre></td></tr></table></figure>
<p><img src="/2021/03/30/computerNetwork-lab2-Mininet/photo4.png" alt><br>Edit 设置网段，host 的 IP 地址要和网段对应 <br> 右键设置控制器、交换机、主机的 property<br>设置好之后，开启另一个终端，开启 ryu，然后再回到可视化界面点选 run<br>(开启 ryu：cd/ryu/ryu/app 然后 ryu-maneger simple_switch.py)<br>可以将这个拓扑存成 python 文件：点击 stop，点选 File-Export Level 2 Script</p>
<h3 id="六、lab2"><a href="# 六、lab2" class="headerlink" title="六、lab2"></a>六、lab2</h3><h4 id="问题 -1"><a href="# 问题 -1" class="headerlink" title="问题 1"></a>问题 1</h4><p>Simulate the following topology in Mininet. Set the link bandwidth for (s1,s2) and (s1,s3) as 10Mbps. Use iperf3 to test the TCP throughput between h1 to h2, h3, h4.(30 points)<br>知识点：带宽设置<br><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment">#10 Mbps, 5ms 延迟，0% 丢包，1000 字节的大小  </span></span><br><span class="line">self.addLink (host, switch, <span class="attribute">bw</span>=10, <span class="attribute">delay</span>=<span class="string">&#x27;5ms&#x27;</span>, <span class="attribute">loss</span>=0, <span class="attribute">max_queue_size</span>=1000, <span class="attribute">use_htb</span>=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><br><a href="https://blog.csdn.net/weixin_34283445/article/details/93944421?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=mininet%20% E7% B3% BB% E5%88%97% E5% AE%9E% E9% AA%8C% E4% BA%94&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-2-93944421.pc_search_result_hbase_insert">Mininet 系列实验（五）：Mininet 设置带宽之简单性能测试</a></p>
<p>报错：mininet 中运行网络拓扑时 <br>Exception:Error creating interface pair (s1-eth1,s2-eth1): RTNETLINK answers: File exists<br> 这是因为重复构建了相同的拓扑，没有清除，所以若在.py 中构建相同的拓扑图时需要先清除掉先前的拓扑结构：<br><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>sudo mn -c</span><br></pre></td></tr></table></figure><br><a href="https://blog.csdn.net/weixin_46490821/article/details/109065097">https://blog.csdn.net/weixin_46490821/article/details/109065097</a></p>
<h3 id="计算机网络系列"><a href="# 计算机网络系列" class="headerlink" title="计算机网络系列"></a>计算机网络系列 </h3><p><a href="https://wangxchun.github.io/2021/03/20/computerNetwork-lab1/"> 计算机网络 lab1</a><br><a href="https://wangxchun.github.io/2021/03/30/computerNetwork-lab2-Mininet/">计算机网络 lab2 使用 Mininet 创建网络拓扑 </a><br><a href="https://wangxchun.github.io/2021/04/24/computerNetwork-lab3-1/"> 计算机网络 lab3 使用 Socket 完成多人聊天室 — 原理 </a><br><a href="https://wangxchun.github.io/2021/04/27/computerNetwork-lab3-2/"> 计算机网络 lab3 使用 Socket 完成多人聊天室 — 实作 </a><br><a href="https://wangxchun.github.io/2021/05/20/computerNetwork-lab4/"> 计算机网络 lab4 Overlay Network 和 VXLAN</a></p>
]]></content>
      <categories>
        <category>大学课程-计算机网络</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
        <tag>lab</tag>
        <tag>虚拟机</tag>
        <tag>虚拟机网卡</tag>
        <tag>安装</tag>
        <tag>Ubuntu</tag>
        <tag>Miniset</tag>
        <tag>网络拓扑</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络 lab3 使用 Socket 完成多人聊天室 -- 原理</title>
    <url>/2021/04/24/computerNetwork-lab3-1/</url>
    <content><![CDATA[<h3 id="一、服务器和客户端的功能"><a href="# 一、服务器和客户端的功能" class="headerlink" title="一、服务器和客户端的功能"></a>一、服务器和客户端的功能</h3><h4 id="1- 客户端需要支持下面几个功能"><a href="#1- 客户端需要支持下面几个功能" class="headerlink" title="1. 客户端需要支持下面几个功能"></a>1. 客户端需要支持下面几个功能</h4><h5 id="1- 连接服务器"><a href="#1- 连接服务器" class="headerlink" title="(1) 连接服务器"></a>(1) 连接服务器</h5><h5 id="2- 支持用户输入聊天消息，发送消息给服务器"><a href="#2- 支持用户输入聊天消息，发送消息给服务器" class="headerlink" title="(2) 支持用户输入聊天消息，发送消息给服务器"></a>(2) 支持用户输入聊天消息，发送消息给服务器</h5><h5 id="3- 接收并显示服务器的消息"><a href="#3- 接收并显示服务器的消息" class="headerlink" title="(3) 接收并显示服务器的消息"></a>(3) 接收并显示服务器的消息</h5><h5 id="4- 退出连接"><a href="#4- 退出连接" class="headerlink" title="(4) 退出连接"></a>(4) 退出连接</h5><span id="more"></span>
<p>针对上述需求，客户端的实现需要两个进程分别支持下面的功能：<br>(1) 子进程的功能：<br>等待用户输入聊天信息 <br> 将聊天信息写到管道（pipe），并发送给父进程 <br>(2) 父进程的功能：<br> 使用 epoll 机制接受服务端发来的信息，并显示给用户，使用户看到其他用户的聊天信息 <br> 将子进程发给的聊天信息从管道（pipe）中读取，并发送给服务端</p>
<h4 id="2- 服务器端需要支持下面几个功能"><a href="#2- 服务器端需要支持下面几个功能" class="headerlink" title="2. 服务器端需要支持下面几个功能"></a>2. 服务器端需要支持下面几个功能</h4><h5 id="1- 支持多个客户端接入，实现聊天室基本功能"><a href="#1- 支持多个客户端接入，实现聊天室基本功能" class="headerlink" title="(1) 支持多个客户端接入，实现聊天室基本功能"></a>(1) 支持多个客户端接入，实现聊天室基本功能</h5><h5 id="2- 启动服务建立监听端口等待客户端连接"><a href="#2- 启动服务建立监听端口等待客户端连接" class="headerlink" title="(2) 启动服务建立监听端口等待客户端连接"></a>(2) 启动服务建立监听端口等待客户端连接</h5><h5 id="3- 使用 -epoll- 机制实现并发，增加效率"><a href="#3- 使用 -epoll- 机制实现并发，增加效率" class="headerlink" title="(3) 使用 epoll 机制实现并发，增加效率"></a>(3) 使用 epoll 机制实现并发，增加效率</h5><h5 id="4- 客户端连接时发送欢迎消息并存储连接记录"><a href="#4- 客户端连接时发送欢迎消息并存储连接记录" class="headerlink" title="(4) 客户端连接时发送欢迎消息并存储连接记录"></a>(4) 客户端连接时发送欢迎消息并存储连接记录</h5><h5 id="5- 客户端发送消息时广播给其他所有客户端"><a href="#5- 客户端发送消息时广播给其他所有客户端" class="headerlink" title="(5) 客户端发送消息时广播给其他所有客户端"></a>(5) 客户端发送消息时广播给其他所有客户端</h5><h5 id="6- 客户端请求退出时对连接信息进行清理"><a href="#6- 客户端请求退出时对连接信息进行清理" class="headerlink" title="(6) 客户端请求退出时对连接信息进行清理"></a>(6) 客户端请求退出时对连接信息进行清理</h5><h4 id="3- 模型"><a href="#3- 模型" class="headerlink" title="3. 模型"></a>3. 模型</h4><p><img src="/2021/04/24/computerNetwork-lab3-1/photo1.png" alt></p>
<h3 id="二、概念介绍"><a href="# 二、概念介绍" class="headerlink" title="二、概念介绍"></a>二、概念介绍 </h3><h4 id="1- 阻塞与非阻塞 -socket"><a href="#1- 阻塞与非阻塞 -socket" class="headerlink" title="1. 阻塞与非阻塞 socket"></a>1. 阻塞与非阻塞 socket</h4><p> 非阻塞设置方式示例代码：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将文件描述符设置为非阻塞方式（利用 fcntl 函数）</span></span><br><span class="line"><span class="built_in">fcntl</span> (sockfd, F_SETFL, <span class="built_in">fcntl</span> (sockfd, F_GETFD, <span class="number">0</span>)| O_NONBLOCK);</span><br></pre></td></tr></table></figure><br>这个函数接受三个参数，第一个参数是文件描述符（linux 认为所有东西都是文件，socket 也是文件），第二个是要对第一个文件做什么动作（设置参数、读取参数之类的），第三个参数设置具体的行为（设置某种参数）。</p>
<p>F_SETFL 从字面意思就是 设置文件的标志 ，F_GETFD 从字面意思就是 读取文件的标志 。</p>
<p>先用 fcntl (sockfd, F_GETFD, 0) 读取套接字信息，读取的是一个整数。任何一个整数都可以用二进制表示，二进制的每一位为 0 或者 1 都可以表示文件的某个属性的状态。</p>
<p>再用 fcntl (sockfd, F_SETFL, fcntl (sockfd, F_GETFD, 0)| O_NONBLOCK); 设置文件的非阻塞属性。| 是 C++ 中的按位或，fcntl (sockfd, F_GETFD, 0)| O_NONBLOCK 的意思就是把表示 sockfd 属性的整数中关于阻塞与非阻塞的位置为有效。最后写入 sockfd 。</p>
<h5 id="1-STDIN-FILENO- 与 -STDIN- 的区别："><a href="#1-STDIN-FILENO- 与 -STDIN- 的区别：" class="headerlink" title="(1) STDIN_FILENO 与 STDIN 的区别："></a>(1) STDIN_FILENO 与 STDIN 的区别：</h5><p>STDIN_FILENO:<br>(a) 数据类型：int<br>(b) 层次：系统级的 API，是一个文件句柄，定义在 &lt; unistd.h &gt; 中。<br>(c) 相应的函数：open ()，close ()，read ()，write ()，lseek () 等系统级别的函数。<br>SDTIN：<br>(a) 数据类型：FILE *<br>(b) 层次：c 语言的提供的标准输入流。c 语言标准库封装系统函数实现。高级的输入输出函数。可在 &lt; stdio.h &gt; 中找到外部声明。<br>(c) 相应的函数：fopen ()，fclose ()，fread ()，fwrite ()，fseek () 等 c 语言标准函数。</p>
<h5 id="2- 文件描述符"><a href="#2- 文件描述符" class="headerlink" title="(2) 文件描述符"></a>(2) 文件描述符 </h5><p> 文件必须先开启后才能进行读写操作，开启文件后会回传一个 File Descriptor (文件描述器、简称 fd)，之后的所有操作都会需要 fd 作为参数。除非每个行程明确将其关闭，否则行程至少会开启 3 个 fd，分别是 stdin (0), stdout (1) 及 stderr (2)，实际使用这三个 fd 时不需直接用 0 ~ 2 整数值，unistd.h 有预先定义好的 STDIN_FILENO, STDOUT_FILENO 及 STDERR_FILENO。</p>
<p>　　核心内部会替每个行程 (task) 维护一份 file table，放在 current-&gt;files，用来记录行程开启的 fd，可以在 linux/sched.h 的 task_struct 中找到他。开档的系统呼叫会调用 fs/open.c 内的 do_sys_open ()，里面就会注册 fd 到行程的文件表。</p>
<h5 id="3-open- 函数 - 打开文件"><a href="#3-open- 函数 - 打开文件" class="headerlink" title="(3) open 函数 - 打开文件"></a>(3) open 函数 - 打开文件 </h5><p>open 函数用来打开一个文件，建立一个文件描述符到文件路径的映射，为后续的各种文件操作建立一个文件标识。<br>open 函数原型如下：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">open</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *pathname, <span class="keyword">int</span> oflag,...)</span></span>;</span><br></pre></td></tr></table></figure><br> 返回值：如果成功则返回文件描述符，如果出错则返回 - 1。<br>参数：<br>(a) pathname 是要打开或创建的文件的路径或者名字。可以是绝对路径，也可以是相对路径。<br>(b) oflag 是操作选项。是一个整数，每个位代表一个操作选项。通过一些常量的或运算构成综合性的操作参数。<br>三个常量决定文件的读写模式，可以选择其中一个，不能同时选。这三个是 O_RDONLY、O_WRONLY、O_RDWR。定义在头文件 &lt; fcntl.h &gt; 或者 &lt; bits/fcntl.h &gt; 中。<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> O_RDONLY             00     <span class="comment">/* 只读方式打开 */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> O_WRONLY             01     <span class="comment">/* 只写方式打开 */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> O_RDWR               02     <span class="comment">/* 读写方式打开 */</span></span></span><br></pre></td></tr></table></figure><br>也就是说， oflag 参数的低 2 位 (bit0 和 bit1) 表示文件读写模式， bit0 为 1 表示文件只能用于写操作， bit1 为 1 表示可读也可写， bit0 和 bit1 都为 0 表示只读。</p>
<p>(c) … 说明该参数是可选参数，该参数 mode_t 类型数据。称为文件创建模式字，它决定要的文件的一些权限。参考 umask 函数，这里暂且不管这个参数。</p>
<h5 id="4-fcntl- 函数 -cmd- 值的 -F-GETFL- 和 -F-SETFL"><a href="#4-fcntl- 函数 -cmd- 值的 -F-GETFL- 和 -F-SETFL" class="headerlink" title="(4)  fcntl 函数 cmd 值的 F_GETFL 和 F_SETFL"></a>(4)  fcntl 函数 cmd 值的 F_GETFL 和 F_SETFL</h5><p>(a) 获取文件打开方式的标志 (fd 的文件状态标志)，标志值含义与 open 调用一致。<br>三个存取方式标志 (O_RDONLY , O_WRONLY , 以及 O_RDWR) 并不各占 1 位。(这三种标志的值各是 0 , 1 和 2，由于历史原因，这三种值互斥 — 一个文件只能有这三种值之一。) 因此首先必须用屏蔽字 O_ACCMODE 相与取得存取方式位，然后将结果与这三种值相比较。<br>(b) 将文件描述符 close-on-exec 标志设置为第三个参数 arg 的最后一位<br> 设置给 arg 描述符状态标志，可以更改的几个标志是：O_APPEND，O_NONBLOCK，O_SYNC 和 O_ASYNC。而 fcntl 的文件状态标志总共有 7 个：O_RDONLY , O_WRONLY , O_RDWR , O_APPEND , O_NONBLOCK , O_SYNC 和 O_ASYNC</p>
<p>可更改的几个标志如下面的描述：<br>    O_NONBLOCK   非阻塞 I/O，如果 read (2) 调用没有可读取的数据，或者如果 write (2) 操作将阻塞，则 read 或 write 调用将返回 - 1 和 EAGAIN 错误<br>    O_APPEND     强制每次写 (write) 操作都添加在文件大的末尾，相当于 open (2) 的 O_APPEND 标志<br>    O_DIRECT     最小化或去掉 reading 和 writing 的缓存影响。系统将企图避免缓存你的读或写的数据。如果不能够避免缓存，那么它将最小化已经被缓存了的数据造成的影响。如果这个标志用的不够好，将大大的降低性能<br>    O_ASYNC      当 I/O 可用的时候，允许 SIGIO 信号发送到进程组，例如：当有数据可以读的时候</p>
<h5 id="5-bind- 函数"><a href="#5-bind- 函数" class="headerlink" title="(5) bind 函数"></a>(5) bind 函数 </h5><p><a href="https://blog.csdn.net/dongliqiang2006/article/details/5824651"> 网络编程 socket 之 bind 函数</a><br><a href="https://blog.csdn.net/qq_26399665/article/details/52932755">socket 绑定的 ip 为 INADDR_ANY 的意义</a></p>
<h4 id="2-epoll"><a href="#2-epoll" class="headerlink" title="2.epoll"></a>2.epoll</h4><p>epoll 是 Linux 内核为处理大批句柄而作改进的 poll，是 Linux 特有的 I/O 函数。<br>epoll 之所以高效，是因为 epoll 将用户关心的文件描述符放到内核里的一个事件表中，而不是像 select/poll 每次调用都需要重复传入文件描述符集或事件集。比如当一个事件发生（比如说读事件），epoll 无须遍历整个被侦听的描述符集，只要遍历那些被内核 IO 事件异步唤醒而加入就绪队列的描述符集合就行了。</p>
<h4 id="3- 多线程"><a href="#3- 多线程" class="headerlink" title="3. 多线程"></a>3. 多线程</h4><p><a href="https://blog.csdn.net/hslinux/article/details/7929182">pthread 简要使用指南（三） 线程的终止
</a></p>
<h4 id="4- 取得本地 -IP"><a href="#4- 取得本地 -IP" class="headerlink" title="4. 取得本地 IP"></a>4. 取得本地 IP</h4><p><a href="http://dannysun-unknown.blogspot.com/2015/04/linuxcpopen.html">linux 的環境下，在 C 程式裡 popen 的用法 &amp; 取得 ip 位置的範例 </a><br> 可以参考这篇文章中在 C 程序中使用 shell 命令的方法 <br> 但是我实测它的代码是不能用的，需要进行一些修改<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_local_ip</span> <span class="params">(<span class="keyword">char</span> *ip)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     FILE *fpRead;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 使用 shell command 來取得 ip 值    </span></span><br><span class="line">    <span class="keyword">char</span>* command=(<span class="keyword">char</span>*)<span class="string">&quot;ifconfig | grep &#x27;inet&#x27;| grep -v &#x27;127.0.0.1&#x27; | cut -d: -f2 | awk &#x27;&#123; print $2&#125;&#x27;&quot;</span>;</span><br><span class="line">    <span class="keyword">char</span>* renewCh;</span><br><span class="line">  </span><br><span class="line">    fpRead = <span class="built_in">popen</span> (command, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="built_in">fgets</span> (ip, IP_SIZE , fpRead);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 記得作 pclose () 的動作</span></span><br><span class="line">    <span class="keyword">if</span> (fpRead != <span class="literal">NULL</span>)</span><br><span class="line">         <span class="built_in">pclose</span> (fpRead);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 最後檢查取出的字串當中是否有多餘的換行，若有直接取代為 &#x27;\0&#x27; 作結尾</span></span><br><span class="line">    renewCh=<span class="built_in">strstr</span> (ip,<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (renewCh)</span><br><span class="line">        *renewCh= <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//printf (&quot;=== % s ===\n&quot;, ip);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 命令解释如下：<br>grep ‘inet’  截取包含 ip 的那两行<br>grep -v ‘127.0.0.1’   去掉本地指向的那行<br>cut -d: -f2    -d: 以：分割字符串  -f2：取第二组数据<br>awk ‘{print $2}’  $2 表示默认以空格分割的第二组 同理 $1 表示第一组</p>
<h3 id="三、错误"><a href="# 三、错误" class="headerlink" title="三、错误"></a>三、错误 </h3><h4 id="ryu-manager- 报错 -SyntaxError-invalid-syntax"><a href="#ryu-manager- 报错 -SyntaxError-invalid-syntax" class="headerlink" title="ryu-manager 报错 SyntaxError: invalid syntax"></a>ryu-manager 报错 SyntaxError: invalid syntax</h4><p><a href="https://blog.csdn.net/jiao424525707/article/details/103045159">https://blog.csdn.net/jiao424525707/article/details/103045159</a><br><a href="https://blog.csdn.net/cyz14/article/details/79994548">https://blog.csdn.net/cyz14/article/details/79994548</a><br> 但是后来没有解决，因为可以不用到 ryu</p>
<h4 id="Exception-Please-shut-down-the-controller-which-is-running-on-port-6653"><a href="#Exception-Please-shut-down-the-controller-which-is-running-on-port-6653" class="headerlink" title="Exception: Please shut down the controller which is running on port 6653:"></a>Exception: Please shut down the controller which is running on port 6653:</h4><p><img src="/2021/04/24/computerNetwork-lab3-1/photo2.png" alt></p>
<h4 id="make- 没有指明目标并且找不到 -makefile。- 停止。"><a href="#make- 没有指明目标并且找不到 -makefile。- 停止。" class="headerlink" title="make: * 没有指明目标并且找不到 makefile。 停止。"></a>make: <em>*</em> 没有指明目标并且找不到 makefile。 停止。</h4><p>一开始把文件名取出 Makefile 出错，后来改成 makefile 就可以了</p>
<h4 id="‘iostream’-No-such-file-or-directory"><a href="#‘iostream’-No-such-file-or-directory" class="headerlink" title="‘iostream’: No such file or directory"></a>‘iostream’: No such file or directory</h4><p>先注意你的编译器要用 C++ 编译器，还有副档名（扩展名）要用 “.cpp” 而不能用 “.c”。还不行那就用老式表头档，格式为：#include <iostream.h> // 就不用 using namespace std; 这一行了。</iostream.h></p>
<h4 id="Virtualbox- 和主机共享粘贴板"><a href="#Virtualbox- 和主机共享粘贴板" class="headerlink" title="Virtualbox 和主机共享粘贴板"></a>Virtualbox 和主机共享粘贴板</h4><p><a href="https://blog.csdn.net/baidu_37503452/article/details/78707806">Virtualbox 和主机共享粘贴板</a></p>
<h3 id="补充"><a href="# 补充" class="headerlink" title="补充"></a>补充 </h3><p><a href="https://my.oschina.net/u/589241/blog/2876942"> 命令参数的三大风格：Posix、BSD、GNU</a><br><a href="https://blog.csdn.net/fivedoumi/article/details/72424784">AF_INET 和 PF_INET 的细微不同</a></p>
<h4 id="gcc- 和 -g- 的差别"><a href="#gcc- 和 -g- 的差别" class="headerlink" title="gcc 和 g++ 的差别"></a>gcc 和 g++ 的差别</h4><figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">g</span>++ <span class="literal">-</span><span class="comment">o</span> <span class="comment">staic_test</span><span class="string">.</span><span class="comment">o</span> <span class="comment">static_test</span><span class="string">.</span><span class="comment">cpp</span></span><br></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">gcc -o staic_test<span class="selector-class">.o</span> static_test<span class="selector-class">.cpp</span> -lstdc++</span><br></pre></td></tr></table></figure>
<p>可正常编译通过。<br>分析：<br>gcc 命令不能自动和 C＋＋程序使用的库联接，所以使用 gcc 编译 c++ 代码时，通常需要增加 - lstdc++ 选项，或者直接使用 g++ 来完成联接。g++ 在编译阶段，会自动调用 gcc。</p>
<h3 id="四、参考"><a href="# 四、参考" class="headerlink" title="四、参考"></a>四、参考 </h3><p><a href="https://zhenkunhe.github.io/Gitbook/Linux/md/2-Mininet/3-mininet%20% E5% AF% A6% E6%88% B0.html">mininet 實戰</a><br><a href="https://www.jianshu.com/p/b264b313580b">【Mininet 从入门到精通】第 2 讲 Mininet 网络从创建到部署</a><br><a href="https://www.jianshu.com/p/bf17c3b23654">SDN 为 host 赋予服务器、客户端的作用</a><br><a href="https://www.cnblogs.com/cing/p/8025239.html">mininet 命令</a><br><a href="https://blog.csdn.net/fanshuquan/article/details/51323266">mininet 常见用法</a><br><a href="https://blog.csdn.net/m0_38068229/article/details/80296945?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-5.control&amp;dist_request_id=1332042.11852.16192598684640231&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-5.control"> 计算机网络实验二：UDP 套接字编程实现多人聊天 Java 实现
</a><br><a href="https://www.bilibili.com/read/cv490003/">做好这些项目，你就真正的入门 C/C++ 了！</a><br>重点 <a href="https://xiejun.blog.csdn.net/article/details/52819975?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-2.control&amp;dist_request_id=&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-2.control">socket 多人聊天程序 C 语言版 (一)</a><br>重点 <a href="https://blog.csdn.net/nanfeibuyi/article/details/88803798">Linux-C 使用 UDP 实现的局域网聊天小程序 </a><br> 重点 <a href="https://blog.csdn.net/e31006/article/details/89204275">C++ 实现即时通信软件 </a><br><a href="https://blog.csdn.net/qq_38880380/article/details/84979553">C 语言练手项目 —C 语言编写聊天室</a><br><a href="http://wmnlab.ee.ntu.edu.tw/nmlab/exp1.html"> 國立台灣大學電機工程學系 網路與多媒體實驗 </a><br><a href="http://www.ezonesoft.com.tw/onlinegame/"> 逸中軟體</a></p>
<h3 id="计算机网络系列"><a href="# 计算机网络系列" class="headerlink" title="计算机网络系列"></a>计算机网络系列 </h3><p><a href="https://wangxchun.github.io/2021/03/20/computerNetwork-lab1/"> 计算机网络 lab1</a><br><a href="https://wangxchun.github.io/2021/03/30/computerNetwork-lab2-Mininet/">计算机网络 lab2 使用 Mininet 创建网络拓扑 </a><br><a href="https://wangxchun.github.io/2021/04/24/computerNetwork-lab3-1/"> 计算机网络 lab3 使用 Socket 完成多人聊天室 — 原理 </a><br><a href="https://wangxchun.github.io/2021/04/27/computerNetwork-lab3-2/"> 计算机网络 lab3 使用 Socket 完成多人聊天室 — 实作 </a><br><a href="https://wangxchun.github.io/2021/05/20/computerNetwork-lab4/"> 计算机网络 lab4 Overlay Network 和 VXLAN</a></p>
]]></content>
      <categories>
        <category>大学课程-计算机网络</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
        <tag>lab</tag>
        <tag>Socket</tag>
        <tag>TCP</tag>
        <tag>UDP</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络 lab3 使用 Socket 完成多人聊天室 -- 实作</title>
    <url>/2021/04/27/computerNetwork-lab3-2/</url>
    <content><![CDATA[<p><a href="https://wangxchun.github.io/2021/03/20/computerNetwork-lab1/">计算机网络 lab1</a><br><a href="https://wangxchun.github.io/2021/03/30/computerNetwork-lab2-Mininet/">计算机网络 lab2 使用 Mininet 创建网络拓扑 </a><br><a href="https://wangxchun.github.io/2021/04/24/computerNetwork-lab3-1/"> 计算机网络 lab3 使用 Socket 完成多人聊天室 — 原理 </a><br><a href="https://wangxchun.github.io/2021/04/27/computerNetwork-lab3-2/"> 计算机网络 lab3 使用 Socket 完成多人聊天室 — 实作 </a><br><a href="https://wangxchun.github.io/2021/05/20/computerNetwork-lab4/"> 计算机网络 lab4 Overlay Network 和 VXLAN</a></p>
]]></content>
      <categories>
        <category>大学课程-计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>计算机网络 lab4 Overlay Network 和 VXLAN</title>
    <url>/2021/05/20/computerNetwork-lab4/</url>
    <content><![CDATA[<h3 id="一、任务要求"><a href="# 一、任务要求" class="headerlink" title="一、任务要求"></a>一、任务要求 </h3><p> 用 mininet 创建两个 LAN，然后用 VXLAN 创建 overlay network，让两个局域网可以互相通信。<br><a href="https://www.voidking.com/dev-openvswitch-vxlan/">参考 </a><br><a href="https://www.sdnlab.com/openvswitch-vxlan/"> 基于 Open vSwitch 的 VxLAN 隧道实验网络 </a><br><a href="https://tingkuan.wordpress.com/2017/11/09/% E3%80%90mininet% E6%8C%87% E4% BB% A4% E4% BB%8B% E7% B4% B9% E3%80%91/">【Mininet 指令介紹】</a><br><a href="https://www.cnblogs.com/jjsgxty/p/11817132.html">SDN 第二次作业</a><br><a href="https://ithelp.ithome.com.tw/articles/10197632">Openvswitch 介紹</a><br><a href="https://www.cnblogs.com/cing/p/8025173.html"> 自定义 topo 文件解析</a></p>
<h3 id="二、原理"><a href="# 二、原理" class="headerlink" title="二、原理"></a>二、原理 </h3><h4 id="1-Overlay-Network"><a href="#1-Overlay-Network" class="headerlink" title="1.Overlay Network"></a>1.Overlay Network</h4><h4 id="2- 虚拟机的连网方式"><a href="#2- 虚拟机的连网方式" class="headerlink" title="2. 虚拟机的连网方式"></a>2. 虚拟机的连网方式</h4><p><a href="https://zhuanlan.zhihu.com/p/87447426"> 虚拟机三种网络模式 </a><br>nat：enp0s3：上网<br>host-only：enp0s8：两个 LAN 通信<br><a href="https://blog.csdn.net/yeziand01/article/details/88424624">Linux - 网卡命名方式改变了 - enp0s3，enp0s8</a><br><a href="https://blog.csdn.net/xulilinman/article/details/82821554"> 配置 host-only 的静态 IP</a></p>
<h4 id="3- 流表"><a href="#3- 流表" class="headerlink" title="3. 流表"></a>3. 流表 </h4><p>idle_timeout，空闲时间，如值为 10，表示若某条流表在最近 10s 内没有被匹配过则删除。<br>hard_timeout，存活时间，如值为 10，则从该流表被安装经过 10s 后无论被使用情况如何，立即被删除。<br> 而如果在交换机上查看流表，会发现除以上两个时间以外，还有两个：<br>idle_age，未命中时间，如值为 10，表示已经有 10s 没有匹配到过这条流表了。当这个值等于 idle_timeout 时，这条流表就真的失效了。<br>duration，流表年龄，指的是流表自从安装到交换机上总共所经过的时间。</p>
<p>作者：顽强的猫尾草 <br> 链接：<a href="https://www.jianshu.com/p/22e6feb2c662">https://www.jianshu.com/p/22e6feb2c662</a><br>来源：简书 <br> 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
<h3 id="三、常用指令"><a href="# 三、常用指令" class="headerlink" title="三、常用指令"></a>三、常用指令</h3><p><a href="https://lowbee.fun/2020/06/18/SDN% E5% AD% A6% E4% B9% A0% E7% AC%94% E8% AE% B0/">SDN 学习笔记</a><br><a href="http://www.rendoumi.com/open-vswitchde-ovs-vsctlming-ling-xiang-jie/">Open vSwitch 的 ovs-vsctl 命令详解</a><br><a href="https://sites.google.com/cnsrl.cycu.edu.tw/glennsdn/openvswitchovs/ovs% E7% B0% A1% E6%98%93% E5% B8% B8% E7%94% A8% E6%8C%87% E4% BB% A4">OVS 簡易常用指令</a></p>
<h4 id="1- 网桥 -ovs-vsctl- 基本命令"><a href="#1- 网桥 -ovs-vsctl- 基本命令" class="headerlink" title="1. 网桥 ovs-vsctl 基本命令"></a>1. 网桥 ovs-vsctl 基本命令</h4><figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">ovs-vsctl <span class="keyword">show</span>  <span class="meta"># 查询主机上已有的 OVS bridge 和 port</span></span><br></pre></td></tr></table></figure>
<h5 id="1-ovs-vsctl- 用于控制 -ovs-db"><a href="#1-ovs-vsctl- 用于控制 -ovs-db" class="headerlink" title="(1) ovs-vsctl 用于控制 ovs db"></a>(1) ovs-vsctl 用于控制 ovs db</h5><figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line"><span class="string">ovs-vsctl</span> <span class="string">add-br</span> <span class="string">br0</span> // 创建 <span class="string">bridge</span></span><br><span class="line"><span class="string">ovs</span>-<span class="string">vsctl</span> <span class="string">del-br</span> <span class="string">br0</span> // 删除 <span class="string">bridge</span></span><br><span class="line"><span class="string">ovs</span>-<span class="string">vsctl</span> <span class="built_in">list-br</span>  // 查询 <span class="string">bridge</span></span><br><span class="line"><span class="string">ovs</span>-<span class="string">vsctl</span> <span class="string">add-port</span> <span class="string">br0</span> <span class="string">eth1</span> // 添加端口 </span><br><span class="line"><span class="string">ovs-vsctl</span> <span class="string">del-port</span> <span class="string">br0</span> <span class="string">eth1</span> // 移除端口</span><br><span class="line"><span class="string">ovs-vsctl</span> <span class="built_in">set-controller</span> <span class="string">br0</span> <span class="string">tcp:1.</span><span class="string">2</span>.<span class="string">3</span>.<span class="string">4:6633 </span><span class="string">tcp:4.</span><span class="string">3</span>.<span class="string">2</span>.<span class="string">1:6633 </span>// 设置多个 <span class="string">controller</span></span><br><span class="line"><span class="string">ovs</span>-<span class="string">vsctl</span> <span class="string">del-controller</span> <span class="string">br0</span>  // 移除控制器</span><br><span class="line"><span class="string">ovs-vsctl</span> <span class="built_in">get-controller</span> <span class="string">br0</span> // 查询 <span class="string">brige</span> 上已配置的控制器</span><br></pre></td></tr></table></figure>
<h5 id="2-ovs-ofctl- 用于管理 -OpenFlow-switch- 的 -flow"><a href="#2-ovs-ofctl- 用于管理 -OpenFlow-switch- 的 -flow" class="headerlink" title="(2) ovs-ofctl 用于管理 OpenFlow switch 的 flow"></a>(2) ovs-ofctl 用于管理 OpenFlow switch 的 flow</h5><h5 id="3-ovs-dpctl- 用于管理 -ovs- 的 -datapath"><a href="#3-ovs-dpctl- 用于管理 -ovs- 的 -datapath" class="headerlink" title="(3) ovs-dpctl 用于管理 ovs 的 datapath"></a>(3) ovs-dpctl 用于管理 ovs 的 datapath</h5><h5 id="4-ovs-appctl- 用于查询和管理 -ovs-daemon"><a href="#4-ovs-appctl- 用于查询和管理 -ovs-daemon" class="headerlink" title="(4) ovs-appctl 用于查询和管理 ovs daemon"></a>(4) ovs-appctl 用于查询和管理 ovs daemon</h5><h4 id="2- 流表"><a href="#2- 流表" class="headerlink" title="2. 流表"></a>2. 流表 </h4><h3 id="四、实作"><a href="# 四、实作" class="headerlink" title="四、实作"></a> 四、实作 </h3><h4 id="1- 创建拓扑"><a href="#1- 创建拓扑" class="headerlink" title="1. 创建拓扑"></a>1. 创建拓扑</h4><p> 在两台虚拟机上分别设置这样的拓扑<br><img src="/2021/05/20/computerNetwork-lab4/photo2.png" alt><br><img src="/2021/05/20/computerNetwork-lab4/photo3.jpg" alt><br>On VM 1:<br><figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">mininet&gt; h1 ifconfig h1-eth<span class="number">0 10.0.0</span>.<span class="number">1</span> netmask <span class="number">255.0.0.0</span></span><br><span class="line">mininet&gt; h2 ifconfig h2-eth<span class="number">0 10.0.0</span>.<span class="number">2</span> netmask <span class="number">255.0.0.0</span></span><br><span class="line">$ sudo ifconfig s<span class="number">1 10.0.0</span>.<span class="number">111</span>/<span class="number">8</span> up</span><br></pre></td></tr></table></figure></p>
<p>On VM 2:<br><figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">mininet&gt; h3 ifconfig h3-eth<span class="number">0 10.0.0</span>.<span class="number">3</span> netmask <span class="number">255.0.0.0</span></span><br><span class="line">mininet&gt; h4 ifconfig h4-eth<span class="number">0 10.0.0</span>.<span class="number">4</span> netmask <span class="number">255.0.0.0</span></span><br><span class="line">$ sudo ifconfig s<span class="number">2 10.0.0</span>.<span class="number">112</span>/<span class="number">8</span> up</span><br></pre></td></tr></table></figure></p>
<h4 id="2- 网桥配置"><a href="#2- 网桥配置" class="headerlink" title="2. 网桥配置"></a>2. 网桥配置</h4><p>On VM1:<br><figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">// 在 VM1 上添加 br1 网桥</span><br><span class="line">sudo ovs-vsctl<span class="built_in"> add-br </span>br1</span><br><span class="line">// 在 br1 上添加一个端口，将 enp0s8 挂载到 br1 上</span><br><span class="line">// 将 enp0s8 的 IP 指定给 br1，让虚拟机网络可以通过 br1 继续工作</span><br><span class="line">//24 是掩码位数，up 是网卡启动的意思</span><br><span class="line">sudo ovs-vsctl<span class="built_in"> add-port </span>br1 enp0s8</span><br><span class="line">sudo ifconfig br1 192.168.56.101/24 up</span><br><span class="line">// 根据实际情况配置 br1 的网关（可选）</span><br><span class="line">sudo route<span class="built_in"> add </span>default gw 192.168.56.201</span><br></pre></td></tr></table></figure></p>
<p>On VM2:<br><figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">//// 在 VM2 上添加 br1 网桥</span><br><span class="line">sudo ovs-vsctl<span class="built_in"> add-br </span>br1</span><br><span class="line">// 在 br1 上添加一个端口，将 enp0s8 挂载到 br1 上</span><br><span class="line">// 将 enp0s8 的 IP 指定给 br1，让虚拟机网络可以通过 br1 继续工作</span><br><span class="line">//24 是掩码位数，up 是网卡启动的意思</span><br><span class="line">sudo ovs-vsctl<span class="built_in"> add-port </span>br1 enp0s8</span><br><span class="line">sudo ifconfig br1 192.168.56.102/24 up</span><br><span class="line">// 根据实际情况配置 br1 的网关（可选）</span><br><span class="line">sudo route<span class="built_in"> add </span>default gw 192.168.56.201</span><br></pre></td></tr></table></figure></p>
<p>这时候查看网络的连通性，会发现 VM2 可以 ping 通 192.168.56.101，却 ping 不通 10.0.0.111</p>
<h4 id="3- 搭建 -VxLAN- 隧道"><a href="#3- 搭建 -VxLAN- 隧道" class="headerlink" title="3. 搭建 VxLAN 隧道"></a>3. 搭建 VxLAN 隧道</h4><p>On VM1:<br><figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">sudo ovs-vsctl<span class="built_in"> add-port </span>s1 vxlan0 -- set interface vxlan0 type=vxlan options:remote_ip=192.168.56.102</span><br></pre></td></tr></table></figure><br>On VM2:<br><figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">sudo ovs-vsctl<span class="built_in"> add-port </span>s2 vxlan0 -- set interface vxlan0 type=vxlan options:remote_ip=192.168.56.101</span><br></pre></td></tr></table></figure></p>
<h3 id="五、遇到问题"><a href="# 五、遇到问题" class="headerlink" title="五、遇到问题"></a>五、遇到问题</h3><h4 id="1- 拓扑没有删除"><a href="#1- 拓扑没有删除" class="headerlink" title="1. 拓扑没有删除"></a>1. 拓扑没有删除</h4><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> mininet/mininet/examples</span><br><span class="line">sudo <span class="keyword">python</span> lab4.<span class="keyword">py</span></span><br></pre></td></tr></table></figure>
<p>Exception: Error creating interface pair (XX-eth<em>,XX-eth</em>): RTNETLINK answers: File exists error<br>挂号里通常是 Switch 的某个 eth 连到另一台 Switch 的 eth，发生错误的原因是因为当第一次建立拓扑时出错，第二次建立相同拓扑时，第一次的拓扑没有完全消除。<br>解决方法：运行以下指令<br><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo mn -c</span></span><br></pre></td></tr></table></figure></p>
<h4 id="2- 局域网 -pingall- 不通"><a href="#2- 局域网 -pingall- 不通" class="headerlink" title="2. 局域网 pingall 不通"></a>2. 局域网 pingall 不通</h4><figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">mininet&gt; sh ovs-ofctl dump-flows s1 // 查看 s1 的 flow table</span><br><span class="line">mininet&gt; sh ovs-ofctl<span class="built_in"> add-flow </span>s1 <span class="string">&quot;priority=0,action=normal&quot;</span> /// 新增 s1 的 flow table</span><br><span class="line">mininet&gt; pingall // 此時就可以互相 ping 到其他 host</span><br></pre></td></tr></table></figure>
<p><img src="/2021/05/20/computerNetwork-lab4/photo1.png" alt><br><a href="https://tingkuan.wordpress.com/2017/12/11/% E3%80%90openvswitch-vs-controller-% E3%80%91/">参考</a></p>
<p>后来发现是自己用./miniedit 创建的拓扑都 ping 不通，要自己加上流表或是运行 ryu 才会通 <br> 后来就改用 sudo mn 创建拓扑，pingall 就可以直接成功，<br>但是不知道怎么把这种方式创建的拓扑存储成.py 文件 (？)，或是修改 host 和 switch 名字 <br><a href="https://www.cnblogs.com/yezhh/p/11249036.html"> 可以参考这个</a></p>
<h4 id="3- 两台虚拟机 -ping- 不通原因"><a href="#3- 两台虚拟机 -ping- 不通原因" class="headerlink" title="3. 两台虚拟机 ping 不通原因"></a>3. 两台虚拟机 ping 不通原因 </h4><p> 查到了很多原因，但后来发现我的原因是自己用./miniedit 创建的 LAN 有问题 <br>(1) 虚拟机 mac 地址相同导致，复制虚拟的问题<br><a href="https://blog.csdn.net/dlh_sycamore/article/details/64440134">https://blog.csdn.net/dlh_sycamore/article/details/64440134</a><br>(2) 虚拟机连接方式设置为桥接<br><a href="https://blog.csdn.net/AnneQiQi/article/details/51758025">Ubuntu 两台虚拟机之间 Ping 不通</a><br>(3) 防火墙<br><a href="https://blog.csdn.net/T_Mac9334/article/details/78966029"> 关闭虚拟机 linux 防火墙命令 </a><br><a href="https://blog.csdn.net/yangmolulu/article/details/93902358?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control"> 两台虚拟机互相 ping 通（互相通讯）</a><br><a href="https://blog.csdn.net/qq_15256443/article/details/101289412">ubuntu 查看防火墙状态</a></p>
<h4 id="4- 如果想要配置的 -IP- 永久生效"><a href="#4- 如果想要配置的 -IP- 永久生效" class="headerlink" title="4. 如果想要配置的 IP 永久生效"></a>4. 如果想要配置的 IP 永久生效 </h4><h4 id="5-ubuntu18-04- 自带 -python- 换成 -python3"><a href="#5-ubuntu18-04- 自带 -python- 换成 -python3" class="headerlink" title="5.ubuntu18.04 自带 python, 换成 python3"></a>5.ubuntu18.04 自带 python, 换成 python3</h4><p> 重装虚拟机，按照 ryu 的时候有一步是：python get-pip.py，出错，因为这个是 python3 的用法<br><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span> 下载并设置优先级</span><br><span class="line">update-alternatives --install <span class="regexp">/usr/</span>bin<span class="regexp">/python python /u</span>sr<span class="regexp">/bin/</span>python2.<span class="number">7</span> <span class="number">1</span></span><br><span class="line">update-alternatives --install <span class="regexp">/usr/</span>bin<span class="regexp">/python python /u</span>sr<span class="regexp">/bin/</span>python3.<span class="number">6</span> <span class="number">2</span></span><br><span class="line"><span class="regexp">//</span> 查看默认版本</span><br><span class="line">python --version</span><br></pre></td></tr></table></figure></p>
<h4 id="5-wireshark- 权限问题"><a href="#5-wireshark- 权限问题" class="headerlink" title="5.wireshark 权限问题"></a>5.wireshark 权限问题</h4><p>wireshark 遇到 couldn’t run /usr/bin/dumpcap in child process: Permission Denied<br><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sudo dpkg-reconfigure wireshark-common <span class="regexp">//</span> 选组 “YES” </span><br><span class="line">sudo adduser <span class="variable">$USER</span> wireshark <span class="regexp">//</span> 添加当前用户到用户组</span><br><span class="line"><span class="regexp">//</span> 重啓，即可正常使用 wireshark</span><br></pre></td></tr></table></figure></p>
<h4 id="6-ryu- 运行出错，所以想重新按照，但最后还是重装了虚拟机"><a href="#6-ryu- 运行出错，所以想重新按照，但最后还是重装了虚拟机" class="headerlink" title="6.ryu 运行出错，所以想重新按照，但最后还是重装了虚拟机"></a>6.ryu 运行出错，所以想重新按照，但最后还是重装了虚拟机 </h4><p>(1) 运行 ryu 程序出现 ImportError: No module named XX.py<br>(2) 如何在 Ubuntu 中用 apt 命令删除 / 卸载软件包<br>apt-get remove 删除已安装的软件包（保留配置文件），不会删除依赖软件包，保留配置文件。<br>apt-get purge  删除已安装的软件包（不保留配置文件)，删除软件包，同时删除相应依赖软件包。<br><a href="https://blog.csdn.net/LEON1741/article/details/85114318"> 如何在 Ubuntu 中用 apt 命令删除 / 卸载软件包（remove/clean/purge）</a><br><a href="https://blog.csdn.net/younger_to_older/article/details/109053821">解决 apt-get remove 和 dpkg 删除出现 E: 无法定位软件包 XXXX</a></p>
<h4 id="7-ovs- 错误解决 -could-not-open-network-device-XXX-No-such-device）"><a href="#7-ovs- 错误解决 -could-not-open-network-device-XXX-No-such-device）" class="headerlink" title="7.ovs 错误解决 could not open network device XXX (No such device）"></a>7.ovs 错误解决 could not open network device XXX (No such device）</h4><p>网络上说设置好端口类型为 internal 就不会再出现这个问题 <br> 但我后来发现只是我命令输错，或是没有设置端口类型</p>
<h4 id="8- 用自己 -miniedit- 创建的网络，add-route- 之后，ping- 不上外网"><a href="#8- 用自己 -miniedit- 创建的网络，add-route- 之后，ping- 不上外网" class="headerlink" title="8. 用自己./miniedit 创建的网络，add route 之后，ping 不上外网"></a>8. 用自己./miniedit 创建的网络，add route 之后，ping 不上外网 </h4><p> 这个时候进行 ping www.baidu.com 出现：<br>ping: www.baidu.com: Name or service not known<br><a href="https://blog.csdn.net/XXJ19950917/article/details/82733928">Linux 报错之 ping: www.baidu.com: Name or service not known</a></p>
<h4 id="9-linux- 中查看网卡 -mac- 地址"><a href="#9-linux- 中查看网卡 -mac- 地址" class="headerlink" title="9.linux 中查看网卡 mac 地址"></a>9.linux 中查看网卡 mac 地址</h4><p>“ifconfig -a 其中 HWaddr 字段就是 mac 地址”，但是我没看到 HWaddr 字段<br><a href="https://blog.csdn.net/kunatnet/article/details/43408617">linux 中查看网卡 mac 地址</a></p>
<h4 id="10-Unable-to-fetch-some-archives"><a href="#10-Unable-to-fetch-some-archives" class="headerlink" title="10.Unable to fetch some archives"></a>10.Unable to fetch some archives</h4><p>Ubuntu 安装应用时报错：<br>Unable to fetch some archives, maybe run apt-get update or try with —fix-missing?<br><figure class="highlight q"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 解决办法</span></span><br><span class="line">sudo apt-<span class="built_in">get</span> clean</span><br><span class="line">sudo apt-<span class="built_in">get</span> <span class="keyword">update</span></span><br></pre></td></tr></table></figure></p>
<h3 id="计算机网络系列"><a href="# 计算机网络系列" class="headerlink" title="计算机网络系列"></a>计算机网络系列 </h3><p><a href="https://wangxchun.github.io/2021/03/20/computerNetwork-lab1/"> 计算机网络 lab1</a><br><a href="https://wangxchun.github.io/2021/03/30/computerNetwork-lab2-Mininet/">计算机网络 lab2 使用 Mininet 创建网络拓扑 </a><br><a href="https://wangxchun.github.io/2021/04/24/computerNetwork-lab3-1/"> 计算机网络 lab3 使用 Socket 完成多人聊天室 — 原理 </a><br><a href="https://wangxchun.github.io/2021/04/27/computerNetwork-lab3-2/"> 计算机网络 lab3 使用 Socket 完成多人聊天室 — 实作 </a><br><a href="https://wangxchun.github.io/2021/05/20/computerNetwork-lab4/"> 计算机网络 lab4 Overlay Network 和 VXLAN</a></p>
]]></content>
      <categories>
        <category>大学课程-计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>深度学习实作 --（1）环境配置：Anaconda + Tensorflow</title>
    <url>/2021/06/26/deep-learning-coding-1/</url>
    <content><![CDATA[<h3 id="安装步骤"><a href="# 安装步骤" class="headerlink" title="安装步骤"></a>安装步骤 </h3><h4 id="1- 安装 -Anaconda"><a href="#1- 安装 -Anaconda" class="headerlink" title="1. 安装 Anaconda"></a>1. 安装 Anaconda</h4><h4 id="2- 打开 -Anaconda-Navigator"><a href="#2- 打开 -Anaconda-Navigator" class="headerlink" title="2. 打开 Anaconda-Navigator"></a>2. 打开 Anaconda-Navigator</h4><p> 更改 Anaconda 的服务为国内镜像，提高下载速度（选做）<br>channel - add - <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/">https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</a><br><a href="https://blog.csdn.net/u014061630/article/details/92744781"></a><br><figure class="highlight python-repl"><table><tr><td class="code"><pre><span class="line">// 在 Anaconda Prompt，创建一个 python3.6 的环境，环境名称为 tensorflow</span><br><span class="line">conda create -n tensorflow python=3.6</span><br><span class="line">// 在 Anacoda Prompt 下启动 tensorflow 环境</span><br><span class="line">// 安装 cpu 版本的 TensorFlow</span><br><span class="line">pip install --upgrade --ignore-installed tensorflow</span><br><span class="line">activate tensorflow</span><br><span class="line">// 测试（Session () 是 tensorflow1 的函数）</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">hello = tf.constant (<span class="string">&#x27;Hello, TensorFlow!&#x27;</span>)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">sess = tf.Session ()</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python"><span class="built_in">print</span> (sess.run (hello))</span></span><br><span class="line">b&#x27;Hello, TensorFlow!&#x27;</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">sess.close ()</span></span><br><span class="line">// 测试</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">a = tf.constant (<span class="number">2.0</span>)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">b = tf.constant (<span class="number">4.0</span>)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python"><span class="built_in">print</span> (a + b)</span></span><br></pre></td></tr></table></figure><br><a href="https://blog.csdn.net/u013894391/article/details/104513714"></a></p>
<h4 id="3- 安装 -tensorflow"><a href="#3- 安装 -tensorflow" class="headerlink" title="3. 安装 tensorflow"></a>3. 安装 tensorflow</h4><p><a href="https://blog.csdn.net/devcloud/article/details/95945189"></a></p>
<h4 id="4- 在 -pycharm- 中使用 -tensorflow"><a href="#4- 在 -pycharm- 中使用 -tensorflow" class="headerlink" title="4. 在 pycharm 中使用 tensorflow"></a>4. 在 pycharm 中使用 tensorflow</h4><p>打开 Pycharm，点击 “file” 菜单下的 settings<br>Project：Pycharm - Project Interpreter<br>点击右侧的小三角下的 “Add” 按钮，添加安装 Anaconda-TensorFlow 下的 python.exe<br>(Anaconda、TensorFlow 安装和 Pycharm 配置详细教程)[<a href="https://zhuanlan.zhihu.com/p/77494679">https://zhuanlan.zhihu.com/p/77494679</a>]</p>
<h4 id="5- 在 -ipython-notebook- 中使用 -tensorflow"><a href="#5- 在 -ipython-notebook- 中使用 -tensorflow" class="headerlink" title="5. 在 ipython notebook 中使用 tensorflow"></a>5. 在 ipython notebook 中使用 tensorflow</h4><p>在虚拟环境中（tensorflow_env）安装 jupyter，在 cmd 中执行以下命令：<br><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">conda activate tensorflow_env <span class="regexp">//</span> 激活环境 TensorFlow</span><br><span class="line">conda install ipython <span class="regexp">//</span> 安装 ipython</span><br><span class="line">conda install jupyter <span class="regexp">//</span> 安装 jupyter</span><br><span class="line">ipython kernelspec install-self --user <span class="regexp">//</span> 安装 python kernel <span class="keyword">for</span> Tensroflow</span><br><span class="line">jupyter notebook <span class="regexp">//</span> 验证，看是否自动跳转到 tensorflow 虚拟环境下的 jupyter 网页</span><br></pre></td></tr></table></figure></p>
<h4 id="5-Anaconda- 快捷键"><a href="#5-Anaconda- 快捷键" class="headerlink" title="5.Anaconda 快捷键"></a>5.Anaconda 快捷键</h4><p>Shift + enter -&gt; 执行这个 cell<br>Esc+a (esc 是从 Edit Mode 跳回 Command Mode 的意思) -&gt; a 是 above 的意思，在现有的 cell 上方新增一个 cell<br>Esc+b -&gt; b 是 below 的意思，在现有的 cell 下方新增一个 cell<br>Esc+h-&gt; h 是 help 的意思，能列出所有的快捷键</p>
<h3 id="问题"><a href="# 问题" class="headerlink" title="问题"></a>问题</h3><h4 id="1-The-TensorFlow-library-wasn’t-compiled-to-use-SSE-instructions"><a href="#1-The-TensorFlow-library-wasn’t-compiled-to-use-SSE-instructions" class="headerlink" title="1.The TensorFlow library wasn’t compiled to use SSE instructions,"></a>1.The TensorFlow library wasn’t compiled to use SSE instructions,</h4><p>but these are available on your machine and could speed up CPU computations.</p>
<p>遇到这个警告的原因是，你是使用例如 “pip install tensorflow” 这种方法安装的 Tensorflow，而不是从源码编译安装的。<br>这只是个警告，只是影响 cpu 计算速度而已。使用或者不使用 SSE 你的程序都是可以运行的。<br>此外，如果你是使用的 gpu 版本，在 gpu 上的运行是不受 SSE 影响的。</p>
<p>解决方法：在开始时加上<br><figure class="highlight moonscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="built_in">os</span></span><br><span class="line"><span class="built_in">os</span>.environ [<span class="string">&#x27;TF_CPP_MIN_LOG_LEVEL&#x27;</span>]=<span class="string">&#x27;2&#x27;</span></span><br></pre></td></tr></table></figure><br><a href="https://blog.csdn.net/tz_zs/article/details/75747603"></a></p>
<h4 id="2-Tensorflow- 版本问题"><a href="#2-Tensorflow- 版本问题" class="headerlink" title="2.Tensorflow 版本问题"></a>2.Tensorflow 版本问题</h4><p><a href="https://blog.csdn.net/u013894391/article/details/104513714">Tensorflow has no attribute ‘Session‘错误原因</a></p>
<h4 id="3-jupyter- 无法连接 -python- 服务"><a href="#3-jupyter- 无法连接 -python- 服务" class="headerlink" title="3.jupyter 无法连接 python 服务"></a>3.jupyter 无法连接 python 服务 </h4><p><a href="https://blog.csdn.net/weixin_44123583/article/details/114525774"> 解决 jupyter—notebook 无法连接 python 服务（无法连接内核），显示一直 IN [*]</a></p>
<h3 id="深度学习系列"><a href="# 深度学习系列" class="headerlink" title="深度学习系列"></a>深度学习系列 </h3><p><a href="https://wangxchun.github.io/2021/06/26/deep-learning-1/"> 深度学习 —（1）环境配置：Anaconda + Tensorflow</a></p>
]]></content>
      <categories>
        <category>大学课程-深度学习实作</category>
      </categories>
  </entry>
  <entry>
    <title>深度學習理論 -- （1）線性回歸</title>
    <url>/2021/06/27/deep-learning-theory-1/</url>
    <content><![CDATA[<span id="more"></span>]]></content>
      <categories>
        <category>大學課程-深度學習理論</category>
      </categories>
  </entry>
  <entry>
    <title>深度學習理論 -- （2）邏輯回歸</title>
    <url>/2021/06/27/deep-learning-theory-2/</url>
    <content><![CDATA[<span id="more"></span>]]></content>
      <categories>
        <category>大學課程-深度學習理論</category>
      </categories>
  </entry>
  <entry>
    <title>深度學習理論 -- （3）深度學習概述</title>
    <url>/2021/06/27/deep-learning-theory-3/</url>
    <content><![CDATA[<p>常見的深度學習架構，如多層感知器 (Multilayer Perceptron)、深度神經網路 DNN (Deep Neural Network)、卷積神經網路 CNN (Convolutional Neural Network)、遞迴神經網路 RNN (Recurrent Neural Network)。</p>
<h3 id="一、Deep-Learning"><a href="# 一、Deep-Learning" class="headerlink" title="一、Deep Learning"></a>一、Deep Learning</h3><h4 id="1-Neural-Network"><a href="#1-Neural-Network" class="headerlink" title="1.Neural Network"></a>1.Neural Network</h4><p>Fully Connect Feedforward Network<br>neural network 中神經元的函數稱爲 activation function（通常是非線性的），不一定要是 signoid<br><img src="/2021/06/27/deep-learning-theory-3/photo1.png" alt>-&gt; Matrix Operation<br>-&gt; 普通的 GPU 加速就是利用并行方式進行矩陣運算 <span id="more"></span></p>
<p>重點：How many layers? How many neurons for each layer?<br>deep learning 其實沒有比較簡單 <br> 只是把本來 feature transformation 的問題轉換成 design the network structure</p>
<h4 id="2-Goodness-of-Function"><a href="#2-Goodness-of-Function" class="headerlink" title="2.Goodness of Function"></a>2.Goodness of Function</h4><p>$C (y, y) = - $</p>
<p>$$</p>
<h4 id="3-Pick-the-Best-Function"><a href="#3-Pick-the-Best-Function" class="headerlink" title="3.Pick the Best Function"></a>3.Pick the Best Function</h4><p>利用 Gradient Descent 找到使得 Loss Function 最小值的點<br>Backpropagation: an efficient way to compute ${\partial L \over \partial W<br> }$ in neural network</p>
<h3 id="二、Backpropagation"><a href="# 二、Backpropagation" class="headerlink" title="二、Backpropagation"></a>二、Backpropagation</h3>]]></content>
      <categories>
        <category>大學課程-深度學習理論</category>
      </categories>
  </entry>
  <entry>
    <title>深度學習理論 -- （4）CNN</title>
    <url>/2021/06/27/deep-learning-theory-4/</url>
    <content><![CDATA[<span id="more"></span>]]></content>
      <categories>
        <category>大學課程-深度學習理論</category>
      </categories>
  </entry>
  <entry>
    <title>dos 使用</title>
    <url>/2018/10/27/dos-command/</url>
    <content><![CDATA[<h3 id="显示目录下的文件"><a href="# 显示目录下的文件" class="headerlink" title="显示目录下的文件"></a> 显示目录下的文件 </h3><p>dir 不带任何参数，等价于命令 dir/a-h-s，即显示除系统和隐藏属性外的文件和目录 <br>dir/a 显示的是当前路径下，所有的文件和目录（含只读，系统，隐藏，归档）<br><span id="more"></span><br>dir/ah 只显示当前路径下隐藏文件和目录 <br>dir/ad 只显示当前路径下的所有目录（含隐藏等其他属性，只要是目录就显示）</p>
<h3 id="Linux- 与 -Windows- 命令对比"><a href="#Linux- 与 -Windows- 命令对比" class="headerlink" title="Linux 与 Windows 命令对比"></a>Linux 与 Windows 命令对比 </h3><p><a href="https://blog.csdn.net/xzwspy/article/details/80183849">https://blog.csdn.net/xzwspy/article/details/80183849</a></p>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
      <tags>
        <tag>dos使用</tag>
        <tag>Linux与Windows命令对比</tag>
      </tags>
  </entry>
  <entry>
    <title>git 安装</title>
    <url>/2018/10/27/git%20install-git/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/ScottePerk/article/details/81571251">https://blog.csdn.net/ScottePerk/article/details/81571251</a></p>
<h3 id="git- 文章总览"><a href="#git- 文章总览" class="headerlink" title="git 文章总览"></a>git 文章总览 </h3><p><a href="https://wangxchun.github.io/2018/10/27/git%20install-git/">git 安装 </a></p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git安装</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo 中 Mathjax 的用法</title>
    <url>/2018/09/20/hexo%20Mathjax/</url>
    <content><![CDATA[<h3 id="Mathjax- 的安装"><a href="#Mathjax- 的安装" class="headerlink" title="Mathjax 的安装"></a>Mathjax 的安装 </h3><p> 在 hexo 中，你会发现我们不能用 Latex 语法来书写数学公式，这对于书写学术博客来说是很大的不便，因为我们会经常碰到很多的数学公式推导，但是我们可以通过安装第三方库来解决这一问题。<br><span id="more"></span></p>
<h4 id="第一步：- 使用 -Kramed- 代替 -Marked"><a href="# 第一步：- 使用 -Kramed- 代替 -Marked" class="headerlink" title="第一步： 使用 Kramed 代替 Marked"></a>第一步： 使用 Kramed 代替 Marked</h4><p>hexo 默认的渲染引擎是 marked，但是 marked 不支持 mathjax。 kramed 是在 marked 的基础上进行修改。我们在工程目录下执行以下命令来安装 kramed。<br><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked <span class="comment">--save</span></span><br><span class="line">npm install hexo-renderer-kramed <span class="comment">--save</span></span><br></pre></td></tr></table></figure></p>
<p>然后，更改 /node_modules/hexo-renderer-kramed/lib/renderer.js，更改：<br><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">// Change <span class="keyword">inline</span> math <span class="keyword">rule</span></span><br><span class="line"><span class="keyword">function</span> formatText (<span class="type">text</span>) &#123;</span><br><span class="line">    // Fit kramed<span class="string">&#x27;s rule: $$ + \1 + $$</span></span><br><span class="line"><span class="string">    return text.replace (/`\$(.*?)\$`/g, &#x27;</span>$$<span class="ruby"><span class="variable">$$</span></span><span class="meta">$1</span>$$<span class="ruby"><span class="variable">$$</span></span><span class="string">&#x27;);</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>为：<br><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">// Change <span class="keyword">inline</span> math <span class="keyword">rule</span></span><br><span class="line"><span class="keyword">function</span> formatText (<span class="type">text</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">text</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="第二步：停止使用 -hexo-math"><a href="# 第二步：停止使用 -hexo-math" class="headerlink" title="第二步：停止使用 hexo-math"></a>第二步：停止使用 hexo-math</h4><p>首先，如果你已经安装 hexo-math, 请卸载它：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-<span class="built_in">math</span> <span class="comment">--save</span></span><br></pre></td></tr></table></figure>
<p>然后安装 hexo-renderer-mathjax 包：<br><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-mathjax <span class="comment">--save</span></span><br></pre></td></tr></table></figure></p>
<h4 id="第三步：更新 -Mathjax- 的 -CDN- 链接"><a href="# 第三步：更新 -Mathjax- 的 -CDN- 链接" class="headerlink" title="第三步：更新 Mathjax 的 CDN 链接"></a>第三步：更新 Mathjax 的 CDN 链接 </h4><p> 首先，打开 /node_modules/hexo-renderer-mathjax/mathjax.html<br>然后，把 script 更改为：<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-MML-AM_CHTML&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h4 id="第四步：更改默认转义规则"><a href="# 第四步：更改默认转义规则" class="headerlink" title="第四步：更改默认转义规则"></a>第四步：更改默认转义规则 </h4><p> 因为 hexo 默认的转义规则会将一些字符进行转义，比如 _ 转为 <em>, 所以我们需要对默认的规则进行修改.<br>首先， 打开 /node_modules/kramed/lib/rules、inline.js</em></p>
<p>然后，把<br><figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">escape: /^<span class="symbol">\\</span>([<span class="symbol">\\</span>`*&#123;&#125;<span class="symbol">\[</span><span class="symbol">\]</span>()#$+<span class="symbol">\-</span>.!_&gt;])/,</span><br></pre></td></tr></table></figure></p>
<p>更改为：<br><figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">escape: /^<span class="symbol">\\</span>([`*<span class="symbol">\[</span><span class="symbol">\]</span>()# +<span class="symbol">\-</span>.!_&gt;])/,</span><br></pre></td></tr></table></figure></p>
<p>把<br><figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">em: /^<span class="symbol">\b</span>_((?:__|[<span class="symbol">\s</span><span class="symbol">\S</span>])+?)_<span class="symbol">\b</span>|^<span class="symbol">\*</span>((?:<span class="symbol">\*</span><span class="symbol">\*</span>|[<span class="symbol">\s</span><span class="symbol">\S</span>])+?)<span class="symbol">\*</span>(?!<span class="symbol">\*</span>)/,</span><br></pre></td></tr></table></figure></p>
<p>更改为:<br><figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">em: /^<span class="symbol">\*</span>((?:<span class="symbol">\*</span><span class="symbol">\*</span>|[<span class="symbol">\s</span><span class="symbol">\S</span>])+?)<span class="symbol">\*</span>(?!<span class="symbol">\*</span>)/,</span><br></pre></td></tr></table></figure></p>
<p>第五步：开启 mathjax<br>在主题 _config.yml 中开启 Mathjax， 找到 mathjax 字段添加如下代码：<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mathjax:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p>到博客根目录下，找到 themes/next/_config.yml，把 math 默认的 flase 修改为 true，具体如下：<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Math Equations Render Support</span></span><br><span class="line"><span class="attr">math:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">engine:</span> <span class="string">mathjax</span></span><br></pre></td></tr></table></figure></p>
<p>通过以上步骤，我们就可以在 hexo 中使用 Mathjax 来书写数学公式。</p>
<h3 id="语法使用"><a href="# 语法使用" class="headerlink" title="语法使用"></a>语法使用 </h3><h4 id="空格表示"><a href="# 空格表示" class="headerlink" title="空格表示"></a> 空格表示</h4><p><img src="/2018/09/20/hexo%20Mathjax/photo1.png" alt></p>
<h4 id="点乘、叉乘、除以"><a href="# 点乘、叉乘、除以" class="headerlink" title="点乘、叉乘、除以"></a>点乘、叉乘、除以 </h4><p> 点乘：a \cdot b<br>叉乘：a \times b<br>除以：a \div b</p>
<h4 id="对数"><a href="# 对数" class="headerlink" title="对数"></a>对数</h4><p>log 以 a 为底，以 x 为真数：\log_ax<br>log 以 e 为底，以 x 为真数：\ln x<br>log 以 10 为底，以 x 为真数：\lg x</p>
<h4 id="向下取整，向上取整"><a href="# 向下取整，向上取整" class="headerlink" title="向下取整，向上取整"></a>向下取整，向上取整 </h4><p> 向下取整：\lfloor x \rfloor<br>向上取整：\lceil x \rceil</p>
<h4 id="字母上有一横"><a href="# 字母上有一横" class="headerlink" title="字母上有一横"></a>字母上有一横</h4><p>\overline 能覆盖所有括号中的文本，\bar 长度只能覆盖一个字母。</p>
<h4 id="字母上一个帽子符号"><a href="# 字母上一个帽子符号" class="headerlink" title="字母上一个帽子符号"></a>字母上一个帽子符号</h4><p>\hat {Z}</p>
<h4 id="微积分常用符号"><a href="# 微积分常用符号" class="headerlink" title="微积分常用符号"></a>微积分常用符号</h4><p><img src="/2018/09/20/hexo%20Mathjax/photo2.png" alt></p>
<h4 id="大于等于号和小于等于号"><a href="# 大于等于号和小于等于号" class="headerlink" title="大于等于号和小于等于号"></a>大于等于号和小于等于号 </h4><p> 大于等于号：\geq<br>小于等于号：\leq</p>
<h4 id="矩阵"><a href="# 矩阵" class="headerlink" title="矩阵"></a>矩阵</h4><p><a href="https://blog.csdn.net/Mage_EE/article/details/75317083">https://blog.csdn.net/Mage_EE/article/details/75317083</a><br>\begin {matrix}<br>    1 &amp; x &amp; x^2 \\<br>    1 &amp; y &amp; y^2 \\<br>    1 &amp; z &amp; z^2 \\<br>\end {matrix}</p>
<h4 id="通过强制改变字体大小使得分子分母字体大小一致"><a href="# 通过强制改变字体大小使得分子分母字体大小一致" class="headerlink" title="通过强制改变字体大小使得分子分母字体大小一致"></a>通过强制改变字体大小使得分子分母字体大小一致</h4><p>\displaystyle<br><a href="https://blog.csdn.net/weixin_36670529/article/details/85256017">https://blog.csdn.net/weixin_36670529/article/details/85256017</a></p>
<h4 id="插入表格"><a href="# 插入表格" class="headerlink" title="插入表格"></a>插入表格 </h4><p><img src="/2018/09/20/hexo%20Mathjax/photo3.png" alt><br>| 姓名 | 爱好 |<br>—|—|<br> 张三 | 足球 &lt; br &gt; 篮球 <br> 李四 | 羽毛球 &lt; br &gt; 乒乓球<br><a href="https://blog.csdn.net/microcosmv/article/details/51868178">https://blog.csdn.net/microcosmv/article/details/51868178</a></p>
<h4 id="公式语法"><a href="# 公式语法" class="headerlink" title="公式语法"></a>公式语法</h4><p><a href="http://stevenshi.me/2017/06/26/hexo-insert-formula/">http://stevenshi.me/2017/06/26/hexo-insert-formula/</a><br><a href="https://www.szdev.com/blog/Hexo/mathjax-config-and-tutorial/">https://www.szdev.com/blog/Hexo/mathjax-config-and-tutorial/</a></p>
<h4 id="分段函数"><a href="# 分段函数" class="headerlink" title="分段函数"></a>分段函数</h4><figure class="highlight puppet"><table><tr><td class="code"><pre><span class="line"><span class="variable">$f</span> (n) =</span><br><span class="line">\<span class="keyword">begin</span> &#123;cases&#125;</span><br><span class="line"><span class="keyword">n</span>/2,  &amp; \<span class="keyword">text</span> &#123;<span class="keyword">if</span> <span class="variable">$n</span>$ is even&#125; \\</span><br><span class="line">3n+1, &amp; \<span class="keyword">text</span> &#123;<span class="keyword">if</span> <span class="variable">$n</span>$ is odd&#125;</span><br><span class="line">\<span class="keyword">end</span> &#123;cases&#125;$</span><br></pre></td></tr></table></figure>
<p>$f (n) =<br>\begin {cases}<br>n/2,  &amp; \text {if $n$ is even} \\<br>3n+1, &amp; \text {if $n$ is odd}<br>\end {cases}$<br>详细数学运算语法 <a href="https://blog.csdn.net/u010945683/article/details/46757757">https://blog.csdn.net/u010945683/article/details/46757757</a><br>详细罗马符号语法 <a href="https://blog.csdn.net/liyuanbhu/article/details/50636416">https://blog.csdn.net/liyuanbhu/article/details/50636416</a><br>详细语法 <a href="https://www.szdev.com/blog/Hexo/mathjax-config-and-tutorial/">https://www.szdev.com/blog/Hexo/mathjax-config-and-tutorial/</a><br>Markdown 学习笔记 <a href="http://pepcy.cf/Markdown-%">http://pepcy.cf/Markdown-%</a> E5% AD% A6% E4% B9% A0% E7% AC%94% E8% AE% B0/<br>Latex/MathJax/Katex 数学公式手册 <a href="https://fivecakes.com/math">https://fivecakes.com/math</a><br>公式语法 <a href="https://yichihuang.github.io/2015/03/30/mathjax/">https://yichihuang.github.io/2015/03/30/mathjax/</a></p>
<h4 id="LaTex- 中的任意以及存在符号以及"><a href="#LaTex- 中的任意以及存在符号以及" class="headerlink" title="LaTex 中的任意以及存在符号以及 {}"></a>LaTex 中的任意以及存在符号以及 {}</h4><p>(1) 任意<br><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="symbol">$</span> &#123;\forall&#125;<span class="symbol">$</span></span><br></pre></td></tr></table></figure><br>(2) 存在<br><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="symbol">$</span> &#123;\exists&#125;<span class="symbol">$</span></span><br></pre></td></tr></table></figure><br>(3) {}<br><figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line"><span class="symbol">\l</span>brace1,2,...,n<span class="symbol">\r</span>brace</span><br></pre></td></tr></table></figure></p>
<h3 id="表示平均"><a href="# 表示平均" class="headerlink" title="表示平均"></a>表示平均</h3><p>\overline 能覆盖所有括号中的文本，\bar 长度只能覆盖一个字母</p>
<h3 id="极限符号"><a href="# 极限符号" class="headerlink" title="极限符号"></a>极限符号</h3><figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">$<span class="string">\lim</span> <span class="string">\limits_&#123;x</span> <span class="string">\to</span> <span class="number">1</span>&#125; <span class="string">\frac</span> &#123;x^<span class="number">2</span>-<span class="number">1</span>&#125;&#123;x-<span class="number">1</span>&#125;$</span><br></pre></td></tr></table></figure>
<p>$\lim \limits_{x \to 1} \frac {x^2-1}{x-1}$</p>
<h3 id="hexo- 文章总览"><a href="#hexo- 文章总览" class="headerlink" title="hexo 文章总览"></a>hexo 文章总览 </h3><p><a href="https://wangxchun.github.io/2018/08/03/hexo%20reference-first-step-to-set-up-a-website/"> 參考：架設網站的第一步 </a><br><a href="https://wangxchun.github.io/2018/09/05/hexo%20cancel-auto-numbering-in-directory/"> 怎么取消文章目录中对标题的自动编号 </a><br><a href="https://wangxchun.github.io/2018/09/10/hexo%20set-Github-SSH-key/"> 設定 - Github-SSH - 金鑰 </a><br><a href="https://wangxchun.github.io/2018/09/13/hexo%20write-an-article/"> 撰写文章基本操作 </a><br><a href="https://wangxchun.github.io/2018/09/16/hexo%20publish-an-article/"> 如何在 hexo blog 中發表一篇文章 </a><br><a href="https://wangxchun.github.io/2018/09/16/hexo%20insert-a-photo-into-article/"> 在 hexo 文章中插入图片 </a><br><a href="https://wangxchun.github.io/2018/09/19/hexo%20directory-structure/">hexo 目錄結構</a><br><a href="https://wangxchun.github.io/2018/09/20/hexo%20Mathjax/">hexo 中 Mathjax 的用法</a><br><a href="https://wangxchun.github.io/2018/09/22/hexo%20space-between-chinese-and-english/"> 如何实现 hexo 文章中文和英文之间自动空格</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>文章</tag>
        <tag>Mathjax</tag>
      </tags>
  </entry>
  <entry>
    <title>怎么取消文章目录中对标题的自动编号</title>
    <url>/2018/09/05/hexo%20cancel-auto-numbering-in-directory/</url>
    <content><![CDATA[<p>修改主题配置文件_config.yml 那里的 number 为 false<br><span id="more"></span></p>
<h3 id="hexo- 文章总览"><a href="#hexo- 文章总览" class="headerlink" title="hexo 文章总览"></a>hexo 文章总览 </h3><p><a href="https://wangxchun.github.io/2018/08/03/hexo%20reference-first-step-to-set-up-a-website/"> 參考：架設網站的第一步 </a><br><a href="https://wangxchun.github.io/2018/09/05/hexo%20cancel-auto-numbering-in-directory/"> 怎么取消文章目录中对标题的自动编号 </a><br><a href="https://wangxchun.github.io/2018/09/10/hexo%20set-Github-SSH-key/"> 設定 - Github-SSH - 金鑰 </a><br><a href="https://wangxchun.github.io/2018/09/13/hexo%20write-an-article/"> 撰写文章基本操作 </a><br><a href="https://wangxchun.github.io/2018/09/16/hexo%20publish-an-article/"> 如何在 hexo blog 中發表一篇文章 </a><br><a href="https://wangxchun.github.io/2018/09/16/hexo%20insert-a-photo-into-article/"> 在 hexo 文章中插入图片 </a><br><a href="https://wangxchun.github.io/2018/09/19/hexo%20directory-structure/">hexo 目錄結構</a><br><a href="https://wangxchun.github.io/2018/09/20/hexo%20Mathjax/">hexo 中 Mathjax 的用法</a><br><a href="https://wangxchun.github.io/2018/09/22/hexo%20space-between-chinese-and-english/"> 如何实现 hexo 文章中文和英文之间自动空格</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>文章目录</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo 目錄結構</title>
    <url>/2018/09/19/hexo%20directory-structure/</url>
    <content><![CDATA[<p>.<br>├── node_modules  // 套件暫存處，基本上你所有安裝的套件也都會在這裡<br>├── public        // 執行 hexo generate 後，輸出的靜態網頁<br>├── scaffolds     // 模板。Hexo 會根據 scaffold 來建立新文章 / 新頁面<br>├── scripts       // 存放自定義 js 文件<br>├── source<br>|   ├── _drafts   // 草稿文章<br>|   └── _posts    // 發佈文章<br>├── themes        // Hexo 主题文件，Next 主題的樹狀結構請看下面<br>├── _config.yml   // 整個 Blog 的配置<br>├── .gitignore    // 舉凡只要你不想被加入版本控制甚至是上傳到 GitHub 的資料夾或檔案，都可寫在這<br>├── package-lock.json// 主要是記錄當前狀態安裝的每一個套件版本，他會自己調整，不需要動它<br>└── package.json  // 主要是放置並管理透過 npm 下載的檔案，其中部分指令也是直接寫在這裡面<br><span id="more"></span><br>.<br>└──themes<br>   └── next<br>          ├── doc<br>       ├── languages    // 主題語言字眼<br>       ├── layout       //pug 文件，後會渲染成 html<br>       ├── scripts      //js 文件<br>       ├── source<br>       |   ├── css      //styl 文件，後會渲染成 css<br>       |   ├── img      // 主題配置用到的圖片<br>       |   └── js       //js 文件<br>       ├── test<br>       └── _config.yml  // Butterfly 主題配置</p>
<p>試著學 Hexo 系列<br><a href="https://ithelp.ithome.com.tw/users/20119486/ironman/2944">https://ithelp.ithome.com.tw/users/20119486/ironman/2944</a></p>
<p>參考：<br><a href="https://ouoholly.github.io/post/my-custom-config-on-hexo-butterfly-theme/#%">https://ouoholly.github.io/post/my-custom-config-on-hexo-butterfly-theme/#%</a> E5%89%8D% E8% A8%80</p>
<h3 id="hexo- 文章总览"><a href="#hexo- 文章总览" class="headerlink" title="hexo 文章总览"></a>hexo 文章总览 </h3><p><a href="https://wangxchun.github.io/2018/08/03/hexo%20reference-first-step-to-set-up-a-website/"> 參考：架設網站的第一步 </a><br><a href="https://wangxchun.github.io/2018/09/05/hexo%20cancel-auto-numbering-in-directory/"> 怎么取消文章目录中对标题的自动编号 </a><br><a href="https://wangxchun.github.io/2018/09/10/hexo%20set-Github-SSH-key/"> 設定 - Github-SSH - 金鑰 </a><br><a href="https://wangxchun.github.io/2018/09/13/hexo%20write-an-article/"> 撰写文章基本操作 </a><br><a href="https://wangxchun.github.io/2018/09/16/hexo%20publish-an-article/"> 如何在 hexo blog 中發表一篇文章 </a><br><a href="https://wangxchun.github.io/2018/09/16/hexo%20insert-a-photo-into-article/"> 在 hexo 文章中插入图片 </a><br><a href="https://wangxchun.github.io/2018/09/19/hexo%20directory-structure/">hexo 目錄結構</a><br><a href="https://wangxchun.github.io/2018/09/20/hexo%20Mathjax/">hexo 中 Mathjax 的用法</a><br><a href="https://wangxchun.github.io/2018/09/22/hexo%20space-between-chinese-and-english/"> 如何实现 hexo 文章中文和英文之间自动空格</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>目錄結構</tag>
      </tags>
  </entry>
  <entry>
    <title>在 hexo 文章中插入图片</title>
    <url>/2018/09/16/hexo%20insert-a-photo-into-article/</url>
    <content><![CDATA[<h3 id="绝对路径"><a href="# 绝对路径" class="headerlink" title="绝对路径"></a>绝对路径 </h3><p> 当 Hexo 项目中只用到少量图片时，可以将图片统一放在 source/img 文件夹中<br><figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">![](<span class="regexp">/images/im</span>age.jpg)</span><br></pre></td></tr></table></figure><br><span id="more"></span></p>
<h3 id="相对路径"><a href="# 相对路径" class="headerlink" title="相对路径"></a>相对路径 </h3><p> 将_config.yml 文件中的配置项 post_asset_folder 设为 true 后，<br>执行命令 $ hexo new post_name，在 source/posts 中会生成文章 post_name.md 和同名文件夹 post_name。<br>将图片资源放在 post_name 中，文章就可以使用相对路径引用图片资源了。<br><figure class="highlight less"><table><tr><td class="code"><pre><span class="line">!<span class="selector-attr">[]</span>(image.jpg)</span><br></pre></td></tr></table></figure></p>
<h3 id="如果希望图片在文章和首页中同时显示，可以使用标签插件语法"><a href="# 如果希望图片在文章和首页中同时显示，可以使用标签插件语法" class="headerlink" title="如果希望图片在文章和首页中同时显示，可以使用标签插件语法"></a>如果希望图片在文章和首页中同时显示，可以使用标签插件语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="hexo- 文章总览"><a href="#hexo- 文章总览" class="headerlink" title="hexo 文章总览"></a>hexo 文章总览 </h3><p><a href="https://wangxchun.github.io/2018/08/03/hexo%20reference-first-step-to-set-up-a-website/"> 參考：架設網站的第一步 </a><br><a href="https://wangxchun.github.io/2018/09/05/hexo%20cancel-auto-numbering-in-directory/"> 怎么取消文章目录中对标题的自动编号 </a><br><a href="https://wangxchun.github.io/2018/09/10/hexo%20set-Github-SSH-key/"> 設定 - Github-SSH - 金鑰 </a><br><a href="https://wangxchun.github.io/2018/09/13/hexo%20write-an-article/"> 撰写文章基本操作 </a><br><a href="https://wangxchun.github.io/2018/09/16/hexo%20publish-an-article/"> 如何在 hexo blog 中發表一篇文章 </a><br><a href="https://wangxchun.github.io/2018/09/16/hexo%20insert-a-photo-into-article/"> 在 hexo 文章中插入图片 </a><br><a href="https://wangxchun.github.io/2018/09/19/hexo%20directory-structure/">hexo 目錄結構</a><br><a href="https://wangxchun.github.io/2018/09/20/hexo%20Mathjax/">hexo 中 Mathjax 的用法</a><br><a href="https://wangxchun.github.io/2018/09/22/hexo%20space-between-chinese-and-english/"> 如何实现 hexo 文章中文和英文之间自动空格</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>文章</tag>
        <tag>插入图片</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在 hexo 文章中插入 pdf 文件</title>
    <url>/2021/04/29/hexo%20pdf-file/</url>
    <content><![CDATA[<h3 id="利用 -html- 语法"><a href="# 利用 -html- 语法" class="headerlink" title="利用 html 语法"></a>利用 html 语法 </h3><p> 首先修改_config.yml 文件</p>
<p>将_config.yml 中的 post_asset_folder 选项置为 true</p>
<p>post_asset_folder: true</p>
<p>关于这个选项的功能说明如下:</p>
<p>当您设置 post_asset_folder 为 true 参数后，在建立文件时，Hexo 会自动建立一个与文章同名的文件夹，您可以把与该文章相关的所有资源都放到那个文件夹，如此一来，您便可以更方便的使用资源。</p>
<p>然后新建一篇文章</p>
<p>$ hexo new</p>
<p>由于上一步已经将 post_asset_folder 选项设为了 true 所以这一步新建文章时会创建一个 md 文件和一个同名的文件夹 为了方便叙述，我用 test 作为文件和文件夹名</p>
<p>编辑 test.md</p>
<p>用 vim 或者别的编辑器打开 test.md</p>
<p>test.md 文件中加入如下代码</p>
<p><object data="./test/test.pdf" type="application/pdf" width="100%" height="100%"><br>data 表示你要上传的 pdf 的路径，使用相对路径，将你要上传的 pdf 放入第二步生成的 test 文件夹。<br>这里注意 height 不能设成 100%，不然太矮了，显示效果不好 可以用浏览器预览，通过 F12 预估一下高度。</object></p>
<p>例如：</p>
<object data="./test/test.pdf" type="application/pdf" width="100%" height="877px">

<p>这里不一定非用 object 标签，embed、iframe 标签也一样</p>
</object>]]></content>
      <categories>
        <category>hexo</category>
      </categories>
  </entry>
  <entry>
    <title>如何在 hexo blog 中發表一篇文章</title>
    <url>/2018/09/16/hexo%20publish-an-article/</url>
    <content><![CDATA[<h3 id="新建一篇文章"><a href="# 新建一篇文章" class="headerlink" title="新建一篇文章"></a>新建一篇文章</h3><p>(1) 在 hexo blog 目錄下，進入 cmd，輸入以下命令：<br><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="string">&quot; 文章名稱 &quot;</span></span><br></pre></td></tr></table></figure><br><span id="more"></span></p>
<p>(2) 在 blog 目錄下的 /source/_posts/ 資料夾下，可以看到生成的 blog 文章（文章名稱.md）<br>(3) 在.md 檔案中編輯自己的文章即可 <br> 注意：Hexo 發表的文章是 Markdown 格式的檔案</p>
<h3 id="Hexo- 使用的 -Markdown- 語法及 -NEXT- 的 -Tags"><a href="#Hexo- 使用的 -Markdown- 語法及 -NEXT- 的 -Tags" class="headerlink" title="Hexo 使用的 Markdown 語法及 NEXT 的 Tags"></a>Hexo 使用的 Markdown 語法及 NEXT 的 Tags</h3><p><a href="https://blog.akizukineko.tw/hexo-new-NEXT-tags/">https://blog.akizukineko.tw/hexo-new-NEXT-tags/</a></p>
<h3 id="配图"><a href="# 配图" class="headerlink" title="配图"></a>配图 </h3><p> 画图工具 <br><a href="https://www.jianshu.com/p/8b91ef578bca">https://www.jianshu.com/p/8b91ef578bca</a><br> 配图指南<br><a href="https://draveness.me/sketch-and-sketch/">https://draveness.me/sketch-and-sketch/</a></p>
<h3 id="让你的文章可以被搜寻引擎找到"><a href="# 让你的文章可以被搜寻引擎找到" class="headerlink" title="让你的文章可以被搜寻引擎找到"></a>让你的文章可以被搜寻引擎找到 </h3><p> 基础配置 <br><a href="https://augustushsu.github.io/2019/12/14/hexo-03/">https://augustushsu.github.io/2019/12/14/hexo-03/</a><br><a href="https://mikolaje.github.io/2019/hexo_seo.html">https://mikolaje.github.io/2019/hexo_seo.html</a><br><a href="https://jenifers001d.github.io/2019/12/09/SEO/SEO1-Website-is-Not-Showing-in-Google-Search/">https://jenifers001d.github.io/2019/12/09/SEO/SEO1-Website-is-Not-Showing-in-Google-Search/</a><br> 新版 Search Console 索引涵蓋範圍 4 種狀態大解析 (下)<br><a href="https://medium.com/@elan24384/seo-%">https://medium.com/@elan24384/seo-%</a> E6%96% B0% E7%89%88search-console-% E7% B4% A2% E5% BC%95% E6% B6% B5% E8%93%8B% E7% AF%84% E5%9C%8D4% E7% A8% AE% E7%8B%80% E6%85%8B% E5% A4% A7% E8% A7% A3% E6%9E%90-% E4% B8%8B-5e75711bccc</p>
<h3 id="hexo- 文章总览"><a href="#hexo- 文章总览" class="headerlink" title="hexo 文章总览"></a>hexo 文章总览 </h3><p><a href="https://wangxchun.github.io/2018/08/03/hexo%20reference-first-step-to-set-up-a-website/"> 參考：架設網站的第一步 </a><br><a href="https://wangxchun.github.io/2018/09/05/hexo%20cancel-auto-numbering-in-directory/"> 怎么取消文章目录中对标题的自动编号 </a><br><a href="https://wangxchun.github.io/2018/09/10/hexo%20set-Github-SSH-key/"> 設定 - Github-SSH - 金鑰 </a><br><a href="https://wangxchun.github.io/2018/09/13/hexo%20write-an-article/"> 撰写文章基本操作 </a><br><a href="https://wangxchun.github.io/2018/09/16/hexo%20publish-an-article/"> 如何在 hexo blog 中發表一篇文章 </a><br><a href="https://wangxchun.github.io/2018/09/16/hexo%20insert-a-photo-into-article/"> 在 hexo 文章中插入图片 </a><br><a href="https://wangxchun.github.io/2018/09/19/hexo%20directory-structure/">hexo 目錄結構</a><br><a href="https://wangxchun.github.io/2018/09/20/hexo%20Mathjax/">hexo 中 Mathjax 的用法</a><br><a href="https://wangxchun.github.io/2018/09/22/hexo%20space-between-chinese-and-english/"> 如何实现 hexo 文章中文和英文之间自动空格</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>文章</tag>
        <tag>發表文章</tag>
      </tags>
  </entry>
  <entry>
    <title>參考：架設網站的第一步</title>
    <url>/2018/08/03/hexo%20reference-first-step-to-set-up-a-website/</url>
    <content><![CDATA[<p>從零開始：使用 npm 套件 <br><a href="https://medium.com/html-test/%">https://medium.com/html-test/%</a> E5% BE%9E% E9%9B% B6% E9%96%8B% E5% A7%8B-% E4% BD% BF% E7%94% A8npm% E5% A5%97% E4% BB% B6-317beefdf182<br> 介紹 npm 的概念與使用，可以與使用 hexo 的經驗和架構結合參考<br><span id="more"></span></p>
<h3 id="hexo- 文章总览"><a href="#hexo- 文章总览" class="headerlink" title="hexo 文章总览"></a>hexo 文章总览 </h3><p><a href="https://wangxchun.github.io/2018/08/03/hexo%20reference-first-step-to-set-up-a-website/"> 參考：架設網站的第一步 </a><br><a href="https://wangxchun.github.io/2018/09/05/hexo%20cancel-auto-numbering-in-directory/"> 怎么取消文章目录中对标题的自动编号 </a><br><a href="https://wangxchun.github.io/2018/09/10/hexo%20set-Github-SSH-key/"> 設定 - Github-SSH - 金鑰 </a><br><a href="https://wangxchun.github.io/2018/09/13/hexo%20write-an-article/"> 撰写文章基本操作 </a><br><a href="https://wangxchun.github.io/2018/09/16/hexo%20publish-an-article/"> 如何在 hexo blog 中發表一篇文章 </a><br><a href="https://wangxchun.github.io/2018/09/16/hexo%20insert-a-photo-into-article/"> 在 hexo 文章中插入图片 </a><br><a href="https://wangxchun.github.io/2018/09/19/hexo%20directory-structure/">hexo 目錄結構</a><br><a href="https://wangxchun.github.io/2018/09/20/hexo%20Mathjax/">hexo 中 Mathjax 的用法</a><br><a href="https://wangxchun.github.io/2018/09/22/hexo%20space-between-chinese-and-english/"> 如何实现 hexo 文章中文和英文之间自动空格</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>npm</tag>
        <tag>网站</tag>
      </tags>
  </entry>
  <entry>
    <title>設定 Github SSH 金鑰</title>
    <url>/2018/09/10/hexo%20set-Github-SSH-key/</url>
    <content><![CDATA[<p>設定 Github SSH 金鑰<br><a href="https://ithelp.ithome.com.tw/articles/10205988">https://ithelp.ithome.com.tw/articles/10205988</a><br><span id="more"></span></p>
<p>ssh-keygen 常用命令与参数<br><a href="https://p3terx.com/archives/ssh-keygen-common-parameters.html">https://p3terx.com/archives/ssh-keygen-common-parameters.html</a></p>
<h3 id="hexo- 文章总览"><a href="#hexo- 文章总览" class="headerlink" title="hexo 文章总览"></a>hexo 文章总览 </h3><p><a href="https://wangxchun.github.io/2018/08/03/hexo%20reference-first-step-to-set-up-a-website/"> 參考：架設網站的第一步 </a><br><a href="https://wangxchun.github.io/2018/09/05/hexo%20cancel-auto-numbering-in-directory/"> 怎么取消文章目录中对标题的自动编号 </a><br><a href="https://wangxchun.github.io/2018/09/10/hexo%20set-Github-SSH-key/"> 設定 - Github-SSH - 金鑰 </a><br><a href="https://wangxchun.github.io/2018/09/13/hexo%20write-an-article/"> 撰写文章基本操作 </a><br><a href="https://wangxchun.github.io/2018/09/16/hexo%20publish-an-article/"> 如何在 hexo blog 中發表一篇文章 </a><br><a href="https://wangxchun.github.io/2018/09/16/hexo%20insert-a-photo-into-article/"> 在 hexo 文章中插入图片 </a><br><a href="https://wangxchun.github.io/2018/09/19/hexo%20directory-structure/">hexo 目錄結構</a><br><a href="https://wangxchun.github.io/2018/09/20/hexo%20Mathjax/">hexo 中 Mathjax 的用法</a><br><a href="https://wangxchun.github.io/2018/09/22/hexo%20space-between-chinese-and-english/"> 如何实现 hexo 文章中文和英文之间自动空格</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>SSH</tag>
        <tag>金鑰</tag>
      </tags>
  </entry>
  <entry>
    <title>如何实现 hexo 文章中文和英文之间自动空格</title>
    <url>/2018/09/22/hexo%20space-between-chinese-and-english/</url>
    <content><![CDATA[<p>安装插件 <br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">npm install hexo-<span class="attribute">filter</span>-<span class="attribute">auto</span>-spacing --save</span><br></pre></td></tr></table></figure><br> 并在_config.yml 文件中设置 auto_spacing，设置 enable: false<br><span id="more"></span></p>
<p>另外一个插件 hexo-pangu-spacing 是有 BUG 的，比如你引用文章的时候的文章的网址里面有中文和英文，这个时候它也会把它给隔开。<br>所以就用 hexo-filter-auto-spacing 吧。</p>
<h3 id="hexo- 文章总览"><a href="#hexo- 文章总览" class="headerlink" title="hexo 文章总览"></a>hexo 文章总览 </h3><p><a href="https://wangxchun.github.io/2018/08/03/hexo%20reference-first-step-to-set-up-a-website/"> 參考：架設網站的第一步 </a><br><a href="https://wangxchun.github.io/2018/09/05/hexo%20cancel-auto-numbering-in-directory/"> 怎么取消文章目录中对标题的自动编号 </a><br><a href="https://wangxchun.github.io/2018/09/10/hexo%20set-Github-SSH-key/"> 設定 - Github-SSH - 金鑰 </a><br><a href="https://wangxchun.github.io/2018/09/13/hexo%20write-an-article/"> 撰写文章基本操作 </a><br><a href="https://wangxchun.github.io/2018/09/16/hexo%20publish-an-article/"> 如何在 hexo blog 中發表一篇文章 </a><br><a href="https://wangxchun.github.io/2018/09/16/hexo%20insert-a-photo-into-article/"> 在 hexo 文章中插入图片 </a><br><a href="https://wangxchun.github.io/2018/09/19/hexo%20directory-structure/">hexo 目錄結構</a><br><a href="https://wangxchun.github.io/2018/09/20/hexo%20Mathjax/">hexo 中 Mathjax 的用法</a><br><a href="https://wangxchun.github.io/2018/09/22/hexo%20space-between-chinese-and-english/"> 如何实现 hexo 文章中文和英文之间自动空格</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>文章</tag>
        <tag>空格</tag>
      </tags>
  </entry>
  <entry>
    <title>撰写文章基本操作</title>
    <url>/2018/09/13/hexo%20write-an-article/</url>
    <content><![CDATA[<h4 id="加入链结"><a href="# 加入链结" class="headerlink" title="加入链结"></a>加入链结</h4><figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">[链接名称](链接地址)</span><br></pre></td></tr></table></figure>
<p><a href="https://www.google.com.tw/">google</a><br><span id="more"></span></p>
<h4 id="加入引用"><a href="# 加入引用" class="headerlink" title="加入引用"></a>加入引用</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; 引用 1</span><br></pre></td></tr></table></figure>
<blockquote>
<p>引用 1</p>
</blockquote>
<h4 id="改变文字颜色和大小"><a href="# 改变文字颜色和大小" class="headerlink" title="改变文字颜色和大小"></a>改变文字颜色和大小</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;Crimson&quot;</span> <span class="attr">size</span>=<span class="string">&quot;2&quot;</span>&gt;</span> 颜色 <span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">code</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;Crimson&quot;</span> <span class="attr">size</span>=<span class="string">&quot;3&quot;</span>&gt;</span> 大小 <span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><font color="Crimson" size="2"> 颜色 </font><br><code><font color="Crimson" size="3"> 大小 </font></code></p>
<h4 id="加入代码"><a href="# 加入代码" class="headerlink" title="加入代码"></a>加入代码</h4><h4 id="hexo-fluid- 添加 -utterances- 评论功能"><a href="#hexo-fluid- 添加 -utterances- 评论功能" class="headerlink" title="hexo-fluid 添加 utterances 评论功能"></a>hexo-fluid 添加 utterances 评论功能</h4><p><a href="https://blog.csdn.net/weixin_43641850/article/details/105284634">https://blog.csdn.net/weixin_43641850/article/details/105284634</a><br><a href="http://chaih.com/2021/02/04/utterances-comment-for-Hexo-theme-nexT/">http://chaih.com/2021/02/04/utterances-comment-for-Hexo-theme-nexT/</a></p>
<h3 id="hexo- 文章总览"><a href="#hexo- 文章总览" class="headerlink" title="hexo 文章总览"></a>hexo 文章总览 </h3><p><a href="https://wangxchun.github.io/2018/08/03/hexo%20reference-first-step-to-set-up-a-website/"> 參考：架設網站的第一步 </a><br><a href="https://wangxchun.github.io/2018/09/05/hexo%20cancel-auto-numbering-in-directory/"> 怎么取消文章目录中对标题的自动编号 </a><br><a href="https://wangxchun.github.io/2018/09/10/hexo%20set-Github-SSH-key/"> 設定 - Github-SSH - 金鑰 </a><br><a href="https://wangxchun.github.io/2018/09/13/hexo%20write-an-article/"> 撰写文章基本操作 </a><br><a href="https://wangxchun.github.io/2018/09/16/hexo%20publish-an-article/"> 如何在 hexo blog 中發表一篇文章 </a><br><a href="https://wangxchun.github.io/2018/09/16/hexo%20insert-a-photo-into-article/"> 在 hexo 文章中插入图片 </a><br><a href="https://wangxchun.github.io/2018/09/19/hexo%20directory-structure/">hexo 目錄結構</a><br><a href="https://wangxchun.github.io/2018/09/20/hexo%20Mathjax/">hexo 中 Mathjax 的用法</a><br><a href="https://wangxchun.github.io/2018/09/22/hexo%20space-between-chinese-and-english/"> 如何实现 hexo 文章中文和英文之间自动空格</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>文章</tag>
        <tag>基本操作</tag>
      </tags>
  </entry>
  <entry>
    <title>历史 -- （1）欧洲简史</title>
    <url>/2019/07/06/history-europe/</url>
    <content><![CDATA[<p>395 年，迪奥多西一世将帝国分给两个儿子，分裂成东西罗马帝国</p>
<p>公元 5 世纪，北方的日尔曼民族向南方入侵</p>
<p>西：法兰克人 <br> 东：查士丁尼</p>
<p>阿拉伯人占领东罗马帝国很多地区</p>
<p>公元 8 世纪末，法兰克王国的查理大帝向东扩张 -&gt; 三个孙子签订凡尔登条约<br><span id="more"></span><br>962 年，奥托大帝在东法兰克的基础上进行扩张，建立神圣罗马帝国</p>
<p>突厥人入侵欧洲东部，征服巴格达，建立苏丹帝国</p>
<p>-&gt; 十字军东征</p>
<p>1202 年，第四次十字军东征导致东罗马帝国灭亡，拉丁帝国建立</p>
<p>1240 年，蒙古金帐汗国入侵基辅罗斯，且苏丹王国和阿拉伯王国消亡</p>
<p>1281 年，奥斯曼帝国成立</p>
<p>1337 年，英法百年战争</p>
<p>1453 年，奥斯曼帝国攻占君士坦丁堡</p>
<p>1480 年，莫斯科公国推翻蒙古异族统治</p>
<p>奥斯曼帝国扩张，神圣罗马帝国衰微</p>
<p>1618 年，三十年战争爆发，神圣罗马帝国彻底灭亡</p>
<p>1707 年，英国完成统一</p>
<p>普鲁士在腓特烈二世的手中兴起</p>
<p>1799 年拿破仑上台，扩大了法国的领土<br>1813 年，远征俄国失败，欧洲召开维也纳会议，德意志联邦成立</p>
<p>意大利统一</p>
<p>奥匈帝国成立</p>
<p>铁血宰相俾斯麦统一德国</p>
<h3 id="历史系列文章"><a href="# 历史系列文章" class="headerlink" title="历史系列文章"></a>历史系列文章 </h3><p><a href="https://wangxchun.github.io/2019/07/06/history-europe/"> 历史 — （1）欧洲简史 </a><br><a href="https://wangxchun.github.io/2019/07/08/history-russia/"> 历史 — （2）俄国简史 </a><br><a href="https://wangxchun.github.io/2019/07/10/history-germany/"> 历史 — （3）德国简史 </a><br><a href="https://wangxchun.github.io/2019/07/15/history-venice/"> 历史 — （4）威尼斯和第四次十字军东征</a></p>
]]></content>
      <categories>
        <category>历史</category>
      </categories>
      <tags>
        <tag>历史</tag>
        <tag>欧洲简史</tag>
        <tag>日尔曼</tag>
        <tag>十字军东征</tag>
        <tag>奥斯曼帝国</tag>
        <tag>君士坦丁堡</tag>
        <tag>英法百年战争</tag>
        <tag>三十年战争</tag>
        <tag>腓特烈二世</tag>
      </tags>
  </entry>
  <entry>
    <title>历史 -- （3）德国简史</title>
    <url>/2019/07/10/history-germany/</url>
    <content><![CDATA[<h3 id="神圣罗马帝国"><a href="# 神圣罗马帝国" class="headerlink" title="神圣罗马帝国"></a>神圣罗马帝国 </h3><p> 西中东法兰克王国，分别奠定了如今法兰西，意大利，德意志的雏形</p>
<p>东法兰克王国在 919 年更名为德意志王国</p>
<p>962 年，奥托大帝在东法兰克的基础上进行扩张，建立神圣罗马帝国</p>
<p>位于欧洲东部的国家成为欧洲列强的跑马场 <br><span id="more"></span><br> 亨利一世的儿子奥托一世过分强调意大利方向的扩张</p>
<p>直到霍亨陶芬王朝的佛里德里希一世时期，红胡子巴巴罗萨，神圣罗马帝国巅峰，但是忽略了德意志内部的中央集权。为了赢得诸侯支持向意大利扩展，提高了封建主的独立性，最终导致帝国名存实亡。</p>
<p>补充：<br>[从奥托一世开始，向教皇取得罗马皇帝的称号。直到在 1073 年，教皇格里高利七世不经皇帝同意登上教皇宝座。</p>
<p>引起神圣罗马帝国皇帝亨利四世的不满，命教皇退位，教皇开除亨利四世教籍，废除其帝位，国内封建主趁机相应号召。]</p>
<p>奥托一世 -&gt; 亨利四世 -&gt; 红胡子巴巴罗萨</p>
<p>德意志王国四分五裂</p>
<p>13 世纪，霍亨斯陶芬王朝垮台后，德意志王权彻底衰弱</p>
<p>被教皇压迫，充当周围列强代理人自相残杀了两百多年后，马丁路德的宗教改革</p>
<p>-&gt;1618 年三十年战争，德国失去大量领土，法国获得阿尔萨斯和洛林，整个德国四分五裂</p>
<p>德国人为了生存，把自己卖给外国人，成为雇佣兵，在德国的领域为列强而战</p>
<p>1806 年，在法国皇帝拿破仑的逼迫下，奥地利皇帝佛朗兹二世放弃神圣罗马帝国皇帝的称号，神圣罗马帝国灭亡</p>
<p>席勒，歌德</p>
<p>率先走出这一步的是一个被视为蛮荒和弱小的东方小邦：普鲁士</p>
<h3 id="普鲁士"><a href="# 普鲁士" class="headerlink" title="普鲁士"></a>普鲁士 </h3><h4 id="普鲁士公国"><a href="# 普鲁士公国" class="headerlink" title="普鲁士公国"></a> 普鲁士公国 </h4><p> 普鲁士的国家核心是勃兰登堡和普鲁士</p>
<p>1618 年，霍亨索伦家族的勃兰登堡选帝侯继承了普鲁士的王位，这两个平行发展的邦国终于产生了交汇</p>
<p>(1417 年，德意志帝国正式把勃兰登堡和选侯爵位，赐予霍亨索伦家族的腓特烈一世，开始了霍亨索伦家族对勃兰登堡的统治)</p>
<p>1640 年，腓特烈。威廉 (大选帝侯) 继位成为选帝侯 <br> 面临经过三世年战争的断壁残垣，国内的贵族、容克、分离主义和国外的强权让新国王的声音衰弱<br>(1) 必须拥有一支独立且听命于自己的强悍常备军<br>(2) 利用帝国分裂，建立在本邦国内中央集权的君主专制，并在帝国范围内扩大影响</p>
<p>建立君主专制，与国内容客们达成和解 <br> 容客们成为了大选帝侯统治的阶级基础，也称为霍亨索伦家族在德意志的重要力量 <br> 官僚集团和军官集团成为普鲁士君主国的两大支柱</p>
<p>普鲁士从波兰的控制中解放出来</p>
<h4 id="普鲁士王国"><a href="# 普鲁士王国" class="headerlink" title="普鲁士王国"></a>普鲁士王国 </h4><p> 在大选帝侯的儿子执政时期，普鲁士从神圣罗马帝国皇帝获得了普鲁士王国的称谓，成为了神圣罗马帝国除德意志王国和波西米亚王国之后的第三个王国</p>
<p>大选帝侯的孙子腓特烈・威廉一世 (士兵王) 吝啬粗暴，深知自己的力量来源于军队，为继承者留下一支强悍的军队</p>
<p>士兵王的儿子腓特烈二世 (腓特烈大帝) 继位后发动对奥地利 (哈布斯堡强权) 的战争 <br> 普奥争霸的两强并立局面形成</p>
<p>七年战争：普鲁士 (加上英国远程撒币支援) vs 俄国、奥地利、法国，之后在向往普鲁士的俄国沙皇彼得三世 (彼得大帝的孙子) 登基之后 (心目中留着奶和蜜的土地) 扭转情势。</p>
<p>七年战争后，油尽灯枯的普鲁士和腓特烈大帝开始了國家重建</p>
<p>1799 年，拿破仑战争爆发，阻碍了德意志统一的步调 <br> 这场战争让德意志人意识到能阻挡并战争法兰西的不是普鲁士不是奥地利，而是德意志<br>1814 年拿破仑战争结束，以奥地利首相梅特为首的外交家需要一个分裂的德国 (作为缓冲区)<br>19 世纪上半叶，被称为梅特涅的时代，德意志统一的脚步再度遭到遏制</p>
<p>李斯特提出关税同盟，在政治统一之前率先实现经济统一，加快恢复國家贸易和民族工业 <br> 同时，以普鲁士为中心的铁路网在德意志内建立</p>
<h3 id="铁血宰相 - 俾斯麦"><a href="# 铁血宰相 - 俾斯麦" class="headerlink" title="铁血宰相 - 俾斯麦"></a>铁血宰相 - 俾斯麦 </h3><p>1888 年，德意志帝国的开国皇帝威廉一世离开人世<br> 威廉一世 -&gt; 腓特烈三世 -&gt; 威廉二世</p>
<h3 id="历史系列文章"><a href="# 历史系列文章" class="headerlink" title="历史系列文章"></a>历史系列文章 </h3><p><a href="https://wangxchun.github.io/2019/07/06/history-europe/"> 历史 — （1）欧洲简史 </a><br><a href="https://wangxchun.github.io/2019/07/08/history-russia/"> 历史 — （2）俄国简史 </a><br><a href="https://wangxchun.github.io/2019/07/10/history-germany/"> 历史 — （3）德国简史 </a><br><a href="https://wangxchun.github.io/2019/07/15/history-venice/"> 历史 — （4）威尼斯和第四次十字军东征</a></p>
]]></content>
      <categories>
        <category>历史</category>
      </categories>
      <tags>
        <tag>历史</tag>
        <tag>三十年战争</tag>
        <tag>德国简史</tag>
        <tag>德国</tag>
        <tag>神圣罗马帝国</tag>
        <tag>普鲁士</tag>
        <tag>霍亨索伦家族</tag>
        <tag>勃兰登堡</tag>
        <tag>红胡子</tag>
        <tag>巴巴罗萨</tag>
      </tags>
  </entry>
  <entry>
    <title>历史 -- （2）俄国简史</title>
    <url>/2019/07/08/history-russia/</url>
    <content><![CDATA[<h4 id="伊凡时期"><a href="# 伊凡时期" class="headerlink" title="伊凡时期"></a>伊凡时期 </h4><p> 古斯拉夫人在公元 1 世纪，就已生存在奥德河到第聂伯河的区域</p>
<p>诺曼人留里克建立的基辅罗斯公国 -&gt; 蒙古西征</p>
<p>基辅罗斯公国强迫全民东正教洗礼，本是为了拉近和基督教国家的距离</p>
<p>罗马公教（天主教）和希腊正教（东正教）<br><span id="more"></span><br>金帐汗国扫荡旧贵族体系</p>
<p>难民 -&gt; 莫斯科公国</p>
<p>伊凡一世</p>
<p>钱袋 戏精 伊凡一世，莫斯科成为宗教政治金融中心</p>
<p>莫斯科公国独立，脱离异族统治</p>
<p>1462 年，留里克王朝的伊凡三世，迎娶东罗马帝国的索菲亚公主</p>
<p>罗马帝国的双头鹰徽刻在克林姆林宫</p>
<p>瓦斯里 全俄罗斯君主的君主</p>
<p>伊凡四世 雷帝 成为俄国第一位沙皇（凯撒），改革</p>
<p>扩张，满足对土地的需求，但是滑向农奴制的深渊</p>
<p>大杀大贵族，恐怖伊凡</p>
<p>伊凡四世离开，俄国陷入百年混乱</p>
<h3 id="彼得一世时期"><a href="# 彼得一世时期" class="headerlink" title="彼得一世时期"></a>彼得一世时期 </h3><p> 罗曼诺夫王朝，彼得一世发动政变软禁兄长，开始亲政。接手时俄国遭遇内忧外患，留里克王朝伊凡雷帝时期的强悍国力被百年时光冲刷殆尽。</p>
<p>此时西欧在新航路和工业革命</p>
<p>出海口，军队 -&gt; 必须学习西方</p>
<p>想要拿到黑海出海口，但是在 1878 俄土战争中遭到奥斯曼帝国痛击</p>
<p>1697 年，使团出访欧洲</p>
<p>联系欧陆诸国，合纵攻瑞</p>
<p>残忍快速平定叛乱</p>
<p>开始大刀阔斧的改革</p>
<p>1700 年，发动对瑞典的战争，遭到瑞典痛击。军事改革，废除贵族服役的制度，改为面向农奴的征兵制</p>
<p>1709 年，俄国再次和瑞典交锋，俄国大获全胜</p>
<p>1721 年，北方大战</p>
<p>重新建立首都，圣彼得堡</p>
<p>彼得一世 - 全俄罗斯大帝</p>
<p>俄国 -&gt; 俄罗斯帝国</p>
<p>1725 年彼得一世去世，留下一个空前强大，但是在精神上却失去平衡的瑞罗斯帝国</p>
<p>此时执掌帝国的是彼得大帝的女儿伊丽莎白女皇</p>
<h3 id="叶卡捷琳娜"><a href="# 叶卡捷琳娜" class="headerlink" title="叶卡捷琳娜"></a>叶卡捷琳娜 </h3><p> 彼得大帝死后，没有沙皇有勇气和能力继续，首都迁回莫斯科</p>
<p>一位来自圣彼得堡的信使敲开了柏林一位落败公爵的大门</p>
<p>此时执掌帝国的是彼得大帝的女儿伊丽莎白女皇</p>
<p>通过社交和妥协，不露锋芒的强化君主制度</p>
<p>女皇的外甥彼得，生长于德国，甚至不会说俄语</p>
<p>全心全意的帮助叔叔腓特烈二世</p>
<p>索菲亚公主家中败落，不会形成对俄国的外戚势力</p>
<p>苦学俄语和东正教礼仪，皈依东正教，改名叶卡捷琳娜</p>
<p>此时俄国已经在七年战争中与普鲁士浴血拼杀</p>
<p>伊丽莎白女皇去世，彼得三世命令俄国放弃七年战争所获得的一切，并与普鲁士结盟</p>
<p>1762 年，在禁卫军的拥护下，废掉丈夫，登基为叶卡捷琳娜二世</p>
<p>启蒙运动正风行欧洲大陆，民主和法制观念，君主立宪制</p>
<p>“开明专制”，有德国血统，没有俄国根基，自觉成为贵族与封建地主的保护者和代言人</p>
<p>相对自由宽松的社会环境促进了俄国工商业和经济的发展</p>
<p>拉拢了普鲁士丹麦和英国，开始欧洲方向的扩张</p>
<p>瓜分波兰</p>
<p>俄土战争，黑海</p>
<p>对内战争，对外扩张</p>
<p>1789 法国大革命，自觉担任欧洲宪兵，反法同盟遭法军痛击（远征导致财政紧张和国内压力）1796 年女皇突发中风死亡</p>
<p>制度的不完善和强人政治的弊端</p>
<p>伊凡四世和彼得大帝都干掉自己的儿子</p>
<p>政治强人的离世，也代表着一个伟大时代的结束</p>
<h4 id="叶卡捷琳娜死后"><a href="# 叶卡捷琳娜死后" class="headerlink" title="叶卡捷琳娜死后"></a>叶卡捷琳娜死后 </h4><p> 叶卡捷琳娜死后，其子沙皇保罗一世即位，取消远征法国计划，休养生息增强国力</p>
<p>法国大革命 -&gt; 意大利，奥地利，埃及</p>
<p>1798 年，第二次反法联盟组建，英王乔治三世和沙皇保罗一世</p>
<p>将法军逐出意大利</p>
<p>1799 年，拿破仑雾月政变，使几次反法联盟相继土崩瓦解，摧毁神圣罗马帝国</p>
<p>由于特拉法尔加海战的惨败，加之俄国对拿破仑大陆政策的抵制。拿破仑决定先征服俄国再英国</p>
<p>亚历山大一世成为新沙皇，加入反法联盟，奥斯特里茨战役 (三皇之战) 失败</p>
<p>1812 年，揭开法俄战争序幕，俄军不断后撤，俄国拥有完善的后勤和补给</p>
<p>斯摩棱斯克的血战</p>
<p>新任俄军总司令库图佐夫，下令在莫斯科迎战法国，自己烧了莫斯科</p>
<p>第六次反法同盟：诸民族之战</p>
<p>1814 年维也纳会议，获得芬兰和比萨拉比亚</p>
<p>俄国，普鲁士，奥地利 成立神圣同盟</p>
<p>过度向军事倾斜以及体制改革失败，庞大疆域和人口矛盾导致的农奴制</p>
<p>1905 年，日俄战争惨败。社会民主党的分支，名叫布尔什维克</p>
<p>1905 年，12 月革命，工人代表苏维埃</p>
<p>1914 年，一战爆发，加速无产阶级革命</p>
<p>1917 年，二月革命，统治俄国 304 年的罗曼诺夫王朝宣告终结</p>
<p>接替执政的是资产阶级临时政府</p>
<p>无产阶级必须执政，十月革命，苏维埃俄国</p>
<h3 id="历史系列文章"><a href="# 历史系列文章" class="headerlink" title="历史系列文章"></a>历史系列文章 </h3><p><a href="https://wangxchun.github.io/2019/07/06/history-europe/"> 历史 — （1）欧洲简史 </a><br><a href="https://wangxchun.github.io/2019/07/08/history-russia/"> 历史 — （2）俄国简史 </a><br><a href="https://wangxchun.github.io/2019/07/10/history-germany/"> 历史 — （3）德国简史 </a><br><a href="https://wangxchun.github.io/2019/07/15/history-venice/"> 历史 — （4）威尼斯和第四次十字军东征</a></p>
]]></content>
      <categories>
        <category>历史</category>
      </categories>
      <tags>
        <tag>历史</tag>
        <tag>俄国</tag>
        <tag>俄国简史</tag>
        <tag>莫斯科公国</tag>
        <tag>伊凡一世</tag>
        <tag>彼得一世</tag>
        <tag>叶卡捷琳娜</tag>
      </tags>
  </entry>
  <entry>
    <title>历史 -- （4）威尼斯和第四次十字军东征</title>
    <url>/2019/07/15/history-venice/</url>
    <content><![CDATA[<p>这种贫瘠的靠海之地有两种选择，一是当海盗，二是做生意</p>
<p>最初，威尼斯人靠经营海盐贸易起家</p>
<p>威尼斯是从西罗马来的，信奉的是天主教。但是拜占庭帝国信奉的是东正教</p>
<p>帮拜占庭防御亚德亚里海，有合理的理由发展强大的海军</p>
<p>在君士坦丁堡和亚历山卓之间做贸易</p>
<ol>
<li>香料贸易</li>
<li>奴隶，购买年轻的斯拉夫人，卖给当时埃及或叙利亚的伊斯兰土豪</li>
<li>木材 (造船)，铁 (造武器) 与铜的贸易</li>
</ol>
<p>穆斯林拿来对抗十字军的船只和武器都是天主教的威尼斯商人所提供的</p>
<p>与异教徒贸易的行为，遭到罗马教廷和拜占庭皇帝的反对</p>
<p>热那亚人</p>
<p>威尼斯帝国准备进攻拜占庭帝国</p>
<p>1175 年，拜占庭和威尼斯和好。但是试图维持平衡，不在经济上过度依赖威尼斯 -</p>
<p>1192 年，罗马教皇发起十字军东征</p>
<p>法兰西骑士和封建诸侯</p>
<p>运输公司外包给威尼斯</p>
<p>运输的承包商也成了股东之一</p>
<p>1202 年，抵达威尼斯的王公贵族人数远比预期少</p>
<p>拜占庭帝国的流亡王子，希望借由十字军的力量，帮助它夺回王位</p>
<p>希腊正教归顺罗马公教</p>
<p>现在的拜占庭皇帝想借由比萨商人来取代威尼斯商人</p>
<h3 id="历史系列文章"><a href="# 历史系列文章" class="headerlink" title="历史系列文章"></a>历史系列文章 </h3><p><a href="https://wangxchun.github.io/2019/07/06/history-europe/"> 历史 — （1）欧洲简史 </a><br><a href="https://wangxchun.github.io/2019/07/08/history-russia/"> 历史 — （2）俄国简史 </a><br><a href="https://wangxchun.github.io/2019/07/10/history-germany/"> 历史 — （3）德国简史 </a><br><a href="https://wangxchun.github.io/2019/07/15/history-venice/"> 历史 — （4）威尼斯和第四次十字军东征</a></p>
]]></content>
      <categories>
        <category>历史</category>
      </categories>
      <tags>
        <tag>历史</tag>
        <tag>十字军东征</tag>
        <tag>威尼斯</tag>
        <tag>第四次十字军东征</tag>
      </tags>
  </entry>
  <entry>
    <title>图像处理与分析 --（1）绪论</title>
    <url>/2021/11/08/image-processing-1/</url>
    <content><![CDATA[<span id="more"></span>
<h3 id="一、"><a href="# 一、" class="headerlink" title="一、"></a> 一、</h3><h4 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h4><h4 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h4><h4 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h4><h3 id="二、"><a href="# 二、" class="headerlink" title="二、"></a> 二、</h3><h3 id="三、"><a href="# 三、" class="headerlink" title="三、"></a> 三、</h3><h3 id="四、"><a href="# 四、" class="headerlink" title="四、"></a> 四、</h3><h3 id="五、"><a href="# 五、" class="headerlink" title="五、"></a> 五、</h3>]]></content>
      <categories>
        <category>大学课程-图像处理与分析</category>
      </categories>
  </entry>
  <entry>
    <title>图像处理与分析 --（2）数字图像处理基础</title>
    <url>/2021/11/08/image-processing-2/</url>
    <content><![CDATA[<span id="more"></span>
<h3 id="一、成像原理"><a href="# 一、成像原理" class="headerlink" title="一、成像原理"></a>一、成像原理 </h3><h4 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h4><h4 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h4><h4 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h4><h3 id="二、采样与量化"><a href="# 二、采样与量化" class="headerlink" title="二、采样与量化"></a> 二、采样与量化 </h3><h3 id="三、人眼视觉特性"><a href="# 三、人眼视觉特性" class="headerlink" title="三、人眼视觉特性"></a> 三、人眼视觉特性 </h3><h4 id="1- 光度学基本原理"><a href="#1- 光度学基本原理" class="headerlink" title="1. 光度学基本原理"></a>1. 光度学基本原理</h4><p> 人眼对 380～780 纳米内不同波长的光具有不同的敏感程度，称为人眼的视敏特性。  衡量描述人眼视敏特性的物理量为视敏函数和相对视敏函数。<br>(1) 视敏函数 在相同亮度感觉的条件下，不同波长上光辐射功率的倒数可以用来衡量人眼对各波长光明亮感觉的敏感程度，称为视敏函数。<br>$K (\lambda)={1 \over p_r (\lambda)}$<br>(2) 相对视敏函数 实验表明，人眼对波长为 555 纳米的光最敏感，因此把任意波长的光的视敏函数与最大视敏函数值 K (555) 相比的比值称为相对视敏函数。<br>$V (\lambda)={K (\lambda) \over k_max}={K (\lambda) \over K (555)}={P_r (555) \over P_r (\lambda)}$<br><a href="http://www.360doc.com/content/13/1218/09/153944_338062866.shtml">人眼视觉特性</a></p>
<h4 id="2- 人眼视觉特性"><a href="#2- 人眼视觉特性" class="headerlink" title="2. 人眼视觉特性"></a>2. 人眼视觉特性 </h4><h4 id="3- 人眼视觉模型"><a href="#3- 人眼视觉模型" class="headerlink" title="3. 人眼视觉模型"></a>3. 人眼视觉模型</h4><h4 id="4- 彩色图像的表示"><a href="#4- 彩色图像的表示" class="headerlink" title="4. 彩色图像的表示"></a>4. 彩色图像的表示</h4><h3 id="四、"><a href="# 四、" class="headerlink" title="四、"></a> 四、</h3><h3 id="五、"><a href="# 五、" class="headerlink" title="五、"></a>五、</h3>]]></content>
      <categories>
        <category>大学课程-图像处理与分析</category>
      </categories>
  </entry>
  <entry>
    <title>图像处理与分析 --（3）图像代数变换和几何变换</title>
    <url>/2021/11/08/image-processing-3/</url>
    <content><![CDATA[<span id="more"></span>
<h3 id="一、"><a href="# 一、" class="headerlink" title="一、"></a> 一、</h3><h4 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h4><h4 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h4><h4 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h4><h3 id="二、"><a href="# 二、" class="headerlink" title="二、"></a> 二、</h3><h3 id="三、"><a href="# 三、" class="headerlink" title="三、"></a> 三、</h3><h3 id="四、"><a href="# 四、" class="headerlink" title="四、"></a> 四、</h3><h3 id="五、"><a href="# 五、" class="headerlink" title="五、"></a> 五、</h3><p> 代数变换应用：</p>
<ol>
<li> 提取前景物体（帧差法、背景差分法、GMM、Vibe、稀疏表示）<br> 几何变换应用：</li>
<li> 图像拼接（立体图特征点匹配、要有 overlap、SIFT 不受尺度和旋转的变化、特征点可以看成一个向量、求解单应矩阵）</li>
<li> 虚拟视生成 </li>
<li> 图像变形 </li>
</ol>
]]></content>
      <categories>
        <category>大学课程-图像处理与分析</category>
      </categories>
  </entry>
  <entry>
    <title>图像处理与分析 --（4）视觉系统 / 彩色图像表示 / 图像质量评估</title>
    <url>/2021/11/08/image-processing-4/</url>
    <content><![CDATA[<span id="more"></span>
<h3 id="一、视觉系统"><a href="# 一、视觉系统" class="headerlink" title="一、视觉系统"></a>一、视觉系统 </h3><h4 id="1- 色彩是一种光的视觉效应"><a href="#1- 色彩是一种光的视觉效应" class="headerlink" title="1. 色彩是一种光的视觉效应"></a>1. 色彩是一种光的视觉效应</h4><p> 这句话蕴含了两层含义，首先，色彩依赖于场景发射或者反射的可见光，但这还不够，还需要经过人的视觉系统处理过后，才能得到可见光对应的视觉效应。注意，这种对应并不是一一映射。</p>
<h4 id="2- 视杆 -rod- 细胞和视锥 -cone- 细胞"><a href="#2- 视杆 -rod- 细胞和视锥 -cone- 细胞" class="headerlink" title="2. 视杆 (rod) 细胞和视锥 (cone) 细胞"></a>2. 视杆 (rod) 细胞和视锥 (cone) 细胞 </h4><p> 在眼睛中用于感受光的细胞有两种，视杆（rod）细胞和视锥（cone）细胞，其中视杆细胞不区分光线波长，主要在低光时起作用（猫咪的视杆细胞就超级多，所以它们暗光视觉很棒），分布在视网膜中心凹的边缘。而视锥细胞则对波长敏感，按照敏感波长为三种：长、中、短，分布在视网膜的中间。</p>
<p>无穷维的 SPD 在三维上 (三种不同的视锥细胞) 的投影，就是我们所能感受到的色彩空间，这也解释了为什么我们在表示色彩时总是会取三个参数。</p>
<h4 id="3- 格拉斯曼定律 -Grassmann’s-law"><a href="#3- 格拉斯曼定律 -Grassmann’s-law" class="headerlink" title="3. 格拉斯曼定律 (Grassmann’s law)"></a>3. 格拉斯曼定律 (Grassmann’s law)</h4><p>人眼看到的色彩具有很强的线性加和性质。</p>
<h4 id="4- 闪烁混合测试 -Flicker-Fusion-Test"><a href="#4- 闪烁混合测试 -Flicker-Fusion-Test" class="headerlink" title="4. 闪烁混合测试 (Flicker Fusion Test)"></a>4. 闪烁混合测试 (Flicker Fusion Test)</h4><p>其目的是得到人对不同波长光的感受亮度，得到不同波长下的敏感度分布曲线。<br>这条曲线又被称为光度函数 (luminosity function)，记作 y-bar ($\lambda$) 或者 V ($\lambda$)<br><a href="https://zhuanlan.zhihu.com/p/157463063"></a></p>
<h4 id="5- 色彩匹配实验 -Metameric-Matches"><a href="#5- 色彩匹配实验 -Metameric-Matches" class="headerlink" title="5. 色彩匹配实验 (Metameric Matches)"></a>5. 色彩匹配实验 (Metameric Matches)</h4><p>目的是量化所有的可见颜色。<br>测试单色光 vs 可调整的光。<br>可调整的光是三种单色光的混合，他们波长固定（700 nm, 546 nm, 435 nm）强度可调节，并称这三个波长为原色。 选择 546.1 nm 和 435.8 nm 的原色是因为它们是汞蒸气放电的颜色，容易复现，而选择 700 nm 是因为眼睛在 700 nm 处对光线的变化不敏感，波长的误差对感知的影响不大。<br><img src="/2021/11/08/image-processing-4/photo1.png" alt="CIE RGB 颜色匹配函数"><br><img src="/2021/11/08/image-processing-4/photo2.png" alt="CIE XYZ 颜色匹配函数"><br><a href="https://zhuanlan.zhihu.com/p/157463063">相机图像处理 1 色彩与色彩空间</a></p>
<h4 id="6-HSI- 顏色模型 -HSI〔Hue-Saturation-Intensity-Lightness-HSI- 或 -HSL〕"><a href="#6-HSI- 顏色模型 -HSI〔Hue-Saturation-Intensity-Lightness-HSI- 或 -HSL〕" class="headerlink" title="6.HSI 顏色模型 HSI〔Hue-Saturation-Intensity (Lightness),HSI 或 HSL〕"></a>6.HSI 顏色模型 HSI〔Hue-Saturation-Intensity (Lightness),HSI 或 HSL〕</h4><h4 id="7-YUV- 坐标系"><a href="#7-YUV- 坐标系" class="headerlink" title="7.YUV 坐标系"></a>7.YUV 坐标系</h4><p>$Y$: 亮度<br>$C_b,C_r$：色差<br>(R-Y),(B-Y),(G-Y) 可从中选取两个。但由于对大多数彩色来说，(G-Y) 比 (R-Y),(B-Y) 数值还小，选择 (G-Y) 对改善信号比不利。通常选用 (R-Y) 和 (B-Y) 两个色差信号来代表色度信息。</p>
<h3 id="二、图像质量评估"><a href="# 二、图像质量评估" class="headerlink" title="二、图像质量评估"></a>二、图像质量评估 </h3><h4 id="1- 图像质量"><a href="#1- 图像质量" class="headerlink" title="1. 图像质量"></a>1. 图像质量</h4><p>(1) 平均亮度<br>(2) 对比度<br> 一幅图像中灰度反差的大小。对比度 = 最大亮度 / 最小亮度。<br>(3) 清晰度 <br> 应用：用传统方法做超分辨率图像<br>(4) 分辨度</p>
<h4 id="2- 客观评价指标"><a href="#2- 客观评价指标" class="headerlink" title="2. 客观评价指标"></a>2. 客观评价指标</h4><p>PSNR (Peak Signal to Noise Ratio)：峰值信噪比<br>$\displaystyle PSNR=10log_{10} \frac {MaxValue^2}{MSE}$</p>
<p>$\displaystyle =10log_{10} \frac {(2^{bits}-1)^2}{\frac {1}{MN} \sum_{i=0}^{M-1} \sum_{i=0}^{N-1}{[f (m,n)-g (m,n)]}}$</p>
<p>MSE (Mean squared error)：均方误差 <br>SSIM (Structural Similarity)：强调结构相似性<br><a href="https://blog.csdn.net/edogawachia/article/details/78756680"> 图像质量评估指标 SSIM / PSNR / MSE</a><br><a href="https://zhuanlan.zhihu.com/p/54539091">视频 / 图像质量评价综述 (一)</a></p>
<h4 id="3- 主观评价指标"><a href="#3- 主观评价指标" class="headerlink" title="3. 主观评价指标"></a>3. 主观评价指标</h4><p>MOS (mean opinion score)</p>
]]></content>
      <categories>
        <category>大学课程-图像处理与分析</category>
      </categories>
  </entry>
  <entry>
    <title>图像处理与分析 --（5）图像增强变换</title>
    <url>/2021/11/08/image-processing-5/</url>
    <content><![CDATA[<p>增强处理的方法：大致可分为三大类</p>
<ol>
<li>点变换：只与本身像素点的值有关，做灰度值变换，与空间邻点值无关。</li>
<li>空间域处理：往往作邻域加权和处理 <br> ・需考虑邻域大小、形状 <br> ・点变换可看作处理窗为 1×1 的空间域处理</li>
<li>频域处理</li>
</ol>
<h3 id="一、灰度变换"><a href="# 一、灰度变换" class="headerlink" title="一、灰度变换"></a>一、灰度变换 </h3><h4 id="1- 直方图"><a href="#1- 直方图" class="headerlink" title="1. 直方图"></a>1. 直方图</h4><p> 最常用的像素统计特性描述方式<br><img src="/2021/11/08/image-processing-5/photo1.png" alt></p>
<h4 id="2- 灰度增强"><a href="#2- 灰度增强" class="headerlink" title="2. 灰度增强"></a>2. 灰度增强 </h4><p> 灰度增强就是按照一定变换方式逐点地改变原来图像中每个像素的灰度值 $r’=T (t)$。<br>通过改变像素灰度值获得直方图形状的改变。<br>(1) 灰度线性变换 <br>(2) 灰度非线性变换<br> 离散图像 <span id="more"></span></p>
<h3 id="二、空间域滤波 -—- 空间域图像锐化"><a href="# 二、空间域滤波 -—- 空间域图像锐化" class="headerlink" title="二、空间域滤波 — 空间域图像锐化"></a>二、空间域滤波 — 空间域图像锐化 </h3><h4 id="1- 边缘检测"><a href="#1- 边缘检测" class="headerlink" title="1. 边缘检测"></a>1. 边缘检测</h4><p> 图像中的边缘一般分为两种：屋脊型边缘和阶跃型边缘。<br>在实际应用中，一般只考虑阶跃边缘，<br>因为只要采样足够或者说窗口足够小，屋脊型边缘也可以看做是阶跃边缘。<br>对于阶跃边缘可以使用一阶导数的极值来判断边缘。<br>对于阶跃边缘还可以使用二阶导数的过零点 (zero-acrossing) 判定。<br><img src="/2021/11/08/image-processing-5/photo2.png" alt><br><a href="https://www.cnblogs.com/YiXiaoZhou/p/5891645.html">斑点检测 (LoG,DoG) [上] 之边缘检测回顾</a></p>
<h4 id="2-laplace- 算子"><a href="#2-laplace- 算子" class="headerlink" title="2.laplace 算子"></a>2.laplace 算子 </h4><h4 id="3-roberts- 算子"><a href="#3-roberts- 算子" class="headerlink" title="3.roberts 算子"></a>3.roberts 算子</h4><p> 对角线</p>
<h4 id="4-sobel- 算子"><a href="#4-sobel- 算子" class="headerlink" title="4.sobel 算子"></a>4.sobel 算子 </h4><p> 各向同性 sobel 算子：考虑邻居点的权重（斜对角比较远，权重比较小）</p>
<h4 id="5-Prewitt-amp-Kirsch- 算子"><a href="#5-Prewitt-amp-Kirsch- 算子" class="headerlink" title="5.Prewitt&amp;Kirsch 算子"></a>5.Prewitt&amp;Kirsch 算子 </h4><p> 不只要区分方向，还要看边缘是亮变到暗，还是暗变到亮</p>
<h4 id="6-LoG- 高斯拉普拉斯算子 - 和 -DoG"><a href="#6-LoG- 高斯拉普拉斯算子 - 和 -DoG" class="headerlink" title="6.LoG (高斯拉普拉斯算子) 和 DoG"></a>6.LoG (高斯拉普拉斯算子) 和 DoG</h4><p>LoG 边缘检测算子是 David Courtnay Marr 和 Ellen Hildreth (1980) 共同提出的。因此，也称为边缘检测算法或 Marr &amp; Hildreth 算子。该算法首先对图像做高斯滤波，然后再求其拉普拉斯 (Laplacian) 二阶导数。即图像与 Laplacian of the Gaussian function 进行滤波运算。最后，通过检测滤波结果的零交叉 (Zero crossings) 可以获得图像或物体的边缘。因而，也被业界简称为 Laplacian-of-Gaussian (LoG) 算子。</p>
<pre><code>step
a. 平滑滤波器采用高斯滤波器
b. 边缘增强用二阶导数（二维拉普拉斯函数）
c. 边缘检测判据是二阶导数零点交叉点
d. 采用线性插值的方法估计边缘的位置
</code></pre><p>(1) LoG<br>在进行 Laplacian 操作之前通常需要先用高斯平滑滤波器对图像进行平滑处理，以降低 Laplacian 操作对于噪声的敏感性。事实上由于卷积操作具有结合律，因此我们可以先将高斯平滑滤波器与拉普拉斯滤波器进行卷积，然后利用得到的混合滤波器去对图片进行卷积以得到所需的结果。采用这个做法主要有以下两个优点：<br>a. 由于高斯和拉普拉斯核通常都比图像小得多，所以这种方法通常只需要很少的算术运算。<br>b. LoG (Laplacian of Gaussian) 内核的参数可以预先计算，因此在运行时只需要对图像执行一遍的卷积即可。<br>在离散的网格上，简单的拉普拉斯算子可以看成是一种高斯函数很窄的 LoG 函数。<br>(2) DoG（为了符合人眼视觉）<br>DoG 算子和 LoG 算子具有类似的波形，仅仅是幅度不同，不影响极值点的检测，而 DoG 算子的计算复杂度显然低于 LoG，因此一般使用 DoG 代替 LoG 算子</p>
<p><a href="https://zhuanlan.zhihu.com/p/92143464">高斯拉普拉斯算子（Laplacian of Gaussian, LoG）</a><br><a href="https://zhuanlan.zhihu.com/p/49447503">DoG 和 LoG 算子</a><br><a href="https://blog.csdn.net/yangying1992/article/details/100809629">LoG 算子与 DoG 算子相似性数学推导</a></p>
<h4 id="7-Canny- 边缘检测过程"><a href="#7-Canny- 边缘检测过程" class="headerlink" title="7.Canny 边缘检测过程"></a>7.Canny 边缘检测过程 </h4><p> 根据对信噪比与定位乘积进行测度，得到最优化逼近算子</p>
<h5 id="1-step1- 用高斯滤波器平滑图像（去噪）"><a href="#1-step1- 用高斯滤波器平滑图像（去噪）" class="headerlink" title="(1) step1: 用高斯滤波器平滑图像（去噪）"></a>(1) step1: 用高斯滤波器平滑图像（去噪）</h5><p><a href="https://www.cnblogs.com/wangguchangqing/p/6407717.html">图像处理基础 (4)：高斯滤波器详解</a></p>
<h5 id="2-step2- 用一阶偏导的有限差分来计算梯度的幅值 - 和方向；（边缘处梯度幅度大，有一定方向）"><a href="#2-step2- 用一阶偏导的有限差分来计算梯度的幅值 - 和方向；（边缘处梯度幅度大，有一定方向）" class="headerlink" title="(2) step2: 用一阶偏导的有限差分来计算梯度的幅值 和方向；（边缘处梯度幅度大，有一定方向）"></a>(2) step2: 用一阶偏导的有限差分来计算梯度的幅值 和方向；（边缘处梯度幅度大，有一定方向）</h5><p>对于平滑后的图像，首先在水平和垂直方向采用 Sobel kernel 计算得到水平方向 $g_x (m,n)$ 和垂直方向 $g_y (m,n)$<br>综合梯度通过以下公式计算梯度值和梯度方向：<br>$G (m,n)=\sqrt {g_x (m.n)^2 + g_y (m,n)^2}$<br>$\displaystyle \theta = arctan (\frac {g_y (m,n)}{g_x (m.n)})$</p>
<h5 id="3-step3- 对梯度幅值进行非极大值抑制 -NMS-（一条边缘只有一次检测）"><a href="#3-step3- 对梯度幅值进行非极大值抑制 -NMS-（一条边缘只有一次检测）" class="headerlink" title="(3) step3: 对梯度幅值进行非极大值抑制 (NMS)（一条边缘只有一次检测）"></a>(3) step3: 对梯度幅值进行非极大值抑制 (NMS)（一条边缘只有一次检测）</h5><p><img src="/2021/11/08/image-processing-5/photo3.png" alt><br>要进行非极大值抑制，就首先要确定像素点 C 的灰度值在其 8 值邻域内是否为最大。图 1 中蓝色的线条方向为 C 点的梯度方向，这样就可以确定其局部的最大值肯定分布在这条线上，也即出了 C 点外，梯度方向的交点 dTmp1 和 dTmp2 这两个点的值也可能会是局部最大值。因此，判断 C 点灰度与这两个点灰度大小即可判断 C 点是否为其邻域内的局部最大灰度点。如果经过判断，C 点灰度值小于这两个点中的任一个，那就说明 C 点不是局部极大值，那么则可以排除 C 点为边缘。这就是非极大值抑制的工作原理。</p>
<p>Canny 算子中的非极大值抑制与我们在角点检测等场景中所说的非极大值抑制有点细微的差别。Canny 算子中的非极大值抑制是沿着梯度方向进行的，即是否为梯度方向上的极值点；而在角点检测等场景下说的非极大值抑制，则是检测中心点处的值是否是某一个邻域内的最大值，是，则保留，否则去除，这种情况下的非极大值抑制比较简单。</p>
<p><a href="https://blog.csdn.net/kezunhai/article/details/11620357">Canny 算子中的非极大值抑制分析</a><br><a href="https://blog.csdn.net/likezhaobin/article/details/6892176?spm=1001.2101.3001.6650.4&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-4.nonecase&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-4.nonecase">Canny 边缘检测算法原理及其 VC 实现详解 (一)</a><br><a href="https://blog.csdn.net/likezhaobin/article/details/6892629?spm=1001.2101.3001.6650.3&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-3.nonecase&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-3.nonecase">Canny 边缘检测算法原理及其 VC 实现详解 (二)</a></p>
<h5 id="4-step4- 用双阈值算法检测和连接边缘（与强边缘连通的弱边缘需要一并检测）"><a href="#4-step4- 用双阈值算法检测和连接边缘（与强边缘连通的弱边缘需要一并检测）" class="headerlink" title="(4) step4: 用双阈值算法检测和连接边缘（与强边缘连通的弱边缘需要一并检测）"></a>(4) step4: 用双阈值算法检测和连接边缘（与强边缘连通的弱边缘需要一并检测）</h5><p>它设置两个阀值（threshold），分别为 maxVal 和 minVal。其中大于 maxVal 的都被检测为边缘，而低于 minval 的都被检测为非边缘。对于中间的像素点，如果与确定为边缘的像素点邻接，则判定为边缘；否则为非边缘。<br>Q：阈值怎么选取？</p>
<p><a href="https://zhuanlan.zhihu.com/p/347963026">低通、高通、带通滤波器原理详述 </a><br><a href="http://www.skcircle.com/?id=329"> 图像处理基本概念 —— 卷积，滤波，平滑</a></p>
<h3 id="三、空间域滤波 -—- 空间域图像平滑"><a href="# 三、空间域滤波 -—- 空间域图像平滑" class="headerlink" title="三、空间域滤波 — 空间域图像平滑"></a>三、空间域滤波 — 空间域图像平滑 </h3><h4 id="1- 线性滤波器 - 均值滤波器"><a href="#1- 线性滤波器 - 均值滤波器" class="headerlink" title="1. 线性滤波器 (均值滤波器)"></a>1. 线性滤波器 (均值滤波器)</h4><p>(1) 邻域平均法<br>(2) 带门限的邻域平均法<br> 在 $f$ 和 $f_$ 差别小于门限 T 的时候<br>(3) 半邻域平均法</p>
<h4 id="2- 非线性滤波器"><a href="#2- 非线性滤波器" class="headerlink" title="2. 非线性滤波器"></a>2. 非线性滤波器</h4><p>(1) 中值滤波<br>(2) 众值滤波</p>
<h3 id="四、频域滤波"><a href="# 四、频域滤波" class="headerlink" title="四、频域滤波"></a>四、频域滤波</h3><p><a href="https://blog.csdn.net/zhoufan900428/article/details/17194289">[数字图像处理] 频域滤波 (1)— 基础与低通滤波器</a><br><a href="https://blog.csdn.net/zhoufan900428/article/details/17201293">[数字图像处理] 频域滤波 (2)— 高通滤波器，带阻滤波器与陷波滤波器</a></p>
<h3 id="五、中值滤波与同态滤波"><a href="# 五、中值滤波与同态滤波" class="headerlink" title="五、中值滤波与同态滤波"></a>五、中值滤波与同态滤波 </h3><h4 id="1- 中值滤波"><a href="#1- 中值滤波" class="headerlink" title="1. 中值滤波"></a>1. 中值滤波</h4><h4 id="2- 同态滤波"><a href="#2- 同态滤波" class="headerlink" title="2. 同态滤波"></a>2. 同态滤波</h4><h3 id="六、色彩增强"><a href="# 六、色彩增强" class="headerlink" title="六、色彩增强"></a> 六、色彩增强 </h3><p><a href="https://blog.csdn.net/baishuiniyaonulia/article/details/98970461"> 图像增强 — 彩色增强技术 </a><br> 人的肉眼可分辨的灰度级在十几到二十几之间，却能区分几千种不同色度、不同亮度的色彩。可以说人眼对彩色的分辨力可以达到灰度分辨力的百倍以上。</p>
<h4 id="1- 伪色彩增强：把灰度图像处理成伪彩色图像"><a href="#1- 伪色彩增强：把灰度图像处理成伪彩色图像" class="headerlink" title="1. 伪色彩增强：把灰度图像处理成伪彩色图像"></a>1. 伪色彩增强：把灰度图像处理成伪彩色图像</h4><p>(1) 空域增强<br>(2) 頻域增强</p>
<h4 id="2- 假色彩增强：把自然彩色图像或遥感多光谱图像处理成假彩色图像"><a href="#2- 假色彩增强：把自然彩色图像或遥感多光谱图像处理成假彩色图像" class="headerlink" title="2. 假色彩增强：把自然彩色图像或遥感多光谱图像处理成假彩色图像"></a>2. 假色彩增强：把自然彩色图像或遥感多光谱图像处理成假彩色图像 </h4><p> 把一种多通道图映射到另一个多通道图</p>
<h3 id="七、实作 -canny- 边缘提取"><a href="# 七、实作 -canny- 边缘提取" class="headerlink" title="七、实作 - canny 边缘提取"></a>七、实作 - canny 边缘提取</h3><ol>
<li>选取一张彩色照片 / 图片，利用 C、C＋＋或者 MATLAB 对其进行 Canny 边缘提取，并进行简要分析。</li>
<li>试着改变阈值或者根据图像内容自适应选取阈值，分析不同阈值条件下获得的边缘图像。</li>
<li>思考：如果仅存在彩色边缘，不存在灰度变化的边缘，如何处理？</li>
<li>强化：如何基于提取的边缘图做风格化处理？</li>
</ol>
<h3 id="八、课后拓展："><a href="# 八、课后拓展：" class="headerlink" title="八、课后拓展："></a>八、课后拓展：</h3><h5 id="1- 图像锐化 -—- 基于相位一致性的边缘检测（好处：无量纲、多尺度、去噪）"><a href="#1- 图像锐化 -—- 基于相位一致性的边缘检测（好处：无量纲、多尺度、去噪）" class="headerlink" title="(1) 图像锐化 — 基于相位一致性的边缘检测（好处：无量纲、多尺度、去噪）"></a>(1) 图像锐化 — 基于相位一致性的边缘检测（好处：无量纲、多尺度、去噪）</h5><p><a href="https://blog.csdn.net/SESESssss/article/details/106774854">【理解】经典角点检测算法 —Harris 角点 </a><br><a href="https://zhuanlan.zhihu.com/p/90393907"> 角点检测 (2) - harris 算子 - 理论与 Python 代码 </a><br><a href="https://blog.csdn.net/m0_37170593/article/details/109094382">Gabor 滤波器原理</a><br>《phase congruency detects corners and edges》低层次 (基于像素之间的) 特征提取概述<br> 相位一致性是指在图像的频率域中，边缘相似的特征在同一阶段出现的频率较高 <br><img src="/2021/11/08/image-processing-5/photo5.jpg" alt><br><a href="https://blog.csdn.net/songzitea/article/details/17319769"> 低层次 (基于像素之间的) 特征提取概述</a></p>
<h5 id="2- 图像平滑 -—- 双边滤波"><a href="#2- 图像平滑 -—- 双边滤波" class="headerlink" title="(2) 图像平滑 — 双边滤波"></a>(2) 图像平滑 — 双边滤波 </h5><p><img src="/2021/11/08/image-processing-5/photo4.jpg" alt><br><a href="https://zhuanlan.zhihu.com/p/127023952">OpenCV 学习９：双边滤波 bilateralFilter</a><br><a href="https://blog.csdn.net/Jfuck/article/details/8932978"> 双边滤波（Bilateral Filter）详解</a></p>
<p><a href="https://blog.csdn.net/Gentleman_Qin/article/details/107027894">传统基本图像处理方法：图像增强、图像分割、图像配准等</a></p>
]]></content>
      <categories>
        <category>大学课程-图像处理与分析</category>
      </categories>
  </entry>
  <entry>
    <title>图像处理与分析 -- 期末大作业</title>
    <url>/2021/12/23/image-processing-final/</url>
    <content><![CDATA[<span id="more"></span>
<h3 id="一、参考文章"><a href="# 一、参考文章" class="headerlink" title="一、参考文章"></a>一、参考文章</h3><h4 id="1- 方法发想"><a href="#1- 方法发想" class="headerlink" title="1. 方法发想"></a>1. 方法发想</h4><p>(1) 掩膜进行位运算<br>(2) 使用 grabcut<br>(3) 边缘提取<br>(4) 轮廓检测 + 填充法<br>(5) 使用 HSV 颜色空间颜色区域提取的方法，提取出前景或者背景<br><a href="https://blog.csdn.net/weixin_42272768/article/details/110677696">Python 提取前景 - 单一颜色背景</a><br><a href="https://blog.csdn.net/septwolves2015/article/details/97896681?utm_medium=distribute.pc_relevant.none-task-blog-baidulandingword-6&amp;spm=1001.2101.3001.4242">python-opencv 边缘清洗法提取图片轮廓和前景内容</a></p>
<h4 id="2- 掩膜进行位运算"><a href="#2- 掩膜进行位运算" class="headerlink" title="2. 掩膜进行位运算"></a>2. 掩膜进行位运算</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 读取图像</span></span><br><span class="line">img_src = cv2.imread (<span class="string">&quot;test.png&quot;</span>)</span><br><span class="line">img_gray = cv2.cvtColor (img_src, cv2.COLOR_BGR2GRAY)</span><br><span class="line"><span class="comment"># 灰度处理</span></span><br><span class="line">ret, img_bin = cv2.threshold (img_gray, <span class="number">127</span>, <span class="number">255</span>, cv2.THRESH_BINARY)</span><br><span class="line">contours, hierarchy = cv2.findContours (img_bin, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)</span><br><span class="line"><span class="comment"># 制作掩膜</span></span><br><span class="line">img_mask = np.zeros (img_src.shape, np.uint8)</span><br><span class="line">cv2.drawContours (img_mask, contours, -<span class="number">1</span>, (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), -<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 位与运算</span></span><br><span class="line">img_result = cv2.bitwise_and (img_src, img_mask)</span><br></pre></td></tr></table></figure>
<h5 id="1-cv2-threshold- 函数"><a href="#1-cv2-threshold- 函数" class="headerlink" title="(1) cv2.threshold () 函数"></a>(1) cv2.threshold () 函数</h5><p>ret, dst = cv2.threshold (src, thresh, maxval, type)<br>ret: True 或 False，代表有没有读到图片<br>dst: 目标图像<br>src 是灰度图像<br>thresh 是起始阈值<br>maxval 是最大值<br>type 是定义如何处理数据与阈值的关系<br><img src="/2021/12/23/image-processing-final/photo1.png" alt><br><a href="https://blog.csdn.net/u012566751/article/details/77046445">threshold 函数的使用</a><br><a href="https://blog.csdn.net/weixin_42272768/article/details/110746790">CV2 简单阈值函数：cv2.threshold ()</a><br><a href="https://blog.csdn.net/on2way/article/details/46812121">Python 下 opencv 使用笔记（四）（图像的阈值处理）</a></p>
<h5 id="2-cv2-adaptivthreshold- 函数"><a href="#2-cv2-adaptivthreshold- 函数" class="headerlink" title="(2) cv2.adaptivthreshold () 函数"></a>(2) cv2.adaptivthreshold () 函数</h5><h5 id="3-cv2-findContours- 函数"><a href="#3-cv2-findContours- 函数" class="headerlink" title="(3) cv2.findContours () 函数"></a>(3) cv2.findContours () 函数</h5><p><a href="https://blog.csdn.net/u011028345/article/details/75396329">OpenCV 之颜色空间转换：cvtColor () 函数</a><br><a href="https://blog.csdn.net/keith_bb/article/details/53470170">opencv 学习（十六）之颜色空间转换 cvtColor ()</a><br><a href="https://blog.csdn.net/hjxu2016/article/details/77833336">python-opencv2 利用 cv2.findContours () 函数来查找检测物体的轮廓</a><br>void cvtColor (InputArray src, OutputArray dst, int code, int dstCn=0)<br>OpenCV2 的 CV_前缀的宏命名规范，被 OpenCV3 中 COLOR_式的宏命名前缀所取代，另外，需要提醒的是 OpenCV 默认的图片通道存储顺序是 BGR, 而不是 RGB</p>
<h4 id="4-cv2-drawContours- 函数"><a href="#4-cv2-drawContours- 函数" class="headerlink" title="(4) cv2.drawContours () 函数"></a>(4) cv2.drawContours () 函数 </h4><p>cv2.drawContours (img_mask, contours, -1, (255, 255, 255), -1)<br> 其中第一个参数 image 表示目标图像，<br>第二个参数 contours 表示输入的轮廓组，每一组轮廓由点 vector 构成，<br>第三个参数 contourIdx 指明画第几个轮廓，如果该参数为负值，则画全部轮廓，<br>第四个参数 color 为轮廓的颜色，<br>第五个参数 thickness 为轮廓的线宽，如果为负值或 CV_FILLED 表示填充轮廓内部，</p>
<h4 id="5- 小知识点"><a href="#5- 小知识点" class="headerlink" title="(5) 小知识点"></a>(5) 小知识点</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;one two one two one&#x27;</span></span><br><span class="line"><span class="built_in">print</span> (s.replace (<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;-&#x27;</span>))</span><br><span class="line"><span class="comment"># one-two-one-two-one</span></span><br></pre></td></tr></table></figure>
<p><a href="https://blog.csdn.net/u013019701/article/details/104056898">在 Python 中的常见的几种字符串替换操作</a></p>
<p><a href="https://blog.csdn.net/weixin_41770169/article/details/80565326">numpy 库数组属性查看：类型、尺寸、形状、维度</a><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a1 = np.array ([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],dtype=np.complex128) </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot; 数组的维度数目 &quot;</span>,a1.ndim) </span><br></pre></td></tr></table></figure></p>
<h4 id="3-matlab"><a href="#3-matlab" class="headerlink" title="3.matlab"></a>3.matlab</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="4-image-matting"><a href="#4-image-matting" class="headerlink" title="4.image matting"></a>4.image matting</h4><p><a href="https://blog.csdn.net/qq_34243930/article/details/106517985">python 之 parser.add_argument () 用法 —— 命令行选项、参数和子命令解析器</a></p>
]]></content>
      <categories>
        <category>大学课程-图像处理与分析</category>
      </categories>
  </entry>
  <entry>
    <title>產業了解（1）5G</title>
    <url>/2021/06/03/industry-understanding-5g/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>生活-產業了解</category>
      </categories>
  </entry>
  <entry>
    <title>產業了解（6）IC</title>
    <url>/2021/06/03/industry-understanding-IC/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>生活-產業了解</category>
      </categories>
  </entry>
  <entry>
    <title>產業了解（2）人工智慧</title>
    <url>/2021/06/03/industry-understanding-artificial-intelligence/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>生活-產業了解</category>
      </categories>
  </entry>
  <entry>
    <title>產業了解（3）區塊鏈</title>
    <url>/2021/06/03/industry-understanding-blockchain/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>生活-產業了解</category>
      </categories>
  </entry>
  <entry>
    <title>產業了解（4）能源</title>
    <url>/2021/06/03/industry-understanding-energy/</url>
    <content><![CDATA[<h2 id="背景知識"><a href="# 背景知識" class="headerlink" title="背景知識"></a>背景知識 </h2><h2 id="公司"><a href="# 公司" class="headerlink" title="公司"></a> 公司</h2><h3 id="Duke"><a href="#Duke" class="headerlink" title="Duke"></a>Duke</h3><h3 id="Suncor"><a href="#Suncor" class="headerlink" title="Suncor"></a>Suncor</h3><h3 id="Natural-Resources-CNQ"><a href="#Natural-Resources-CNQ" class="headerlink" title="Natural Resources CNQ"></a>Natural Resources CNQ</h3><h3 id="Cenovus-CVE"><a href="#Cenovus-CVE" class="headerlink" title="Cenovus CVE"></a>Cenovus CVE</h3><h3 id="Energy-Transfer（ET）"><a href="#Energy-Transfer（ET）" class="headerlink" title="Energy Transfer（ET）"></a>Energy Transfer（ET）</h3>]]></content>
      <categories>
        <category>生活-產業了解</category>
      </categories>
  </entry>
  <entry>
    <title>產業了解（5）電動車和自動駕駛</title>
    <url>/2021/06/03/industry-understanding-ev/</url>
    <content><![CDATA[<h2 id="背景知識"><a href="# 背景知識" class="headerlink" title="背景知識"></a>背景知識 </h2><h2 id="公司"><a href="# 公司" class="headerlink" title="公司"></a> 公司 </h2><h3 id="特斯拉"><a href="# 特斯拉" class="headerlink" title="特斯拉"></a> 特斯拉</h3><h3 id="Workhorse-WKHS"><a href="#Workhorse-WKHS" class="headerlink" title="Workhorse (WKHS)"></a>Workhorse (WKHS)</h3><p>Workhorse 是唯一的一家美國純電動 OEM 公司，主要開發電動送貨車，目標客戶是 UPS、聯邦快遞 (FedEx)、DHL 等送貨公司。Workhorse 還經營一個製造無人機的航空部門。</p>
<p>該公司之前開發了一款電動皮卡車，在 2019 年將技術許可給前 CEO，他成立 Lordstown Motors，開發的 Endurance 有望與 Tesla 的 Cyber truck 和 Nikola Motor 的 Badger 等競爭。現在 Workhorse 的命運和 Lordstown Motors 結合在一起</p>
<h3 id="Hyliion- 計劃與 -Tortoise-Acquisition-SHLL- 併購"><a href="#Hyliion- 計劃與 -Tortoise-Acquisition-SHLL- 併購" class="headerlink" title="Hyliion 計劃與 Tortoise Acquisition (SHLL) 併購"></a>Hyliion 計劃與 Tortoise Acquisition (SHLL) 併購 </h3><h3 id="Nikola"><a href="#Nikola" class="headerlink" title="Nikola"></a>Nikola</h3><h3 id="蔚來 -NIO"><a href="# 蔚來 -NIO" class="headerlink" title="蔚來 NIO"></a> 蔚來 NIO</h3><h4 id="1- 特斯拉在巡航里程方面有絕對優勢，蔚來用車電分離的方式避免和特斯拉短兵交接。"><a href="#1- 特斯拉在巡航里程方面有絕對優勢，蔚來用車電分離的方式避免和特斯拉短兵交接。" class="headerlink" title="1. 特斯拉在巡航里程方面有絕對優勢，蔚來用車電分離的方式避免和特斯拉短兵交接。"></a>1. 特斯拉在巡航里程方面有絕對優勢，蔚來用車電分離的方式避免和特斯拉短兵交接。</h4><p><a href="https://finance.sina.com.cn/stock/relnews/us/2019-10-11/doc-iicezuev1367497.shtml">2019 年 10 月 蔚来最后的疯狂：开始向用户提供无法实现的承诺</a></p>
<h4 id="2- 投資蔚來的風險"><a href="#2- 投資蔚來的風險" class="headerlink" title="2. 投資蔚來的風險"></a>2. 投資蔚來的風險</h4><p>(1) 流動性和股份被稀釋（2020/04 公司與中國政府簽訂一項融資協議）<br>(2) 電動車市場上還有其他競爭<br>(3) 豪華車<br>(4) 美國存託憑證 ADR 風險（中美之間的緊張局勢）</p>
<h4 id="3- 下一步"><a href="#3- 下一步" class="headerlink" title="3. 下一步"></a>3. 下一步 </h4><p> 如何借助換電模式培養出的用戶生態開發新的獲利管道，將會是其下一步需要考慮的方向。</p>
<h4 id="4- 看好"><a href="#4- 看好" class="headerlink" title="4. 看好"></a>4. 看好 </h4><p> 主打產品好、整體市場空間大、用戶忠誠度高、有政府支持、有毛利率增長空間</p>
<h3 id="小鵬汽車"><a href="# 小鵬汽車" class="headerlink" title="小鵬汽車"></a>小鵬汽車</h3>]]></content>
      <categories>
        <category>生活-產業了解</category>
      </categories>
  </entry>
  <entry>
    <title>產業了解（7）面板</title>
    <url>/2021/06/03/industry-understanding-panel/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>生活-產業了解</category>
      </categories>
  </entry>
  <entry>
    <title>2020/02 投資市場觀察</title>
    <url>/2021/05/12/investment-observe-2020-02/</url>
    <content><![CDATA[<h3 id="PayPal- 花 -40- 億美元收購華裔創辦的 -Honey，比 -Google- 買 -YouTube- 更貴"><a href="#PayPal- 花 -40- 億美元收購華裔創辦的 -Honey，比 -Google- 買 -YouTube- 更貴" class="headerlink" title="PayPal 花 40 億美元收購華裔創辦的 Honey，比 Google 買 YouTube 更貴"></a>PayPal 花 40 億美元收購華裔創辦的 Honey，比 Google 買 YouTube 更貴 </h3><p> 新創購物獎勵平台 Honey Science Corporation</p>
]]></content>
      <categories>
        <category>生活-投資市場觀察</category>
      </categories>
      <tags>
        <tag>Paypal</tag>
        <tag>Honey</tag>
      </tags>
  </entry>
  <entry>
    <title>2020/03 投資市場觀察</title>
    <url>/2021/05/12/investment-observe-2020-03/</url>
    <content><![CDATA[<h3 id="股市板塊輪動，這一個月資金從科技股抽離出來跑到價值股，納指下跌，道指上漲"><a href="# 股市板塊輪動，這一個月資金從科技股抽離出來跑到價值股，納指下跌，道指上漲" class="headerlink" title="股市板塊輪動，這一個月資金從科技股抽離出來跑到價值股，納指下跌，道指上漲"></a>股市板塊輪動，這一個月資金從科技股抽離出來跑到價值股，納指下跌，道指上漲 </h3><p> 板塊輪動：資金和熱點從一個板塊轉到另一個板塊。<br>(1) 疫苗出來了，預期實體經濟會復蘇 <br>(2) 10 年期美債收益率上漲和通脹預期<br> 通貨膨脹的預期導致美債收益率上漲 <br> 因爲當物價的上漲幅度大於債券的收益率的時候，債券的持有者往往會抛售債券，會導致國債利率必須漲 <br> 國債收益率被市場看作無風險利率，所以其他債券的收益率也要上市，也就等於變相加息，<br>這也是科技股下跌的原因之一，因爲利率上升意味著融資成本提高，會造成成長股的虧損進一步擴大。<br>(3) 市場會在風險和收益之間權衡，所以當國債收益率上升的時候，高水分的股價就會被重新修正 <br> 長期美債收益率反映的是對長期經濟的預期；短期美債收益反映的是資金的流動性</p>
<h3 id="OPEC- 減產協議破局 - 油價崩跌"><a href="#OPEC- 減產協議破局 - 油價崩跌" class="headerlink" title="OPEC + 減產協議破局 油價崩跌"></a>OPEC + 減產協議破局 油價崩跌 </h3><p><a href="https://ctee.com.tw/news/global/233517.html"> 巴菲特砸 3000 億泡湯？ 投資這檔股暴跌 53％</a><br>受到 OPEC + 減產協議破局，沙俄兩國在油市大打價格戰，美國能源產業也遭到嚴重打擊，油價更在周一崩跌 25%，創下 1991 年波斯灣戰爭單日最大跌幅。</p>
]]></content>
      <categories>
        <category>生活-投資市場觀察</category>
      </categories>
      <tags>
        <tag>板塊輪動</tag>
        <tag>巴菲特</tag>
        <tag>OPEC</tag>
        <tag>石油</tag>
      </tags>
  </entry>
  <entry>
    <title>2020/05 投資市場觀察</title>
    <url>/2021/05/12/investment-observe-2020-05/</url>
    <content><![CDATA[<h3 id="華南永昌證券避險不及大虧 -47- 億 - 正副董事長請辭"><a href="# 華南永昌證券避險不及大虧 -47- 億 - 正副董事長請辭" class="headerlink" title="華南永昌證券避險不及大虧 47 億 正副董事長請辭"></a>華南永昌證券避險不及大虧 47 億 正副董事長請辭 </h3><p><a href="https://www.cna.com.tw/news/firstnews/202005010197.aspx"> 華南永昌證券避險不及大虧 47 億 正副董事長請辭</a></p>
]]></content>
      <categories>
        <category>生活-投資市場觀察</category>
      </categories>
      <tags>
        <tag>華南永昌證券</tag>
        <tag>避險不及</tag>
      </tags>
  </entry>
  <entry>
    <title>2020/06 投資市場觀察</title>
    <url>/2021/05/12/investment-observe-2020-06/</url>
    <content><![CDATA[<h3 id="Nikola- 公司 -NKLA"><a href="#Nikola- 公司 -NKLA" class="headerlink" title="Nikola 公司 (NKLA)"></a>Nikola 公司 (NKLA)</h3><p>Nikola 尚未交付一輛卡車，也沒有一家製造卡車的工廠 </p>
]]></content>
      <categories>
        <category>生活-投資市場觀察</category>
      </categories>
      <tags>
        <tag>Nikola</tag>
      </tags>
  </entry>
  <entry>
    <title>2020/07 投資市場觀察</title>
    <url>/2021/05/12/investment-observe-2020-07/</url>
    <content><![CDATA[<h3 id="第一周重要新聞"><a href="# 第一周重要新聞" class="headerlink" title="第一周重要新聞"></a>第一周重要新聞 </h3><p><a href="https://www.sohu.com/a/405920789_682259">Moderna 疫苗三期實驗被傳延期，引發股價大跌</a><br><a href="https://www.captainbi.com/amz_college_info-712.html"> 亞馬遜 Prime Day 再度跳票至十月 </a><br><a href="https://hk.investing.com/news/stock-market-news/article-105739"> 特斯拉（TSLA.US）Q2 交付量預估樂觀，若二季度盈利有望納入標普 500 指數 </a><br><a href="https://www.yicai.com/news/100686619.html"> 特斯拉 Q2 交付數據均遠超預期 </a><br><a href="https://mashable.com/article/facebook-lasso-tiktok-competitor-shut-down/">Facebook 計劃關閉旗下兩款社交應用：對標 Tiktok 的 Lasso 和對標 Pinterest 的 Hobbi</a><br><a href="https://finance.technews.tw/2020/07/06/spotify-stock-price/"> 傳聞進軍視頻流媒體市場 Spotify 大漲</a></p>
<h3 id="SHLL- 併購熱潮"><a href="#SHLL- 併購熱潮" class="headerlink" title="SHLL 併購熱潮"></a>SHLL 併購熱潮 </h3><p>IPO 費錢耗時，一種替代方法是與已經在公開市場上交易的公司合并。<br>Hyliion 就好像第二個 Nikola，都是柴油動力重型卡車的替代品，都是早期公司。<br>Nikola 在 2020/06 通過與其他公司的合并上市，Hyliion 計劃與 Tortoise Acquisition (SHLL) 併購。<br> 與 Nikola 不同的是，Hyliion 已經在銷售產品，一種將柴油半柴油轉換成混合動力的套件。<br><a href="https://news.cnyes.com/news/id/4502385">特斯拉、蔚來 ADR 瘋漲！ 市場憂電動車股陷泡沫化</a></p>
<h3 id="Sea"><a href="#Sea" class="headerlink" title="Sea"></a>Sea</h3><p>Sea Ltd (NYSE: SE) 是一間主戰東南亞市場的科技公司，專攻三個業務領域 —— 網上遊戲 (Garena)、電子商貿 (Shopee)，以及數位金融服務 (AirPay)。<br>Sea 是東南亞最大的互聯網公司，也是東南亞唯一一家在美國紐交所上市的互聯網公式。<br><a href="https://www.quamnet.com/post/NYh7c263lhgKUpcxhl4-y">投資者應留意 Sea Ltd 的兩個增長領域</a></p>
<p>騰訊是 Sea 的第一大股東，英雄聯盟和王者榮耀等游戲在東南亞的代理商就是 Sea。<br>在 2019 年四季度，Sea 推出 SeaMoney 作爲數位金融服務的總品牌，對標的是螞蟻金服，旗下包含 ShopeePay 和 AirPay。</p>
<p>在東南亞，Sea 有强勁的競爭對手，如 Lazada 和 Grab，但 Sea 輻射的市場非常大。<br>Sea 開拓市場的方式和拼多多相似，發錢補貼燒錢開拓市場。</p>
<p><a href="https://www.youtube.com/watch?v=xK1pakGofac">电商新贵大比拼 | Shopify vs Sea Limited vs Mercado Libre| SHOP vs SE vs MELI</a><br><a href="https://www.beyondfang.com/2020/08/11/price-drop/">2020.08.11 終於遇到大回調 + 淺談 MELI vs SE</a></p>
<h3 id="第二周重要新聞"><a href="# 第二周重要新聞" class="headerlink" title="第二周重要新聞"></a>第二周重要新聞 </h3><p><a href="https://news.cnyes.com/news/id/4502908"> 對決亞馬遜 Prime！沃爾瑪付費會員制 Walmart + 傳 7 月推出 股價大漲 7%</a></p>
<h3 id="電動車廠 -Workhorse-WKHS"><a href="# 電動車廠 -Workhorse-WKHS" class="headerlink" title="電動車廠 Workhorse (WKHS)"></a>電動車廠 Workhorse (WKHS)</h3><p><a href="https://finance.technews.tw/2020/07/07/workhorse-stock-soars-nearly-500percent/">2020/07 Workhorse 年飆近 500%！電動車股泡沫現，憂步大麻股後塵</a><br><a href="https://www.chinatimes.com/realtimenews/20210511002543-260410?chdtv">2021/05 《國際產業》Workhorse 放出黑天鵝 電動車類股重挫</a></p>
<h3 id="巴菲特百億美金收購案大變局"><a href="# 巴菲特百億美金收購案大變局" class="headerlink" title="巴菲特百億美金收購案大變局"></a>巴菲特百億美金收購案大變局</h3>]]></content>
      <categories>
        <category>生活-投資市場觀察</category>
      </categories>
      <tags>
        <tag>巴菲特</tag>
        <tag>亞馬遜Prime Day</tag>
        <tag>特斯拉</tag>
        <tag>Moderna疫苗</tag>
        <tag>Hyliion</tag>
        <tag>Tortoise Acquisition(SHLL)</tag>
        <tag>Sea Ltd(SE)</tag>
        <tag>沃爾瑪</tag>
        <tag>Walmart+</tag>
        <tag>Workhorse</tag>
      </tags>
  </entry>
  <entry>
    <title>2020/08 投資市場觀察</title>
    <url>/2021/05/12/investment-observe-2020-08/</url>
    <content><![CDATA[<h3 id="5G- 趨勢下的穩懋"><a href="#5G- 趨勢下的穩懋" class="headerlink" title="5G 趨勢下的穩懋"></a>5G 趨勢下的穩懋 </h3><p>5G 發展讓砷化鎵需求激增，而貿易戰則讓台廠抓緊中國市場的機會。<br> 原因在於以砷化鎵生產的 PA（功率放大器）晶片。PA 晶片作為手機接收各頻段訊號的元件，進入 5G 時代後手機用量倍增。隨著 5G 的發展，過去 PA 元件由 Skywork、Qrovo、Broadcom 三家獨大，如今加入 Muruta、Qualcomm、Vanchip 等競爭者。在中國去美化發展持續，中國手機業者逐漸降低向 Skywork 與美系 PA 廠的採購。中國 5G 手機成長的需求，加上去美化導致 PA 供應上的不足，在無法靠當地廠商滿足需求的情況下，成為台灣 PA 廠商得以大啖中國市場的機會。</p>
<p>除了 PA，另一個砷化鎵的應用 VSCEL（垂直共振腔面射型雷射），也是驅動穩懋成長的動能之一。<br>王尊民推估，手機後鏡頭增加 VSCEL 的設計，可能會由蘋果先推出，「iPad 也可能會有。」蘋果在 VSCEL 元件的供應商 lumentum，其主要代工廠正是穩懋。兩腳分別踩在成長趨勢上，讓摩根士丹利也把對穩懋的目標價，從三二六元提升到三七八元。</p>
]]></content>
      <categories>
        <category>生活-投資市場觀察</category>
      </categories>
      <tags>
        <tag>5G</tag>
        <tag>穩懋</tag>
        <tag>PA晶片</tag>
        <tag>功率放大器</tag>
        <tag>lumentum</tag>
      </tags>
  </entry>
  <entry>
    <title>2020/09 投資市場觀察</title>
    <url>/2021/05/12/investment-observe-2020-09/</url>
    <content><![CDATA[<h3 id="支付公司 -Square- 買入 -5-000- 萬美元比特幣，幣價兩小時漲 -2-6"><a href="# 支付公司 -Square- 買入 -5-000- 萬美元比特幣，幣價兩小時漲 -2-6" class="headerlink" title="支付公司 Square 買入 5,000 萬美元比特幣，幣價兩小時漲 2.6%"></a>支付公司 Square 買入 5,000 萬美元比特幣，幣價兩小時漲 2.6%</h3><h3 id="OPEC- 會議，可以多觀察能源板塊走勢"><a href="#OPEC- 會議，可以多觀察能源板塊走勢" class="headerlink" title="OPEC + 會議，可以多觀察能源板塊走勢"></a>OPEC + 會議，可以多觀察能源板塊走勢 </h3><h4 id="利好"><a href="# 利好" class="headerlink" title="利好"></a> 利好</h4><p>（1）OPEC + 會議上，沙特和俄羅斯將緩解市場對於供過於求的擔憂，也是原油投資者保持樂觀<br>（2）中國較好的經濟數據能夠抵消部分國際能源署 (IEA) 月度報告的負面影響</p>
<h4 id="利空"><a href="# 利空" class="headerlink" title="利空"></a>利空 </h4><p>（1）全球原油需求在 5 月和 6 月大幅復蘇，但隨著部分國家第二波疫情，需求停滯不前<br>（2）美國汽油需求復蘇在 8 月放緩，需求增速甚至在 8 月最後一周轉爲負值<br>（3）大量卡車閑置和航班被取消，柴油和航空燃料受到的打擊尤其嚴重<br>（4）利比亞軍事强人哈利法。哈弗塔爾承諾結束該國對石油的封鎖，這意味著 100 萬桶 / 日將進入市場<br>（5）颱風莎莉降爲一級颶風，對墨西哥灣原油開采和提煉業務的威脅減弱<br> 總的來説，原油市場目前處於供過於求的狀況。</p>
<h3 id="特斯拉未被選入標普 -500- 指數 - 其他三家公司 -Esty-Teradyne-Catalent- 成功進入"><a href="# 特斯拉未被選入標普 -500- 指數 - 其他三家公司 -Esty-Teradyne-Catalent- 成功進入" class="headerlink" title="特斯拉未被選入標普 500 指數 其他三家公司 (Esty/Teradyne/Catalent) 成功進入"></a>特斯拉未被選入標普 500 指數 其他三家公司 (Esty/Teradyne/Catalent) 成功進入 </h3><p><a href="https://news.cnyes.com/news/id/4521259"> 特斯拉未被選入標普 500 指數 盤後翻黑重摔 </a><br> 上次財報的獲利是有水分的，獲利指標不夠，可能是這次將特斯拉排除在外的主要因素 <br><a href="https://www.businessweekly.com.tw/business/blog/3004417"> 特斯拉大賺 340 億，特斯拉靠碳權交易賺到的錢，比產銷電動車更多 </a><br> 特斯拉市值已經是美國前十大，如果特斯拉加入，追蹤該指數的基金就必須購入特斯拉股票，熱錢隨時可能退出，導致標普被迫接盤。<br>這些利空的消息都是特斯拉自己放出來的，可能是爲了協助機構洗盤，要把更多的散戶游資洗出來，才好控制大盤未來走勢；散戶多的股票，機構不好控盤，標普也不喜歡。</p>
<h3 id="特斯拉 -9- 月在大陸退出電池回收服務，承諾報廢的鋰離子電池均不做填埋處理"><a href="# 特斯拉 -9- 月在大陸退出電池回收服務，承諾報廢的鋰離子電池均不做填埋處理" class="headerlink" title="特斯拉 9 月在大陸退出電池回收服務，承諾報廢的鋰離子電池均不做填埋處理"></a>特斯拉 9 月在大陸退出電池回收服務，承諾報廢的鋰離子電池均不做填埋處理 </h3><h3 id="受惠遠端辦公需求，協同作業溝通軟體 -Slack-WORK-US"><a href="# 受惠遠端辦公需求，協同作業溝通軟體 -Slack-WORK-US" class="headerlink" title="受惠遠端辦公需求，協同作業溝通軟體 Slack (WORK-US)"></a> 受惠遠端辦公需求，協同作業溝通軟體 Slack (WORK-US)</h3><p><a href="https://news.cnyes.com/news/id/4520208">錯過飆股 Zoom？這 8 檔新冠受益股可望是「Zoom 2.0」</a><br><a href="https://news.cnyes.com/news/id/4522553">9/9 〈財報〉 Slack Q2 營收年增不敵對手 Zoom 盤後股價暴跌逾 18%</a></p>
<h3 id="道瓊指數的科技股王 -Salesforce"><a href="# 道瓊指數的科技股王 -Salesforce" class="headerlink" title="道瓊指數的科技股王 Salesforce"></a>道瓊指數的科技股王 Salesforce</h3><p><a href="https://www.cw.com.tw/article/5101755">道瓊指數的科技股王 Salesforce，你還不認識它嗎？</a><br>客戶關係管理軟體 (CRM) 軟體和技術的主要供應商</p>
<h3 id="迪士尼"><a href="# 迪士尼" class="headerlink" title="迪士尼"></a>迪士尼 </h3><p><a href="https://news.cnyes.com/news/id/4522546"> 串流媒體是未來趨勢！分析師看好 Disney+、Hulu 喊買迪士尼</a><br><a href="https://ec.ltn.com.tw/article/breakingnews/3285966">《花木蘭》推升迪士尼股價 一度創下近月最大單日漲幅</a></p>
<h3 id="特斯拉"><a href="# 特斯拉" class="headerlink" title="特斯拉"></a>特斯拉 </h3><p><a href="https://udn.com/news/story/6811/4853889"> 特斯拉陸製 Model 3 將銷歐亞 </a><br><a href="https://ctee.com.tw/news/global/328668.html">9/2 特斯拉計劃發售新股 市值 1460 億元</a><br> 電動車和太陽能板製造業巨擘特斯拉（Tesla）在 8 月 31 日進行 1 拆 5 的股票分割後，9 月 1 日宣布計畫，將發售至多價值 50 億美元（約新台幣 1460 億元）普通股。<br>美聯社報導，特斯拉周二在股市盤前向美國證券管理委員會（SEC）遞交文件表示，計劃發售 1003 萬股並將收益投入一般公司用途，但未表明用途為何。<br>特斯拉股價今天收跌 4.7% 至 475.05 美元。<br>任何股票出售都可能減少股東當前的投資價值。<br><a href="https://finance.sina.com.cn/stock/hkstock/hkzmt/2020-09-09/doc-iivhvpwy5691939.shtml">特斯拉完成 50 亿美元股权出售 Nikola 获通用汽车 20 亿美元投资 </a><br><a href="https://tech.sina.cn/2020-09-05/detail-iivhuipp2665481.d.html"> 马斯克第三档股权奖励解锁，奖励总额达 85 亿美元 </a><br><a href="https://news.cnyes.com/news/id/4527073"> 一文看懂：特斯拉電池日驚喜與驚嚇 盤後市值蒸發逾 200 億美元</a></p>
<h3 id="3- 家 -HOT- 云服务商 -Snowflake（SNOW）Rackspace（RXT）Palantir-PLTR"><a href="#3- 家 -HOT- 云服务商 -Snowflake（SNOW）Rackspace（RXT）Palantir-PLTR" class="headerlink" title="3 家 HOT 云服务商: Snowflake（SNOW）Rackspace（RXT）Palantir (PLTR)"></a>3 家 HOT 云服务商: Snowflake（SNOW）Rackspace（RXT）Palantir (PLTR)</h3><p><a href="https://www.cw.com.tw/article/5101958">一上市股價就翻倍，巴菲特看好的 Snowflake 是做什麼的？</a><br>Snowflake 做的是云上的數據管理平台，競爭對手有 Amazon 的 Redshift、Microsoft 的 Synapse、Google 的 BigQuery<br><a href="https://finance.technews.tw/2020/09/25/the-palantir-ipo-issue-price-is-estimated-at-10usd/">Palantir IPO 發行價估 10 美元，公司身價上看 220 億美元</a></p>
]]></content>
      <categories>
        <category>生活-投資市場觀察</category>
      </categories>
      <tags>
        <tag>特斯拉</tag>
        <tag>Square</tag>
        <tag>OPEC+會議</tag>
        <tag>標普500指數</tag>
        <tag>Slack</tag>
        <tag>Salesforce</tag>
        <tag>迪士尼</tag>
        <tag>云服務商</tag>
      </tags>
  </entry>
  <entry>
    <title>2020/10 投資市場觀察</title>
    <url>/2021/05/12/investment-observe-2020-10/</url>
    <content><![CDATA[<h3 id="川普確診"><a href="# 川普確診" class="headerlink" title="川普確診"></a> 川普確診 </h3>]]></content>
      <categories>
        <category>生活-投資市場觀察</category>
      </categories>
      <tags>
        <tag>川普</tag>
      </tags>
  </entry>
  <entry>
    <title>2020/11 投資市場觀察</title>
    <url>/2021/05/12/investment-observe-2020-11/</url>
    <content><![CDATA[<h3 id="「先買後付」借貸平台 -Affirm- 申請 -IPO，預計募資千萬美元"><a href="#「先買後付」借貸平台 -Affirm- 申請 -IPO，預計募資千萬美元" class="headerlink" title="「先買後付」借貸平台 Affirm 申請 IPO，預計募資千萬美元"></a>「先買後付」借貸平台 Affirm 申請 IPO，預計募資千萬美元 </h3><p> 由 PayPal 共同創辦人 Max Levchin 創立的線上分期貸款平台 Affirm ，11 月中，向美國證券交易委員會（The U.S. Securities and Exchange Commission, SEC）申請 IPO，預計以「AFRM」作為代號，在納斯達克交易所掛牌上市。</p>
<h3 id="PayPal、Cash-App- 狂掃比特幣，帶動幣價挑戰歷史新高"><a href="#PayPal、Cash-App- 狂掃比特幣，帶動幣價挑戰歷史新高" class="headerlink" title="PayPal、Cash App 狂掃比特幣，帶動幣價挑戰歷史新高"></a>PayPal、Cash App 狂掃比特幣，帶動幣價挑戰歷史新高 </h3><p> 近期比特幣價格持續飆升，主要受惠美國第三方支付服務商 PayPal 宣布支援比特幣等主流虛擬貨幣。最新數據顯示，在 PayPal 開放用戶使用比特幣後，PayPal 和 Square 公司旗下行動支付服務「Cash App」購買的比特幣數量已超過新開採量，讓原本就供應緊張的比特幣更顯短缺。<br><a href="https://technews.tw/2020/11/24/paypal-cash-app-bitcoin-price/">PayPal、Cash App 狂掃比特幣，帶動幣價挑戰歷史新高</a></p>
]]></content>
      <categories>
        <category>生活-投資市場觀察</category>
      </categories>
      <tags>
        <tag>Affirm</tag>
        <tag>IPO</tag>
        <tag>PayPal</tag>
        <tag>Cash App</tag>
        <tag>比特幣</tag>
      </tags>
  </entry>
  <entry>
    <title>2021/01 投資市場觀察</title>
    <url>/2021/05/12/investment-observe-2021-01/</url>
    <content><![CDATA[<h3 id="GME- 軋空事件 -1-28"><a href="#GME- 軋空事件 -1-28" class="headerlink" title="GME 軋空事件 1/28"></a>GME 軋空事件 1/28</h3><p>遊戲驛站 GameStop 是一家實體電視遊戲連鎖店，雖然柯恩持續推動轉型，從實體零售商店轉型為電商公司，但是過去經營十分辛苦，於是成為華爾街的熱門放空選項，許多機構投資人（含避險基金）紛紛賣空（short selling）該股。但在今年 1 月份，知名的社群網站 Reddit 中，擁有超過 230 萬名訂閱者的討論板「Wallstreetbets」，有人發起支持 GameStop 的運動。</p>
<h4 id="軋空 -Short-squeeze"><a href="# 軋空 -Short-squeeze" class="headerlink" title="軋空 (Short squeeze)"></a>軋空 (Short squeeze)</h4><p>做多：買進股票並持有，到高價的時候賣掉 <br> 做空：借股票來賣，低價的時候買回來還 <br> 有些機構或散戶看到市場上某一個股票被大量看壞，就會去拼刀 <br>-&gt; 買入大量股票 (讓市場上現貨減少)，及買入大量 call (逼造勢方買股票就必須避險)<br>-&gt; 股票上漲之後，做空方就必須補保證金 (規定一定的比例)，否則就會被斷頭 (直接買回來)<br> 空方被軋稱爲「軋空」，多方被軋稱爲「多殺多」</p>
<h4 id="伽瑪擠壓 -Gamma-squeeze"><a href="# 伽瑪擠壓 -Gamma-squeeze" class="headerlink" title="伽瑪擠壓 (Gamma squeeze)"></a>伽瑪擠壓 (Gamma squeeze)</h4><p>很多機構賣出買權卻沒有持有現貨 (沒在避險)，因爲他們覺得股價就低在那裏了，不可能上升。<br>例如 <a href="https://www.cna.com.tw/news/firstnews/202005010197.aspx">新聞稱華南永昌證券避險不及大虧 46 億 正副董事長辭職 </a><br> 沒有什麽來不及避險的，那是代表他平常根本沒有在避險。<br>空方被軋的時候避免被斷頭就要去補貨，造成股價進一步推高</p>
<h4 id="GME- 的做空比率能有 -140-？"><a href="#GME- 的做空比率能有 -140-？" class="headerlink" title="GME 的做空比率能有 140%？"></a>GME 的做空比率能有 140%？</h4><p><a href="https://zhuanlan.zhihu.com/p/348592784">GME 的做空比率能有 140%？</a></p>
<h4 id="Robbinhood- 强制散戶平倉？"><a href="#Robbinhood- 强制散戶平倉？" class="headerlink" title="Robbinhood 强制散戶平倉？"></a>Robbinhood 强制散戶平倉？</h4><p>由於 Robinhood1 月 29 日突然出手干預，限制包括 GME 在內的 50 隻較為波動股票的交易，散戶已經對該公司提起了集體訴訟，除了要求 Robinhood 恢復 GME 交易外，並要求公司支付賠償金。</p>
<p><a href="https://meet.bnext.com.tw/blog/view/17231">零手續費？免費的最貴 </a><br> 原來 Robinhood 並沒有直接將用戶的訂單發送到紐交所 / 納斯達克，而是發送給 Virtu，Citadel 等高頻交易公司，並直接在暗池中成交。邏輯其實很簡單，假設散戶在 Robinhood 上發起一筆 100 股蘋果公司股票的買入訂單，Robinhood 會將這筆訂單提交給量化公司的暗池。訂單如果在暗池中成交，Robinhood 會收到相應的「回饋」；如果沒有成交，暗池則會將這筆訂單發送至公開交易所，像紐交所，納斯達克等。</p>
<h3 id="AMC- 可轉債 -1-28"><a href="#AMC- 可轉債 -1-28" class="headerlink" title="AMC 可轉債 1/28"></a>AMC 可轉債 1/28</h3><p>逼空大戰為掙扎在生死線上的 AMC 迎來了命運的轉機，WSB 的散戶推動股價一路飆漲。</p>
<p>根據銀湖向美國 SEC 提交的文件，該公司將其持有的 AMC 2026 年到期的、票面利率為 2.95% 的可轉債全部轉換為 A 類普通股，價格為每股 13.51 美元，總共價值 6 億美元。</p>
<pre><code>什麽是 AMC？AMC 是美國很大的連鎖影城
什麽是可轉債？可轉債 = 選擇權 + 債券
時間到了，如果到了轉換價，可以換成股票；如果沒有到轉換價，就要還錢。
</code></pre><h3 id="美股淘金客周報"><a href="# 美股淘金客周報" class="headerlink" title="美股淘金客周報"></a>美股淘金客周報 </h3><p><a href="https://stockdigger101.com/jan-31-weekly-report/"> 散戶 GME 之役，引發大盤繼續下跌？</a></p>
<h3 id="美國"><a href="# 美國" class="headerlink" title="美國"></a>美國 </h3><p><a href="https://news.cnyes.com/news/id/4556868"> 去年 4 月以來首度下滑！美國 12 月「小非農」就業減少 12.3 萬人 遠遜預期</a></p>
<h3 id="NVIDIA（NVDA）"><a href="#NVIDIA（NVDA）" class="headerlink" title="NVIDIA（NVDA）"></a>NVIDIA（NVDA）</h3><p><a href="https://technews.tw/2021/01/19/the-nvidia-arm-deal-will-likely-be-shot-down/">NVIDIA 收購 ARM 可能被一國或多國監管機構拒絕</a><br>NVIDIA（NVDA）最近股價走勢不好，受芯片產能限制影響，intel 是自家工廠供貨，受到影響較小。<br>NVIDIA（NVDA）最好的操作方式就是做波段。</p>
<h3 id="阿里巴巴"><a href="# 阿里巴巴" class="headerlink" title="阿里巴巴"></a>阿里巴巴 </h3><p><a href="https://ec.ltn.com.tw/article/paper/1423943"> 馬雲會坐牢？ 華爾街大老對賭一美元 / 阿里巴巴計劃本月透過發行美元計價債券 </a><br><a href="https://www.sohu.com/a/442988071_100126170"> 知情消息：蚂蚁集团或将被拆分两半 </a><br> 一个业务群组将是金融控股公司，会包括支付、贷款、保险、理财等各种金融业务，这些业务在国内都已经存在有相对完备的法律法规。金融公司将依法依规被有关部门进行合规监管。</p>
<p>另一个业务群组将是科技公司，会包括云计算、大数据、智能风控等科技 “赋能” 业务。这些业务理论上属于科技创新的范畴，所以不会受到过多的监管。<br><a href="https://news.cnyes.com/news/id/4556477">支付寶、微信支付入列！川普下令禁用 8 款中國支付軟體</a></p>
<h3 id="SNOW- 持續下跌"><a href="#SNOW- 持續下跌" class="headerlink" title="SNOW 持續下跌"></a>SNOW 持續下跌</h3><p>SNOW 估值被嚴重高估<br>（但是特斯拉的估值也遠高於所謂的合理估值，所以這種股票就是買一個信仰，長期投資）</p>
<h3 id="Beyond-Meat（BYND）爲何下跌？"><a href="#Beyond-Meat（BYND）爲何下跌？" class="headerlink" title="Beyond Meat（BYND）爲何下跌？"></a>Beyond Meat（BYND）爲何下跌？</h3><p>第三季度的銷售額低於預期，對於高增長公司而言，增長趨勢一旦被打斷，股價震蕩在所難免。<br>競爭對手 ImpossibleFoods 的降價也對股價造成影響（老牌企業和新秀加入未來肉的戰場）。</p>
]]></content>
      <categories>
        <category>生活-投資市場觀察</category>
      </categories>
      <tags>
        <tag>GME</tag>
        <tag>軋空</tag>
        <tag>多殺多</tag>
        <tag>Gamma squeeze</tag>
        <tag>Robbinhood</tag>
        <tag>AMC</tag>
        <tag>可轉債</tag>
        <tag>NVIDIA</tag>
        <tag>阿里巴巴</tag>
        <tag>SNOW</tag>
        <tag>Beyond Meat</tag>
      </tags>
  </entry>
  <entry>
    <title>2021/02 投資市場觀察</title>
    <url>/2021/05/12/investment-observe-2021-02/</url>
    <content><![CDATA[<h3 id="一、GameStop- 于 -2-2- 股價暴跌"><a href="# 一、GameStop- 于 -2-2- 股價暴跌" class="headerlink" title="一、GameStop 于 2/2 股價暴跌"></a>一、GameStop 于 2/2 股價暴跌 </h3><p> 軋空馬上接著多殺多。<br>個股崩下來就不容易再上去了，因爲上面套了很多冤魂。</p>
<h3 id="二、Clubhouse"><a href="# 二、Clubhouse" class="headerlink" title="二、Clubhouse"></a>二、Clubhouse</h3><h4 id="邀請制、網絡小説家"><a href="# 邀請制、網絡小説家" class="headerlink" title="邀請制、網絡小説家"></a>邀請制、網絡小説家 </h4><p> 接著就出現很多網絡小説家，急著說 club house 要取代什麽東西啊，是精英制度啊，是中資啊。<br>-&gt; 這是常見的 0/1 思維錯誤 <br> 中資？用的技術是「聲網 Agora」的技術 <br> 用到 Agora 服務的，例如：UNITY、小米音箱、綫上狼人殺、綫上卡拉 OK<br>Agora 服務不是便宜的，所以之後 Club house 要怎麽賺錢？廣告怎麽塞？</p>
<h4 id="Cathie-Wood（美股乾媽，ARK- 的 -CEO）早就在買 -Agora- 的股票"><a href="#Cathie-Wood（美股乾媽，ARK- 的 -CEO）早就在買 -Agora- 的股票" class="headerlink" title="Cathie Wood（美股乾媽，ARK 的 CEO）早就在買 Agora 的股票"></a>Cathie Wood（美股乾媽，ARK 的 CEO）早就在買 Agora 的股票 </h4><p><a href="https://www.wealth.com.tw/home/articles/30877"> 女股神 Wood 投資明細全公開！跟著木頭姐選股 不如直接買方舟 ETF</a></p>
<h3 id="三、Mark-Cuban- 達拉斯獨行俠"><a href="# 三、Mark-Cuban- 達拉斯獨行俠" class="headerlink" title="三、Mark Cuban 達拉斯獨行俠"></a>三、Mark Cuban 達拉斯獨行俠 </h3><p>「如果你是買進股票，希望上漲來解決自己的財務困境，這就是最不好的交易時間。」<br> 三個會失敗的心態：<br>(1) 輸不得，焦慮是交易市場中最不好的情緒<br>(2) 沒辦法承擔一些下跌風險<br>(3) 有時間壓力（可能會導致在空頭年必須賣出）</p>
<h4 id="史上最神三個交易"><a href="# 史上最神三個交易" class="headerlink" title="史上最神三個交易"></a>史上最神三個交易 </h4><h5 id="1-Bill-Ackman- 遇上 -covid-19- 用 -cds- 避險"><a href="#1-Bill-Ackman- 遇上 -covid-19- 用 -cds- 避險" class="headerlink" title="1.Bill Ackman 遇上 covid-19 用 cds 避險"></a>1.Bill Ackman 遇上 covid-19 用 cds 避險</h5><p> 艾克曼操盤的避險基金「Pershing Square」，近來主要投資方式是鎖定 7、8 家強烈看好的企業，每檔下注 5 億～10 億美元。2 月底艾克曼相信疫情會對美國經濟和全球金融市場帶來巨大風險，他採取非比尋常的方式捍衛 65 億美元的資產組合。</p>
<p>艾克曼花費 2,700 萬美元，收購各種保護，主要鎖定信貸市場。當時利差仍在歷史低點，他針對投資等級債和高收債指數，購入深度價外 (far out of the money) 的信貸保護。他的盤算是萬一疫情蔓延，此一避險能讓 Pershing Square 免於波動性竄升和金融風險大增的傷害。倘若市況惡化，利差激烈拉大，信貸保護會從深度價外變成價內，緩和股市狂瀉對資產組合的衝擊。<br><a href="https://www.wealth.com.tw/home/articles/24915">股災中 避險大佬艾克曼海撈 26 億美元 已進場抄底</a></p>
<h5 id="2- 次貸危機 -Michael-Burry- 做空房地產"><a href="#2- 次貸危機 -Michael-Burry- 做空房地產" class="headerlink" title="2. 次貸危機 Michael Burry 做空房地產"></a>2. 次貸危機 Michael Burry 做空房地產</h5><p>Michael Burry 判定房市將在 2007 年第二季時開始崩盤，到時這些債券都將全數淪為廢紙，因此他認為這是個放空房市大賺一筆的機會。由於市場一面倒地對房市看好，因此沒人想過去放空房市，自然也並不存在能放空房市的產品。</p>
<p>後來出現信用違約交換（Credit default swap, 簡稱 CDS）其實，近似於保險的概念，買方定期支付保險費給賣方，而賣方則要為買方提供投保物違約時的保障；而和保險不同的是，CDS 並不需要持有被投保物，因此即便你沒有持有房貸債券也可以購買它的信用違約交換。</p>
<p>一旦當市場開始覺得債券風險高的時候，銀行便開始將那些賣不出去的 B 級、BB 級、BBB 級的房貸重新包裝成擔保債權憑證（Collat​​eralized Debt Obligation，簡稱 CDO），讓大家誤以為這是新的多角化投資，而信評機構也就自然會將它們評為 AAA 級的穩定投資。</p>
<p>就像 3 顆好蘋果加 2 顆壞蘋果就可以綁成一袋好蘋果一起銷售，就這樣不斷組合包裝。<br>次級房貸：CDO 延伸出 CDS，再延申出投資 CDS 的基金。<br><a href="https://www.rayskyinvest.com/4363/the-big-short-movie-review">【看電影學經濟】2008 年銀行是如何把美國房市問題搞成全球金融海嘯？</a></p>
<h5 id="3-Mark-Cuban- 的領口策略"><a href="#3-Mark-Cuban- 的領口策略" class="headerlink" title="3.Mark Cuban 的領口策略"></a>3.Mark Cuban 的領口策略 </h5><p>BroadCast 的創辦人 Mark Cuban 在 1999 年以 59 億美金將 BroadCast 賣給 Yahoo<br> 他們是以股權互換的方式收購，所以 Mark Cuban 得到 1460 萬股的 95 元 Yahoo<br>選擇權一單位可以保護 100 股 <br> 買進 14 萬 6 千單位的 PUT 履約價在 85 元 <br> 賣出 14 萬 6 千單位的 CALL 履約價在 205 元 <br> 保證金剛好對銷<br>Yahoo 在後創新高最高到 237 元但不久後就發生了.com 泡沫 Yahoo 從 237 塊跌到 10 塊美金</p>
<h3 id="四、糧商炒匯，央行重懲"><a href="# 四、糧商炒匯，央行重懲" class="headerlink" title="四、糧商炒匯，央行重懲"></a>四、糧商炒匯，央行重懲 </h3><p> 央行發布新聞稿指出，涉案的六家外銀，違反新台幣遠期外匯「實需原則」規定，其中二家外銀在央行專案檢查前，因內部覆審發現往來糧商公司財報或業務情況異常，已主動停止與其承作交易，之後更積極處理結清未到期部位，央行在去年 11 月間發給處置函予以糾正結案。據悉，這兩家外銀為摩根大通和渣打銀行。</p>
<p>剩下四家，德意志銀行、安智銀行、澳盛銀行與花旗（台灣）等四家外銀，央行裁罰結果趕在農曆年前出爐，按照承作金額等情節輕重開罰，央行處分書已於 5 日傍晚送出，2 月 8 日生效。</p>
<p>全世界都知道台幣是被低估的。<br>台幣要盯韓元，希望台幣不要升，因爲要加强出口競爭力（央行每天都在使勁拉尾盤）。</p>
<h3 id="五、全球智能電動車指數"><a href="# 五、全球智能電動車指數" class="headerlink" title="五、全球智能電動車指數"></a>五、全球智能電動車指數 </h3><p> 臺灣證券交易所於 110 年 2 月 22 日召開 ETF 標的指數資格認可會議，審議通過國泰證券投資信託股份有限公司申請「ICE FactSet 全球智能電動車指數」資格認可。</p>
<h3 id="六、Tesla15- 億美元投資比特幣"><a href="# 六、Tesla15- 億美元投資比特幣" class="headerlink" title="六、Tesla15 億美元投資比特幣"></a>六、Tesla15 億美元投資比特幣 </h3><p>Elon Musk 只是加入「＃比特幣（#bitcoin）」的標籤在推特中，就帶動當日比特幣飆漲。<br> 美國電動車大廠特斯拉（Tesla）在一份提交給美國證券交易委員會（SEC）的文件中表示，上個月已砸下 15 億美元（約新台幣 421 億元）投資比特幣。消息一出後，比特幣飆漲 14%，突破 4 萬 4000 美元大關，並使主要加密貨幣交易所今日成交量暴增，導致當機。近期，比特幣的走勢扶搖直上，不僅繼去年大漲超過 300% 後，截至今年漲幅更多達 50%。</p>
<p>加拿大皇家銀行（Royal Bank of Canada , RBC）預測，蘋果將是下一個投資比特幣的科技巨頭。並建議蘋果在現有的電子錢包服務中，建立加密貨幣交易所。</p>
<p>Elon Musk 就像 2018 年的川普的 twitter 動態可以操控市場，<br>時間拉長后，影響力會降低，因爲大家會習慣。</p>
<p>GME 事件導致大家對 Robinhood 的信任降低，流到 square，<br>後面又有比特幣交易的題材，所以 square 的配置增大。</p>
<p>Tesla 把比特幣列爲無形資產。<br>（所以虧損，如果再漲回來，虧損在賬面上不會消失，所以相當於 Tesla 可能被低估）</p>
<p>淘金潮的時候，我不喜歡當去淘金的，我喜歡去賣工具。<br>（例如：可以不買比特幣，但是買 square 的股票，因爲 square 的 cash up 可以讓用戶使用比特幣）</p>
<h3 id="七、Renaissance-Technologies-LLC- 贖回潮"><a href="# 七、Renaissance-Technologies-LLC- 贖回潮" class="headerlink" title="七、Renaissance Technologies LLC 贖回潮"></a>七、Renaissance Technologies LLC 贖回潮 </h3><p> 全球最大的量化避險基金：文藝復興科技，創辦人 James Simons 和 Howard Morgan</p>
<p>管理世界最大量化對沖基金的文藝復興科技公司旗下 3 隻對普通投資者開放的基金自 12 月 1 日以來遭遇了至少 50 億美元 (390 億港元) 的贖回。這三隻基金分别是 Krief Group、RIDA、RIDGE 去年 12 月淨流出 18.5 億美元，今年 1 月淨流出 19 億美元。</p>
<p>下跌的時候沒有做好避險，上漲的時候又過度避險。</p>
<p>最賺錢的基金是不對外開放的（只開放員工、員工家屬之類的），感覺用這個當招牌，吸引大衆投資其他基金。Medallion Fund 從 1988 年成立以來，年平均報酬率高達約 40%，但 2005 年起該檔基金已不再向外部投資人開放。</p>
<p>James Simons 是數學家出身的，<br>年輕時有被國安局招募去破解密碼，40 幾歲才加入投資圈，和其他投資名人相比，算是慢發的交易員。</p>
<p>投資名人舉例：<br>控股公司「波克夏海瑟威」的巴菲特 <br> 橋水（Bridgewater）基金創辦人達里歐（Ray Dalio）<br>Oaktree Capital Management 的創辦人和主席 Howard Marks，撰寫《投資最重要的事》<br>華爾街知名對沖基金 Pershing Square 經理人 Bill Ackman<br>對沖基金 Baupost 的經理 Seth Klarman<br>方舟（ARK）女股神凱薩琳．伍德（Cathie Wood）</p>
<p>爲什麽 Medallion Fund 績效好，其他三檔基金卻表現不佳 <br>(1) 胃納效應<br> 當基金規模越大的時候，比較不容易買小型股 (不然會不小心買成大股東)<br>(2) 像是 Blue Crest 被懷疑有擡轎的可能 <br> 有擡轎的可能？</p>
<pre><code>Michael Platt 管理的 BlueCrest 基金採取了一種做法，即在管理自己的資金時，將最好的交易員投入到頂級交易中，不僅如此，它還會有效地領先客戶。然後，到了管理客戶資金的時候，BlueCrest 基本上使用了一種簡單的模仿演算法來模仿它的頂級交易，但只有在管理團隊已經就位之後，這樣它才有足夠的火力產生 alpha，只需讓數十億的資金流湧入它已經進行的相同交易，創建回饋循環。
文藝復興基金有沒有這麼做，讓其旗艦基金 Medallion 佔盡優勢呢？媒體評論稱「應該不會」。
</code></pre><h3 id="八、美股、全球股市新春開盤第一天，直接跳上去破新高"><a href="# 八、美股、全球股市新春開盤第一天，直接跳上去破新高" class="headerlink" title="八、美股、全球股市新春開盤第一天，直接跳上去破新高"></a>八、美股、全球股市新春開盤第一天，直接跳上去破新高 </h3><h3 id="九、美國眾議院 -2-18- 日針對 -Gamestop（NYSE-GME）舉行聽證會"><a href="# 九、美國眾議院 -2-18- 日針對 -Gamestop（NYSE-GME）舉行聽證會" class="headerlink" title="九、美國眾議院 2/18 日針對 Gamestop（NYSE: GME）舉行聽證會"></a> 九、美國眾議院 2/18 日針對 Gamestop（NYSE: GME）舉行聽證會 </h3><pre><code> 做市商 Citadel Securities 是 Robinhood 的最大收入來源之一。本身是免費交易應用程序的 Robinhood，會收到 Citadel Securities 向其支付的處理訂單費用，且由 Citadel Securities 處理的訂單比其他任何一家公司還要多。

與此同時，對沖基金 Citadel（與做市商 Citadel Securities 是不同的實體）、Griffin 及其合伙人一起向 Melvin Capital 投資了 20 億美元，後者 1 月份因為 GameStop 等股票遭遇逼空而巨虧 53%。Citadel 的對沖基金由於對 Melvin 投資而產生的損失不到 1%，當月總體下跌 3%。
</code></pre><h4 id="1- 參與的人"><a href="#1- 參與的人" class="headerlink" title="(1) 參與的人"></a>(1) 參與的人</h4><p>Robinhood 執行長 Vladimir Tenev<br>Citadel 的執行長 Kenneth Cordele<br>Interactive Brokers 創始人兼首席執行官，有「高頻交易之父」之稱的 Thomas Peterffy<br>WAB 的散戶英雄 deepfucingvalue</p>
<h4 id="2- 幾個重點"><a href="#2- 幾個重點" class="headerlink" title="(2) 幾個重點"></a>(2) 幾個重點 </h4><p>(a) deepfucingvalue 說自己不是股東市場去炒作的人，他自己只是散戶，沒有臥底操盤<br>(b) Robinhood 爲什麽限制交易？Robinhood 執行長和馬斯克在 club house 中有討論<br> 因爲 NSCC 要 Robinhood 補保證金，Robinhood 負擔不起 <br>-&gt; 停止交易，保證金就不會再提高<br>-&gt; 可不可以把保證金下降，後來還真的有下降 -&gt; 爲什麽可以降<br> 一個被過度炒作的標的，就一定會有限制。<br>是非不是非黑即白，所有動畫中處理最好的就是宮崎駿，沒有人是真的的好人或是壞人。</p>
<h3 id="美股 -13F- 報告"><a href="# 美股 -13F- 報告" class="headerlink" title="美股 13F 報告"></a>美股 13F 報告</h3><h3 id="5- 家頂級機構 -2020- 年 -Q4- 季度「最新持倉」"><a href="#5- 家頂級機構 -2020- 年 -Q4- 季度「最新持倉」" class="headerlink" title="5 家頂級機構 2020 年 Q4 季度「最新持倉」"></a>5 家頂級機構 2020 年 Q4 季度「最新持倉」</h3><h3 id="Warren-buffett- 買了什麽"><a href="#Warren-buffett- 買了什麽" class="headerlink" title="Warren buffett 買了什麽"></a>Warren buffett 買了什麽</h3><p>《彭博》報導，根據週二發布最新文件，波克夏買的是電信商威訊（Verizon），持股價值來到 86 億美元；企業保險巨頭 Marsh &amp; McLennan（MMC），持股價值 4.99 億美元；石油公司雪佛龍（Chevron），持股價值近 41 億美元。 3 家公司去年第 3 季被歸為機密交易而未公開，在消息傳出後盤後皆上漲。</p>
<h3 id="美國 -10- 年期公債殖利率上升"><a href="# 美國 -10- 年期公債殖利率上升" class="headerlink" title="美國 10 年期公債殖利率上升"></a>美國 10 年期公債殖利率上升 </h3><p><img src="/2021/05/12/investment-observe-2021-02/photo1.png" alt><br> 此波美國長年期公債殖利率的上揚，並非來自通膨情勢的快速惡化，亦非因美國聯準會的貨幣政策轉向收縮銀根。<br>隨著歐美國家新增確診人數呈現下降趨勢，市場對經濟展望轉為樂觀。</p>
]]></content>
      <categories>
        <category>生活-投資市場觀察</category>
      </categories>
      <tags>
        <tag>巴菲特</tag>
        <tag>特斯拉</tag>
        <tag>比特幣</tag>
        <tag>GameStop</tag>
        <tag>Clubhouse</tag>
        <tag>Cathie Wood</tag>
        <tag>Mark Cuban</tag>
        <tag>Bill Ackman</tag>
        <tag>次貸危機</tag>
        <tag>Michael Burry</tag>
        <tag>糧商炒匯</tag>
        <tag>全球智能電動車指數</tag>
        <tag>文藝復興科技</tag>
        <tag>聽證會</tag>
        <tag>美股13F報告</tag>
      </tags>
  </entry>
  <entry>
    <title>2021/03 投資市場觀察</title>
    <url>/2021/05/12/investment-observe-2021-03/</url>
    <content><![CDATA[<h3 id="橡樹資本創辦人：比特幣和鑽石皆無內在價值，靠供需驅動"><a href="# 橡樹資本創辦人：比特幣和鑽石皆無內在價值，靠供需驅動" class="headerlink" title="橡樹資本創辦人：比特幣和鑽石皆無內在價值，靠供需驅動"></a>橡樹資本創辦人：比特幣和鑽石皆無內在價值，靠供需驅動 </h3><p> 千億級資管公司橡樹資本（Oaktree Capital）創辦人 Howard Marks 公開承認，對比特幣（BTC）改觀了。他 2017 年時認為比特幣毫無內在價值，但理解到背後的供需平衡之後，便保持開放心態。這段期間，比特幣價格也已經自 5,000 美元上漲超過 10 倍，Marks 稱那些買在低點的人們「目前看來是對的」。</p>
<h3 id="全球前 -10- 大 -IC- 設計公司營收排行"><a href="# 全球前 -10- 大 -IC- 設計公司營收排行" class="headerlink" title="全球前 10 大 IC 設計公司營收排行"></a>全球前 10 大 IC 設計公司營收排行 </h3><p><a href="https://www.bnext.com.tw/article/61960/2020-top-10-ic-company"> 全球前 10 大 IC 設計公司營收排行</a></p>
<h3 id="台灣大 - 傳奪 -Disney- 代理權"><a href="# 台灣大 - 傳奪 -Disney- 代理權" class="headerlink" title="台灣大 傳奪 Disney + 代理權"></a>台灣大 傳奪 Disney + 代理權 </h3><p><a href="https://ctee.com.tw/news/tech/422964.html"> 台灣大 傳奪 Disney + 代理權</a><br><img src="/2021/05/12/investment-observe-2021-03/photo1.jpg" alt></p>
]]></content>
      <categories>
        <category>生活-投資市場觀察</category>
      </categories>
      <tags>
        <tag>橡樹資本</tag>
        <tag>Howard Marks</tag>
        <tag>Disney+</tag>
      </tags>
  </entry>
  <entry>
    <title>2021/04 投資市場觀察</title>
    <url>/2021/05/12/investment-observe-2021-04/</url>
    <content><![CDATA[<h3 id="狗狗幣暴漲"><a href="# 狗狗幣暴漲" class="headerlink" title="狗狗幣暴漲"></a>狗狗幣暴漲 </h3><p> 狗狗幣一開始的發行是要諷刺幣圈内發行門檻超低、濫竽充數的現象 <br>2020/7 馬斯克在 twitter 上用梗圖宣稱：狗狗幣風暴將會橫掃市場<br>2020/4/1 馬斯克在在 twitter 上說會將狗狗幣帶到月亮上<br> 就是在這一段梗圖連發的時間，狗狗幣爆漲 <br>2021/4/20 社群串連衝上新高的狗狗幣，最後貶值坐收<br> 讓人聯想到 GameStop 事件，共同點是網絡社群的效應</p>
]]></content>
      <categories>
        <category>生活-投資市場觀察</category>
      </categories>
  </entry>
  <entry>
    <title>2021/05 投資市場觀察</title>
    <url>/2021/05/12/investment-observe-2021-05/</url>
    <content><![CDATA[<h3 id="貝佐斯 -7／5- 卸任亞馬遜 -CEO"><a href="# 貝佐斯 -7／5- 卸任亞馬遜 -CEO" class="headerlink" title="貝佐斯 7／5 卸任亞馬遜 CEO"></a> 貝佐斯 7／5 卸任亞馬遜 CEO</h3><p><a href="https://www.chinatimes.com/newspapers/20210528000167-260203?chdtv"> 貝佐斯 7／5 卸任亞馬遜 CEO</a></p>
]]></content>
      <categories>
        <category>生活-投資市場觀察</category>
      </categories>
  </entry>
  <entry>
    <title>2021/06 投資市場觀察</title>
    <url>/2021/06/10/investment-observe-2021-06/</url>
    <content><![CDATA[<h3 id="特斯拉"><a href="# 特斯拉" class="headerlink" title="特斯拉"></a>特斯拉 </h3><h4 id="近期面對的問題"><a href="# 近期面對的問題" class="headerlink" title="近期面對的問題"></a> 近期面對的問題 </h4><p> 科技成長股整體環境不利 <br> 汽車晶片延期問題 <br> 原材料價格上漲 <br> 其他傳統車企的反擊 <br> 特斯拉在中國、美國、歐洲的市場份額均出現下滑，在中國 5 月份訂單比 4 月份少一半。</p>
<h4 id="在美國的情況"><a href="# 在美國的情況" class="headerlink" title="在美國的情況"></a>在美國的情況</h4><p>Tesla 是美國科技企業中少數選擇和共和黨站一邊的，和右翼政客打成一片。</p>
<h4 id="股價"><a href="# 股價" class="headerlink" title="股價"></a>股價</h4><p>Tesla 不斷通過發行新股來籌集資金，提高了流通股的總數量，在提高 Tesla 整體市值，稀釋了總股本，對於早期投資者是有利的，對於新的投資者支付了更高的估值。</p>
<h4 id="長時間來看"><a href="# 長時間來看" class="headerlink" title="長時間來看"></a>長時間來看 </h4><p> 長時間來看，Tesla 是一支困境反轉股，美國的電動車補貼、之後的工廠建設、安全話題的逐漸淡出、芯片問題最終會得到解決、電動車成本會不斷壓低。</p>
<h3 id="全球最低公司稅率"><a href="# 全球最低公司稅率" class="headerlink" title="全球最低公司稅率"></a>全球最低公司稅率 </h3><p> 過去 30 多年來，百慕答、開曼群島、愛爾蘭和其他離岸低稅率地區，成爲企業家們的避稅天堂。美國單方面加稅，只會逼得企業離開美國，加大避稅力度，所以「全球最低公司稅率」即企業被迫根據他們在每個國家產生的銷售額向國家政府納稅，不論公司總部在哪。拜登的 6 億美元基建計劃，必須通過高稅率來籌措資金。</p>
<h4 id="影響的國家和地區"><a href="# 影響的國家和地區" class="headerlink" title="影響的國家和地區"></a>影響的國家和地區 </h4><p> 低稅率國家表示不同意，因爲這些體量小、自然資源匱乏的地方，只能通過低稅率吸引外資，提高全球競爭力。但是最後有精英法律團隊的企業，還是有足夠的方法來幫助他們尋找避稅的合法漏洞。</p>
<p>香港是低稅率地區，會收到影響。在東南亞，稅收優惠招商引資已經是過時的方法了，目前給出的優惠都是諸如土地使用費、信貸額度上給予支持，而產業群及上下游供應鏈、勞動力才是吸引歐美資本的關鍵因素。</p>
<h4 id="對美國科技公司的影響"><a href="# 對美國科技公司的影響" class="headerlink" title="對美國科技公司的影響"></a>對美國科技公司的影響 </h4><p><a href="https://ec.ltn.com.tw/article/breakingnews/3557929"> 拜登改推動 15％最低企業稅率 投資人表示歡迎</a></p>
<p>歐洲希望把所有科技公司納入自己指定的新規當中 <br> 歐洲新規有兩個主要目標：(1) 監管在線内容 (2) 限制大公司的能力</p>
<h3 id="拜登將 -59- 家中企列入黑名單"><a href="# 拜登將 -59- 家中企列入黑名單" class="headerlink" title="拜登將 59 家中企列入黑名單"></a>拜登將 59 家中企列入黑名單 </h3><p><a href="https://ec.ltn.com.tw/article/breakingnews/3557447"> 美國擴大中企黑名單 拜登點名華為等 59 家公司 </a> 禁止美國人與名單所列公司進行投資交易<br>(1) 其中很多企業已經在川普的名單上，早有預期，股價波動不會太大<br>(2) 後續可能還會有其他中企被列入黑名單，中概股的系統風險越來越大了<br>(3) 處於拜登訪歐的前夕<br> 中歐投資協定的内容也是美國想要取得的，中歐投資協定生效遇阻，美國就能從中獲利。<br>美國需要對歐洲表態，表示自己不會和中國私下好。<br>美國開始感受到沒有英國在歐盟當中做策應，隊伍不好帶了，英國脫歐的負面效應開始出現了。<br>(4) 目前黑名單中沒有小米</p>
<h3 id="Bill-Ackman- 做了一個令人失望的交易"><a href="#Bill-Ackman- 做了一個令人失望的交易" class="headerlink" title="Bill Ackman 做了一個令人失望的交易"></a>Bill Ackman 做了一個令人失望的交易 </h3><p><a href="https://www.businesstimes.com.hk/articles/131142/% E7% BE%8E% E8%82% A1% E6%96% B0% E8%82% A1% E6%96% B0% E7%8E% A9% E6% B3%95-% E7%8D% A8% E8% A7%92% E7%8D% B8% E6%98%9F% E6%8E% A2spac% E6%98% AF% E7%94%9A% E9% BA% BC-% E6%9D%8E% E6% BE% A4% E6% A5% B7-peter-thiel-catherine-wood"> 美股新股新玩法！獨角獸星探 SPAC 是甚麼？李澤楷、Peter Thiel 都涉足｜精叻理財 </a><br><a href="https://news.cnyes.com/news/id/4655523"> 史上最大 SPAC 交易！傳避險基金大咖艾克曼將併購環球音樂 </a><br> 環球音樂 (Universal Music Group) 為全球第一大唱片公司，是法國媒體巨頭威望迪集團 (Vivendi) 旗下子公司，中國科技巨投騰訊也是環球音樂的股東之一。</p>
<h3 id="華為的鴻蒙，博弈在中美之間"><a href="# 華為的鴻蒙，博弈在中美之間" class="headerlink" title="華為的鴻蒙，博弈在中美之間"></a>華為的鴻蒙，博弈在中美之間 </h3><p><a href="https://newtalk.tw/news/view/2021-06-10/587302"> 華為鴻蒙 OS 上架短短 7 天！用戶數已突破 1 千萬 </a><br>Google 也在做萬物互聯：Fuchsia<br> 一旦手機設備商裝上鴻蒙系統，很有可能被美國制裁。<br>一般而言，手機操作系統如果超過 16% 的規模臨界點，生態基本就能存活。</p>
<h3 id="貝佐斯上天記"><a href="# 貝佐斯上天記" class="headerlink" title="貝佐斯上天記"></a>貝佐斯上天記 </h3><p><a href="https://vitomag.com/tech/tbkalc.html"> 貝佐斯上天記：退休第一件事，就是和全世界最愛的人一起「上天」</a></p>
<h3 id="美聯儲隔夜逆回購使用量再創新高"><a href="# 美聯儲隔夜逆回購使用量再創新高" class="headerlink" title="美聯儲隔夜逆回購使用量再創新高"></a>美聯儲隔夜逆回購使用量再創新高 </h3><p><a href="https://news.sina.com.tw/article/20210608/38816972.html"> 流動性再爆表！美聯儲隔夜逆回購使用量再創新高突破 4860 億美元 </a><br> 目前美國聯邦基金利率是 0-0.25%，基本上處於零利率時代，市場對於加息是有預期的，科技成長股是成長重點。</p>
<p>虛擬貨幣的價格波動和市場流動性的鬆緊有直接的關係。</p>
<p>美元太弱導致通脹不利，美聯儲加息會導致美元走强，失業率和通脹與選舉有很大關係。</p>
<p>美聯儲表示將逐步出售去年疫情期間購入的公司債券，朝著美聯儲不再對市場進行支持策略邁出的一小步，或者至少表明美聯儲認爲企業債券市場已經完全康復，可以逐步推出了</p>
<h3 id="FDA- 批准 -Biogen- 百健研發的新藥 -Aducanumab"><a href="#FDA- 批准 -Biogen- 百健研發的新藥 -Aducanumab" class="headerlink" title="FDA 批准 Biogen 百健研發的新藥 Aducanumab"></a>FDA 批准 Biogen 百健研發的新藥 Aducanumab</h3><p><a href="https://health.udn.com/health/story/6008/5522551">為何阿茲海默新藥被專家否絕 FDA 卻仍批准上市？</a><br>百健公司股票跳漲 50%，之後有所回落。</p>
<p>阿茲海默已經幾十年沒有什麽有效藥推出，絕大部分投資者沒有抱希望，選擇隨時利好出貨走人。</p>
<h3 id="土地出讓金劃轉到稅收部門統一徵繳，本質是中央在縮減地方的財權"><a href="# 土地出讓金劃轉到稅收部門統一徵繳，本質是中央在縮減地方的財權" class="headerlink" title="土地出讓金劃轉到稅收部門統一徵繳，本質是中央在縮減地方的財權"></a>土地出讓金劃轉到稅收部門統一徵繳，本質是中央在縮減地方的財權 </h3><p><a href="https://www.yicai.com/news/101073956.html"> 税务征管土地出让金后，一些城投公司要慌？</a><br>錢不是直接進入地方政府的口袋，地方賣地的積極性會降低，有利於調控地皮價格和地價。</p>
<p>對股市的影響：短期利空房地產板塊，尤其高負債、城投類地產公司。地方政府不能隨意支配土地出讓金了，意味著信用突然下降，一些房地產企業的債務可能會出現違約的情況。</p>
<h3 id="特斯拉高端人才流動性問題"><a href="# 特斯拉高端人才流動性問題" class="headerlink" title="特斯拉高端人才流動性問題"></a>特斯拉高端人才流動性問題 </h3><p> 長期高管 Jerome Guillen 離開了特斯拉。<br>早先，Peter Carlsson 和 Paolo Cerruti，創辦電池公司 Northvolt。<br>Lucid 現任高管團隊約半數曾任職於特斯拉。</p>
<h3 id="拜登基建談判破裂 - 增稅、資金規模談不攏"><a href="# 拜登基建談判破裂 - 增稅、資金規模談不攏" class="headerlink" title="拜登基建談判破裂 增稅、資金規模談不攏"></a>拜登基建談判破裂 增稅、資金規模談不攏 </h3><p><a href="https://news.cnyes.com/news/id/4657996"> 拜登基建談判破裂 增稅、資金規模談不攏</a></p>
<h3 id="拜登將於 -6- 月 -9- 日開啓他上任後的首次出國訪問"><a href="# 拜登將於 -6- 月 -9- 日開啓他上任後的首次出國訪問" class="headerlink" title="拜登將於 6 月 9 日開啓他上任後的首次出國訪問"></a>拜登將於 6 月 9 日開啓他上任後的首次出國訪問</h3>]]></content>
      <categories>
        <category>生活-投資市場觀察</category>
      </categories>
  </entry>
  <entry>
    <title>好的文章或故事</title>
    <url>/2021/05/18/investment-observe-good-article-or-story/</url>
    <content><![CDATA[<p><a href="https://www.businesstoday.com.tw/article/category/80401/post/202003310046/% E4% BB%96% E6%98% AF% E7%84% A1% E8%89% AF% E7% A6% BF% E9% B7% B9% EF% BC%8C% E9%82%84% E6%98% AF% E6%93%8D% E7%9B% A4% E7% A5%9E% E4% BA% BA% EF% BC%9F">他是無良禿鷹，還是操盤神人？</a><br><a href="https://meet.bnext.com.tw/articles/view/44610">一個流量企業的沒落：從市值破千億美元到被收購的命運 </a><br><a href="https://zombit.info/know-the-only-cryptocurrency-financial-products-in-the-current-financial-market/"> 認識目前金融市場唯一的證券型加密貨幣金融商品 </a><br><a href="https://www.blocktempo.com/11-publicly-traded-companies-own-3-btc/"> 這 11 間上市公司「已掌控 3.2%」的比特幣總供應量，這會是隱憂嗎？</a><br><a href="https://blog.usstocks.com.tw/?p=3892">產業研究：5G 射頻產業整理（上）</a><br><a href="https://blog.usstocks.com.tw/?p=3931">產業研究：5G 射頻產業整理（下）</a><br><a href="https://finance.sina.com.cn/stock/hkstock/hkstocknews/2020-05-25/doc-iircuyvi4966214.shtml">抛弃 Facebook (FB.US) 的野孩子：硅谷的短视，我带不动</a><br><a href="https://www.dcard.tw/f/money/p/234259731">dcard 投顧老師表演的觀看心得</a></p>
]]></content>
      <categories>
        <category>生活-投資市場觀察</category>
      </categories>
  </entry>
  <entry>
    <title>投資的觀念和技巧</title>
    <url>/2021/05/12/investment-tips-and-concept/</url>
    <content><![CDATA[<h3 id="一些觀念"><a href="# 一些觀念" class="headerlink" title="一些觀念"></a>一些觀念 </h3><h4 id="外溢效應"><a href="# 外溢效應" class="headerlink" title="外溢效應"></a> 外溢效應</h4><p>Ex：台灣人換美金，會導致台幣貶值，救了台灣的出口和科技業。</p>
<h4 id="什麽是私募基金"><a href="# 什麽是私募基金" class="headerlink" title="什麽是私募基金"></a>什麽是私募基金 </h4><p> 把錢丟給基金公司，由公司去操盤 <span id="more"></span><br>超厲害的基金一般人通常買不到 Ex：文藝復興基金</p>
<h4 id="投資開始的準備？"><a href="# 投資開始的準備？" class="headerlink" title="投資開始的準備？"></a>投資開始的準備？</h4><p>指數投資：看大盤 <br> 價值投資：看財報 <br> 一定會有看錯的部位，重點是總體績效</p>
<h4 id="NIFTY-50- 和 -0050- 的差異？"><a href="#NIFTY-50- 和 -0050- 的差異？" class="headerlink" title="NIFTY 50 和 0050 的差異？"></a>NIFTY 50 和 0050 的差異？</h4><p>FAANG、NIFTY 50 是主題型 ETF，不建議買主題型 ETF<br>0050 有太弱留強的機制</p>
<h4 id="PCB- 廠商就是有單的時候漲（中間財）"><a href="#PCB- 廠商就是有單的時候漲（中間財）" class="headerlink" title="PCB 廠商就是有單的時候漲（中間財）"></a>PCB 廠商就是有單的時候漲（中間財）</h4><p>Ex：PCB 和被動原件</p>
<h3 id="Michael-Burry- 在 -2019- 年 -9- 月指出指數型 -ETF- 是泡沫"><a href="#Michael-Burry- 在 -2019- 年 -9- 月指出指數型 -ETF- 是泡沫" class="headerlink" title="Michael Burry 在 2019 年 9 月指出指數型 ETF 是泡沫"></a>Michael Burry 在 2019 年 9 月指出指數型 ETF 是泡沫 </h3><p> 如果是主題型 ETF 有可能</p>
<h3 id="《投資最重要的事》"><a href="#《投資最重要的事》" class="headerlink" title="《投資最重要的事》"></a>《投資最重要的事》</h3><p>Q：價值型投資可以透過價值型 ETF 嗎？<br>價值型投資的定義：在公司被低估的時候買入 <br> 價值型投資在過去五年都很悶，現在是一個偏向成長投資的時代<br>A：大盤指數也是一種價值型投資</p>
<h3 id="量化交易的原理"><a href="# 量化交易的原理" class="headerlink" title="量化交易的原理"></a>量化交易的原理 </h3><p> 現在市場上的組成是 1 (長期投資)：3 (高頻交易)<br>這 3 的人都是量化交易 (高頻交易)<br>巴菲特：看一家公司有沒有被低估，買自己覺得便宜的東西 <br>Cathie Wood：也是選進一個自己覺得被低估的東西，雖然和巴菲特選擇的方向不一樣<br> 一個是選擇型還是成長型，其實分界不明顯（Howard Marks）<br>公司估值方法：PB (市净率)、PS (市销率)、PE (市盈率)<br><a href="https://zhuanlan.zhihu.com/p/77157739">公司估值方法：PB (市净率)、PS (市销率)、PE (市盈率)</a><br>James Simons：如果你給我夠多的數據，我就可以預測未來</p>
<h3 id="Social-Capital- 的訪問提問：要怎麽擴大我們的收益？"><a href="#Social-Capital- 的訪問提問：要怎麽擴大我們的收益？" class="headerlink" title="Social Capital 的訪問提問：要怎麽擴大我們的收益？"></a>Social Capital 的訪問提問：要怎麽擴大我們的收益？</h3><p>美國創業投資公司 Social Capital 創辦人兼行政總裁 Chamath Palihapitiya<br>IPOE 的目標對象是 SoFi<br>Q：訪問：要怎麽擴大我們的收益？<br>A：避免追求短期的刺激或是獲利。<br>Steve Jobs 完全和社群媒體絕緣，Chamath Palihapitiya 雖然沒有完全隔離，但是會減少。<br>例如發 instagram，會立即得到回饋，你就會不知不覺花很多時間在上面，<br>想要講的比別人好、別人講的不好會焦慮、追求 clubhouse 房間人數。</p>
<h3 id="Mohnish-Pabrai- 的訪問提問：怎麽找到值得投資的標的？-spawner"><a href="#Mohnish-Pabrai- 的訪問提問：怎麽找到值得投資的標的？-spawner" class="headerlink" title="Mohnish Pabrai 的訪問提問：怎麽找到值得投資的標的？ spawner"></a>Mohnish Pabrai 的訪問提問：怎麽找到值得投資的標的？ spawner</h3><p>最近在很多訪問受到很多收穫，當然最多收穫的還是看書，<br>訪問是別人提問，有時候會切入到講者自己沒有想到的東西。<br>投資名家 Mohnish Pabrai 雖然是巴菲特的信徒，但是最後發展出自己的一套：spawner。<br><img src="/2021/05/12/investment-tips-and-concept/photo1.png" alt><br><a href="https://sylin.tw/2021/02/21/pabrai-spawners/">如何評估公司價值？價值投資者 Pabrai 的 Spawner 分類法</a><br>（雖然最近一些泛通膨的題材都在漲 ex：石油，但這不是一個長期的，所以不會跟著巴菲特買）。</p>
<h3 id="彼得林區"><a href="# 彼得林區" class="headerlink" title="彼得林區"></a>彼得林區 </h3><p><a href="https://rich01.com/peter-lynch-says-20-1/"> 彼得林區選股戰略》10 句投資經典語錄 (一)</a></p>
<h3 id="三种常见估值的方法"><a href="# 三种常见估值的方法" class="headerlink" title="三种常见估值的方法"></a>三种常见估值的方法 </h3><h4 id="PB- 市净率 -＝市值 -÷- 净资产"><a href="#PB- 市净率 -＝市值 -÷- 净资产" class="headerlink" title="PB (市净率)＝市值 ÷ 净资产"></a>PB (市净率)＝市值 ÷ 净资产</h4><p> 通常情况下，PB 适用于那些拥有大量固定资产且周期性较强的行业，对于软件、电商等固定资产较少、商誉较重的行业就不太适用了。</p>
<h4 id="PS- 市销率 -＝市值 -÷- 销售额"><a href="#PS- 市销率 -＝市值 -÷- 销售额" class="headerlink" title="PS (市销率)＝市值 ÷ 销售额"></a>PS (市销率)＝市值 ÷ 销售额</h4><p>PS 估值适用于利润为零或负的电商、软件等未来价值较高的行业。例如京东 2015 年销售额高达 1813 亿元，但净利润亏损 94 亿元。这是一种战略性亏损，是投资性支出带来的亏损，这是对未来的投资，长远看是很值的。</p>
<h4 id="PE- 市盈率 -＝市值 -÷- 净利润"><a href="#PE- 市盈率 -＝市值 -÷- 净利润" class="headerlink" title="PE (市盈率)＝市值 ÷ 净利润"></a>PE (市盈率)＝市值 ÷ 净利润 </h4><p> 市盈率法是对企业估值最普通、最普遍的方法。一般来说，市盈率估值不适用于利润为零及负的公司。PE 估值法适用于周期性较弱企业，如公共服务业、食品行业、道路运输业等，因其盈利相对稳定。如果融资企业处于初创期，还没有利润，仍然用 PE 对企业估值，就可以考虑把收益期延长 3～5 年，对利润进行加权平均。</p>
<h4 id="再平衡"><a href="# 再平衡" class="headerlink" title="再平衡"></a>再平衡 </h4><p> 再平衡当中的静平衡就是自动在做买低卖高的动作</p>
<h4 id="風險評估"><a href="# 風險評估" class="headerlink" title="風險評估"></a>風險評估 </h4><p> 索丁諾比率 Sortino Ratio：報酬除以下行風險 (負報酬的風險)<br>夏普比率 Sharpe Ratio：報酬除以總風險 (含上行與下行、正負報酬都含標準差計算在內)</p>
<h4 id="IPO"><a href="#IPO" class="headerlink" title="IPO"></a>IPO</h4><p>当一家公司想进行 IPO 时，它通常会雇佣承销商，一般是知名的投行（例如高盛或摩根士丹利），承销商的职责是确保公司拟向公众发售的所有股票都卖出去了，以及确保公司完成融资目标。</p>
<p>承销商会先购买所有的流通股或普通股，然后将股票转售给市场。承销商可以行使购买额外股票的选择权。</p>
<h3 id="一些技巧原則"><a href="# 一些技巧原則" class="headerlink" title="一些技巧原則"></a>一些技巧原則 </h3><h4 id="投資建議"><a href="# 投資建議" class="headerlink" title="投資建議"></a> 投資建議 </h4><p> 先從存股開始，等到賺到股利，再拿這筆股利去賺價差，投資才會比較安心。</p>
<h4 id="舉例什麼是避險"><a href="# 舉例什麼是避險" class="headerlink" title="舉例什麼是避險"></a>舉例什麼是避險 </h4><p> 衍生金融品的市場 (例如期貨和選擇權) 是零和市場，和現貨市場 (股票市場) 不一樣。<br>很多衍生金融品的本質是拿來避險的。<br>例如你買了很多臺積電的股票，你可以在 (1) 期貨做空 (2) 選擇權 buy put (3) 包租公：選擇權 sell call<br>通常不建議當選擇權的賣方，因爲風險無限大，但是持有現股的 sell call 是 cover code，掩護性的買權</p>
<h4 id="執行分批停利的時間點"><a href="# 執行分批停利的時間點" class="headerlink" title="執行分批停利的時間點"></a>執行分批停利的時間點</h4><p>(1) 公司的基本面改變<br>(2) 有更好的選擇 (機會成本)<br>(3) 我擺明就是來炒短線的</p>
<h4 id="過年了台股怎麽處理？總結一下"><a href="# 過年了台股怎麽處理？總結一下" class="headerlink" title="過年了台股怎麽處理？總結一下"></a>過年了台股怎麽處理？總結一下 </h4><p> 不要整天做追高殺低的事情 <br> 以過往的數據來看，台股確實有新年紅包 <br>（covid-19 是黑天鵝，發生概率小，不要因噎廢食）<br> 避險？散戶避險有可能被雙八</p>
<h4 id="市價掛單？"><a href="# 市價掛單？" class="headerlink" title="市價掛單？"></a>市價掛單？</h4><p>買流動性低的個股，如果掛市價要小心變成接盤俠，所以在當天就要分批買</p>
<h4 id="買幣"><a href="# 買幣" class="headerlink" title="買幣"></a>買幣 </h4><p> 投資虛擬貨幣的話最好是買比特幣和以太幣，<br>就像股票投資：大部位買權值股，小部位買高速成長股。</p>
<h4 id="科技業"><a href="# 科技業" class="headerlink" title="科技業"></a>科技業 </h4><p> 如果有内線消息，知道哪間公司產能被排擠，就可以進去放空。</p>
<h4 id="美股 - 期貨平台？"><a href="# 美股 - 期貨平台？" class="headerlink" title="美股 / 期貨平台？"></a>美股 / 期貨平台？</h4><p>國外比較流行投資選擇權<br>Etoro 有比較多選擇，但是界面比較不好</p>
<h4 id="Bitfinex- 放貸是否可以投資？"><a href="#Bitfinex- 放貸是否可以投資？" class="headerlink" title="Bitfinex 放貸是否可以投資？"></a>Bitfinex 放貸是否可以投資？</h4><p>有點像是保證金交易，借錢給別人炒幣，<br>只要它賠到一定程度，就會被强制斷頭，所以重點要看流動性。</p>
<h4 id="本多終勝"><a href="# 本多終勝" class="headerlink" title="本多終勝"></a>本多終勝 </h4><p> 所以一般散戶，在下殺的時候，第一步先去杠桿。<br>因爲本金多的人，可以在下跌的時候一直補資金，撐到贏。</p>
<h3 id="公司債"><a href="# 公司債" class="headerlink" title="公司債"></a>公司債 </h3><p> 高評等債可以作爲資產配置 <br> 數據顯示：多頭時候，高收益債爆掉的機率也不高</p>
<h3 id="市場資訊平台"><a href="# 市場資訊平台" class="headerlink" title="市場資訊平台"></a>市場資訊平台 </h3><h4 id="1- 台股：站長的報告（定錨產業筆記）"><a href="#1- 台股：站長的報告（定錨產業筆記）" class="headerlink" title="(1) 台股：站長的報告（定錨產業筆記）"></a>(1) 台股：站長的報告（定錨產業筆記）</h4><p> 工商時報的台股報導也不錯</p>
<h4 id="2- 美股"><a href="#2- 美股" class="headerlink" title="(2) 美股"></a>(2) 美股 </h4><p>(a)    免費的<br>Marketwatch、seeking alpha<br>(b)    要錢的<br>WSJ 華爾街日報<br>FT 金融時報<br> 彭博新聞社（英文：Bloomberg News）是全球最大的財經資訊公司 <br> 基本上他們有寫的新聞，其他新聞也會轉發</p>
<h3 id="信用卡一定要辦"><a href="# 信用卡一定要辦" class="headerlink" title="信用卡一定要辦"></a>信用卡一定要辦 </h3><p> 信用卡的額度是很好的利用方式（相當於一個月零利率的貸款），重點是自己不要亂花。</p>
<h3 id="股債配置"><a href="# 股債配置" class="headerlink" title="股債配置"></a>股債配置 </h3><p><a href="https://george-dewi.com/stock-bond-balanced-etf-recommendation/">【美股股債平衡型 ETF 介紹】AOA、AOR、AOM、AOK 大評比</a><br> 要看一個商品的績效，最簡單的就是和大盤比，<br>這種商品和大盤比績效一定比較差，但是危機來的時候會有保護的功能，<br>如果你不需要債保護，你是可以承擔波動性的，就直接丟大盤就好了</p>
<h3 id="石油股（XOM、CVX、RDS、BP）不要重倉"><a href="# 石油股（XOM、CVX、RDS、BP）不要重倉" class="headerlink" title="石油股（XOM、CVX、RDS、BP）不要重倉"></a>石油股（XOM、CVX、RDS、BP）不要重倉 </h3><p> 石油能提供能源 (是工業的血液)，也是各種化工產品最重要的原材料之一。<br>石油產業鏈大致分爲三塊：上游、中游、下游。<br>上游：原油的探勘和開采，主要是傳統的油田、海上鑽井平臺、近十幾年比較火的頁岩油技術 <br> 中游：石油和天然氣和存儲和運輸（海運、鐵路、公路運輸、管道運輸）<br>下游：煉油、石油化工（遍及生活中的食衣住行）、各種石油產品的分發零售</p>
<p>石油公司的盈利非常依賴原油價格（價格波動受政治局勢影響），周期性很强，靠天吃飯，還有發生事故的風險，<br>石油公司的股價和石油價格走勢呈現高度相關性，因爲石油就是石油，沒有什麽消費者沒有什麽品牌忠誠度，<br>石油的消費者：工業企業、石油產業下游的化工企業，選擇原材料的時候不看品牌，價格就是最大考量，<br>競爭激烈利潤薄，小企業幾乎沒有生存空間。</p>
<p>石油產業源於十九世紀末石油大亨洛克菲勒創建的標準石油公司，<br>1911 年美國最高法院根據反壟斷法把標準石油拆分爲 34 家公司，<br>這四家石油公司就是其中 4 家。</p>
<p>我不會重倉石油股還有一個原因，就是相對科技和電信產業，石油產業是我不了解的<br>Q：了解政治局勢，可以投資石油期貨？</p>
<h4 id="生技股是台股深水區"><a href="# 生技股是台股深水區" class="headerlink" title="生技股是台股深水區"></a>生技股是台股深水區</h4>]]></content>
  </entry>
  <entry>
    <title>三連擊（洛谷 P1008）</title>
    <url>/2019/04/01/luogu-P1008%20triple-hit/</url>
    <content><![CDATA[<h4 id="題目描述"><a href="# 題目描述" class="headerlink" title="題目描述"></a>題目描述 </h4><pre><code> 將 1，2,...,9 共 9 個數分成三組，分別組成三個三位數，且使這三個三位數構成 1：2：3 的比例，試求出所有滿足條件的三個三位數。 
</code></pre><h4 id="輸入輸出格式"><a href="# 輸入輸出格式" class="headerlink" title="輸入輸出格式"></a>輸入輸出格式 </h4><pre><code> 輸入格式：沒有輸入。
輸出格式：若干行，每行 3 個數位。 按照每行第一個數位升序排列。
</code></pre><span id="more"></span>
<h4 id="我的解法："><a href="# 我的解法：" class="headerlink" title="我的解法："></a>我的解法：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 將 i 分別乘以 2 和 3，若這兩個三位數都滿足：(1) 自身沒有重複的數字 (2) 與 i 沒有重複的數字 (3) 不包含 0 這個數字 ，則輸出</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">123</span>; i&lt;=<span class="number">329</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		set&lt;<span class="keyword">int</span>&gt; test1, test2, test3;</span><br><span class="line">		set&lt;<span class="keyword">int</span>&gt; a &#123;i/<span class="number">100</span>, i/<span class="number">10</span>%<span class="number">10</span>, i%<span class="number">10</span>&#125;;</span><br><span class="line">		<span class="keyword">int</span> double_i = i*<span class="number">2</span>, triple_i = i*<span class="number">3</span>;</span><br><span class="line">		set&lt;<span class="keyword">int</span>&gt; b &#123;double_i/<span class="number">100</span>, double_i/<span class="number">10</span>%<span class="number">10</span>, double_i%<span class="number">10</span>&#125;;</span><br><span class="line">		set&lt;<span class="keyword">int</span>&gt; c &#123;triple_i/<span class="number">100</span>, triple_i/<span class="number">10</span>%<span class="number">10</span>, triple_i%<span class="number">10</span>&#125;;</span><br><span class="line">		<span class="built_in">set_intersection</span> (a.<span class="built_in">begin</span> (), a.<span class="built_in">end</span> (), b.<span class="built_in">begin</span> (), b.<span class="built_in">end</span> (), <span class="built_in">inserter</span> (test1, test1.<span class="built_in">begin</span> ()));</span><br><span class="line">		<span class="built_in">set_intersection</span> (a.<span class="built_in">begin</span> (), a.<span class="built_in">end</span> (), c.<span class="built_in">begin</span> (), c.<span class="built_in">end</span> (), <span class="built_in">inserter</span> (test2, test2.<span class="built_in">begin</span> ()));</span><br><span class="line">		<span class="built_in">set_intersection</span> (c.<span class="built_in">begin</span> (), c.<span class="built_in">end</span> (), b.<span class="built_in">begin</span> (), b.<span class="built_in">end</span> (), <span class="built_in">inserter</span> (test3, test3.<span class="built_in">begin</span> ()));</span><br><span class="line">		<span class="keyword">if</span> (test1.<span class="built_in">empty</span> () &amp;&amp; test2.<span class="built_in">empty</span> () &amp;&amp; test3.<span class="built_in">empty</span> () &amp;&amp; a.<span class="built_in">count</span> (<span class="number">0</span>)==<span class="number">0</span> &amp;&amp; b.<span class="built_in">count</span> (<span class="number">0</span>)==<span class="number">0</span> &amp;&amp; c.<span class="built_in">count</span> (<span class="number">0</span>)==<span class="number">0</span> &amp;&amp; a.<span class="built_in">size</span> ()==<span class="number">3</span> &amp;&amp; b.<span class="built_in">size</span> ()==<span class="number">3</span> &amp;&amp; c.<span class="built_in">size</span> ()==<span class="number">3</span>)</span><br><span class="line">			cout &lt;&lt; i &lt;&lt; <span class="string">&quot;&quot;</span> &lt;&lt; double_i &lt;&lt;<span class="string">&quot; &quot;</span> &lt;&lt; triple_i &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h4 id="別的解法"><a href="# 別的解法" class="headerlink" title="別的解法"></a>別的解法</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> i,j,v;<span class="keyword">bool</span> a [<span class="number">10</span>];<span class="comment">//a [i] 表示第 i 个数已经用过了</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">192</span>;i&lt;=<span class="number">327</span>;i++)<span class="comment">// 第一个数最小 192，最大 327。其实不知道的情况下简单来说是从 123-329 的但是算出来是最值就稍微改了下下</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span> (a,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span> (a));v=<span class="number">0</span>;<span class="comment">// 清零</span></span><br><span class="line">        a [i%<span class="number">10</span>]=a [i/<span class="number">10</span>%<span class="number">10</span>]=a [i/<span class="number">100</span>]=a [i*<span class="number">2</span>%<span class="number">10</span>]=a [i*<span class="number">2</span>/<span class="number">10</span>%<span class="number">10</span>]=a [i*<span class="number">2</span>/<span class="number">100</span>]=a [i*<span class="number">3</span>%<span class="number">10</span>]=a [i*<span class="number">3</span>/<span class="number">10</span>%<span class="number">10</span>]=a [i*<span class="number">3</span>/<span class="number">100</span>]=<span class="number">1</span>;<span class="comment">// 统计数字，赋值所有数组 1；</span></span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">1</span>;j&lt;=<span class="number">9</span>;j++) v+=a [j];<span class="comment">//v 表示 1-9 这些数字是否全部齐了，如果有相同的数，就会缺某个数组导致得数 &lt; 9；</span></span><br><span class="line">        <span class="keyword">if</span> (v==<span class="number">9</span>) <span class="built_in">printf</span> (<span class="string">&quot;% d % d % d\n&quot;</span>,i,i*<span class="number">2</span>,i*<span class="number">3</span>);<span class="comment">// 如果齐了就输出</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 以上代码来自洛谷题解作者：Kelin</span></span><br></pre></td></tr></table></figure>
<h4 id="用到的知識點"><a href="# 用到的知識點" class="headerlink" title="用到的知識點"></a>用到的知識點</h4><p>memset：作用是在一段記憶體塊中填充某個給定的值，它是對較大的結構體或陣列進行清零操作的一種最快方法，清空后換為自己給定的值，可以是符號。</p>
<h3 id="C- 刷題总览"><a href="#C- 刷題总览" class="headerlink" title="C++ 刷題总览"></a>C++ 刷題总览 </h3><p><a href="https://wangxchun.github.io/2019/04/01/luogu-P1008%20triple-hit/"> 三連擊（洛谷 P1008）</a><br><a href="https://wangxchun.github.io/2021/03/21/luogu-exercise-review-1-lineartable/">刷题检讨 —(1) 线性表 </a><br><a href="https://wangxchun.github.io/2021/04/08/luogu-exercise-review/"> 刷题检讨</a></p>
]]></content>
      <categories>
        <category>C++刷題</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>OJ</tag>
        <tag>set</tag>
        <tag>洛谷刷題</tag>
      </tags>
  </entry>
  <entry>
    <title>刷题检讨 --(1) 线性表</title>
    <url>/2021/03/21/luogu-exercise-review-1-lineartable/</url>
    <content><![CDATA[<h3 id="线性表"><a href="# 线性表" class="headerlink" title="线性表"></a>线性表 </h3><h5 id="1- 如果你需要高效的隨即存取，而不在乎插入和刪除的效率，使用 -vector- 数组 -iterator"><a href="#1- 如果你需要高效的隨即存取，而不在乎插入和刪除的效率，使用 -vector- 数组 -iterator" class="headerlink" title="(1) 如果你需要高效的隨即存取，而不在乎插入和刪除的效率，使用 vector (数组) //iterator"></a>(1) 如果你需要高效的隨即存取，而不在乎插入和刪除的效率，使用 vector (数组) //iterator</h5><p> 除了用迭代器获取 vector 容器中的元素，[] 和 at 也可以<br>vector<int>(v).swap (v); // 收缩内存<br><span id="more"></span><br>//vector<int> 利用 v 调用拷贝构造函数，创建匿名对象，它会用 v 目前使用的元素个数来初始化这个匿名对象<br>//swap () 互换函数的本质类似于指针的交换<br>// 调换后 v 指向了创建的匿名对象，而本来匿名对象的指针 x 指向原本的 v，并且在该语句过后由系统自动回收</int></int></p>
<p>如果没有用 reserve 预留空间，随着 push 进去的数据越来越多，可能需要重新分配内存<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 统计内存重新开辟的次数</span></span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span>* p = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">	v.<span class="built_in">push_back</span> (i);</span><br><span class="line">	<span class="keyword">if</span> (p != &amp;v [<span class="number">0</span>])</span><br><span class="line">	&#123;</span><br><span class="line">		p = &amp;v [<span class="number">0</span>];</span><br><span class="line">		num++;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;num:&quot;</span> &lt;&lt; num &lt;&lt; endl;</span><br></pre></td></tr></table></figure></p>
<h5 id="2- 如果你需要大量的插入和刪除，而不關心隨機存取，則應使用 -list- 双向循环链表 -const-iterator"><a href="#2- 如果你需要大量的插入和刪除，而不關心隨機存取，則應使用 -list- 双向循环链表 -const-iterator" class="headerlink" title="(2) 如果你需要大量的插入和刪除，而不關心隨機存取，則應使用 list (双向循环链表) //const_iterator"></a>(2) 如果你需要大量的插入和刪除，而不關心隨機存取，則應使用 list (双向循环链表) //const_iterator</h5><p>list 的迭代器是双向迭代器，不支持随机访问（不可以通过 [] 或 at 方式访问数据）<br>it++ // 可以<br>it = it + 1 // 会报错</p>
<h5 id="3- 如果你需要隨機存取，而且關心兩端數據的插入和刪除，則應使用 -deque"><a href="#3- 如果你需要隨機存取，而且關心兩端數據的插入和刪除，則應使用 -deque" class="headerlink" title="(3) 如果你需要隨機存取，而且關心兩端數據的插入和刪除，則應使用 deque"></a>(3) 如果你需要隨機存取，而且關心兩端數據的插入和刪除，則應使用 deque</h5><h3 id="UVA12657"><a href="#UVA12657" class="headerlink" title="UVA12657"></a>UVA12657</h3><pre><code>你有 n 个盒子在桌子上的一条线上从左到右编号为 1……n。你的任务是模拟四种操作
1 X Y 移动盒子编号 X 到盒子编号 Y 的左边（如果 X 已经在 Y 的左边了就忽略）
2 X Y 移动盒子编号 X 到盒子编号 Y 的右边（如果 X 已经在 Y 的右边了就忽略）
3 X Y 交换盒子编号 X 与盒子编号 Y 的位置
4 将整条线反转
操作保证合法，X 不等于 Y
举一个例子，如果 n=6，操作 1 1 4 然后就变成了 2 3 1 4 5 6；再操作 2 3 5 就变成了 2 1 4 5 3 6；再操作 3 1 6 就变成 2 6 4 5 3 1；
输入：最多有 10 组数据，每个数据会包含两个整数 n,m（1≤n,m&lt;100,000）, 接下来是 m 行数据，表示操作。
输出：对于每组数据，输出他们奇数位置的编号的和。
</code></pre><p>思路：利用双向静态链表，且反转不用真的反转，只要做标记就好了。<br>(移动元素需要链表的特性，但是查找是链表不擅长的，所以使用静态链表)<br>检讨：一开始把 if (a!=3&amp;&amp;flag) a=3-a; 的顺序放在下两个 if 的后面，这样就没有考虑到翻转的情形<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (a!=<span class="number">3</span>&amp;&amp;flag)</span><br><span class="line">	a=<span class="number">3</span>-a;</span><br><span class="line"><span class="keyword">if</span> (a==<span class="number">1</span>&amp;&amp;x==l [y])</span><br><span class="line">	<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (a==<span class="number">2</span>&amp;&amp;x==r [y])</span><br><span class="line">	<span class="keyword">continue</span>;</span><br></pre></td></tr></table></figure></p>
<h3 id="UVA101-The-Blocks-Problem"><a href="#UVA101-The-Blocks-Problem" class="headerlink" title="UVA101 The Blocks Problem"></a>UVA101 The Blocks Problem</h3><pre><code>初始时从左到右有 nn 个木块，编号为 0 \ldots n-10…n−1, 要求实现下列四种操作：
move a onto b : 把 aa 和 bb 上方的木块归位，然后把 aa 放到 bb 上面。
move a over b : 把 aa 上方的木块归位，然后把 aa 放在 bb 所在木块堆的最上方。
pile a onto b : 把 bb 上方的木块归位，然后把 aa 及以上的木块坨到 bb 上面。
pile a over b : 把 aa 及以上的木块坨到 bb 的上面。
一组数据的结束标志为 quit，如果有非法指令（如 aa 与 bb 在同一堆），无需处理。
输出：所有操作输入完毕后，从左到右，从下到上输出每个位置的木块编号。
</code></pre><p>思路：使用线性表 vector 来实现 <br> 注释：vector 是单端数组（这题最主要涉及的动作是查找，还有向尾端加元素的移动）</p>
<h3 id="UVA11988- 破损的键盘 -Broken-Keyboard-a-k-a-Beiju-Text"><a href="#UVA11988- 破损的键盘 -Broken-Keyboard-a-k-a-Beiju-Text" class="headerlink" title="UVA11988 破损的键盘 Broken Keyboard (a.k.a. Beiju Text)"></a>UVA11988 破损的键盘 Broken Keyboard (a.k.a. Beiju Text)</h3><pre><code>你在输入文章的时候，键盘上的 Home 键和 End 键出了问题，会不定时的按下。你却不知道此问题，而是专心致志地打稿子，甚至显示器都没开。当你打开显示器之后，展现你面前的数一段悲剧文本。你的任务是在显示器打开前计算出这段悲剧的文本。 给你一段按键的文本，其中 &#39;[&#39; 表示 Home 键，&#39;]&#39; 表示 End 键，输入结束标志是文件结束符（EOF）。
输出一行，即这段悲剧文本。
</code></pre><p>思路：涉及行首和行尾的操作，使用链表 list（不宜用线性表 vector）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span> <span class="params">(string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> len = s.<span class="built_in">length</span> ();</span><br><span class="line">	list&lt;<span class="keyword">char</span>&gt; text;</span><br><span class="line">	list&lt;<span class="keyword">char</span>&gt;::iterator it = text.<span class="built_in">begin</span> ();</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 报错 TLE</span></span><br><span class="line">list&lt;<span class="keyword">char</span>&gt; text;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span> <span class="params">(string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> len = s.<span class="built_in">length</span> ();</span><br><span class="line">	list&lt;<span class="keyword">char</span>&gt;::iterator it = text.<span class="built_in">begin</span> ();</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为什么注释掉那行代码结果是错的？<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span> <span class="params">(string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> len = s.<span class="built_in">length</span> ();</span><br><span class="line">	list&lt;<span class="keyword">char</span>&gt; text;</span><br><span class="line">	list&lt;<span class="keyword">char</span>&gt;::iterator it = text.<span class="built_in">begin</span> ();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		it = text.<span class="built_in">insert</span> (it, s [i]);</span><br><span class="line">		it++;</span><br><span class="line">		<span class="comment">//text.insert (it++, s [i]);</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (it=text.<span class="built_in">begin</span> (); it!=text.<span class="built_in">end</span> (); it++)</span><br><span class="line">		cout &lt;&lt; *it;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="C- 刷題总览"><a href="#C- 刷題总览" class="headerlink" title="C++ 刷題总览"></a>C++ 刷題总览 </h3><p><a href="https://wangxchun.github.io/2019/04/01/luogu-P1008%20triple-hit/"> 三連擊（洛谷 P1008）</a><br><a href="https://wangxchun.github.io/2021/03/21/luogu-exercise-review-1-lineartable/">刷题检讨 —(1) 线性表 </a><br><a href="https://wangxchun.github.io/2021/04/08/luogu-exercise-review/"> 刷题检讨</a></p>
]]></content>
      <categories>
        <category>C++刷題</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>数据结构</tag>
        <tag>线性表</tag>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>vbox 安装 Ubuntu 清理整个磁盘会怎样</title>
    <url>/2021/03/23/linux%20vbox-install-Ubuntu%20clean-up-the-disk/</url>
    <content><![CDATA[<h4 id="vbox- 安装 -Ubuntu- 清理整个磁盘会怎样"><a href="#vbox- 安装 -Ubuntu- 清理整个磁盘会怎样" class="headerlink" title="vbox 安装 Ubuntu 清理整个磁盘会怎样"></a>vbox 安装 Ubuntu 清理整个磁盘会怎样 </h4><p> 不用担心。它不会影响你的整个系统。因为你是在 VirtualBox 虚拟机里面安装系统的。在虚拟机中，硬盘实际上是一个文件。是在电脑中建立一个文件或文件夹。用这个文件或者是文件夹中的内容来模拟一个虚拟的硬盘。此时的格式化，只会影响到虚拟出来的硬盘。对真正的物理硬盘是没有影响的。<br><span id="more"></span></p>
<p>这只是在虚拟机中是这样，要是到了真实的电脑上就要小心了。如果要装两套系统就别选是，除非你已经想清楚了，现有的系统已经打定主意不要了。</p>
<h4 id="请问如何新建一个盘符 -？"><a href="# 请问如何新建一个盘符 -？" class="headerlink" title="请问如何新建一个盘符 ？"></a>请问如何新建一个盘符 ？</h4><p>右键我的电脑，管理，磁盘管理器，<br>此时会看到分区，c： d：等等，<br>若硬盘有剩余空间在 磁盘 0 右边 右键 自由空间 格式化分区就行了。<br>若没有剩余空间，要创建未分配的空间，需要压缩硬盘（右键，压缩卷）。</p>
<h3 id="linux- 文章总览"><a href="#linux- 文章总览" class="headerlink" title="linux 文章总览"></a>linux 文章总览</h3><p><a href="https://wangxchun.github.io/2021/03/23/linux%20vbox-install-Ubuntu%20clean-up-the-disk/">vbox 安装 Ubuntu 清理整个磁盘会怎样</a></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>刷题检讨</title>
    <url>/2021/04/08/luogu-exercise-review/</url>
    <content><![CDATA[<h3 id="P1047"><a href="#P1047" class="headerlink" title="P1047"></a>P1047</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>* buffer = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">512</span>]&#123;<span class="number">5</span>&#125;; <span class="comment">// 第一个 int 初始化为 5，其余初始化为 0</span></span><br></pre></td></tr></table></figure>
<p>上面是合法的，但是其结果与我们设想的不一样，它并不是将分配的 512 个 int 都初始化为 5，而仅仅是将第一个 int 初始化为 5，其余的 511 个仍然初始化为 0！<br>无法将分配的所有元素同时初始化为非 0 值。</p>
<h3 id="C- 刷題总览"><a href="#C- 刷題总览" class="headerlink" title="C++ 刷題总览"></a>C++ 刷題总览 </h3><p><a href="https://wangxchun.github.io/2019/04/01/luogu-P1008%20triple-hit/"> 三連擊（洛谷 P1008）</a><br><a href="https://wangxchun.github.io/2021/03/21/luogu-exercise-review-1-lineartable/">刷题检讨 —(1) 线性表 </a><br><a href="https://wangxchun.github.io/2021/04/08/luogu-exercise-review/"> 刷题检讨</a></p>
]]></content>
      <categories>
        <category>C++刷題</category>
      </categories>
  </entry>
  <entry>
    <title>机器学习算法 --（1）线性回归和非线性回归</title>
    <url>/2020/11/06/machineLearning-1/</url>
    <content><![CDATA[<h3 id="前言"><a href="# 前言" class="headerlink" title="前言"></a>前言 </h3><h4 id="1- 数据挖掘和机器学习的关系"><a href="#1- 数据挖掘和机器学习的关系" class="headerlink" title="1. 数据挖掘和机器学习的关系"></a>1. 数据挖掘和机器学习的关系</h4><h4 id="2- 训练数据 -vs- 验证数据 -vs- 测试数据"><a href="#2- 训练数据 -vs- 验证数据 -vs- 测试数据" class="headerlink" title="2. 训练数据 vs 验证数据 vs 测试数据"></a>2. 训练数据 vs 验证数据 vs 测试数据</h4><h4 id="3- 监督学习 -vs- 无监督学习 -vs- 半监督学习"><a href="#3- 监督学习 -vs- 无监督学习 -vs- 半监督学习" class="headerlink" title="3. 监督学习 vs 无监督学习 vs 半监督学习"></a>3. 监督学习 vs 无监督学习 vs 半监督学习</h4><h4 id="4- 回归 -vs- 分类 -vs- 聚类"><a href="#4- 回归 -vs- 分类 -vs- 聚类" class="headerlink" title="4. 回归 vs 分类 vs 聚类"></a>4. 回归 vs 分类 vs 聚类</h4><h3 id="一、一元线性回归概念"><a href="# 一、一元线性回归概念" class="headerlink" title="一、一元线性回归概念"></a> 一、一元线性回归概念 </h3><p> 回归：高尔顿提出 <br> 回归分析：建立方程模拟两个或多个变量之间如何关联 <br> 一个线性回归：包含一个自变量和一个应变量，用一条直线来模拟 <br> 一元线性回归的模型：$h_\theta (x) = \theta_0 + \theta_1x$<br>$\theta_0$ 是截距，$\theta_1$ 是斜率<br><span id="more"></span></p>
<h3 id="二、代价函数"><a href="# 二、代价函数" class="headerlink" title="二、代价函数"></a>二、代价函数 </h3><p>$\displaystyle J (\theta_0,\theta_1) = {1 \over 2m} \sum_{i=0}^m (h_\theta (x_i) - y_i)^2$<br><img src="/2020/11/06/machineLearning-1/photo1.jpg" alt><br> 自变量是 $\theta_0$ 和 $\theta_1$，应变量是代价函数 $h_\theta (x)$，<br>本来是一个三维的函数图像，Z 轴是 $J (\theta_0,\theta_1)$，但是这里用等高线表示。<br>Q：如何寻找使得代价函数最小的 $\theta_0$ 和 $\theta_1$，后面会讲解。</p>
<h3 id="三、相关系数和决定系数"><a href="# 三、相关系数和决定系数" class="headerlink" title="三、相关系数和决定系数"></a>三、相关系数和决定系数 </h3><h4 id="相关系数：衡量线性相关性的强弱"><a href="# 相关系数：衡量线性相关性的强弱" class="headerlink" title="相关系数：衡量线性相关性的强弱"></a> 相关系数：衡量线性相关性的强弱</h4><p>$\displaystyle r_{xy} = {{\sum {(X_i - \bar X)(Y_i - \bar Y)}} \over {\sqrt {\sum {(X_i - \bar X)^2 (Y_i - \bar Y)^2}}} }$  </p>
<h4 id="决定系数"><a href="# 决定系数" class="headerlink" title="决定系数"></a>决定系数 </h4><p> 总平方和（SST）：$\sum_{i=0}^n (y_i - \bar y)^2$<br>残差平方和（SSE）：$\sum_{i=0}^n (y_i - \hat y)^2$<br>回归平方和（SSR）：$\sum_{i=0}^n (\hat y - \bar y)^2$<br>它们三者的关系是：$SST = SSE + SSR$<br>决定系数：$\displaystyle R^2 = {SSR \over SST} = 1 - {SSE \over SST}$</p>
<h3 id="四、梯度下降法"><a href="# 四、梯度下降法" class="headerlink" title="四、梯度下降法"></a>四、梯度下降法 </h3><h4 id="概念"><a href="# 概念" class="headerlink" title="概念"></a> 概念 </h4><p> 缺点：初始值的选取会影响到最后的结果，只能找到局部最优解<br>(凸函数的局部最值就是全局最值)<br>repeat until convergence<br>{<br>    $\displaystyle \qquad\qquad\theta_j := \theta_j - \alpha {\partial \over \partial\theta_j} J (\theta_0,\theta_1)$ $\quad (for\quad j = 0 \quad and \quad j = 1)$<br>}</p>
<p>同步更新：<br>$\displaystyle temp0 := \theta_0 - \alpha {\partial \over \partial\theta_0} J (\theta_0,\theta_1)$<br>$\displaystyle temp1 := \theta_1 - \alpha {\partial \over \partial\theta_1} J (\theta_0,\theta_1)$<br>$\theta_0 := temp0$<br>$\theta_0 := temp1$</p>
<p>学习率 $\alpha$ 不能太大也不能太小，<br>太大可能会导致在收敛值附近不断震荡，一直无法收敛；<br>太小会导致收敛速度过慢</p>
<h4 id="用梯度下降法来求解线性回归"><a href="# 用梯度下降法来求解线性回归" class="headerlink" title="用梯度下降法来求解线性回归"></a>用梯度下降法来求解线性回归</h4><p>$h_\theta (x) = \theta_0 + \theta_1x -(1)$<br>$\displaystyle J (\theta_0,\theta_1) = {1 \over 2m} \sum_{i=0}^m (h_\theta (x_i) - y_i)^2 -(2)$<br>$ 将 (1) 式代入 (2) 式 $<br>$\displaystyle {\partial \over \partial\theta_0} J (\theta_0,\theta_1) = {1 \over m}\sum_{i=0}^m (h_\theta (x_i) - y_i)$ </p>
<h3 id="五、sklearn- 实现一元线性回归（sklearn- 使用的是标准方程法）"><a href="# 五、sklearn- 实现一元线性回归（sklearn- 使用的是标准方程法）" class="headerlink" title="五、sklearn 实现一元线性回归（sklearn 使用的是标准方程法）"></a>五、sklearn 实现一元线性回归（sklearn 使用的是标准方程法）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x_data = data [:,<span class="number">0</span>,np.newaxis]</span><br><span class="line">y_data = data [:,<span class="number">1</span>,np.newaxis]</span><br><span class="line"><span class="comment"># 创建并拟合模型</span></span><br><span class="line">model = LinearRegression ()</span><br><span class="line">model.fit (x_data, y_data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画图</span></span><br><span class="line">plt.plot (x_data, y_data, <span class="string">&#x27;b.&#x27;</span>)</span><br><span class="line">plt.plot (x_data, model.predict (x_data), <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">plt.show ()</span><br></pre></td></tr></table></figure>
<h3 id="六、多元线性回归"><a href="# 六、多元线性回归" class="headerlink" title="六、多元线性回归"></a>六、多元线性回归</h3><h4 id="Hypothesis"><a href="#Hypothesis" class="headerlink" title="Hypothesis:"></a>Hypothesis:</h4><p>$h_\theta (x) = \theta^Tx = \theta_0x_1 + \theta_2x_2 + … + \theta_nx_n$</p>
<h4 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters:"></a>Parameters:</h4><p>theta_0,theta_1,…,theta_n</p>
<h4 id="Cost-Function"><a href="#Cost-Function" class="headerlink" title="Cost Function"></a>Cost Function</h4><p>$\displaystyle J (\theta_0,\theta_1,…,\theta_n) = {1 \over 2m} \sum_{i=0}^m (h_\theta (x_i) - y_i)^2 -(2)$</p>
<h4 id="Gradient-descent"><a href="#Gradient-descent" class="headerlink" title="Gradient descent"></a>Gradient descent</h4><p>repeat until convergence<br>{<br>    $\displaystyle \qquad\qquad\theta_j := \theta_j - \alpha {\partial \over \partial\theta_j} J (\theta_0,…,\theta_n)$<br>    $\displaystyle \quad\qquad (for\quad j = 0,1,…,n)$<br>}</p>
<h3 id="七、多项式回归"><a href="# 七、多项式回归" class="headerlink" title="七、多项式回归"></a>七、多项式回归 </h3><h4 id="原理"><a href="# 原理" class="headerlink" title="原理"></a> 原理 </h4><p> 假设要拟合的不是直线（或超平面），而是需要找到一个用多项式所表示的曲线（或者超平面）。</p>
<h4 id="sklearn- 实现多项式回归"><a href="#sklearn- 实现多项式回归" class="headerlink" title="sklearn 实现多项式回归"></a>sklearn 实现多项式回归</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> PolynomialFeatures</span><br><span class="line"><span class="comment"># 定义多项式回归，degree 的值可以调节多项式的特征</span></span><br><span class="line">poly_reg = PolynomialFeatures (degree=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 特征处理</span></span><br><span class="line">x_poly =  poly_reg.fit_transform (x_data)</span><br><span class="line"><span class="comment"># 定义回归模型</span></span><br><span class="line">lin_reg = LinearRegression ()</span><br><span class="line"><span class="comment"># 训练模型</span></span><br><span class="line">lin_reg.fit (x_poly, y_data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画图</span></span><br><span class="line">plt.plot (x_data, y_data, <span class="string">&#x27;b.&#x27;</span>)</span><br><span class="line">plt.plot (x_data, lin_reg.predict (x_poly), c=<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">plt.show ()</span><br></pre></td></tr></table></figure>
<h3 id="八、标准方程法（vs- 梯度下降法）"><a href="# 八、标准方程法（vs- 梯度下降法）" class="headerlink" title="八、标准方程法（vs 梯度下降法）"></a>八、标准方程法（vs 梯度下降法）</h3><h4 id="概念 -1"><a href="# 概念 -1" class="headerlink" title="概念"></a>概念 </h4><p>$\displaystyle J (\theta_0,\theta_1,…,\theta_n) = {1 \over 2m} \sum_{i=0}^m (h_\theta (x_i) - y_i)^2 -(2)$<br> 令 $\displaystyle {\partial \over \partial\theta_j} J (\theta)=…=0$<br>求解：$\theta_1,\theta_2,…,\theta_n$</p>
<p>例：X 为 $4 \times 5$ 矩阵，$4$ 个样本，$4+1$ 个参数</p>
<p>$X=<br>\begin {bmatrix}<br>    1 &amp; 2104 &amp; 5 &amp; 1 &amp; 45 \\<br>    1 &amp; 1416 &amp; 3 &amp; 2 &amp; 40 \\<br>    1 &amp; 1534 &amp; 3 &amp; 2 &amp; 30 \\<br>    1 &amp; 852 &amp; 2 &amp; 1 &amp; 36 \\<br>\end {bmatrix}<br>$ $\quad\quad$ $w=<br>\begin {bmatrix}<br>    w_0 \\<br>    w_1 \\<br>    w_2 \\<br>    w_3 \\<br>    w_4 \\<br>\end {bmatrix}<br>$ $\quad\quad$ $y=<br>\begin {bmatrix}<br>    460 \\<br>    232 \\<br>    315 \\<br>    178 \\<br>\end {bmatrix}<br>$</p>
<p>$\sum_{i=0}^m (h_w (x_i) - y_i)^2=(y-Xw)^T (y-Xw)$</p>
<p>$\displaystyle {\partial (y-Xw)^T (y-Xw) \over \partial w} = 0$<br>$\displaystyle {\partial (y^Ty - y^TXw - w^TX^Ty + w^TX^TXw) \over \partial w} = 0$<br>$\displaystyle {\partial y^Ty \over \partial w} - {\partial y^TXw \over \partial w} - {\partial w^TX^Ty \over \partial w} + {\partial w^TX^TXw \over \partial w} = 0$<br>$0 - X^Ty - X^Ty + 2X^TXw = 0$<br>$X^TXw = X^Ty$<br>$w = (X^TX)^(-1) X^Ty$<br>注释：<a href="https://en.wikipedia.org/wiki/Matrix_calculus#Scalar by vector_identities">矩阵的求导</a></p>
<h4 id="标准方程法 -vs- 梯度下降法"><a href="# 标准方程法 -vs- 梯度下降法" class="headerlink" title="标准方程法 vs 梯度下降法"></a>标准方程法 vs 梯度下降法</h4><div class="table-container">
<table>
<thead>
<tr>
<th>梯度下降法</th>
<th>标准方程法</th>
</tr>
</thead>
<tbody>
<tr>
<td>缺点：<br> 需要选择合适的学习率 <br> 需要迭代很多个周期 <br> 只能得到最优解的近似值</td>
<td>优点：<br> 不需要学习率 <br> 不需要迭代 <br> 可以得到全局最优解</td>
</tr>
<tr>
<td>优点：<br> 当特征值非常多的时候也可以很好的工作</td>
<td>缺点：<br> 需要计算 $(𝑋^T𝑋)^{−1}$ 时间复杂度大约是 O ($n^3$) <br>n 是特征数量</td>
</tr>
</tbody>
</table>
</div>
<h4 id="自己写标准方程法"><a href="# 自己写标准方程法" class="headerlink" title="自己写标准方程法"></a>自己写标准方程法</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">weights</span> (<span class="params">xArr, yArr</span>)</span></span><br><span class="line">	xMat = np.mat (xArr)</span><br><span class="line">	yMat = np.mat (yArr)</span><br><span class="line">	xTx = xMat.T * xMat <span class="comment"># 矩阵乘法</span></span><br><span class="line">	<span class="comment"># 如果矩阵的 det 值为零，说明该矩阵没有逆矩阵</span></span><br><span class="line">	<span class="keyword">if</span> np.linalg.det (xTx) == <span class="number">0.0</span>:</span><br><span class="line">		<span class="built_in">print</span> (<span class="string">&quot;This matrix cannot do inverse&quot;</span>)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	<span class="comment">#xTx.I 为 xTx 的逆矩阵</span></span><br><span class="line">	ws = xTx.I * xMat.T * yMat</span><br><span class="line">	<span class="keyword">return</span> ws</span><br></pre></td></tr></table></figure>
<h3 id="九、特征缩放"><a href="# 九、特征缩放" class="headerlink" title="九、特征缩放"></a>九、特征缩放 </h3><p> 假设不同的特征的取值范围相差非常大，就会造成天然的权重不一 <br> 解决方法：特征缩放</p>
<h4 id="数据归一化"><a href="# 数据归一化" class="headerlink" title="数据归一化"></a>数据归一化 </h4><p> 转化成 $(0,1)$ 之间：$newValue = \displaystyle {oldValue - min \over max - min}$</p>
<p>转化成 $(-1,1)$ 之间：$newValue = (\displaystyle {oldValue - min \over max - min}-0.5) \times 2$</p>
<h4 id="数据标准化"><a href="# 数据标准化" class="headerlink" title="数据标准化"></a>数据标准化</h4><p>$newValue = \displaystyle {oldValue - u \over s}$ 其中 u 为数据的平均值，s 为数据的方差</p>
<h3 id="十、交叉验证法"><a href="# 十、交叉验证法" class="headerlink" title="十、交叉验证法"></a>十、交叉验证法 </h3><p> 若样本数据较少时，可以一部分作为训练集，一部分作为测试集，没有验证集。<br>例如有 100 组数据，可以 80 组作为训练集，20 组作为测试集。<br>但是当样本更少，8/2 拆分也不适合的时候，就可以使用交叉验证法<br><img src="/2020/11/06/machineLearning-1/photo2.jpg" alt></p>
<h3 id="十一、过拟合与正则化"><a href="# 十一、过拟合与正则化" class="headerlink" title="十一、过拟合与正则化"></a>十一、过拟合与正则化 </h3><h4 id="过拟合"><a href="# 过拟合" class="headerlink" title="过拟合"></a> 过拟合</h4><p><img src="/2020/11/06/machineLearning-1/photo3.jpg" alt></p>
<h4 id="防止过拟合："><a href="# 防止过拟合：" class="headerlink" title="防止过拟合："></a>防止过拟合：</h4><h5 id="1- 减少特征"><a href="#1- 减少特征" class="headerlink" title="1. 减少特征"></a>1. 减少特征 </h5><h5 id="2- 增加数据量"><a href="#2- 增加数据量" class="headerlink" title="2. 增加数据量"></a>2. 增加数据量</h5><h5 id="3- 正则化"><a href="#3- 正则化" class="headerlink" title="3. 正则化"></a>3. 正则化</h5><h5 id="4- 深度学习中有其他防止过拟合的方式"><a href="#4- 深度学习中有其他防止过拟合的方式" class="headerlink" title="4. 深度学习中有其他防止过拟合的方式"></a>4. 深度学习中有其他防止过拟合的方式</h5><h4 id="正则化"><a href="# 正则化" class="headerlink" title="正则化"></a> 正则化 </h4><h5 id="L1- 正则化：-displaystyle-J-theta-1-over-m-sum-i-0-m-h-theta-x-i-y-i-2-lambda-sum-i-0-n-theta-j"><a href="#L1- 正则化：-displaystyle-J-theta-1-over-m-sum-i-0-m-h-theta-x-i-y-i-2-lambda-sum-i-0-n-theta-j" class="headerlink" title="L1 正则化：$\displaystyle J (\theta)={1 \over m} \sum_{i=0}^m (h_\theta (x_i)-y_i)^2 + \lambda\sum_{i=0}^n |\theta_j|$"></a>L1 正则化：$\displaystyle J (\theta)={1 \over m} \sum_{i=0}^m (h_\theta (x_i)-y_i)^2 + \lambda\sum_{i=0}^n |\theta_j|$</h5><h5 id="L2- 正则化：-displaystyle-J-theta-1-over-m-sum-i-0-m-h-theta-x-i-y-i-2-lambda-sum-i-0-n-theta-j-2"><a href="#L2- 正则化：-displaystyle-J-theta-1-over-m-sum-i-0-m-h-theta-x-i-y-i-2-lambda-sum-i-0-n-theta-j-2" class="headerlink" title="L2 正则化：$\displaystyle J (\theta)={1 \over m} \sum_{i=0}^m (h_\theta (x_i)-y_i)^2 + \lambda\sum_{i=0}^n \theta_j^2$"></a>L2 正则化：$\displaystyle J (\theta)={1 \over m} \sum_{i=0}^m (h_\theta (x_i)-y_i)^2 + \lambda\sum_{i=0}^n \theta_j^2$</h5><h3 id="十二、岭回归"><a href="# 十二、岭回归" class="headerlink" title="十二、岭回归"></a> 十二、岭回归 </h3><h4 id="概念 -2"><a href="# 概念 -2" class="headerlink" title="概念"></a> 概念 </h4><p> 在使用标准方程解多元线性回归的时候，$w=(X^TX)^{-1} X^Ty$<br>如果数据的特征比样本点还多，数据特征 $n$ 个 ，样本个数 $m$ 个，如果 $n&gt;m$<br>，则计算 $(X^TX)^{-1}$ 时会出错。因为 $(X^TX)$ 不是满秩矩阵，所以不可逆。<br>为了解决这个问题，统计学家引入了岭回归的概念。<br>$w=(X^TX+\lambda I)^{-1} X^Ty$<br>$\lambda$ 为岭系数，$I$ 为单位矩阵</p>
<h4 id="推导"><a href="# 推导" class="headerlink" title="推导"></a>推导 </h4><p> 岭回归的代价函数是 L2 正则化：$\displaystyle J (\theta)={1 \over m} \sum_{i=0}^m (h_\theta (x_i)-y_i)^2 + \lambda\sum_{i=0}^n \theta_j^2$<br>$\displaystyle J (\theta)={1 \over 2} (w^TX^TXw - y^TXw - w^TX^Ty + y^Ty) + \lambda \theta^T\theta$</p>
<p>$\displaystyle {\partial J (\theta) \over \partial \theta}=0$</p>
<p>$X^TX\theta - X^TY + \lambda \theta=0$<br>$\theta=(X^TX+\lambda I)^{-1} X^TY$</p>
<h4 id="用处"><a href="# 用处" class="headerlink" title="用处"></a>用处 </h4><p> 岭回归最早是用来处理特征数多于样本的情况，现在也用于在估计中加入偏差，从而得到更好的估计。<br>同时也可以解决多重共线性的问题。<br>岭回归是一种有偏估计。</p>
<h4 id="lambda- 的选择"><a href="#lambda- 的选择" class="headerlink" title="$\lambda$ 的选择"></a>$\lambda$ 的选择 </h4><p> 选择 $\lambda$ 值，使得 <br>(1) 各个回归系数的岭估计基本稳定<br>(2) 残差平方和增大不太多<br><img src="/2020/11/06/machineLearning-1/photo4.jpg" alt><br> 横轴是 $\lambda$ 值，纵轴是参数 $\theta$ 的取值范围<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">\<span class="comment"># 创建模型</span></span><br><span class="line">\<span class="comment"># 生成 50 个值（默认是 50 个值）</span></span><br><span class="line">alphas_to_test = np.linspace (<span class="number">0.001</span>, <span class="number">1</span>)</span><br><span class="line">\<span class="comment"># 创建模型，保存误差值</span></span><br><span class="line">model = linear_model.RidgeCV (alphas=alphas_to_test, store_cv_values=<span class="literal">True</span>)</span><br><span class="line">//CV 是交叉验证法的意思，可是设置 alphas</span><br><span class="line">model.fit (x_data, y_data)</span><br><span class="line"></span><br><span class="line">\<span class="comment"># 岭系数</span></span><br><span class="line"><span class="built_in">print</span> (model.alpha_)</span><br><span class="line">\<span class="comment"># loss 值</span></span><br><span class="line"><span class="built_in">print</span> (model.cv_values_.shape)</span><br><span class="line"></span><br><span class="line">\<span class="comment"># 画图</span></span><br><span class="line">\<span class="comment"># 岭系数跟 loss 值的关系</span></span><br><span class="line">plt.plot (alphas_to_test, model.cv_values_.mean (axis=<span class="number">0</span>))</span><br><span class="line">\<span class="comment"># 选取的岭系数值的位置</span></span><br><span class="line">plt.plot (model.alpha_, <span class="built_in">min</span> (model.cv_values_.mean (axis=<span class="number">0</span>)),<span class="string">&#x27;ro&#x27;</span>)</span><br><span class="line">plt.show ()</span><br></pre></td></tr></table></figure></p>
<h3 id="十三、LASSO- 算法"><a href="# 十三、LASSO- 算法" class="headerlink" title="十三、LASSO 算法"></a>十三、LASSO 算法 </h3><h4 id="概念 -3"><a href="# 概念 -3" class="headerlink" title="概念"></a> 概念 </h4><p> 通过构造一个一阶惩罚函数获得一个精炼的模型；通过最终确定一些指标（变量）的系数为零（岭回归估计系数等于 0 的机会微乎其微，造成筛选变量困难），解释力很强。<br>擅长处理具有多重共线性的数据，与岭回归一样是有偏估计 。</p>
<h4 id="LASSO- 的代价函数"><a href="#LASSO- 的代价函数" class="headerlink" title="LASSO 的代价函数"></a>LASSO 的代价函数 </h4><p>$\displaystyle J (\theta)={1 \over m} \sum_{i=0}^m (h_\theta (x_i)-y_i)^2 + \lambda\sum_{i=0}^n |\theta_j|$<br>$\lambda$ 的值可以用于限制 $\sum_{i=0}^n |\theta_j| \leq t$<br><img src="/2020/11/06/machineLearning-1/photo5.jpg" alt><br> 一圈圈椭圆是 loss 函数的等高线，最中间的 $\beta$ 值使得 loss 函数最小 <br> 由图中可以观察出，lasso 算法容易使得某些 $\beta$ 取值为零<br><img src="/2020/11/06/machineLearning-1/photo6.jpg" alt></p>
<h3 id="十四、弹性网"><a href="# 十四、弹性网" class="headerlink" title="十四、弹性网"></a>十四、弹性网 </h3><h4 id="代价函数"><a href="# 代价函数" class="headerlink" title="代价函数"></a> 代价函数</h4><p>$\displaystyle J (\theta)={1 \over m} \sum_{i=0}^m (h_\theta (x_i)-y_i)^2 + \lambda\sum_{i=0}^n |\theta_j|^q$</p>
<h3 id="机器学习算法系列"><a href="# 机器学习算法系列" class="headerlink" title="机器学习算法系列"></a>机器学习算法系列 </h3><p><a href="https://wangxchun.github.io/2020/11/06/machineLearning-1/"> 机器学习算法 —（1）线性回归和非线性回归 </a><br><a href="https://wangxchun.github.io/2020/11/11/machineLearning-2/"> 机器学习算法 —（2）逻辑回归 </a><br><a href="https://wangxchun.github.io/2020/11/13/machineLearning-3/"> 机器学习算法 —（3）神经网络 </a><br><a href="https://wangxchun.github.io/2020/11/18/machineLearning-4/"> 机器学习算法 —（4）KNN</a><br><a href="https://wangxchun.github.io/2020/11/19/machineLearning-5/">机器学习算法 —（5）决策树 </a><br><a href="https://wangxchun.github.io/2020/11/19/machineLearning-6/"> 机器学习算法 —（6）集成学习 </a><br><a href="https://wangxchun.github.io/2020/11/19/machineLearning-7/"> 机器学习算法 —（7）贝叶斯算法 </a><br><a href="https://wangxchun.github.io/2020/11/19/machineLearning-8/"> 机器学习算法 —（8）聚类算法 </a><br><a href="https://wangxchun.github.io/2020/11/19/machineLearning-9/"> 机器学习算法 —（9）主成分分析 PCA</a><br><a href="https://wangxchun.github.io/2020/11/19/machineLearning-10/">机器学习算法 —（10）支持向量机 SVM</a></p>
]]></content>
      <categories>
        <category>大学课程-机器学习</category>
      </categories>
      <tags>
        <tag>一元线性回归</tag>
        <tag>非线性回归</tag>
        <tag>machineLearning</tag>
        <tag>sklearn</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习算法 --（10）支持向量机 SVM</title>
    <url>/2020/11/19/machineLearning-10/</url>
    <content><![CDATA[<span id="more"></span>
<h3 id="机器学习算法系列"><a href="# 机器学习算法系列" class="headerlink" title="机器学习算法系列"></a>机器学习算法系列 </h3><p><a href="https://wangxchun.github.io/2020/11/06/machineLearning-1/"> 机器学习算法 —（1）线性回归和非线性回归 </a><br><a href="https://wangxchun.github.io/2020/11/11/machineLearning-2/"> 机器学习算法 —（2）逻辑回归 </a><br><a href="https://wangxchun.github.io/2020/11/13/machineLearning-3/"> 机器学习算法 —（3）神经网络 </a><br><a href="https://wangxchun.github.io/2020/11/18/machineLearning-4/"> 机器学习算法 —（4）KNN</a><br><a href="https://wangxchun.github.io/2020/11/19/machineLearning-5/">机器学习算法 —（5）决策树 </a><br><a href="https://wangxchun.github.io/2020/11/19/machineLearning-6/"> 机器学习算法 —（6）集成学习 </a><br><a href="https://wangxchun.github.io/2020/11/19/machineLearning-7/"> 机器学习算法 —（7）贝叶斯算法 </a><br><a href="https://wangxchun.github.io/2020/11/19/machineLearning-8/"> 机器学习算法 —（8）聚类算法 </a><br><a href="https://wangxchun.github.io/2020/11/19/machineLearning-9/"> 机器学习算法 —（9）主成分分析 PCA</a><br><a href="https://wangxchun.github.io/2020/11/19/machineLearning-10/">机器学习算法 —（10）支持向量机 SVM</a></p>
]]></content>
      <categories>
        <category>大学课程-机器学习</category>
      </categories>
      <tags>
        <tag>machineLearning</tag>
        <tag>sklearn</tag>
        <tag>支持向量机</tag>
        <tag>SVM</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习算法 --（2）逻辑回归</title>
    <url>/2020/11/11/machineLearning-2/</url>
    <content><![CDATA[<h3 id="一、预测函数"><a href="# 一、预测函数" class="headerlink" title="一、预测函数"></a>一、预测函数 </h3><p> 预测函数 $h_\theta (x)=g (\theta^Tx)$<br>$\displaystyle g (x)={1 \over {1+e^{-x}}}$ $\quad \quad$ $\displaystyle h_\theta (x)={1 \over {1+e^{-\theta^Tx}}}$<br><img src="/2020/11/11/machineLearning-2/photo1.jpg" alt></p>
<h3 id="二、代价函数"><a href="# 二、代价函数" class="headerlink" title="二、代价函数"></a>二、代价函数 </h3><p> 线性回归：$\displaystyle J (\theta)={1 \over m}\sum_{i=0}^m {1 \over 2}(h_\theta (x_i)-y_i)^2$<br>逻辑回归：$cost (h_\theta (x), y)=<br>\begin {cases}<br>-log (h_\theta (x)),  &amp; \text {if $y=1$} \\<br>-log (1-h_\theta (x)), &amp; \text {if $y=0$}<br>\end {cases}$<span id="more"></span></p>
<p>$cost (h_\theta (x), y)=-y \, log (h_\theta (x))-(1-y) log (1-h_\theta (x))$<br>$\displaystyle J (\theta)=-{1 \over m}[\sum_{i=0}^m \, log (h_\theta (x))-(1-y) log (1-h_\theta (x))]$</p>
<h4 id="梯度下降法"><a href="# 梯度下降法" class="headerlink" title="梯度下降法"></a>梯度下降法</h4><p>$Repeat$<br>$\lbrace$<br>    $\quad \theta_j := \theta_j - \alpha {\partial \over \partial \theta_j} J (\theta)$<br>$\rbrace$</p>
<p>$cost (h_\theta (x), y)=-y \, log (h_\theta (x))-(1-y) log (1-h_\theta (x))$</p>
<p>$\displaystyle {\partial cost (h_\theta (x), y) \over \partial \theta}$<br>$\displaystyle =-{1 \over m} \sum_{i=0}^m ({y \over h_\theta (x)} - {(1-y) \over 1-h_\theta (x)}) {\partial h_\theta (x) \over \partial \theta}$<br>$=\displaystyle =-{1 \over m} \sum_{i=0}^m ({y \over h_\theta (x)} - {(1-y) \over 1-h_\theta (x)}) h_\theta’(x) x$<br>$=\displaystyle {1 \over m} \sum_{i=0}^m {h_\theta’(x) x \over h_\theta (x)(1-h_\theta (x))}(h_\theta (x) - y)$<br>$=\displaystyle {1 \over m} \sum_{i=0}^m x (h_\theta (x)-y)$</p>
<h3 id="三、多分类"><a href="# 三、多分类" class="headerlink" title="三、多分类"></a>三、多分类 </h3><p> 可以分别做若干次二分类</p>
<h3 id="四、逻辑回归正则化"><a href="# 四、逻辑回归正则化" class="headerlink" title="四、逻辑回归正则化"></a>四、逻辑回归正则化 </h3><p> 代价函数：$\displaystyle J (\theta)=-{1 \over m}[\sum_{i=0}^my \, log (h_\theta (x))-(1-y) log (1-h_\theta (x))] + {\lambda \over 2m} \sum_{i=0}^m \theta_j^2$</p>
<h3 id="五、正确率 - 召回率 -F1- 指标"><a href="# 五、正确率 - 召回率 -F1- 指标" class="headerlink" title="五、正确率 / 召回率 / F1 指标"></a>五、正确率 / 召回率 / F1 指标 </h3><p> 正确率 Precision：检索出来的条目有多少是正确的 <br> 召回率 Recall：正确的条目有多少被检索出来了 <br>$\displaystyle F_1 值 ={2 \times {正确率 + 召回率 \over 正确率 \times 召回率}}$<br> 正确率和召回率有时候是矛盾的，所以在不同场合需要自己判断正确率或是召回率的重要性<br>$\displaystyle F_\beta={(1+\beta^2) \times {正确率 + 召回率 \over (\beta^2 \times 正确率) \times 召回率}}$</p>
<h3 id="六、sklearn- 实战逻辑回归"><a href="# 六、sklearn- 实战逻辑回归" class="headerlink" title="六、sklearn 实战逻辑回归"></a>六、sklearn 实战逻辑回归</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">logistic = linear_model.LogisticRegression ()</span><br><span class="line">logistic.fit (x_data, y_data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> scale == <span class="literal">False</span>:</span><br><span class="line">    <span class="comment"># 画图决策边界</span></span><br><span class="line">    plot ()</span><br><span class="line">    x_test = np.array ([[-<span class="number">4</span>],[<span class="number">3</span>]])</span><br><span class="line">    y_test = (-logistic.intercept_ - x_test*logistic.coef_[<span class="number">0</span>][<span class="number">0</span>])/logistic.coef_[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">    plt.plot (x_test, y_test, <span class="string">&#x27;k&#x27;</span>)</span><br><span class="line">    plt.show ()</span><br><span class="line"></span><br><span class="line">predictions = logistic.predict (x_data)</span><br><span class="line"><span class="built_in">print</span> (classification_report (y_data, predictions))</span><br></pre></td></tr></table></figure>
<h3 id="七、sklearn- 实战非线性逻辑回归"><a href="# 七、sklearn- 实战非线性逻辑回归" class="headerlink" title="七、sklearn 实战非线性逻辑回归"></a>七、sklearn 实战非线性逻辑回归</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">logistic = linear_model.LogisticRegression ()</span><br><span class="line">logistic.fit (x_data, y_data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数据值所在的范围</span></span><br><span class="line">x_min, x_max = x_data [:, <span class="number">0</span>].<span class="built_in">min</span> () - <span class="number">1</span>, x_data [:, <span class="number">0</span>].<span class="built_in">max</span> () + <span class="number">1</span></span><br><span class="line">y_min, y_max = x_data [:, <span class="number">1</span>].<span class="built_in">min</span> () - <span class="number">1</span>, x_data [:, <span class="number">1</span>].<span class="built_in">max</span> () + <span class="number">1</span></span><br><span class="line"><span class="comment"># 生成网格矩阵</span></span><br><span class="line">xx, yy = np.meshgrid (np.arange (x_min, x_max, <span class="number">0.02</span>),</span><br><span class="line">                     np.arange (y_min, y_max, <span class="number">0.02</span>))</span><br><span class="line"><span class="comment"># ravel 与 flatten 类似，多维数据转一维。flatten 不会改变原始数据，ravel 会改变原始数据</span></span><br><span class="line">z = logistic.predict (np.c_[xx.ravel (), yy.ravel ()])</span><br><span class="line">z = z.reshape (xx.shape)</span><br><span class="line"><span class="comment"># 等高线图</span></span><br><span class="line">cs = plt.contourf (xx, yy, z)</span><br><span class="line"><span class="comment"># 样本散点图</span></span><br><span class="line">plt.scatter (x_data [:, <span class="number">0</span>], x_data [:, <span class="number">1</span>], c=y_data)</span><br><span class="line">plt.show ()</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;score:&#x27;</span>,logistic.score (x_data,y_data))</span><br></pre></td></tr></table></figure>
<h3 id="机器学习算法系列"><a href="# 机器学习算法系列" class="headerlink" title="机器学习算法系列"></a>机器学习算法系列 </h3><p><a href="https://wangxchun.github.io/2020/11/06/machineLearning-1/"> 机器学习算法 —（1）线性回归和非线性回归 </a><br><a href="https://wangxchun.github.io/2020/11/11/machineLearning-2/"> 机器学习算法 —（2）逻辑回归 </a><br><a href="https://wangxchun.github.io/2020/11/13/machineLearning-3/"> 机器学习算法 —（3）神经网络 </a><br><a href="https://wangxchun.github.io/2020/11/18/machineLearning-4/"> 机器学习算法 —（4）KNN</a><br><a href="https://wangxchun.github.io/2020/11/19/machineLearning-5/">机器学习算法 —（5）决策树 </a><br><a href="https://wangxchun.github.io/2020/11/19/machineLearning-6/"> 机器学习算法 —（6）集成学习 </a><br><a href="https://wangxchun.github.io/2020/11/19/machineLearning-7/"> 机器学习算法 —（7）贝叶斯算法 </a><br><a href="https://wangxchun.github.io/2020/11/19/machineLearning-8/"> 机器学习算法 —（8）聚类算法 </a><br><a href="https://wangxchun.github.io/2020/11/19/machineLearning-9/"> 机器学习算法 —（9）主成分分析 PCA</a><br><a href="https://wangxchun.github.io/2020/11/19/machineLearning-10/">机器学习算法 —（10）支持向量机 SVM</a></p>
]]></content>
      <categories>
        <category>大学课程-机器学习</category>
      </categories>
      <tags>
        <tag>machineLearning</tag>
        <tag>sklearn</tag>
        <tag>逻辑回归</tag>
        <tag>预测函数</tag>
        <tag>代价函数</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习算法 --（3）神经网络</title>
    <url>/2020/11/13/machineLearning-3/</url>
    <content><![CDATA[<h3 id="一、深度学习"><a href="# 一、深度学习" class="headerlink" title="一、深度学习"></a>一、深度学习</h3><h4 id="1- 深度学习三次热潮"><a href="#1- 深度学习三次热潮" class="headerlink" title="1. 深度学习三次热潮"></a>1. 深度学习三次热潮</h4><p>1950 年代：图灵提出图灵测试<br>1980 年代：李开复语音识别，BP 算法<br>2006 年至今：李飞飞 ImageNet，AlphoGo 战胜人类棋手</p>
<h4 id="2- 深度学习爆发三要素"><a href="#2- 深度学习爆发三要素" class="headerlink" title="2. 深度学习爆发三要素"></a>2. 深度学习爆发三要素 </h4><p> 数据、算法、算力<br><span id="more"></span></p>
<h4 id="3- 机器学习三巨头"><a href="#3- 机器学习三巨头" class="headerlink" title="3. 机器学习三巨头"></a>3. 机器学习三巨头 </h4><p>Hinton：BP 算法<br>Lecun：卷积神经网络<br>Bengio：预训练和自动编码器<br> 吴恩达：创建 Coursera 和 Google Brain</p>
<p><img src="/2020/11/13/machineLearning-3/photo1.jpg" alt></p>
<h3 id="二、单层感知机"><a href="# 二、单层感知机" class="headerlink" title="二、单层感知机"></a>二、单层感知机 </h3><h4 id="1- 介绍"><a href="#1- 介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h4><p><img src="/2020/11/13/machineLearning-3/photo2.jpg" alt><br>$\Delta w_i = \eta (t-y) x_i$<br> 输入节点：$x_1, x_2, x_3$<br>输出节点：$y$<br>权向量：$w_1, w_2, w_3$<br>偏置因子：$b$（也可以看成是 $x_0=1$）<br>激活函数：$sign (x) =<br>\begin {cases}<br>1,  &amp; \text {$x \geq 0$} \\<br>-1, &amp; \text {x &lt; 0}<br>\end {cases}<br>$</p>
<h4 id="2- 例子：sklearn- 实现单层感知器"><a href="#2- 例子：sklearn- 实现单层感知器" class="headerlink" title="2. 例子：sklearn 实现单层感知器"></a>2. 例子：sklearn 实现单层感知器 </h4><p> 题目：假设平面坐标系上有四个点，$(3,3),(4,3)$ 这两个点的标签为 $1$；$(1,1),(0,2)$ 这两个点的标签为 $-1$。构建神经网络来分类。</p>
<p>思路：我们要分类的数据是 $2$ 维数据，所以只需要 $2$ 个输入节点，我们可以把神经元的偏置值也设置成一个节点，这样我们需要 $3$ 个输入节点。输入数据有 $4$ 个 $(1,3,3),(1,4,3),(1,1,1),(1,0,2)$ 数据对应的标签为 $(1,1,-1,-1)$。初始化权值 $w_0,w_1,w_2$，取 $-1$ 到 $1$ 的随机数。学习率设置为 $0.11$，激活函数为 sign 函数。</p>
<p>程序：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># n 个输入，m 个输出，权值矩阵就设置成 nXm 大小 </span></span><br><span class="line"><span class="comment"># 权值初始化，3 行 1 列，取值范围 - 1 到 1</span></span><br><span class="line">W = (np.random.random ([<span class="number">3</span>,<span class="number">1</span>])-<span class="number">0.5</span>)*<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (W)</span><br><span class="line"><span class="comment"># 学习率设置</span></span><br><span class="line">lr = <span class="number">0.11</span></span><br><span class="line"><span class="comment"># 神经网络输出</span></span><br><span class="line">O = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span> ():</span></span><br><span class="line">    <span class="keyword">global</span> X,Y,W,lr</span><br><span class="line">    O = np.dot (X,W) <span class="comment"># shape:(3,1)</span></span><br><span class="line">    W_C = lr*(X.T.dot (Y-O))/<span class="built_in">int</span> (X.shape [<span class="number">0</span>])</span><br><span class="line">    W = W + W_C</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">100</span>):</span><br><span class="line">    update ()<span class="comment"># 更新权值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算分界线的斜率以及截距</span></span><br><span class="line">k = -W [<span class="number">1</span>]/W [<span class="number">2</span>]</span><br><span class="line">d = -W [<span class="number">0</span>]/W [<span class="number">2</span>]</span><br><span class="line">plt.figure ()</span><br><span class="line">plt.plot (xdata,xdata*k+d,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">plt.scatter (x1,y1,c=<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">plt.scatter (x2,y2,c=<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">plt.show ()</span><br></pre></td></tr></table></figure><br> 问题：单层感知器没办法解决异或问题<br>  有三种情形，跳出循环：<br>  (1) 实际输出等于期望输出<br>  (2) 权值的该变量比较小的时候<br>  (3) 循环一定次数之后</p>
<h3 id="三、线性神经网络"><a href="# 三、线性神经网络" class="headerlink" title="三、线性神经网络"></a>三、线性神经网络 </h3><h4 id="1- 概念"><a href="#1- 概念" class="headerlink" title="1. 概念"></a>1. 概念</h4><p> 线性神经网络在结构上和感知器非常类似，只是激活函数不同。<br>在模型训练时把原来激活函数 sign 函数改成 purelin 函数：$y=x$</p>
<h4 id="2- 代价函数（损失函数）"><a href="#2- 代价函数（损失函数）" class="headerlink" title="2. 代价函数（损失函数）"></a>2. 代价函数（损失函数）</h4><p>二次代价函数：$\displaystyle E={1 \over 2} (t-y)^2={1 \over 2} [t-f (WX)]^2$<br>误差 E 是权值向量 $W$ 的函数，我们可以使用梯度下降法来最小化 $E$ 的值：<br>$\Delta W = -\eta E’ = \eta X^T (t-y) f’(WX) = \eta X^T \delta$<br>$\Delta w_i = -\eta E’ = \eta x_i X^T (t-y) f’(WX) = \eta \, x_i \delta$</p>
<h4 id="3-sklearn- 实现线性神经网络"><a href="#3-sklearn- 实现线性神经网络" class="headerlink" title="3.sklearn 实现线性神经网络"></a>3.sklearn 实现线性神经网络</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># n 个输入，m 个输出，权值矩阵就设置成 nXm 大小</span></span><br><span class="line"><span class="comment"># 权值初始化，3 行 1 列，取值范围 - 1 到 1</span></span><br><span class="line">W = (np.random.random ([<span class="number">3</span>,<span class="number">1</span>])-<span class="number">0.5</span>)*<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (W)</span><br><span class="line"><span class="comment"># 学习率设置</span></span><br><span class="line">lr = <span class="number">0.11</span></span><br><span class="line"><span class="comment"># 神经网络输出</span></span><br><span class="line">O = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span> ():</span></span><br><span class="line">    <span class="keyword">global</span> X,Y,W,lr</span><br><span class="line">    O = np.sign (np.dot (X,W)) <span class="comment"># shape:(3,1)</span></span><br><span class="line">    W_C = lr*(X.T.dot (Y-O))/<span class="built_in">int</span> (X.shape [<span class="number">0</span>])</span><br><span class="line">    W = W + W_C</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">100</span>):</span><br><span class="line">    update ()<span class="comment"># 更新权值</span></span><br><span class="line">    O = np.sign (np.dot (X,W))<span class="comment"># 计算当前输出  </span></span><br><span class="line">    <span class="keyword">if</span> (O == Y).<span class="built_in">all</span> (): <span class="comment"># 如果实际输出等于期望输出，模型收敛，循环结束</span></span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&#x27;Finished&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&#x27;epoch:&#x27;</span>,i)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算分界线的斜率以及截距</span></span><br><span class="line">k = -W [<span class="number">1</span>]/W [<span class="number">2</span>]</span><br><span class="line">d = -W [<span class="number">0</span>]/W [<span class="number">2</span>]</span><br><span class="line">plt.figure ()</span><br><span class="line">plt.plot (xdata,xdata*k+d,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">plt.scatter (x1,y1,c=<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">plt.scatter (x2,y2,c=<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">plt.show ()</span><br></pre></td></tr></table></figure>
<h3 id="四、BP- 神经网络"><a href="# 四、BP- 神经网络" class="headerlink" title="四、BP 神经网络"></a>四、BP 神经网络 </h3><h4 id="网络结构"><a href="# 网络结构" class="headerlink" title="网络结构"></a> 网络结构 </h4><p><img src="/2020/11/13/machineLearning-3/photo3.jpg" alt><br> 通常有三层，输入不算一层</p>
<h4 id="BP- 算法"><a href="#BP- 算法" class="headerlink" title="BP 算法"></a>BP 算法</h4><p>$Delta$ 学习规则：$\displaystyle E={1 \over 2} (t-y)^2$<br>$\displaystyle {\partial E \over  \partial W^l} = -(X^l)^T \delta^l \quad \quad \Delta W^l = -\eta {\partial E \over  \partial W^l} = \eta (X^l)^T \delta^l$ </p>
<p>Q：为什么 ReLU 是常用的激活函数？<br>因为其他的激活函数会导致导数趋近于 0，反向传播的时候权值的改变就会趋近于 0<br>如果神经网络的层数过多，也容易导致传播到前面的层数的时候，权值的该变量趋近于 0<br>Q：线性激活函数 $y=x$ 的导数也是等于 1，为什么不用？因为不能描述复杂的边界</p>
<h4 id="BP- 算法推导"><a href="#BP- 算法推导" class="headerlink" title="BP 算法推导"></a>BP 算法推导 </h4><h3 id="机器学习算法系列"><a href="# 机器学习算法系列" class="headerlink" title="机器学习算法系列"></a> 机器学习算法系列 </h3><p><a href="https://wangxchun.github.io/2020/11/06/machineLearning-1/"> 机器学习算法 —（1）线性回归和非线性回归 </a><br><a href="https://wangxchun.github.io/2020/11/11/machineLearning-2/"> 机器学习算法 —（2）逻辑回归 </a><br><a href="https://wangxchun.github.io/2020/11/13/machineLearning-3/"> 机器学习算法 —（3）神经网络 </a><br><a href="https://wangxchun.github.io/2020/11/18/machineLearning-4/"> 机器学习算法 —（4）KNN</a><br><a href="https://wangxchun.github.io/2020/11/19/machineLearning-5/">机器学习算法 —（5）决策树 </a><br><a href="https://wangxchun.github.io/2020/11/19/machineLearning-6/"> 机器学习算法 —（6）集成学习 </a><br><a href="https://wangxchun.github.io/2020/11/19/machineLearning-7/"> 机器学习算法 —（7）贝叶斯算法 </a><br><a href="https://wangxchun.github.io/2020/11/19/machineLearning-8/"> 机器学习算法 —（8）聚类算法 </a><br><a href="https://wangxchun.github.io/2020/11/19/machineLearning-9/"> 机器学习算法 —（9）主成分分析 PCA</a><br><a href="https://wangxchun.github.io/2020/11/19/machineLearning-10/">机器学习算法 —（10）支持向量机 SVM</a></p>
]]></content>
      <categories>
        <category>大学课程-机器学习</category>
      </categories>
      <tags>
        <tag>machineLearning</tag>
        <tag>sklearn</tag>
        <tag>深度学习</tag>
        <tag>神经网络</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习算法 --（4）KNN</title>
    <url>/2020/11/18/machineLearning-4/</url>
    <content><![CDATA[<h3 id="一、KNN- 概念"><a href="# 一、KNN- 概念" class="headerlink" title="一、KNN 概念"></a>一、KNN 概念 </h3><h4 id="1- 选择参数 -K"><a href="#1- 选择参数 -K" class="headerlink" title="1. 选择参数 K"></a>1. 选择参数 K</h4><h4 id="2- 为了判断未知实例的类别，所有已知类别的实例作为参照，计算未知类别和所有已知实例的距离"><a href="#2- 为了判断未知实例的类别，所有已知类别的实例作为参照，计算未知类别和所有已知实例的距离" class="headerlink" title="2. 为了判断未知实例的类别，所有已知类别的实例作为参照，计算未知类别和所有已知实例的距离"></a>2. 为了判断未知实例的类别，所有已知类别的实例作为参照，计算未知类别和所有已知实例的距离</h4><h4 id="3- 选择最近 -K- 个已知实例"><a href="#3- 选择最近 -K- 个已知实例" class="headerlink" title="3. 选择最近 K 个已知实例"></a>3. 选择最近 K 个已知实例</h4><h4 id="4- 根据少数服从多数的投票法则 -majority-voting-，让未知实例归类为 -K- 个最近邻样本中最多数的类别"><a href="#4- 根据少数服从多数的投票法则 -majority-voting-，让未知实例归类为 -K- 个最近邻样本中最多数的类别" class="headerlink" title="4. 根据少数服从多数的投票法则 (majority-voting)，让未知实例归类为 K 个最近邻样本中最多数的类别"></a>4. 根据少数服从多数的投票法则 (majority-voting)，让未知实例归类为 K 个最近邻样本中最多数的类别</h4><h3 id="二、KNN- 的算法实践"><a href="# 二、KNN- 的算法实践" class="headerlink" title="二、KNN 的算法实践"></a> 二、KNN 的算法实践</h3><span id="more"></span>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">knn</span> (<span class="params">x_test, x_data, y_data, k</span>):</span></span><br><span class="line">    <span class="comment"># 计算样本数量</span></span><br><span class="line">    x_data_size = x_data.shape [<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># 复制 x_test</span></span><br><span class="line">    np.tile (x_test, (x_data_size,<span class="number">1</span>))</span><br><span class="line">    <span class="comment"># 计算 x_test 与每一个样本的差值</span></span><br><span class="line">    diffMat = np.tile (x_test, (x_data_size,<span class="number">1</span>)) - x_data</span><br><span class="line">    <span class="comment"># 计算差值的平方</span></span><br><span class="line">    sqDiffMat = diffMat**<span class="number">2</span></span><br><span class="line">    <span class="comment"># 求和</span></span><br><span class="line">    sqDistances = sqDiffMat.<span class="built_in">sum</span> (axis=<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 开方</span></span><br><span class="line">    distances = sqDistances**<span class="number">0.5</span></span><br><span class="line">    <span class="comment"># 从小到大排序</span></span><br><span class="line">    sortedDistances = distances.argsort ()</span><br><span class="line">    classCount = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span> (k):</span><br><span class="line">        <span class="comment"># 获取标签</span></span><br><span class="line">        votelabel = y_data [sortedDistances [i]]</span><br><span class="line">        <span class="comment"># 统计标签数量</span></span><br><span class="line">        classCount [votelabel] = classCount.get (votelabel,<span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">    <span class="comment"># 根据 operator.itemgetter (1)- 第 1 个值对 classCount 排序，然后再取倒序</span></span><br><span class="line">    sortedClassCount = <span class="built_in">sorted</span> (classCount.items (),key=operator.itemgetter (<span class="number">1</span>), reverse=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 获取数量最多的标签</span></span><br><span class="line">    <span class="keyword">return</span> sortedClassCount [<span class="number">0</span>][<span class="number">0</span>]</span><br></pre></td></tr></table></figure>
<h3 id="三、sklearn- 实现 -KNN"><a href="# 三、sklearn- 实现 -KNN" class="headerlink" title="三、sklearn 实现 KNN"></a>三、sklearn 实现 KNN</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 构建模型</span></span><br><span class="line">model = neighbors.KNeighborsClassifier (n_neighbors=<span class="number">3</span>)</span><br><span class="line">model.fit (x_train, y_train)</span><br><span class="line">prediction = model.predict (x_test)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (classification_report (y_test, prediction))</span><br></pre></td></tr></table></figure>
<h3 id="机器学习算法系列"><a href="# 机器学习算法系列" class="headerlink" title="机器学习算法系列"></a>机器学习算法系列 </h3><p><a href="https://wangxchun.github.io/2020/11/06/machineLearning-1/"> 机器学习算法 —（1）线性回归和非线性回归 </a><br><a href="https://wangxchun.github.io/2020/11/11/machineLearning-2/"> 机器学习算法 —（2）逻辑回归 </a><br><a href="https://wangxchun.github.io/2020/11/13/machineLearning-3/"> 机器学习算法 —（3）神经网络 </a><br><a href="https://wangxchun.github.io/2020/11/18/machineLearning-4/"> 机器学习算法 —（4）KNN</a><br><a href="https://wangxchun.github.io/2020/11/19/machineLearning-5/">机器学习算法 —（5）决策树 </a><br><a href="https://wangxchun.github.io/2020/11/19/machineLearning-6/"> 机器学习算法 —（6）集成学习 </a><br><a href="https://wangxchun.github.io/2020/11/19/machineLearning-7/"> 机器学习算法 —（7）贝叶斯算法 </a><br><a href="https://wangxchun.github.io/2020/11/19/machineLearning-8/"> 机器学习算法 —（8）聚类算法 </a><br><a href="https://wangxchun.github.io/2020/11/19/machineLearning-9/"> 机器学习算法 —（9）主成分分析 PCA</a><br><a href="https://wangxchun.github.io/2020/11/19/machineLearning-10/">机器学习算法 —（10）支持向量机 SVM</a></p>
]]></content>
      <categories>
        <category>大学课程-机器学习</category>
      </categories>
      <tags>
        <tag>machineLearning</tag>
        <tag>sklearn</tag>
        <tag>KNN</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习算法 --（5）决策树</title>
    <url>/2020/11/19/machineLearning-5/</url>
    <content><![CDATA[<h3 id="一、概念和算法"><a href="# 一、概念和算法" class="headerlink" title="一、概念和算法"></a>一、概念和算法 </h3><h4 id="1- 概念"><a href="#1- 概念" class="headerlink" title="1. 概念"></a>1. 概念</h4><p> 比较适合分析离散数据，如果是连续数据要先转成离散数据再做分析。<br><img src="/2020/11/19/machineLearning-5/photo1.jpg" alt></p>
<h4 id="2- 算法"><a href="#2- 算法" class="headerlink" title="2. 算法"></a>2. 算法</h4><p>70 年代后期至 80 年代，Quinlan 开发了 ID3 算法。<br>Quinlan 改进了 ID3 算法，称为 C4.5 算法。<br>1984 年，多为统计学家提出了 CART 算法。</p>
<h4 id="3- 熵"><a href="#3- 熵" class="headerlink" title="3. 熵"></a>3. 熵 </h4><p> 信息熵公式：$H [x] = -\sum_{x} {p (x) log_2 p (x)}$<span id="more"></span></p>
<h4 id="4-ID3- 算法"><a href="#4-ID3- 算法" class="headerlink" title="4.ID3 算法"></a>4.ID3 算法 </h4><h5 id="决策树会选择最大化信息增益来对节点进行划分。"><a href="# 决策树会选择最大化信息增益来对节点进行划分。" class="headerlink" title="决策树会选择最大化信息增益来对节点进行划分。"></a> 决策树会选择最大化信息增益来对节点进行划分。</h5><p>信息增益计算：<br>$Info (D) = -\sum_{i=1}^m {p_i log_2 (p_i)}$<br>$Info_A (D) = \displaystyle \sum_{j=1}^v {|D_j| \over |D|} \times Info (D_j)$<br>$Gain (A) = Info (D) - Info_A (D)$<br><img src="/2020/11/19/machineLearning-5/photo2.jpg" alt></p>
<h5 id="连续变量处理"><a href="# 连续变量处理" class="headerlink" title="连续变量处理"></a>连续变量处理 </h5><p> 可以分别对不同的划分点计算信息增益，选择使得信息增益比较大的划分点。</p>
<h4 id="5-C4-5"><a href="#5-C4-5" class="headerlink" title="5.C4.5"></a>5.C4.5</h4><p>信息增益的方法倾向于首先选择因子数较多的变量，因此可以使用信息增益的改进：增益率。<br>$SplitInfo_A (D) = - \displaystyle \sum_{j=1}^v {|D_j| \over |D|} \times log_2 {|D_j| \over |D|}$<br>$GrainRate (A) = \displaystyle {Grain (A) \over SplitInfo_A (D)}$</p>
<h3 id="二、sklearn- 实现决策树"><a href="# 二、sklearn- 实现决策树" class="headerlink" title="二、sklearn 实现决策树"></a>二、sklearn 实现决策树 </h3><p> 重点：处理字符型数据<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.feature_extraction <span class="keyword">import</span> DictVectorizer</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> tree</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建决策树模型</span></span><br><span class="line">model = tree.DecisionTreeClassifier (criterion=<span class="string">&#x27;entropy&#x27;</span>)</span><br><span class="line"><span class="comment"># 输入数据建立模型</span></span><br><span class="line">model.fit (x_data, y_data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">x_test = x_data [<span class="number">0</span>]</span><br><span class="line">predict = model.predict (x_test.reshape (<span class="number">1</span>,-<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;predict:&quot;</span> + <span class="built_in">str</span> (predict))</span><br></pre></td></tr></table></figure></p>
<h3 id="三、画出决策树"><a href="# 三、画出决策树" class="headerlink" title="三、画出决策树"></a>三、画出决策树 </h3><p>pip install graphviz<br> 到 <a href="http://www.graphviz.org/"></a> 下载安装包，然后按照 <br> 设置环境变量 C:\Program Files (x86)\Graphhviz2.38\bin<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> graphviz </span><br><span class="line"></span><br><span class="line">dot_data = tree.export_graphviz (model, </span><br><span class="line">                                out_file = <span class="literal">None</span>, </span><br><span class="line">                                feature_names = vec.get_feature_names (),</span><br><span class="line">                                class_names = lb.classes_,</span><br><span class="line">                                filled = <span class="literal">True</span>,</span><br><span class="line">                                rounded = <span class="literal">True</span>,</span><br><span class="line">                                special_characters = <span class="literal">True</span>)</span><br><span class="line">graph = graphviz.Source (dot_data)</span><br><span class="line"><span class="comment"># 把这个图保存在当前的目录下</span></span><br><span class="line">graph.render (<span class="string">&#x27;computer&#x27;</span>)</span><br></pre></td></tr></table></figure></p>
<p>在决策树中剪枝是对抗过拟合的方法，方法是限制 “树的深度” 和 “内部节点再划分所需最小样本数”<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建决策树模型</span></span><br><span class="line"><span class="comment"># max_depth，树的深度</span></span><br><span class="line"><span class="comment"># min_samples_split 内部节点再划分所需最小样本数</span></span><br><span class="line">model = tree.DecisionTreeClassifier (max_depth=<span class="number">7</span>,min_samples_split=<span class="number">4</span>)</span><br></pre></td></tr></table></figure></p>
<h3 id="机器学习算法系列"><a href="# 机器学习算法系列" class="headerlink" title="机器学习算法系列"></a>机器学习算法系列 </h3><p><a href="https://wangxchun.github.io/2020/11/06/machineLearning-1/"> 机器学习算法 —（1）线性回归和非线性回归 </a><br><a href="https://wangxchun.github.io/2020/11/11/machineLearning-2/"> 机器学习算法 —（2）逻辑回归 </a><br><a href="https://wangxchun.github.io/2020/11/13/machineLearning-3/"> 机器学习算法 —（3）神经网络 </a><br><a href="https://wangxchun.github.io/2020/11/18/machineLearning-4/"> 机器学习算法 —（4）KNN</a><br><a href="https://wangxchun.github.io/2020/11/19/machineLearning-5/">机器学习算法 —（5）决策树 </a><br><a href="https://wangxchun.github.io/2020/11/19/machineLearning-6/"> 机器学习算法 —（6）集成学习 </a><br><a href="https://wangxchun.github.io/2020/11/19/machineLearning-7/"> 机器学习算法 —（7）贝叶斯算法 </a><br><a href="https://wangxchun.github.io/2020/11/19/machineLearning-8/"> 机器学习算法 —（8）聚类算法 </a><br><a href="https://wangxchun.github.io/2020/11/19/machineLearning-9/"> 机器学习算法 —（9）主成分分析 PCA</a><br><a href="https://wangxchun.github.io/2020/11/19/machineLearning-10/">机器学习算法 —（10）支持向量机 SVM</a></p>
]]></content>
      <categories>
        <category>大学课程-机器学习</category>
      </categories>
      <tags>
        <tag>machineLearning</tag>
        <tag>sklearn</tag>
        <tag>决策树</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习算法 --（6）集成学习</title>
    <url>/2020/11/19/machineLearning-6/</url>
    <content><![CDATA[<h3 id="一、Bagging（个体学习器之间不存在强依赖关系）"><a href="# 一、Bagging（个体学习器之间不存在强依赖关系）" class="headerlink" title="一、Bagging（个体学习器之间不存在强依赖关系）"></a>一、Bagging（个体学习器之间不存在强依赖关系）</h3><h3 id="二、随机森林 -RF"><a href="# 二、随机森林 -RF" class="headerlink" title="二、随机森林 RF"></a>二、随机森林 RF</h3><h3 id="三、Boosting（个体学习器之间存在强依赖关系）"><a href="# 三、Boosting（个体学习器之间存在强依赖关系）" class="headerlink" title="三、Boosting（个体学习器之间存在强依赖关系）"></a>三、Boosting（个体学习器之间存在强依赖关系）</h3><h3 id="四、Stacking"><a href="# 四、Stacking" class="headerlink" title="四、Stacking"></a>四、Stacking</h3><span id="more"></span>
<h3 id="机器学习算法系列"><a href="# 机器学习算法系列" class="headerlink" title="机器学习算法系列"></a>机器学习算法系列 </h3><p><a href="https://wangxchun.github.io/2020/11/06/machineLearning-1/"> 机器学习算法 —（1）线性回归和非线性回归 </a><br><a href="https://wangxchun.github.io/2020/11/11/machineLearning-2/"> 机器学习算法 —（2）逻辑回归 </a><br><a href="https://wangxchun.github.io/2020/11/13/machineLearning-3/"> 机器学习算法 —（3）神经网络 </a><br><a href="https://wangxchun.github.io/2020/11/18/machineLearning-4/"> 机器学习算法 —（4）KNN</a><br><a href="https://wangxchun.github.io/2020/11/19/machineLearning-5/">机器学习算法 —（5）决策树 </a><br><a href="https://wangxchun.github.io/2020/11/19/machineLearning-6/"> 机器学习算法 —（6）集成学习 </a><br><a href="https://wangxchun.github.io/2020/11/19/machineLearning-7/"> 机器学习算法 —（7）贝叶斯算法 </a><br><a href="https://wangxchun.github.io/2020/11/19/machineLearning-8/"> 机器学习算法 —（8）聚类算法 </a><br><a href="https://wangxchun.github.io/2020/11/19/machineLearning-9/"> 机器学习算法 —（9）主成分分析 PCA</a><br><a href="https://wangxchun.github.io/2020/11/19/machineLearning-10/">机器学习算法 —（10）支持向量机 SVM</a></p>
]]></content>
      <categories>
        <category>大学课程-机器学习</category>
      </categories>
      <tags>
        <tag>machineLearning</tag>
        <tag>sklearn</tag>
        <tag>集成学习</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习算法 --（7）贝叶斯算法</title>
    <url>/2020/11/19/machineLearning-7/</url>
    <content><![CDATA[<span id="more"></span>
<h3 id="实作"><a href="# 实作" class="headerlink" title="实作"></a>实作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"></span><br><span class="line">iris = datasets.load_iris ()</span><br><span class="line"><span class="built_in">print</span> (iris.keys ())</span><br><span class="line"><span class="comment"># dict_keys ([&#x27;data&#x27;, &#x27;target&#x27;, &#x27;frame&#x27;, &#x27;target_names&#x27;, &#x27;DESCR&#x27;, &#x27;feature_names&#x27;, &#x27;filename&#x27;])</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">type</span> (iris [<span class="string">&#x27;data&#x27;</span>]))</span><br><span class="line"><span class="comment"># &lt;class &#x27;numpy.ndarray&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">type</span> (iris.data))</span><br><span class="line"><span class="comment"># &lt;class &#x27;numpy.ndarray&#x27;&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="机器学习算法系列"><a href="# 机器学习算法系列" class="headerlink" title="机器学习算法系列"></a>机器学习算法系列 </h3><p><a href="https://wangxchun.github.io/2020/11/06/machineLearning-1/"> 机器学习算法 —（1）线性回归和非线性回归 </a><br><a href="https://wangxchun.github.io/2020/11/11/machineLearning-2/"> 机器学习算法 —（2）逻辑回归 </a><br><a href="https://wangxchun.github.io/2020/11/13/machineLearning-3/"> 机器学习算法 —（3）神经网络 </a><br><a href="https://wangxchun.github.io/2020/11/18/machineLearning-4/"> 机器学习算法 —（4）KNN</a><br><a href="https://wangxchun.github.io/2020/11/19/machineLearning-5/">机器学习算法 —（5）决策树 </a><br><a href="https://wangxchun.github.io/2020/11/19/machineLearning-6/"> 机器学习算法 —（6）集成学习 </a><br><a href="https://wangxchun.github.io/2020/11/19/machineLearning-7/"> 机器学习算法 —（7）贝叶斯算法 </a><br><a href="https://wangxchun.github.io/2020/11/19/machineLearning-8/"> 机器学习算法 —（8）聚类算法 </a><br><a href="https://wangxchun.github.io/2020/11/19/machineLearning-9/"> 机器学习算法 —（9）主成分分析 PCA</a><br><a href="https://wangxchun.github.io/2020/11/19/machineLearning-10/">机器学习算法 —（10）支持向量机 SVM</a></p>
]]></content>
      <categories>
        <category>大学课程-机器学习</category>
      </categories>
  </entry>
  <entry>
    <title>机器学习算法 --（8）聚类算法</title>
    <url>/2020/11/19/machineLearning-8/</url>
    <content><![CDATA[<span id="more"></span>
<h3 id="机器学习算法系列"><a href="# 机器学习算法系列" class="headerlink" title="机器学习算法系列"></a>机器学习算法系列 </h3><p><a href="https://wangxchun.github.io/2020/11/06/machineLearning-1/"> 机器学习算法 —（1）线性回归和非线性回归 </a><br><a href="https://wangxchun.github.io/2020/11/11/machineLearning-2/"> 机器学习算法 —（2）逻辑回归 </a><br><a href="https://wangxchun.github.io/2020/11/13/machineLearning-3/"> 机器学习算法 —（3）神经网络 </a><br><a href="https://wangxchun.github.io/2020/11/18/machineLearning-4/"> 机器学习算法 —（4）KNN</a><br><a href="https://wangxchun.github.io/2020/11/19/machineLearning-5/">机器学习算法 —（5）决策树 </a><br><a href="https://wangxchun.github.io/2020/11/19/machineLearning-6/"> 机器学习算法 —（6）集成学习 </a><br><a href="https://wangxchun.github.io/2020/11/19/machineLearning-7/"> 机器学习算法 —（7）贝叶斯算法 </a><br><a href="https://wangxchun.github.io/2020/11/19/machineLearning-8/"> 机器学习算法 —（8）聚类算法 </a><br><a href="https://wangxchun.github.io/2020/11/19/machineLearning-9/"> 机器学习算法 —（9）主成分分析 PCA</a><br><a href="https://wangxchun.github.io/2020/11/19/machineLearning-10/">机器学习算法 —（10）支持向量机 SVM</a></p>
]]></content>
      <categories>
        <category>大学课程-机器学习</category>
      </categories>
      <tags>
        <tag>machineLearning</tag>
        <tag>sklearn</tag>
        <tag>聚类</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习算法 --（9）主成分分析 PCA</title>
    <url>/2020/11/19/machineLearning-9/</url>
    <content><![CDATA[<span id="more"></span>
<h3 id="机器学习算法系列"><a href="# 机器学习算法系列" class="headerlink" title="机器学习算法系列"></a>机器学习算法系列 </h3><p><a href="https://wangxchun.github.io/2020/11/06/machineLearning-1/"> 机器学习算法 —（1）线性回归和非线性回归 </a><br><a href="https://wangxchun.github.io/2020/11/11/machineLearning-2/"> 机器学习算法 —（2）逻辑回归 </a><br><a href="https://wangxchun.github.io/2020/11/13/machineLearning-3/"> 机器学习算法 —（3）神经网络 </a><br><a href="https://wangxchun.github.io/2020/11/18/machineLearning-4/"> 机器学习算法 —（4）KNN</a><br><a href="https://wangxchun.github.io/2020/11/19/machineLearning-5/">机器学习算法 —（5）决策树 </a><br><a href="https://wangxchun.github.io/2020/11/19/machineLearning-6/"> 机器学习算法 —（6）集成学习 </a><br><a href="https://wangxchun.github.io/2020/11/19/machineLearning-7/"> 机器学习算法 —（7）贝叶斯算法 </a><br><a href="https://wangxchun.github.io/2020/11/19/machineLearning-8/"> 机器学习算法 —（8）聚类算法 </a><br><a href="https://wangxchun.github.io/2020/11/19/machineLearning-9/"> 机器学习算法 —（9）主成分分析 PCA</a><br><a href="https://wangxchun.github.io/2020/11/19/machineLearning-10/">机器学习算法 —（10）支持向量机 SVM</a></p>
]]></content>
      <categories>
        <category>大学课程-机器学习</category>
      </categories>
      <tags>
        <tag>machineLearning</tag>
        <tag>sklearn</tag>
        <tag>主成分分析</tag>
        <tag>PCA</tag>
      </tags>
  </entry>
  <entry>
    <title>ETF 入門</title>
    <url>/2021/05/10/money-management-ETF/</url>
    <content><![CDATA[<h3 id="一、什麽是 -ETF"><a href="# 一、什麽是 -ETF" class="headerlink" title="一、什麽是 ETF"></a>一、什麽是 ETF</h3><p>ETF（指數股票型證券投資信托基金）<br>“追蹤指數像股票一樣交易的基金”<span id="more"></span></p>
<h3 id="二、入門：0050- 和 -0056"><a href="# 二、入門：0050- 和 -0056" class="headerlink" title="二、入門：0050 和 0056"></a>二、入門：0050 和 0056</h3><h4 id="1-0050- 和 -0056- 比較，考慮因素"><a href="#1-0050- 和 -0056- 比較，考慮因素" class="headerlink" title="1.0050 和 0056 比較，考慮因素"></a>1.0050 和 0056 比較，考慮因素</h4><p>(1) 0056 高股息指數納入的 30 家公司，並不是完全客觀的排名，而是參雜一部分的模型預測<br>(2) 年周轉率較高 -&gt; 交易成本（0056 的管理費較高）<br>(3) 持股分散度，大者越大的風險（台積電對 0050 的影響越來越大）</p>
<h4 id="2- 蟬聯 -0056"><a href="#2- 蟬聯 -0056" class="headerlink" title="2. 蟬聯 0056"></a>2. 蟬聯 0056</h4><p>官股金控 兆豐金 <br> 電腦設備大廠 光寳科 <br> 聯電家族中負責 IC 設計的 聯詠</p>
<h3 id="三、ETF- 股價怎麼追蹤指數？實物 - 現金申贖機制"><a href="# 三、ETF- 股價怎麼追蹤指數？實物 - 現金申贖機制" class="headerlink" title="三、ETF 股價怎麼追蹤指數？實物 / 現金申贖機制"></a>三、ETF 股價怎麼追蹤指數？實物 / 現金申贖機制 </h3><h4 id="1- 三個特色"><a href="#1- 三個特色" class="headerlink" title="1. 三個特色"></a>1. 三個特色</h4><p> 開放型基金：基金的資產會隨著投資人的申購而增加，贖回而減少<br>(1) 規模不固定<br>(2) 交易對象是基金公司<br>(3) 基金價格直接連動成分股股價</p>
<h4 id="2- 運作機制"><a href="#2- 運作機制" class="headerlink" title="2. 運作機制"></a>2. 運作機制 </h4><p> 基金公司 (初級市場)，股票市場 (次級市場)<br>當市價低於淨值叫折價，市價高於淨值叫溢價 <br>ETF，利用合法套利的誘因，加上資金門檻的規定，讓合格的法人在兩個市場之間來回搬運<br> 散戶在股票市場買到的市價，才能在最短時間内跟上投信那裡的淨值<br>2007 年主管機關開放 ETF 可以采用現金申贖</p>
<h3 id="四、決定買哪檔 -ETF- 之前先看"><a href="# 四、決定買哪檔 -ETF- 之前先看" class="headerlink" title="四、決定買哪檔 ETF 之前先看"></a>四、決定買哪檔 ETF 之前先看 </h3><h4 id="1- 資產規模"><a href="#1- 資產規模" class="headerlink" title="1. 資產規模"></a>1. 資產規模</h4><h4 id="2- 流動性 - 交易量"><a href="#2- 流動性 - 交易量" class="headerlink" title="2. 流動性 交易量"></a>2. 流動性 交易量</h4><p> 若流動性低，市價沒辦法及時反映現價 <br> 張數 *100</p>
<h4 id="3- 成分：是否配息 - 是否適合長期持有"><a href="#3- 成分：是否配息 - 是否適合長期持有" class="headerlink" title="3. 成分：是否配息 是否適合長期持有"></a>3. 成分：是否配息 是否適合長期持有</h4><pre><code>ETF 種類：原型、杠桿型、反向型
杠桿型和反向型不是單純的去持有成分公司的股票，而是會拿一部分的資金去投資期貨
期貨會有「到期轉艙」的成本，抱越久損血越多
且連續持有會因爲複利，而導致報酬與指數偏離
-&gt; 不適合長期持有，且要證券交易賬戶才可以買賣
短期避險或加杠桿的工具，時間會侵蝕掉報酬
</code></pre><h3 id="五、ETF- 公開說明書 - 三大必看重點"><a href="# 五、ETF- 公開說明書 - 三大必看重點" class="headerlink" title="五、ETF 公開說明書 (三大必看重點)"></a>五、ETF 公開說明書 (三大必看重點)</h3><h4 id="1- 指數"><a href="#1- 指數" class="headerlink" title="1. 指數"></a>1. 指數</h4><p>ETF 就是把這些指數商品化、證券化的工具<br>(1) 追蹤什麽指數<br>(2) 指數編撰方法<br>(3) 指數成分審核 &amp; 調整時間</p>
<h4 id="2- 股利，收益分配，評價時間"><a href="#2- 股利，收益分配，評價時間" class="headerlink" title="2. 股利，收益分配，評價時間"></a>2. 股利，收益分配，評價時間</h4><p>EFT 有收益，不代表評價日後一定會配息</p>
<h4 id="3- 内扣費用"><a href="#3- 内扣費用" class="headerlink" title="3. 内扣費用"></a>3. 内扣費用 </h4><p> 經理費：投信管理這支 ETF 的費用 <br> 保管費：銀行保管 ETF 資產的費用<br>-&gt; 年度費用率：可以用來評估 ETF 的隱形成本</p>
<h3 id="六、ETF- 適合散戶投資嗎？"><a href="# 六、ETF- 適合散戶投資嗎？" class="headerlink" title="六、ETF 適合散戶投資嗎？"></a>六、ETF 適合散戶投資嗎？</h3><p>可以透過銀行或是證券戶購買 <br> 台灣前 50 大公司：踩地雷幾率比較低 <br> 但還是要注意，Acer 曾經是台灣 50 的公司，但是後來經營效果不佳</p>
<h3 id="七、台灣 -50- 有兩檔 -0050-amp-006208"><a href="# 七、台灣 -50- 有兩檔 -0050-amp-006208" class="headerlink" title="七、台灣 50 有兩檔　0050&amp;006208"></a>七、台灣 50 有兩檔　0050&amp;006208</h3><p>元大台灣 50（0050），富邦台灣 50（006208）<br>他們年化報酬率的不同主要是建立在成立時間的不同，0050 可是經歷過 2008</p>
<h3 id="八、杠桿型和反向型基金 -00632R- 台灣 -50- 反 -1"><a href="# 八、杠桿型和反向型基金 -00632R- 台灣 -50- 反 -1" class="headerlink" title="八、杠桿型和反向型基金 (00632R 台灣 50 反 1)"></a>八、杠桿型和反向型基金 (00632R 台灣 50 反 1)</h3><h4 id="1- 原理"><a href="#1- 原理" class="headerlink" title="1. 原理"></a>1. 原理</h4><p>ETF 也可以以「倍數杠桿」或是「反向操作」的方式，發揮類似融資融券的效果，但那是單日報酬。<br>ETF 會拿一部分的資金去投資期貨，期貨會有到期轉倉的成本，且連續持有會因爲複利而導致報酬與指數偏離。</p>
<h4 id="2- 反向型 -ETF"><a href="#2- 反向型 -ETF" class="headerlink" title="2. 反向型 ETF"></a>2. 反向型 ETF</h4><p>股票不是只有上漲才可以賺，下跌也可以賺 <br> 最常見的方法就是放空（透過融券先借股票來賣，低價再買回來還）<br>也可以買反向型 ETF，但是不是完全鏡向的，會有偏離。</p>
<h5 id="1- 導致偏離的三個原因："><a href="#1- 導致偏離的三個原因：" class="headerlink" title="(1) 導致偏離的三個原因："></a>(1) 導致偏離的三個原因：</h5><p>(a) 複利 <br> 上漲到後面計算的基數會越大，下跌到越後面計算的基數會越小，<br>所以一樣都是 10 天 10% 的漲跌停，加上複利的因素後，一個上漲 159%，一個下跌 65%，<br>漲跌幅不成比例，偏離就產生了。<br>(b) 追蹤誤差 <br> 通過放空台灣指數期貨，來達到反向報酬的效果。<br>但是期貨指數和現貨指數之間會有誤差。<br>(c) 固定成本 <br> 期貨會有到期時間，要轉換合約。<br>而且，沒有配息，獲利的因素只剩價差。</p>
<p>拉長時間來看，大盤大多是緩漲急跌，所以反向型 ETF 大部分都在緩跌，<br>只有黑天鵝的時候才會急漲。</p>
<h5 id="2- 作反向型 -ETF- 的建議"><a href="#2- 作反向型 -ETF- 的建議" class="headerlink" title="(2) 作反向型 ETF 的建議"></a>(2) 作反向型 ETF 的建議</h5><p>(a) 選擇成交量大的，市價才能即使反應淨值，流動性也比較好<br>(b) 控制比例，不攤平<br>(c) 設定等待的時間和停損 % 數，嚴格執行</p>
<h3 id="九、2018-0056- 新名單"><a href="# 九、2018-0056- 新名單" class="headerlink" title="九、2018 0056 新名單"></a>九、2018 0056 新名單</h3><ol>
<li>國巨：賣被動原件，2018 年台股最驚奇的一支股票</li>
<li>技嘉：世界第二大的主機板製造商</li>
<li>微星：主要生產主機板、顯示卡、筆電</li>
<li>旺宏：記憶體大廠，Switch 讓它翻身</li>
<li>南亞科：台塑集團的 DRAM 大廠<br>-&gt; 都是電子類股，沒有傳產或是金融股<br>-&gt; 台股縮影</li>
</ol>
<h3 id="十、金融股怎麼選？認識金融業"><a href="# 十、金融股怎麼選？認識金融業" class="headerlink" title="十、金融股怎麼選？認識金融業"></a>十、金融股怎麼選？認識金融業 </h3><h4 id="1- 四種金融股"><a href="#1- 四種金融股" class="headerlink" title="1. 四種金融股"></a>1. 四種金融股</h4><p>(1) 銀行股<br> 銀行業務：銀行、信托、票券、信合社、農漁業、郵政儲匯 <br>(2) 保險股<br> 壽險、產險、保經、保代、再保險 <br>(3) 證券股<br> 證券、期貨、投信、投顧 <br>(4) 金控股<br>2001 年第一次金融改革的時候，通過了金控法，鼓勵金融業合并，轉型成立金控<br> 華南金就是當時成立的第一家金控。<br>一家金控，就控制了很多金融公司 (這些金融公司彼此配合作戰，由金控指揮)。</p>
<p>金控公司有不同的主體：<br>(a) 保險主體：富邦金、國泰金、新光金<br>(b) 銀行主體：中信金、台新金、玉山金、永豐金<br>(c) 證券主體：元大金、開發金、日盛金、國票金</p>
<h4 id="2- 八大官股行庫"><a href="#2- 八大官股行庫" class="headerlink" title="2. 八大官股行庫"></a>2. 八大官股行庫 </h4><p> 國營經常需要負擔很多政府的財政任務 ex：學貸，青年優惠房貸，外幣兌換，新鈔 / 幣更換。<br>後來將部分官股行庫公司化之後，再逐漸釋出股權轉爲民營化（國有事業民營化）。<br>在市場上可以交易的「四金二銀」就是國有民營行庫。</p>
<h3 id="投資理財系列"><a href="# 投資理財系列" class="headerlink" title="投資理財系列"></a>投資理財系列 </h3><p><a href="https://wangxchun.github.io/2021/05/10/money-management-basic-concept/"> 基本觀念 </a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-ETF/">ETF 入門</a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-stock-entry-level/"> 股票入門 </a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-stock-fundamental/"> 股票基本面 </a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-stock-technical/"> 股票技術面 </a><br><a href="https://wangxchun.github.io/2021/05/11/money-management-foreign-currency/"> 外匯 </a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-deposit-insurance/"> 儲蓄保單 </a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-futures-and-warrant/"> 期貨、權證、外匯保證金 </a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-virtual-currency/"> 各類虛擬貨幣 </a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-real-estate/"> 房地產</a></p>
]]></content>
      <categories>
        <category>生活-投資理財</category>
      </categories>
  </entry>
  <entry>
    <title>社會小菜雞 理財基本觀念</title>
    <url>/2021/05/10/money-management-basic-concept/</url>
    <content><![CDATA[<h3 id="一、月底記帳法和支出管理"><a href="# 一、月底記帳法和支出管理" class="headerlink" title="一、月底記帳法和支出管理"></a>一、月底記帳法和支出管理 </h3><h4 id="1- 月底記帳法"><a href="#1- 月底記帳法" class="headerlink" title="1. 月底記帳法"></a>1. 月底記帳法</h4><p> 每個月底記錄：<br>(1) 資產市值 <br>(2) 收入<br>(3) 負債<br>(4) 支出<br> 就可以算出自己净值 (净值 = 資產 – 負債) 的變化</p>
<ul>
<li>想理財之前先理債</li>
<li>緊急預備金 (安全存款)：15-30 萬</li>
<li>小心被動支出 <br> 常見被動支出：第四台、手機吃到飽、多餘的成長、循環利息、免費試用 <span id="more"></span></li>
</ul>
<h4 id="2- 理財先理信用卡"><a href="#2- 理財先理信用卡" class="headerlink" title="2. 理財先理信用卡"></a>2. 理財先理信用卡</h4><p>(1) 減少卡片數<br>(2) 要求降低額度<br>(3) 更改結帳日，在發薪日附近</p>
<h4 id="3- 銀行定存怎麼算利息錢？（利率 -amp- 殖利率）"><a href="#3- 銀行定存怎麼算利息錢？（利率 -amp- 殖利率）" class="headerlink" title="3. 銀行定存怎麼算利息錢？（利率 &amp; 殖利率）"></a>3. 銀行定存怎麼算利息錢？（利率 &amp; 殖利率）</h4><p>定存提前解約，利率是打 8 折 <br> 利率 = 利息 / 本金 <br> 目前幾個主要行庫的 (1 年期) 定存利率大概是 1.04%<br>理財新手可以從各種利率開始研究</p>
<pre><code>什麽是殖利率？
利率 = 利息 / 本金
股票或是債券的價格會隨著市場供需漲跌，導致本金可能隨時變大或縮小
利息 (股利或是債息) 在一段時間内 (1 年或更久) 是固定不變的
本金隨價格變化，導致利率 (利息 / 本金) 高低起伏，稱爲殖利率
</code></pre><h4 id="4- 定存 - 定期存款 -vs- 定儲 - 定期儲蓄存款"><a href="#4- 定存 - 定期存款 -vs- 定儲 - 定期儲蓄存款" class="headerlink" title="4. 定存 (定期存款) vs 定儲 (定期儲蓄存款)"></a>4. 定存 (定期存款) vs 定儲 (定期儲蓄存款)</h4><p>三個不同點 <br>(1) 定儲規定只有自然人和非盈利性質的法人可以申請，定存沒有限制<br>(2) 定儲因爲是每個月計息的關係，可以達到月複利的效果<br>(3) 定存的時間比較靈活，定儲的時間一年起跳<br> 定儲的三個種類<br>(1) 整存整付<br>(2) 零存整付<br>(3) 存本取息：利息沒有滾入本金，沒有月複利的效果</p>
<pre><code>補充：
如果在定存的期間内，臨時有資金需求，但金額有沒有大到要將這筆定存解約，就可以考慮定存質借。
固定利率 / 機動利率
</code></pre><h4 id="5- 認識不同投資工具"><a href="#5- 認識不同投資工具" class="headerlink" title="5. 認識不同投資工具"></a>5. 認識不同投資工具 </h4><h5 id="1- 賺配息：定存、儲蓄險"><a href="#1- 賺配息：定存、儲蓄險" class="headerlink" title="(1) 賺配息：定存、儲蓄險"></a>(1) 賺配息：定存、儲蓄險</h5><h5 id="2- 賺價差：期貨、選擇權、黃金 - 石油、虛擬貨幣"><a href="#2- 賺價差：期貨、選擇權、黃金 - 石油、虛擬貨幣" class="headerlink" title="(2) 賺價差：期貨、選擇權、黃金 / 石油、虛擬貨幣"></a>(2) 賺價差：期貨、選擇權、黃金 / 石油、虛擬貨幣</h5><h5 id="3- 兩者兼具：股票 - 債券、基金 -ETF、外幣、房地產"><a href="#3- 兩者兼具：股票 - 債券、基金 -ETF、外幣、房地產" class="headerlink" title="(3) 兩者兼具：股票 / 債券、基金 / ETF、外幣、房地產"></a>(3) 兩者兼具：股票 / 債券、基金 / ETF、外幣、房地產</h5><h4 id="6- 四種保本儲蓄工具"><a href="#6- 四種保本儲蓄工具" class="headerlink" title="6. 四種保本儲蓄工具"></a>6. 四種保本儲蓄工具</h4><p> 台幣定存 / 外幣定存 / 儲蓄險 / 貨幣基金 <br> 權值股和大盤存股理論上也是可以保本</p>
<h5 id="1- 台幣定存"><a href="#1- 台幣定存" class="headerlink" title="(1) 台幣定存"></a>(1) 台幣定存 </h5><p> 完全保本，解約可立即變現，提前解約利息打 8 折（頂多頂多是失去利息）<br>目的：存放短期不會動用，且不能損失的資金（類似緊急預備金）</p>
<h5 id="2- 外幣定存"><a href="#2- 外幣定存" class="headerlink" title="(2) 外幣定存"></a>(2) 外幣定存 </h5><p> 利息較高但不完全保本（要承擔匯率波動和買賣價差的風險）</p>
<h5 id="3- 儲蓄險"><a href="#3- 儲蓄險" class="headerlink" title="(3) 儲蓄險"></a>(3) 儲蓄險 </h5><p> 儲蓄險的本質是儲蓄，而不是保險。<br>儲蓄險：利率高於定存，可以保本（抱越久，領越多）<br>考慮的三個重點：要繳多少？解約可以獲得多少？萬一身故了可以領多少？<br>特色：既可以保本，放越久報酬率又可以打敗定存，前提是資金要被鎖住，流動性差 <br> 目的：適合懶人投資，放置閑錢，當然投資報酬率並不高（低於股票 / 債券 / 基金）</p>
<h5 id="4- 貨幣基金：投資在貨幣市場短期有價證券的一種基金"><a href="#4- 貨幣基金：投資在貨幣市場短期有價證券的一種基金" class="headerlink" title="(4) 貨幣基金：投資在貨幣市場短期有價證券的一種基金"></a>(4) 貨幣基金：投資在貨幣市場短期有價證券的一種基金 </h5><p> 拿基金投資者的錢放定存、買高信用評等的短期債券 (國庫券、可轉讓定存單)<br>特色：風險低 (但不能説是零風險)、管理費低、免申購贖回的費用 <br> 目的：讓投資人作爲資金暫時停留的地方，在不同基金中轉換的中間點<br>（報酬低於定存，高於活存，不適合資金長期放置）<br>ex：餘額寳</p>
<h3 id="二、增長財富"><a href="# 二、增長財富" class="headerlink" title="二、增長財富"></a>二、增長財富 </h3><h4 id="1- 基本原則"><a href="#1- 基本原則" class="headerlink" title="1. 基本原則"></a>1. 基本原則</h4><h5 id="1- 設定目標（可以用 -smart- 法則設定目標）"><a href="#1- 設定目標（可以用 -smart- 法則設定目標）" class="headerlink" title="(1) 設定目標（可以用 smart 法則設定目標）"></a>(1) 設定目標（可以用 smart 法則設定目標）</h5><p> 設定多久後要存多少錢，每個月該存多少錢</p>
<h5 id="2- 管理支出"><a href="#2- 管理支出" class="headerlink" title="(2) 管理支出"></a>(2) 管理支出 </h5><h5 id="3- 讓錢賺錢"><a href="#3- 讓錢賺錢" class="headerlink" title="(3) 讓錢賺錢"></a>(3) 讓錢賺錢</h5><p> 回報率要超過通貨膨脹<br>Ex：股票投資，副業，美國股票</p>
<h4 id="2-《窮爸爸，富爸爸》"><a href="#2-《窮爸爸，富爸爸》" class="headerlink" title="2.《窮爸爸，富爸爸》"></a>2.《窮爸爸，富爸爸》</h4><h5 id="1- 不爲金錢而工作"><a href="#1- 不爲金錢而工作" class="headerlink" title="(1) 不爲金錢而工作"></a>(1) 不爲金錢而工作 </h5><p> 爲了學習而工作</p>
<h5 id="2- 搞懂財商"><a href="#2- 搞懂財商" class="headerlink" title="(2) 搞懂財商"></a>(2) 搞懂財商 </h5><p>(a) 不要買負債，要買資產，ex：股票，基金，房地產，版權專利權<br>(b) 用斜杠創業的方式，用非工作的時間來打造你的資產<br>(c) 學會一些公司法律<br> 替自己注冊一間公司，可以完成很多個人帳戶無法完成的事，ex：稅務優勢</p>
<h5 id="3- 創造財富機會"><a href="#3- 創造財富機會" class="headerlink" title="(3) 創造財富機會"></a>(3) 創造財富機會</h5><p>(a) 盡量不做零售投資者，而是自己組織一個生意模式<br>(b) 和對的人做朋友，商業交友社群<br>(c) 想要獲得，首先需要給予</p>
<h3 id="三、從上班思維變複業思維，人生、收入自己作主"><a href="# 三、從上班思維變複業思維，人生、收入自己作主" class="headerlink" title="三、從上班思維變複業思維，人生、收入自己作主"></a>三、從上班思維變複業思維，人生、收入自己作主</h3><ol>
<li>要專精，但是也要有磚頭：有意識利用現在擅長的能力，發展另一種技能</li>
<li>培養解決問題的敏銳度：才容易發現需求缺口</li>
<li>把自己當公司經營：一家公司會先有穩定的收入來源，然後才把這些錢拿去開發新的產品</li>
<li>把工作流程化，先有流程才有系統：把細節流程寫下來，才可以不斷優化，找到更有效率的方式</li>
</ol>
<h3 id="四、小結：五個好習慣"><a href="# 四、小結：五個好習慣" class="headerlink" title="四、小結：五個好習慣"></a>四、小結：五個好習慣 </h3><h4 id="1- 追蹤金錢流向，記帳"><a href="#1- 追蹤金錢流向，記帳" class="headerlink" title="1. 追蹤金錢流向，記帳"></a>1. 追蹤金錢流向，記帳</h4><h4 id="2- 建構自動化存錢系統"><a href="#2- 建構自動化存錢系統" class="headerlink" title="2. 建構自動化存錢系統"></a>2. 建構自動化存錢系統</h4><h4 id="3- 開始學做預算（多帳戶管理法：專款專用）"><a href="#3- 開始學做預算（多帳戶管理法：專款專用）" class="headerlink" title="3. 開始學做預算（多帳戶管理法：專款專用）"></a>3. 開始學做預算（多帳戶管理法：專款專用）</h4><h4 id="4- 擺脫身上的消費型貸款：提前還款"><a href="#4- 擺脫身上的消費型貸款：提前還款" class="headerlink" title="4. 擺脫身上的消費型貸款：提前還款"></a>4. 擺脫身上的消費型貸款：提前還款</h4><h4 id="5- 改變收入結構，開啓多重來源（投資或副業）"><a href="#5- 改變收入結構，開啓多重來源（投資或副業）" class="headerlink" title="5. 改變收入結構，開啓多重來源（投資或副業）"></a>5. 改變收入結構，開啓多重來源（投資或副業）</h4><h3 id="投資理財系列"><a href="# 投資理財系列" class="headerlink" title="投資理財系列"></a> 投資理財系列 </h3><p><a href="https://wangxchun.github.io/2021/05/10/money-management-basic-concept/"> 基本觀念 </a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-ETF/">ETF 入門</a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-stock-entry-level/"> 股票入門 </a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-stock-fundamental/"> 股票基本面 </a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-stock-technical/"> 股票技術面 </a><br><a href="https://wangxchun.github.io/2021/05/11/money-management-foreign-currency/"> 外幣 </a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-deposit-insurance/"> 儲蓄保單 </a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-futures-and-warrant/"> 期貨、權證、外匯保證金 </a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-virtual-currency/"> 各類虛擬貨幣 </a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-real-estate/"> 房地產</a></p>
]]></content>
      <categories>
        <category>生活-投資理財</category>
      </categories>
      <tags>
        <tag>記帳</tag>
        <tag>財富自由</tag>
        <tag>緊急預備金</tag>
        <tag>窮爸爸，富爸爸</tag>
        <tag>投資入門</tag>
      </tags>
  </entry>
  <entry>
    <title>債券</title>
    <url>/2021/05/13/money-management-bond/</url>
    <content><![CDATA[<h3 id="債券是什麽？"><a href="# 債券是什麽？" class="headerlink" title="債券是什麽？"></a>債券是什麽？</h3><p>債券（Bond）其實就是一種「借據」，債券上由發行者承諾，<br>在到期前每期支付固定的利息、到期時則是會一次還清票面面額上的本金。<span id="more"></span><br>因此可債債券視為，一種能「穩定領利息」的投資工具。<br>差別在於定存幾乎不會有危險，而債券則是可能有拿不到利息的風險。<br>整體報酬比股票略低但穩定，波動相對比較小。</p>
<h3 id="公司如果違約了怎麼辦？"><a href="# 公司如果違約了怎麼辦？" class="headerlink" title="公司如果違約了怎麼辦？"></a>公司如果違約了怎麼辦？</h3><p>如果公司還不出債，就會進入債務協商，<br>有的會和銀行協商後繼續營運，有的則是會倒閉並清算公司資產，<br>如果清算，投資債券的人通常有優先的順位拿回債務，但通常不見得能全部拿回來。</p>
<h3 id="債券種類有哪些？"><a href="# 債券種類有哪些？" class="headerlink" title="債券種類有哪些？"></a>債券種類有哪些？</h3><h4 id="1- 根據發行的對像分類："><a href="#1- 根據發行的對像分類：" class="headerlink" title="1. 根據發行的對像分類："></a>1. 根據發行的對像分類：</h4><p>(1) 國債、政府債或稱為公債 (風險低)：國家發行的債券<br>(2) 公司債 (風險高)：公司發行的債券</p>
<h4 id="2- 根據風險等級區分："><a href="#2- 根據風險等級區分：" class="headerlink" title="2. 根據風險等級區分："></a>2. 根據風險等級區分：</h4><p>(1) 投資等級債券 (風險低)：大部分的已開發國家國債、某些大型公司債屬於這類<br>(2) 垃圾債券 (風險高)：也稱為高收益債券，大多是公司債</p>
<h3 id="債券最重要的元素：風險和殖利率 -Yield"><a href="# 債券最重要的元素：風險和殖利率 -Yield" class="headerlink" title="債券最重要的元素：風險和殖利率 (Yield)"></a>債券最重要的元素：風險和殖利率 (Yield)</h3><p>殖利率也稱為「到期收益率」(Yield To Maturity 簡稱 YTM)<br>利息 = 票面金額 x 票面利率 (%)<br>票面利率 = 利息 / 票面金額 <br> 殖利率 (%) = 用利息、票面金額、買進時的價格計算出殖利率 (需用公式計算)</p>
<h3 id="3- 種債券交易方法"><a href="#3- 種債券交易方法" class="headerlink" title="3 種債券交易方法"></a>3 種債券交易方法 </h3><p> 在資金少的時候買債券 ETF 或債券基金，<br>這兩者都是可以用小資金買進一籃子的債券，也可以避免單一債券違約的風險，<br>當你資金很大的時候 (1000 萬以上) 可以開始直接單獨買債券。</p>
<h4 id="1-「債券 -ETF」：用低成本分散投資許多債券"><a href="#1-「債券 -ETF」：用低成本分散投資許多債券" class="headerlink" title="1.「債券 ETF」：用低成本分散投資許多債券"></a>1.「債券 ETF」：用低成本分散投資許多債券 </h4><h4 id="2-「債券基金」：成本比 -ETF- 高、選擇較多"><a href="#2-「債券基金」：成本比 -ETF- 高、選擇較多" class="headerlink" title="2.「債券基金」：成本比 ETF 高、選擇較多"></a>2.「債券基金」：成本比 ETF 高、選擇較多</h4><h4 id="3-「債券」：金額要求較大、在台灣選擇較少"><a href="#3-「債券」：金額要求較大、在台灣選擇較少" class="headerlink" title="3.「債券」：金額要求較大、在台灣選擇較少"></a>3.「債券」：金額要求較大、在台灣選擇較少</h4><h3 id="如何選擇"><a href="# 如何選擇" class="headerlink" title="如何選擇"></a> 如何選擇 </h3><p> 降息有利於債券、升息不利於債券，但從政府公債、新興市場債券到高收益債券，各類債券內容與特色不一，簡單透過存續期間、利差及信用評等三個名詞，投資人可以更容易找到適合自己的好債券基金。</p>
<h3 id="買賣時機"><a href="# 買賣時機" class="headerlink" title="買賣時機"></a>買賣時機 </h3><p> 購入高收益債券的最佳時機是當高收益債券的利差高的時候，反之，當利差低時則是相對不佳的時機。</p>
<p>身為投資人，在利差上升時，我們不知它何時會反轉，<br>因此投資後也要有心理準備短期內會產生更大的虧損。<br>例如 2008 年利差擴大到 10% 時，已經到了 2000 年網路泡沫時的高點，<br>看似是個不錯的投資時機，此時如果投資，後續還有更大的跌幅，因為利差最後到了近 20%，<br>但是長期來看，如果當時跌了也沒賣，二年後仍有正報酬。</p>
<p>投資高收益債最不明智的就是砍在低點，也就是砍在利差高的時候，<br>應該要在利差高時購入，然後耐心等待。</p>
]]></content>
      <categories>
        <category>生活-投資理財</category>
      </categories>
  </entry>
  <entry>
    <title>股票籌碼面</title>
    <url>/2021/06/01/money-management-chip-analysis/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>生活-投資理財</category>
      </categories>
  </entry>
  <entry>
    <title>外幣</title>
    <url>/2021/05/11/money-management-foreign-currency/</url>
    <content><![CDATA[<h3 id="知識"><a href="# 知識" class="headerlink" title="知識"></a>知識 </h3><h4 id="1- 換外幣必須知道的事"><a href="#1- 換外幣必須知道的事" class="headerlink" title="1. 換外幣必須知道的事"></a>1. 換外幣必須知道的事</h4><p><img src="/2021/05/11/money-management-foreign-currency/photo1.png" alt><br> 本銀行以 30.277 的新台幣賣出一美金 <br> 本銀行用 29.735 的新台幣和你買一美金 <br> 即期的匯率會比現金還要好 Ex：對於我來説，買入金額越高越好 <br> 每一個外幣都是 買進 &lt; 賣出 這中間的差異就是銀行的利差 (換越多次，被賺的匯差和手續費)<br>出國刷信用卡，一定要刷當地貨幣，爲什麽？<br>舉例：在日本買東西<br>(1) 刷日幣：日本店家向中國信托請款的時候，VISA 國際發卡組織就會用他們的算好的匯率幫日本店家的十萬日圓換好成新臺幣的金額，跟中國信托請款（接近銀行的賣出匯率）。<br>(2) 刷台幣：透過 DCC 機制，包含匯差和手續費。</p>
<pre><code>總結：匯率基本觀念
1. 現金的匯率會比即期匯率還差（所以會有價差 spread），因爲有保管和遺失等風險
2. 買入小於賣出，錢會越換越薄（匯差是兌換貨幣的固定成本）
3. 刷卡要刷當地貨幣
</code></pre><h3 id="高利外幣定存要注意"><a href="# 高利外幣定存要注意" class="headerlink" title="高利外幣定存要注意"></a>高利外幣定存要注意 </h3><p>(1) 利率<br>(2) 匯率<br>(3) 買賣價差率<br> 價差 / 銀行賣出價 = 買賣價差率 <br> 即期匯率價差率 &lt; 現金匯率價差率 <br> 美元 &lt; 日圓 &lt; 人民幣 &lt; 韓元 &lt; 印尼幣 <br> 台灣外幣定存的熱門外幣：美金 &lt; 澳幣 &lt; 人民幣 &lt; 紐幣 &lt; 南非幣 <br> 如果準備要外幣定存，要用 即期匯率價差率 - 定存利率 (看你存多久) = 預期報酬</p>
<span id="more"></span>
<h3 id="投資理財系列"><a href="# 投資理財系列" class="headerlink" title="投資理財系列"></a>投資理財系列 </h3><p><a href="https://wangxchun.github.io/2021/05/10/money-management-basic-concept/"> 基本觀念 </a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-ETF/">ETF 入門</a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-stock-entry-level/"> 股票入門 </a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-stock-fundamental/"> 股票基本面 </a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-stock-technical/"> 股票技術面 </a><br><a href="https://wangxchun.github.io/2021/05/11/money-management-foreign-currency/"> 外幣 </a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-deposit-insurance/"> 儲蓄保單 </a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-futures-and-warrant/"> 期貨、權證、外匯保證金 </a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-virtual-currency/"> 各類虛擬貨幣 </a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-real-estate/"> 房地產</a></p>
]]></content>
      <categories>
        <category>生活-投資理財</category>
      </categories>
  </entry>
  <entry>
    <title>基金</title>
    <url>/2021/05/13/money-management-fund/</url>
    <content><![CDATA[<h3 id="新手買基金學什麼？"><a href="# 新手買基金學什麼？" class="headerlink" title="新手買基金學什麼？"></a>新手買基金學什麼？</h3><p>(1) 長期規劃 <br>(2) 投資眼光 <span id="more"></span><br>2000 多支基金，眼光要夠好，才能選到好的基金<br> 看類型，例如：摩根新興市場高收益債券基金 (月配)(台幣)<br>基金公司、投資區域、投資形態、配息方式、計價幣別<br>(3) 國際視野<br><img src="/2021/05/13/money-management-fund/photo1.png" alt="基金類型"></p>
<h3 id="投資台股四大主權基金"><a href="# 投資台股四大主權基金" class="headerlink" title="投資台股四大主權基金"></a>投資台股四大主權基金 </h3><p> 三大法人：外資，投信，自營商 <br> 外資：主動型基金，被動型基金 (ETF)，主權基金 <br> 投資台股四大主權基金：挪威，新加坡，沙烏地阿拉伯，阿聯 <br> 具有合法執照，可以發行共同基金或是 ETF，來募集資金替投資人操作</p>
<h3 id="貨幣基金 -Ex：餘額寳"><a href="# 貨幣基金 -Ex：餘額寳" class="headerlink" title="貨幣基金 Ex：餘額寳"></a>貨幣基金 Ex：餘額寳 </h3><p> 投資在貨幣市場短期有價證券的一種基金。<br>貨幣基金不是把錢拿去買股票或債券，<br>而是拿去放定存或是買一些高信用評等的短期票券 Ex：國庫券，可轉讓定期單。<br>特色：(1) 低風險 (2) 低管理費 (3) 免手續費 <br> 目的：可以作爲資金暫時存放的地方，折衷定存和活存的優點，比定存的流動性還高。<br>但是：是把利息反應在基金的净值上，而不是直接配息。</p>
]]></content>
      <categories>
        <category>生活-投資理財</category>
      </categories>
  </entry>
  <entry>
    <title>金融衍生品：期貨、權證、選擇權、外匯保證金</title>
    <url>/2021/05/10/money-management-futures-and-warrant/</url>
    <content><![CDATA[<h3 id="一、背景知識"><a href="# 一、背景知識" class="headerlink" title="一、背景知識"></a>一、背景知識 </h3><h4 id="1- 期貨"><a href="#1- 期貨" class="headerlink" title="1. 期貨"></a>1. 期貨</h4><p> 買賣雙方簽訂契約，約定于指定時間，按照協議的價格，交易指定標的數量。<br>重點：交易標的物、交易數量、到期日、價格 <br><span id="more"></span><br> 買方不一定要等待到期日履約獲利，也可以選擇將合約轉讓他人來賺取利潤。</p>
<h4 id="2- 期貨基本用語"><a href="#2- 期貨基本用語" class="headerlink" title="2. 期貨基本用語"></a>2. 期貨基本用語 </h4><h5 id="1- 一口期貨"><a href="#1- 一口期貨" class="headerlink" title="(1) 一口期貨"></a>(1) 一口期貨</h5><h5 id="2- 建倉：購買一口期貨"><a href="#2- 建倉：購買一口期貨" class="headerlink" title="(2) 建倉：購買一口期貨"></a>(2) 建倉：購買一口期貨</h5><h5 id="3- 持倉：購買一口期貨，並持有"><a href="#3- 持倉：購買一口期貨，並持有" class="headerlink" title="(3) 持倉：購買一口期貨，並持有"></a>(3) 持倉：購買一口期貨，並持有</h5><h5 id="4- 交割：買方到期日履約"><a href="#4- 交割：買方到期日履約" class="headerlink" title="(4) 交割：買方到期日履約"></a>(4) 交割：買方到期日履約</h5><h5 id="5- 平倉：將合約賣出"><a href="#5- 平倉：將合約賣出" class="headerlink" title="(5) 平倉：將合約賣出"></a>(5) 平倉：將合約賣出</h5><p> 證券以及期貨市場上，持有空頭部位的投資人，藉由買進等量的契約以離開市場；或是持有多頭部位的投資人，藉由賣出等量的契約以離開市場。 即以等量但相反買賣方向，來沖銷原有的契約。</p>
<h5 id="6- 爆倉"><a href="#6- 爆倉" class="headerlink" title="(6) 爆倉"></a>(6) 爆倉 </h5><p> 投資者被强制斷頭，保證金為負，超額虧損</p>
<h5 id="7- 保證金"><a href="#7- 保證金" class="headerlink" title="(7) 保證金"></a>(7) 保證金 </h5><p> 避免損失進一步擴大：追繳保證金或是强制平倉</p>
<h5 id="8- 當冲"><a href="#8- 當冲" class="headerlink" title="(8) 當冲"></a>(8) 當冲 </h5><p> 當沖會有兩種意思，一種就是字面上解釋，當天就把期貨部位沖銷稱做當沖交易，另一種指的是在交易期貨時，勾選當沖保證金減半。</p>
<h5 id="9- 先買後賣、先賣後買"><a href="#9- 先買後賣、先賣後買" class="headerlink" title="(9) 先買後賣、先賣後買"></a>(9) 先買後賣、先賣後買 </h5><p> 期貨基本的操作方式，舉例來說：若預期台指期會上漲，那就買進台指期（稱為「建倉」），待上漲後賣出（稱為「平倉」），就可低買高賣賺取價差；假設看空，那就先賣出，低點時再買進平倉。</p>
<h5 id="10- 長倉"><a href="#10- 長倉" class="headerlink" title="(10) 長倉"></a>(10) 長倉 </h5><p> 長倉與短倉相反，指投資人買入金融產品部位後，持有且當日不出脫的操作方式。持長倉的投資者預期相關資產的價格會上漲後市看好，因此採取「先買後賣」的策略；此為傳統的證券操作方式。股票投資人或期貨及其他金融產品交易人，根據市場行情價格波動而在低位買入在高位賣出，即低吸高拋。廣義上，短線搶短、波段操作、長期持有，均屬之。</p>
<h5 id="11- 短倉"><a href="#11- 短倉" class="headerlink" title="(11) 短倉"></a>(11) 短倉 </h5><p> 與長倉相反，指投資者在「不持有」金融產品部位（如證券）的情況下，賣出該金融產品。 如果賣方有義務立即交付，他便需要從第三方借入該資產。</p>
<h4 id="3- 期貨分類"><a href="#3- 期貨分類" class="headerlink" title="3. 期貨分類"></a>3. 期貨分類 </h4><h5 id="1- 商品期貨"><a href="#1- 商品期貨" class="headerlink" title="(1) 商品期貨"></a>(1) 商品期貨</h5><p> 農產品期貨、金屬期貨、能源期貨</p>
<h5 id="2- 金融期貨"><a href="#2- 金融期貨" class="headerlink" title="(2) 金融期貨"></a>(2) 金融期貨 </h5><p> 外匯期貨、利率期貨 (買賣信用工具)、股票指數期貨</p>
<h4 id="4- 入門：台指期貨"><a href="#4- 入門：台指期貨" class="headerlink" title="4. 入門：台指期貨"></a>4. 入門：台指期貨 </h4><h4 id="5- 期貨如何開戶 - 如何選擇期貨商"><a href="#5- 期貨如何開戶 - 如何選擇期貨商" class="headerlink" title="5. 期貨如何開戶 ++ 如何選擇期貨商"></a>5. 期貨如何開戶 ++ 如何選擇期貨商</h4><p> 手續費、服務品質、下單軟體 </p>
<h4 id="5- 外匯保證金"><a href="#5- 外匯保證金" class="headerlink" title="5. 外匯保證金"></a>5. 外匯保證金 </h4><p> 利用杠桿操作賺取匯差，放大了投資報酬率，也加大風險 <br> 合約的單位為一手，一手通常是 10 萬元，例如 EUR/USA 就是操作 10 萬歐元 <br> 想要操作 10 萬元的合約，要拿出多少合約就要看杠桿是多少了（例如 1：100）</p>
<h5 id="損益計算公式"><a href="# 損益計算公式" class="headerlink" title="損益計算公式"></a>損益計算公式 </h5><p>（1）直接報價法（EUR/USA=1.22985，代表一歐元可以兌換 1.22985 美元）<br> 損益（美元）= 交易金額 $*$（賣出價 - 買入價）<br>（2）間接報價法（USA/JPY=106.955，代表 1 美元可兌換 106.955 日元）<br>損益（美元）= 交易金額 $*$（賣出價 - 買入價）/ 賣出價</p>
<h5 id="要注意的規則"><a href="# 要注意的規則" class="headerlink" title="要注意的規則"></a>要注意的規則 </h5><p> 因虧損，通知追繳期保證金限内未補繳 / 虧損過大 -&gt; 强制平倉</p>
<h5 id="優點"><a href="# 優點" class="headerlink" title="優點"></a>優點 </h5><p> 高杠桿、可雙向、24 小時、公平性、易聚焦 <br> 高杠桿：因爲有强制平倉的機制，所以最多就是賠光保證金 <br> 可雙向：預期匯率漲，先買後賣；預期匯率降，先賣後買</p>
<h5 id="缺點"><a href="# 缺點" class="headerlink" title="缺點"></a>缺點 </h5><p> 杠桿作用、缺乏監管 (滑價或是資訊不對稱)</p>
<h5 id="手續費"><a href="# 手續費" class="headerlink" title="手續費"></a>手續費 </h5><p> 以點為單位</p>
<h5 id="利息問題"><a href="# 利息問題" class="headerlink" title="利息問題"></a>利息問題 </h5><h4 id="6- 權證"><a href="#6- 權證" class="headerlink" title="6. 權證"></a>6. 權證</h4><h5 id="小資族想要投資權值股的方式"><a href="# 小資族想要投資權值股的方式" class="headerlink" title="小資族想要投資權值股的方式"></a> 小資族想要投資權值股的方式</h5><p>(1) 零股：缺乏流動性<br>(2) 融資：要每日計息<br>(3) 個股期貨：注意維持率和保證金</p>
<h5 id="什麽是權證"><a href="# 什麽是權證" class="headerlink" title="什麽是權證"></a>什麽是權證 </h5><p> 一種由券商發行的衍生型金融商品，本質是一種契約，<br>是一種讓投資人付了權利金之後在未來可以以特定的價格買賣特定股票的權力憑證 <br> 分爲認購權證 (看多) 和認售權證 (看空)</p>
<h5 id="三個關鍵"><a href="# 三個關鍵" class="headerlink" title="三個關鍵"></a>三個關鍵 </h5><p> 時間、履約價、標的 <br> 權證到期之前可以提前買賣，看對方向可以提前獲利出場，看錯方向也可以提早停損 <br> 如果買了放著不管，到期了才發現還在價外，那那張權證就沒什麽價值了 (報酬率 - 100%)</p>
<h5 id="兩個方法判別自己是否適合做權證"><a href="# 兩個方法判別自己是否適合做權證" class="headerlink" title="兩個方法判別自己是否適合做權證"></a>兩個方法判別自己是否適合做權證</h5><p>(1) 平常做波段賺不賺錢？<br>(2) 搶短線勝率高不高？</p>
<h4 id="選擇權"><a href="# 選擇權" class="headerlink" title="選擇權"></a>選擇權 </h4><p>buy/sell call/put<br> 美國流行選擇權，台灣流行權證</p>
<h3 id="投資理財系列"><a href="# 投資理財系列" class="headerlink" title="投資理財系列"></a>投資理財系列 </h3><p><a href="https://wangxchun.github.io/2021/05/10/money-management-basic-concept/"> 基本觀念 </a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-ETF/">ETF 入門</a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-stock-entry-level/"> 股票入門 </a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-stock-fundamental/"> 股票基本面 </a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-stock-technical/"> 股票技術面 </a><br><a href="https://wangxchun.github.io/2021/05/11/money-management-foreign-currency/"> 外匯 </a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-deposit-insurance/"> 儲蓄保單 </a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-futures-and-warrant/"> 金融衍生品：期貨、權證、外匯保證金 </a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-virtual-currency/"> 各類虛擬貨幣 </a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-real-estate/"> 房地產</a></p>
]]></content>
      <categories>
        <category>生活-投資理財</category>
      </categories>
      <tags>
        <tag>期貨</tag>
        <tag>建倉</tag>
        <tag>持倉</tag>
        <tag>交割</tag>
        <tag>平倉</tag>
        <tag>杠桿效應</tag>
      </tags>
  </entry>
  <entry>
    <title>總體經濟學</title>
    <url>/2021/05/13/money-management-macroconomics/</url>
    <content><![CDATA[<h3 id="一、背景知識"><a href="# 一、背景知識" class="headerlink" title="一、背景知識"></a>一、背景知識 </h3><h4 id="1- 定存利率"><a href="#1- 定存利率" class="headerlink" title="1. 定存利率"></a>1. 定存利率</h4><p> 在比較各種投資理財工具的時候，定存利率就變成一個最直觀的衡量標準。<br>每個國家決定利率升降的單位就是各國的中央銀行 Ex：美國聯准會 FED</p>
<h5 id="1- 銀行利息"><a href="#1- 銀行利息" class="headerlink" title="(1) 銀行利息"></a>(1) 銀行利息 </h5><p> 銀行降息<br>-&gt; 利率變低，錢流出銀行<br>-&gt; 借貸壓力變小，企業就比較願意和銀行融資買機器設備<br>-&gt; 個人比較願意買房貸和車貸<br>-&gt; 通貨膨脹（景氣擴張的自然現象）<br>-&gt; 升息<br>-&gt; 通貨緊縮 <span id="more"></span></p>
<h5 id="2- 低利率"><a href="#2- 低利率" class="headerlink" title="(2) 低利率"></a>(2) 低利率 </h5><p> 在金融海嘯之後，各國都采取低利率來挽救經濟 <br> 台灣定存的利率雖然不是 0，但是考慮自然的通貨膨脹，已經是實質的負利率了 <br> 美國爲了挽救金融海嘯后的經濟，帶頭實施量化寬鬆政策 QE -&gt; 資產漲價</p>
<h5 id="3-2017- 年美國加速升息，台美利差擴大"><a href="#3-2017- 年美國加速升息，台美利差擴大" class="headerlink" title="(3) 2017 年美國加速升息，台美利差擴大"></a>(3) 2017 年美國加速升息，台美利差擴大 </h5><p> 美國升息，如果台灣不跟著升息，資金可能會流出台灣流向美國。<br>如果台灣跟著升息，銀行端對房貸調高利率，降低貸款意願，對房產業者是壓力。</p>
<h4 id="2- 利差交易"><a href="#2- 利差交易" class="headerlink" title="2. 利差交易"></a>2. 利差交易 </h4><p> 又稱為套息交易或融資套利交易，指在低利率的國家借錢，換成較高利率國家的貨幣後出貸，賺取利差。 這種套利交易的風險主要來自可能的利率、匯率變化，其次也受有關國家稅負成本的影響。 </p>
<h3 id="二、美元"><a href="# 二、美元" class="headerlink" title="二、美元"></a>二、美元 </h3><h4 id="1- 超額準備金"><a href="#1- 超額準備金" class="headerlink" title="1. 超額準備金"></a>1. 超額準備金</h4><p> 中央銀行 (美國中央銀行：聯準會) 規定各個銀行對所存的錢必須要提存一定比率的流動資產，以保障充分的流動性來避免擠兌的風險。提撥的錢就是「法定存款準備金」。<!-- more --><br>銀行實際存款準備金 - 法定存款準備金 = 超額存款準備金 <br>(1) 越多超額準備金，銀行的信用越高，越不會發生違約的風險。<br>(2) 超額準備金也可以降低銀行風險、提供銀行間短期資金融通，所以也可以影響短期貸款利率。<br>(3) 聯準會超額準備金與美元有高度負相關。<br> 美國在 2008 年到 2014 年歷經三次量化寬鬆 (QE)，每一次 QE 聯準會通過購債，注入資金進入市場，但銀行將獲取的資金部分存回聯準會，使超額準備金上漲十倍，美國降息，美元走弱。</p>
<p>我們在投資各種外幣或是美元計價商品之前，如果能先了解美元的走勢，再有計劃地分批提前換匯，就能降低未來潛在的匯差風險。</p>
<p>外資的匯入匯出只是台幣升貶的原因之一，像是每到月底或是季底的出口商抛匯 (出口商把賺到的美元換成台幣)，也會導致台幣升值。</p>
<p>美國升息（帶動美金升值），如果台灣不跟著升息，資金可能會流出台灣流向美國。</p>
<h4 id="2- 什麼聯準會升息會讓全球股市大跌呢？"><a href="#2- 什麼聯準會升息會讓全球股市大跌呢？" class="headerlink" title="2. 什麼聯準會升息會讓全球股市大跌呢？"></a>2. 什麼聯準會升息會讓全球股市大跌呢？</h4><p>升息：聯準會想要提高美國聯邦基金利率（美國各個銀行之間的隔夜拆借利率）<br>會影響到定存利息、借款利息、美國國債和公司債殖利率。<br>結果：讓整個市場的利率水準變高，資金成本變貴。<br>目的：（1）利用貨幣政策讓市場降溫，避免過度泡沫（2) 對抗通膨</p>
<p>爲什麽股市會跌？<br>（1）低風險的利率升高，資金流動方向改變，流到低風險資產<br>（2）資金成本上升壓縮公司獲利空間<br>（3）資產價值重估</p>
<p>升息不代表每股長線不看好，聯準會敢升息代表美國經濟現在是强健的，而且升息會加速海外資金回流美國，單天的暴跌通常反映的是恐懼。</p>
]]></content>
      <categories>
        <category>生活-投資理財</category>
      </categories>
  </entry>
  <entry>
    <title>房地產</title>
    <url>/2021/05/10/money-management-real-estate/</url>
    <content><![CDATA[<span id="more"></span>
<h3 id="投資理財系列"><a href="# 投資理財系列" class="headerlink" title="投資理財系列"></a>投資理財系列 </h3><p><a href="https://wangxchun.github.io/2021/05/10/money-management-basic-concept/"> 基本觀念 </a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-ETF/">ETF 入門</a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-stock-entry-level/"> 股票入門 </a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-stock-fundamental/"> 股票基本面 </a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-stock-technical/"> 股票技術面 </a><br><a href="https://wangxchun.github.io/2021/05/11/money-management-foreign-currency/"> 外匯 </a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-deposit-insurance/"> 儲蓄保單 </a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-futures-and-warrant/"> 期貨、權證、外匯保證金 </a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-virtual-currency/"> 各類虛擬貨幣 </a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-real-estate/"> 房地產</a></p>
]]></content>
      <categories>
        <category>生活-投資理財</category>
      </categories>
  </entry>
  <entry>
    <title>了解新創公司，看懂成長股</title>
    <url>/2021/06/02/money-management-startup/</url>
    <content><![CDATA[<h3 id="估值"><a href="# 估值" class="headerlink" title="估值"></a>估值 </h3><p> 創立十年内的公司，如果估值能達到十億美金，就稱爲獨角獸 <br> 新創市場沒有公開發行的股票，沒辦法計算市值</p>
]]></content>
      <categories>
        <category>生活-投資理財</category>
      </categories>
  </entry>
  <entry>
    <title>股票入門</title>
    <url>/2021/05/10/money-management-stock-entry-level/</url>
    <content><![CDATA[<h3 id="一、一些知識"><a href="# 一、一些知識" class="headerlink" title="一、一些知識"></a>一、一些知識 </h3><h4 id="1- 基金"><a href="#1- 基金" class="headerlink" title="1. 基金"></a>1. 基金</h4><h5 id="1- 廣義的基金：爲了達成某種目的而設立的具有一定數量的基金"><a href="#1- 廣義的基金：爲了達成某種目的而設立的具有一定數量的基金" class="headerlink" title="(1) 廣義的基金：爲了達成某種目的而設立的具有一定數量的基金"></a>(1) 廣義的基金：爲了達成某種目的而設立的具有一定數量的基金</h5><h5 id="2- 狹義的基金：證券 - 各種 -“有效憑證”- 的總稱，例如：股票，債券，期貨 - 投資基金"><a href="#2- 狹義的基金：證券 - 各種 -“有效憑證”- 的總稱，例如：股票，債券，期貨 - 投資基金" class="headerlink" title="(2) 狹義的基金：證券 (各種 “有效憑證” 的總稱，例如：股票，債券，期貨) 投資基金"></a>(2) 狹義的基金：證券 (各種 “有效憑證” 的總稱，例如：股票，債券，期貨) 投資基金</h5><p> 小額投資沒有足夠的資本可以做分散投資，所以可以購買基金 <br> 基金公司，保險公司，銀行發行基金</p>
<h4 id="2- 股票市場的三大法人：外資、投信、自營商"><a href="#2- 股票市場的三大法人：外資、投信、自營商" class="headerlink" title="2. 股票市場的三大法人：外資、投信、自營商"></a>2. 股票市場的三大法人：外資、投信、自營商 </h4><h5 id="1- 外資"><a href="#1- 外資" class="headerlink" title="(1) 外資"></a>(1) 外資</h5><p>(a) 主動型基金：基金經理人主動選股 / 配置<br>(b) 被動型基金 (ETF)：依照指數成分被動的調整 <span id="more"></span><br>(c) 主權基金：政府用國家的存款在世界各地的股市投資賺錢（大型權值股）<br> 被外資連買的股票，因爲有强大的買盤支撐，通常會持續上漲一段時間</p>
<h5 id="2- 證券投資信托公司"><a href="#2- 證券投資信托公司" class="headerlink" title="(2) 證券投資信托公司"></a>(2) 證券投資信托公司 </h5><p> 在國内設立的基金公司，跟台灣的投資人募集了台股基金之後，買台灣的股票<br>Ex：元大，群益，國泰，富邦，復華</p>
<h5 id="3- 自營商 - 證券公司"><a href="#3- 自營商 - 證券公司" class="headerlink" title="(3) 自營商 (證券公司)"></a>(3) 自營商 (證券公司)</h5><p>Ex：元大，凱基，富邦，永豐金，群益</p>
<h4 id="3- 不同的投資策略"><a href="#3- 不同的投資策略" class="headerlink" title="3. 不同的投資策略"></a>3. 不同的投資策略 </h4><p> 逢低買進還是停損，取決於你的投資策略，是價值型投資，還是成長型投資 <br> 關鍵是要貫徹你的投資策略，不可以用 A 策略買進，用 B 策略賣出</p>
<h4 id="4- 什麽是殖利率？"><a href="#4- 什麽是殖利率？" class="headerlink" title="4. 什麽是殖利率？"></a>4. 什麽是殖利率？</h4><p>利率 = 利息 / 本金 <br> 股票或是債券的價格會隨著市場供需漲跌，導致本金可能隨時變大或縮小 <br> 但利息 (股利或是債息) 在一段時間内 (1 年或更久) 是固定不變的 <br> 本金隨價格變化，導致利率高低起伏，稱爲殖利率</p>
<h4 id="5- 專用名詞"><a href="#5- 專用名詞" class="headerlink" title="5. 專用名詞"></a>5. 專用名詞 </h4><h5 id="1- 權值股"><a href="#1- 權值股" class="headerlink" title="(1) 權值股"></a>(1) 權值股</h5><p> 影響大盤比較多的股票 (也就是市值比較大的) 我們一般就通稱做權值股</p>
<h5 id="2- 牛皮股"><a href="#2- 牛皮股" class="headerlink" title="(2) 牛皮股"></a>(2) 牛皮股 </h5><p> 就是股價比較難有大波動的股票，這類股票一般來說都是權值股，發行量都很大</p>
<h5 id="3- 雞蛋水餃股"><a href="#3- 雞蛋水餃股" class="headerlink" title="(3) 雞蛋水餃股"></a>(3) 雞蛋水餃股 </h5><p> 低價股</p>
<h5 id="4- 瓶蓋股 - 蘋果概念股"><a href="#4- 瓶蓋股 - 蘋果概念股" class="headerlink" title="(4) 瓶蓋股 (蘋果概念股)"></a>(4) 瓶蓋股 (蘋果概念股)</h5><p>所謂的概念股，以蘋果概念股為例子，就是與 Apple 產品、生產線等等相關的類股。因為多數概念股與時事相關，是被人為運作、分類的，也因此選購相關概念股時務必小心評估，因為概念股不一定是因為本身基本面優秀或公司賺錢才翻紅的</p>
<h5 id="5- 多殺多"><a href="#5- 多殺多" class="headerlink" title="(5) 多殺多"></a>(5) 多殺多 </h5><p> 原本是做多的人，看到股價下跌，快要接近成本區時，又或是跌到停損價時，這一群人做了第一批賣出的動作，而本來沒有要賣的第二批人，看到第一批的人殺股票了，覺得情況不對，也跟著把股票殺出來，接著引發了第三批、第四批的投資人信心鬆動，因此造成了一連串地賣壓如潮水般湧來。<br><a href="https://wangxchun.github.io/2021/05/12/investment-observe-2021-01/">軋空和多殺多的經典案例可以參考 2020/01 的觀察</a></p>
<h3 id="二、股票交易基礎"><a href="# 二、股票交易基礎" class="headerlink" title="二、股票交易基礎"></a>二、股票交易基礎</h3><h4 id="1- 開戶三步驟"><a href="#1- 開戶三步驟" class="headerlink" title="1. 開戶三步驟"></a>1. 開戶三步驟</h4><p>(1) 準備好雙證件 (一定要有身份證) 與印章，和一些現金 (開戶會需要存 1000 元進去)，到證券商開戶<br>(2) 填寫開戶相關資料，建議申請電子交易委托書，就能用電話或網絡下單<br>(3) 開完證券集保戶之後，會到配合的銀行設立交割銀行帳戶<br>    證券集保戶：負責股票買賣收付<br>    交割銀行戶：用來記錄股票的進出和股數</p>
<h4 id="2- 流程"><a href="#2- 流程" class="headerlink" title="2. 流程"></a>2. 流程</h4><p>(1) 委托 (委托券商幫我們買進)<br>(2) 撮合 (交易所電腦自動執行，成交回報)<br>(3) 交割</p>
<h4 id="3- 時間"><a href="#3- 時間" class="headerlink" title="3. 時間"></a>3. 時間 </h4><p> 台股早上 9：00 開盤，下午 1：30 收盤，最後半小時叫做尾盤 <br> 零股買賣和定價交易都是在盤後交易的時間進行</p>
<h4 id="4- 單位"><a href="#4- 單位" class="headerlink" title="4. 單位"></a>4. 單位 </h4><p> 正常交易時間都是以「張」為單位 <br> 一張股票 = 1000 股 <br> 我們看到的股價是一股的價格 <br> 大盤交易量是所有上市公司的成交金額加總</p>
<h4 id="5- 價格"><a href="#5- 價格" class="headerlink" title="5. 價格"></a>5. 價格 </h4><p> 在委托的時候可以選擇平盤價，漲停價 (10%)，跌停價 (10%)，或是指定一個金額，這些都稱爲限價</p>
<h4 id="6- 成本"><a href="#6- 成本" class="headerlink" title="6. 成本"></a>6. 成本 </h4><p> 買股票只要交券商的手續費，賣股票還要再多交一個證交稅</p>
<h3 id="三、股票入門"><a href="# 三、股票入門" class="headerlink" title="三、股票入門"></a>三、股票入門 </h3><h4 id="1- 基本面"><a href="#1- 基本面" class="headerlink" title="1. 基本面"></a>1. 基本面</h4><p> 公司資料，經營績效，市況指標<br><img src="/2021/05/10/money-management-stock-entry-level/photo1.png" alt="基本面"></p>
<h4 id="2- 籌碼面"><a href="#2- 籌碼面" class="headerlink" title="2. 籌碼面"></a>2. 籌碼面 </h4><p> 分析股票的分佈狀況<br><img src="/2021/05/10/money-management-stock-entry-level/photo2.png" alt="籌碼面"></p>
<h4 id="3- 技術面"><a href="#3- 技術面" class="headerlink" title="3. 技術面"></a>3. 技術面 </h4><p> 將股價、成交量、籌碼等等這些數據，以及根據這些數據運算出來的各種技術指標，透過線圖來表示<br><img src="/2021/05/10/money-management-stock-entry-level/photo3.png" alt="技術面"><br>(1) 道氏理論：主張市場必定存在三種趨勢<br>(2) 艾略特波浪理論：主張市場具有五上三下固定周期<br>(3) 葛蘭碧八大法則：以 K 綫均綫相互關係為核心</p>
<h4 id="4- 消息面"><a href="#4- 消息面" class="headerlink" title="4. 消息面"></a>4. 消息面 </h4><p> 容易是假消息</p>
<h3 id="四、投資賠錢的保命停損點"><a href="# 四、投資賠錢的保命停損點" class="headerlink" title="四、投資賠錢的保命停損點"></a>四、投資賠錢的保命停損點 </h3><h4 id="1- 設定停損點"><a href="#1- 設定停損點" class="headerlink" title="1. 設定停損點"></a>1. 設定停損點</h4><h4 id="2- 特別小心意外收入"><a href="#2- 特別小心意外收入" class="headerlink" title="2. 特別小心意外收入"></a>2. 特別小心意外收入</h4><h4 id="3- 沒賺錢的公司不要碰，除非你時間很多可以研究"><a href="#3- 沒賺錢的公司不要碰，除非你時間很多可以研究" class="headerlink" title="3. 沒賺錢的公司不要碰，除非你時間很多可以研究"></a>3. 沒賺錢的公司不要碰，除非你時間很多可以研究</h4><p> 賠越多越不甘心，拖越久越不想賣，甚至還會想加碼攤平，要克服心魔</p>
<h3 id="五、散戶投資股市失敗率高的四大原因"><a href="# 五、散戶投資股市失敗率高的四大原因" class="headerlink" title="五、散戶投資股市失敗率高的四大原因"></a>五、散戶投資股市失敗率高的四大原因 </h3><h4 id="1- 追求過高的投資報酬率"><a href="#1- 追求過高的投資報酬率" class="headerlink" title="1. 追求過高的投資報酬率"></a>1. 追求過高的投資報酬率</h4><p> 散戶可以設定 10-15% 年化投資率作爲目標</p>
<h4 id="2- 易受到市場消息面影響"><a href="#2- 易受到市場消息面影響" class="headerlink" title="2. 易受到市場消息面影響"></a>2. 易受到市場消息面影響 </h4><p> 這些市場消息散戶通常是最晚知道的 <br> 也可能是公司或股東爲了操作股票而放話</p>
<h4 id="3- 對於投資標的不夠熟悉"><a href="#3- 對於投資標的不夠熟悉" class="headerlink" title="3. 對於投資標的不夠熟悉"></a>3. 對於投資標的不夠熟悉 </h4><p> 很容易因爲市場的風吹草動而做出錯誤決策</p>
<h4 id="4- 心理建設不足患得患失"><a href="#4- 心理建設不足患得患失" class="headerlink" title="4. 心理建設不足患得患失"></a>4. 心理建設不足患得患失 </h4><h4 id="六、投資新手要注意的事"><a href="# 六、投資新手要注意的事" class="headerlink" title="六、投資新手要注意的事"></a> 六、投資新手要注意的事 </h4><h5 id="1- 你能夠承受虧損嗎？"><a href="#1- 你能夠承受虧損嗎？" class="headerlink" title="1. 你能夠承受虧損嗎？"></a>1. 你能夠承受虧損嗎？</h5><h5 id="2- 你是什麽投資者類型？"><a href="#2- 你是什麽投資者類型？" class="headerlink" title="2. 你是什麽投資者類型？"></a>2. 你是什麽投資者類型？</h5><p> 超級長期投資者 <br> 長期投資者：持股 1-5 年 <br> 短期投資者：持股幾個星期，或者一個季度 <br> 日内交易者：持股 1 天到 1 個月</p>
<h5 id="3- 做足功課"><a href="#3- 做足功課" class="headerlink" title="3. 做足功課"></a>3. 做足功課 </h5><p> 從大公司開始研究 <br> 基本資料，損益表 <br> 學好英文看第一手資訊</p>
<h5 id="4- 從一開始練習"><a href="#4- 從一開始練習" class="headerlink" title="4. 從一開始練習"></a>4. 從一開始練習 </h5><h5 id="5- 逐步上手"><a href="#5- 逐步上手" class="headerlink" title="5. 逐步上手"></a>5. 逐步上手</h5><h3 id="七、存股怎麼選？"><a href="# 七、存股怎麼選？" class="headerlink" title="七、存股怎麼選？"></a> 七、存股怎麼選？</h3><p>存股賺什麽？賺長時間累積的穩定配息，共享公司每年獲利。<br>投資建議：先從存股開始，等到賺到股利，再拿這筆股利去賺價差，投資才會比較安心。</p>
<h4 id="1- 做法"><a href="#1- 做法" class="headerlink" title="1. 做法"></a>1. 做法 </h4><p> 入門：可以從台灣 50 指數成分股 (占台股市值前 50 大的公司) 中選擇年均殖利率高的公司 <br>(1) 股本大：發行的股票很多，股價不太容易被少數人操控<br>(2) 產業成熟<br>(3) 獲利穩定<br> 在從這些前 50 名的公司，用年均殖利率排名 <br> 爲什麽要年均？因爲短期的殖利率，可能會用舉債，處置公司資產來操作</p>
<p><a href="https://goodinfo.tw/StockInfo/index.asp">Goodinfo! 台灣股市資訊網</a></p>
<ul>
<li>類股一覽 - 概念股 - ETF 台灣 50</li>
<li>股利政策 - 現金殖利率 <br> 理念加權平均：參考每年的股本變化和時間因素，把殖利率年化加權之後再計算</li>
</ul>
<h4 id="2- 一般法則"><a href="#2- 一般法則" class="headerlink" title="2. 一般法則"></a>2. 一般法則 </h4><p> 台股平均 20 年殖利率排行前三名：中華電 / 台灣大 / 遠傳 <br> 電信：中華電 / 台灣大 / 遠傳 <br> 金控：第一金 (官)/ 兆豐金 (官)/ 中信金 <br> 交通：和泰車 / 台灣高鐵 (官)<br>零售：統一超 (7-11)</p>
<h4 id="3- 看個股"><a href="#3- 看個股" class="headerlink" title="3. 看個股"></a>3. 看個股 </h4><p>(1) 年終獎金，股利政策<br>(2) 賺錢能力 ROE，ROA<br> 每一季的 ROE 2-3% 算及格，4-6% 算優異 <br>(3) 股本籌碼，老闆自己有沒有買<br> 監持股比例偏低的時候，比較容易被外力介入，發生經營權爭奪的問題</p>
<h4 id="4- 想要穩，可以買國有事業股票"><a href="#4- 想要穩，可以買國有事業股票" class="headerlink" title="4. 想要穩，可以買國有事業股票"></a>4. 想要穩，可以買國有事業股票 </h4><p> 政府持股比例很高的（官股比例高）。<br>穩之外，還要考慮殖利率。</p>
<h4 id="5- 小資新手存股步驟"><a href="#5- 小資新手存股步驟" class="headerlink" title="5. 小資新手存股步驟"></a>5. 小資新手存股步驟 </h4><p> 投資比例不超過資金的 10%，專款專戶 <br>(1) 至少二年内存十張<br> 知道存股適不適合自己的個性 <br> 練習分批買進 <br>(2) 分散（5-8 年）<br> 其他金控也各買約 10 張 <br> 總共約有 50 張 <br>(3) 再分散，選擇其他產業<br> 内需市場大、大型權值股、穩定配息高殖利率</p>
<h3 id="八、存股如何決定的進場時機？"><a href="# 八、存股如何決定的進場時機？" class="headerlink" title="八、存股如何決定的進場時機？"></a>八、存股如何決定的進場時機？</h3><p>殖利率 + 產業類型 <br> 買同一間公司的股票，在股利相同的前提下 <br> 買進的股價越低，就可以享有越高的殖利率，也就是比較高的投資報酬率 <br> 設定一個預期殖利率，會對應一個目標股價，低於這個股價才買進 <br> 存股的目標是股息，不是買賣價差，所以我們設定目標價的同時，要考量時間的機會成本 <br> 牛皮股：是股價比較難有大波動的股票</p>
<h3 id="九、存股一定打敗銀行定存？"><a href="# 九、存股一定打敗銀行定存？" class="headerlink" title="九、存股一定打敗銀行定存？"></a>九、存股一定打敗銀行定存？</h3><p>股票能有比定存高的利率，就是用「可能損失本金的風險換來的」</p>
<ol>
<li>股票價格會波動</li>
<li>且并不是每間公司都賺錢</li>
<li>除權息 <br> 每年的除息日，股價會自動減去股利，以維持總市值不變 <br> 如果除息之後，被扣掉的股價沒有漲回去 (有漲回去叫做填息)，等於就是拿自己的錢發股利給自己 <br> 如果公司發的是股票而不是現金，就叫做除權</li>
</ol>
<h3 id="十、股票除權息的各種股民"><a href="# 十、股票除權息的各種股民" class="headerlink" title="十、股票除權息的各種股民"></a>十、股票除權息的各種股民 </h3><h4 id="1- 時間"><a href="#1- 時間" class="headerlink" title="1. 時間"></a>1. 時間</h4><p> 證交法規定上市櫃公司每年的年報，最晚必須在隔年的三月之前公佈，接著會宣佈今年預計配多少股利。3-4 月：股利公佈；5-6 月：股東會；7-8 月：除息。<br>(1) 董事會：股東常會日<br>(2) 除息日：參加除權息就可以領股利<br>(3) 股利發放日：通常是在除息后 3-4 周入帳</p>
<h4 id="2- 鼠、牛、虎、兔"><a href="#2- 鼠、牛、虎、兔" class="headerlink" title="2. 鼠、牛、虎、兔"></a>2. 鼠、牛、虎、兔 </h4><p>(1) 老鼠：最一般的，一直持股，並參加除權息<br>(2) 大牛：持股很多張，不參加除權息，避免繳所得稅<br> 到底是繳所得稅 / 手續費 + 證交稅 划算？<br>(3) 會在 3-4 月股利公佈的時候，就開始逢低分批佈局，領股利後賣出 <br> 價差 + 股利 &gt; 所得稅 + 證交稅 + 手續費 ？<br>(4) 玉兔：在除息日之前就會逢高出脫全部的持股，以獲取除權息行情的價差</p>
<h3 id="十一、零股交易"><a href="# 十一、零股交易" class="headerlink" title="十一、零股交易"></a>十一、零股交易 </h3><p> 零股怎麽來的？和一般股票有什麽差異？該怎麽買賣？<br>“零股” 和 “整股” 在權益上是一樣的 <br> 但是時間收到限制，投資人買賣的意願不高，流動性較低</p>
<ol>
<li>減少交易次數</li>
<li>凑成整股</li>
<li>供給量</li>
</ol>
<h3 id="十二、定期定額？"><a href="# 十二、定期定額？" class="headerlink" title="十二、定期定額？"></a>十二、定期定額？</h3><p>隨著定期定額的時間越長，分散風險的能力也會越弱</p>
<ol>
<li>定期定額 + 穩定成長 = 賺錢</li>
<li>買入成本越低，風險越低</li>
<li>適度停利，停扣或轉換標的 <br> 最好是逢低分批買進，不要無腦定期定額。</li>
</ol>
<h3 id="投資理財系列"><a href="# 投資理財系列" class="headerlink" title="投資理財系列"></a>投資理財系列 </h3><p><a href="https://wangxchun.github.io/2021/05/10/money-management-basic-concept/"> 基本觀念 </a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-ETF/">ETF 入門</a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-stock-entry-level/"> 股票入門 </a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-stock-fundamental/"> 股票基本面 </a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-stock-technical/"> 股票技術面 </a><br><a href="https://wangxchun.github.io/2021/05/11/money-management-foreign-currency/"> 外匯 </a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-deposit-insurance/"> 儲蓄保單 </a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-futures-and-warrant/"> 期貨、權證、外匯保證金 </a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-virtual-currency/"> 各類虛擬貨幣 </a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-real-estate/"> 房地產</a></p>
]]></content>
      <categories>
        <category>生活-投資理財</category>
      </categories>
  </entry>
  <entry>
    <title>股票基本面</title>
    <url>/2021/05/10/money-management-stock-fundamental/</url>
    <content><![CDATA[<p><img src="/2021/05/10/money-management-stock-fundamental/photo1.jpg" alt></p>
<h3 id="一、基本面三大方向，九大指標"><a href="# 一、基本面三大方向，九大指標" class="headerlink" title="一、基本面三大方向，九大指標"></a>一、基本面三大方向，九大指標 </h3><h4 id="1- 做什麽 - 公司狀況 -："><a href="#1- 做什麽 - 公司狀況 -：" class="headerlink" title="1. 做什麽 (公司狀況)："></a>1. 做什麽 (公司狀況)：</h4><p>(1) 資本額 (股本)<br> 股本就是公司設立時的資本額 = 股數 X 股票面額 (10 元)<br>(2) 市值 <br> 市值 = 股票數 X 市價 (面額)(成交價)<br>(3) 產業</p>
<h4 id="2- 賺什麽 - 經營績效"><a href="#2- 賺什麽 - 經營績效" class="headerlink" title="2. 賺什麽 (經營績效)"></a>2. 賺什麽 (經營績效)</h4><p>(1) EPS = 稅後净利 / 股數 <br> 盈餘分配率<br>(2) ROA 資產報酬率 = 稅後净利 / 資產<br>(3) ROE 股東權益報酬率 = 稅後净利 / 净值</p>
<h4 id="3- 算什麽 - 市況指標"><a href="#3- 算什麽 - 市況指標" class="headerlink" title="3. 算什麽 (市況指標)"></a>3. 算什麽 (市況指標)</h4><p>遛狗理論<br>(1) 本益比 PER（賺多少）：股價 / EPS，同業比較還要注意經營内容的差異</p>
<ul>
<li>跟自己比 - 和同業比 <br>(2) 股價净值比 PBR（值多少）：目前股價 / 每股净值<br> 每股净值 = 净值 / 股數</li>
<li>净值的代表性 - 沒有評估獲利能力 <br>(3) 殖利率 Yield（配多少）：<br> 利率 / 股價</li>
</ul>
<h3 id="二、巴菲特的投資秘訣"><a href="# 二、巴菲特的投資秘訣" class="headerlink" title="二、巴菲特的投資秘訣"></a>二、巴菲特的投資秘訣</h3><h4 id="1- 投資兩個要素："><a href="#1- 投資兩個要素：" class="headerlink" title="1. 投資兩個要素："></a>1. 投資兩個要素：</h4><p>(1) 價值被低估<br>(2) 長期持有</p>
<h4 id="2- 怎麽看一家公司是否被低估"><a href="#2- 怎麽看一家公司是否被低估" class="headerlink" title="2. 怎麽看一家公司是否被低估"></a>2. 怎麽看一家公司是否被低估</h4><p>(1) 管理層：企業所有者和競爭優勢<br>(2) 經營數據</p>
<span id="more"></span>
<h3 id="投資理財系列"><a href="# 投資理財系列" class="headerlink" title="投資理財系列"></a>投資理財系列 </h3><p><a href="https://wangxchun.github.io/2021/05/10/money-management-basic-concept/"> 基本觀念 </a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-ETF/">ETF 入門</a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-stock-entry-level/"> 股票入門 </a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-stock-fundamental/"> 股票基本面 </a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-stock-technical/"> 股票技術面 </a><br><a href="https://wangxchun.github.io/2021/05/11/money-management-foreign-currency/"> 外匯 </a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-deposit-insurance/"> 儲蓄保單 </a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-futures-and-warrant/"> 期貨、權證、外匯保證金 </a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-virtual-currency/"> 各類虛擬貨幣 </a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-real-estate/"> 房地產</a></p>
]]></content>
      <categories>
        <category>生活-投資理財</category>
      </categories>
  </entry>
  <entry>
    <title>股票技術面</title>
    <url>/2021/05/10/money-management-stock-technical/</url>
    <content><![CDATA[<h3 id="技術面"><a href="# 技術面" class="headerlink" title="技術面"></a>技術面 </h3><h4 id="1- 價格"><a href="#1- 價格" class="headerlink" title="1. 價格"></a>1. 價格</h4><h4 id="2- 成交量、法人買賣、融資券"><a href="#2- 成交量、法人買賣、融資券" class="headerlink" title="2. 成交量、法人買賣、融資券"></a>2. 成交量、法人買賣、融資券</h4><h4 id="3-KD、MACD"><a href="#3-KD、MACD" class="headerlink" title="3.KD、MACD"></a>3.KD、MACD</h4><h3 id="K- 線"><a href="#K- 線" class="headerlink" title="K 線"></a>K 線</h3><h3 id="均線"><a href="# 均線" class="headerlink" title="均線"></a> 均線 </h3><h3 id="成交量"><a href="# 成交量" class="headerlink" title="成交量"></a> 成交量 </h3><p> 成交量越高，代表買賣雙方對這檔股票的交易意願也越高 <br> 也代表雙方對價格的看法越不一致。</p>
<h4 id="常見的價量形態"><a href="# 常見的價量形態" class="headerlink" title="常見的價量形態"></a>常見的價量形態 </h4><p> 價漲量增、價跌量縮（價量配合）<br>價漲量縮、價跌量增（價量背離）</p>
<h3 id="KD- 指標"><a href="#KD- 指標" class="headerlink" title="KD 指標"></a>KD 指標 </h3><p> 技術分析的兩個目的：研判局勢、抓到轉折。<br>均線 (MA) 的計算是以當天的收盤價計，而不是使用當天的均價，不容易表現出短期内股價强弱的細節。</p>
<h4 id="K- 值和 -D- 值"><a href="#K- 值和 -D- 值" class="headerlink" title="K 值和 D 值"></a>K 值和 D 值 </h4><p> 隨機震蕩指標 (KD 指標)：以每天的收盤價爲基礎，經過一套公式加權之後，換算出一組 K 值和 D 值，<br>再根據 KD 的數字和每天移動的情況，來判斷近期股價强弱走勢。</p>
<h4 id="公式"><a href="# 公式" class="headerlink" title="公式"></a>公式 </h4><p>(1) RSV<br> 先把每天的收盤價換算成 RSV：<br>$RSV = {今日收盤價 - 最近 9 天最低價} \over {最近 9 天最高價 - 最近 9 天最低價}$<br>RSV 介於 0-100 之間，越接近 100 就越接近過去 9 天内股價波動範圍的高檔，表示買方力道很強 <br>50 就是多空雙方分界值<br> 缺點：因爲采樣範圍的改變，基準不同，導致數字劇烈變動，而對趨勢的變化產生干擾<br>(2) K 值（RSV 的加權移動平均）<br>$ 今天的 K 值 = {2 \over 3} \times 昨天的 K 值 + {1 \over 3} \times 今天的 RSV$<br>(3) D 值（K 值的加權移動平均）<br>$ 今天的 D 值 = {2 \over 3} \times 昨天的 D 值 + {1 \over 3} \times 今天的 K 值 $</p>
<h4 id="要注意的點"><a href="# 要注意的點" class="headerlink" title="要注意的點"></a>要注意的點 </h4><p>(1) 只看價格，不看成交量和籌碼<br>(2) RSV 對 9 天后的 KD 值已經沒什麽影響了，KD 指標有效的參考指標只有 9 天内<br> 通常 80% 和 20% 成爲高低檔，50% 是多空的分界值 <br>D 值高於 80%-&gt; 上漲的動能很强<br>D 值高於 80% 進入超買區，K 值卻出現下彎穿過 D 值，是上漲動能轉弱的信號，趨勢轉折往下的幾率機會提高，稱爲死亡交叉；反過來稱爲黃金交叉。但是也有可能是假交叉或是假黃金，出現高檔鈍化或是低檔鈍化。<br> 檢查方法：放大周期，例如可以用周 KD 來看。</p>
<span id="more"></span>
<h3 id="投資理財系列"><a href="# 投資理財系列" class="headerlink" title="投資理財系列"></a>投資理財系列 </h3><p><a href="https://wangxchun.github.io/2021/05/10/money-management-basic-concept/"> 基本觀念 </a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-ETF/">ETF 入門</a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-stock-entry-level/"> 股票入門 </a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-stock-fundamental/"> 股票基本面 </a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-stock-technical/"> 股票技術面 </a><br><a href="https://wangxchun.github.io/2021/05/11/money-management-foreign-currency/"> 外匯 </a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-deposit-insurance/"> 儲蓄保單 </a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-futures-and-warrant/"> 期貨、權證、外匯保證金 </a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-virtual-currency/"> 各類虛擬貨幣 </a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-real-estate/"> 房地產</a></p>
]]></content>
      <categories>
        <category>生活-投資理財</category>
      </categories>
  </entry>
  <entry>
    <title>各類虛擬貨幣</title>
    <url>/2021/05/10/money-management-virtual-currency/</url>
    <content><![CDATA[<span id="more"></span>
<h3 id="投資理財系列"><a href="# 投資理財系列" class="headerlink" title="投資理財系列"></a>投資理財系列 </h3><p><a href="https://wangxchun.github.io/2021/05/10/money-management-basic-concept/"> 基本觀念 </a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-ETF/">ETF 入門</a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-stock-entry-level/"> 股票入門 </a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-stock-fundamental/"> 股票基本面 </a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-stock-technical/"> 股票技術面 </a><br><a href="https://wangxchun.github.io/2021/05/11/money-management-foreign-currency/"> 外匯 </a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-deposit-insurance/"> 儲蓄保單 </a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-futures-and-warrant/"> 期貨、權證、外匯保證金 </a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-virtual-currency/"> 各類虛擬貨幣 </a><br><a href="https://wangxchun.github.io/2021/05/10/money-management-real-estate/"> 房地產</a></p>
]]></content>
      <categories>
        <category>生活-投資理財</category>
      </categories>
  </entry>
  <entry>
    <title>2020/01 科技新聞</title>
    <url>/2021/05/11/news-2020-01/</url>
    <content><![CDATA[<h3 id="台灣 -5G- 頻譜第一階段競標衝破 -1000- 億元"><a href="# 台灣 -5G- 頻譜第一階段競標衝破 -1000- 億元" class="headerlink" title="台灣 5G 頻譜第一階段競標衝破 1000 億元"></a>台灣 5G 頻譜第一階段競標衝破 1000 億元 </h3><p><a href="https://www.bnext.com.tw/article/56305/taiwan-5g-spectrum-auction-end"> 衝出 1380 億元天價！5G 標金失速列車靠站，電信 5 雄廝殺結果一次看</a></p>
<h3 id="2020- 年 -CES- 展"><a href="#2020- 年 -CES- 展" class="headerlink" title="2020 年 CES 展"></a>2020 年 CES 展 </h3><h4 id="1- 自動駕駛"><a href="#1- 自動駕駛" class="headerlink" title="1. 自動駕駛"></a>1. 自動駕駛</h4><p> 索尼所發表的 Vision-S，克服了引擎問題，配備雙二百 kW 引擎，時速從零到一百公里的加速，僅需四．八秒，車子內外建置三十三種不同的感測器，屬於自駕車 level 2 等級，這也就意味著車子雖然可以自動駕駛，但也仍需有人在車上監督車體行進方向。</p>
<p>中國新創團隊拜騰（Byton）的電動車。</p>
<p>今年 CES 展中，現代汽車首度展示了空中計程車 S-A1，這也將是 Uber 空中計程車的主力車款。雖然名為「空中計程車」，但 S-A1 就是一款飛行器，以傳統直升機基礎進行改良，旋翼旋轉速度比現行直升機慢，起降時較為安靜；而從 S-A1 的設計來看，乘坐空間除了四名乘客之外，可再容納一名飛行員，目前預計二三年之前，可大規模量產。</p>
<h4 id="2-AI- 機器人"><a href="#2-AI- 機器人" class="headerlink" title="2.AI 機器人"></a>2.AI 機器人 </h4><p> 台灣無人機大廠雷虎科技，也展出自家研發的 Seadragon 海龍號聲納掃描八軸水下機器人，使用者藉由水下掃描聲納，可透過影像，在水下執行高難度及複雜工作，降低潛水人員的生命危險。</p>
<p>PuduTech 的服務型機器人 BellaBot、三星的生活型機器人 Ballie、寶僑集團（P&amp;G）研發的廁紙機器人，以及汽車大廠福特新推出的搬運型機器人 Digit。</p>
<h4 id="3- 親民 -8K"><a href="#3- 親民 -8K" class="headerlink" title="3. 親民 8K"></a>3. 親民 8K</h4><p>今年，三星、LG、索尼均在現場大秀 8K 產品，同時強調售價將是消費者可負擔（Affordable）的水準，預估在東京奧運推波助瀾下，可望在高階市場中有一些表現空間。</p>
<p>另外，Mini LED 背光技術也逐漸受市場歡迎。在今年 CES 中，台灣筆電品牌大廠宏碁、華碩，發表了搭載 Mini LED 的電競螢幕，微星則是將 Mini LED 運用於十七吋筆電。</p>
<h4 id="4-AI- 語音助理"><a href="#4-AI- 語音助理" class="headerlink" title="4.AI 語音助理"></a>4.AI 語音助理</h4><p>AI 發展以來，最為世人所熟知的產品，莫過於語音助理。Siri、Google Assistant、Alexa、Bixby，可說是目前市場最常使用的四種語音助理。</p>
<p>不滿足於 Bixby 的成功，三星在今年 CES 中，展示全新人工智慧應用 NEON，並將之稱為「人工智人」（Artificial Human），三星人工智人 NEON 沒有實體，而是以真人尺寸活在螢幕裡。</p>
<h4 id="5- 總共 -13- 家台灣新創獲大獎"><a href="#5- 總共 -13- 家台灣新創獲大獎" class="headerlink" title="5. 總共 13 家台灣新創獲大獎"></a>5. 總共 13 家台灣新創獲大獎 </h4><h3 id="平行世界"><a href="# 平行世界" class="headerlink" title="平行世界"></a> 平行世界 </h3><p> 失衡的原因之一，可以用「鮑莫爾成本病」（Baumol’s cost disease）解釋。這是 1967 年美國經濟學家威廉・鮑莫爾（William Baumol）所提出的現象。他把經濟分成兩大部門（sector），並發現商品（goods）部門的價格持續降低，而服務（service）部門的價格持續走高。</p>
<p>在「商品」產業中，人的生產力（productivity）提高，薪資也隨之提高。這符合古典經濟理論。過去一個軟體頂多賣 1 千萬份，現在 Google 卻有超過 10 億人使用。每一位軟體工程師帶來更高生產力，報酬就更高。鮑莫爾指出，商品產業的報酬提高，因此若弦樂師的報酬沒有隨之提高，弦樂師就會改去當軟體工程師，那就沒有人要表演弦樂了。換言之，「商品」產業的生產力提高，提高了「服務」業人員的機會成本；因此服務業的報酬必須提高，才能留住人。</p>
<p>同時，由於政府的主要活動也多半是人力密集形式，如提供醫療、教育、行政、產業管理、國防、科技研究等，因此政府的支出也會持續增長。「大政府」不可免 — 不是因為政府管很多，而是因為政府都是用人在管。</p>
<p>當人分配越多預算在服務上，商品創新所帶來的效益就越來越低。假設我花 70% 的所得在服務，30% 在商品，那麼即便出現一個改良 10% 的新搜尋引擎「新 Google」，對我的效益還不如幼稚園價格降低 10%。</p>
<p>現在世界可以分成四種人：最大的得利者自然是掌握商品產業的人，也就是擁有機器、工廠或軟體的人（或許可以稱之為「資本家」）。其次的得利者是商品產業的從業人員，直接從生產力提升獲得更高的報酬。第三順位則是服務業的專業服務者，享受水漲船高的薪水。</p>
<p>最弱勢的是既無法參與商品產業，也無法提供獨特服務的人。他可能不是知識工作者，無法提高產業的生產力；也可能是被自動化所取代的勞工，只能提供一般的、缺乏差異化服務。他兩頭落空。一個兩頭落空的人，仍然享受到更便宜的商品，基本薪資也會提高。只是他會覺得更多高級服務越來越不可攀。他會有嚴重的相對剝奪感。</p>
<p>科技帶來豐盛，但錢會流到稀缺的地方。人的時間是終極的稀缺，因此科技的發展最終會帶來人力價格的上升 [註]。相對的，「純粹」商品的創新，其效益將越來越小。今天的手機可以照星象，電腦可以連 5G，但對我們的生活幾乎沒有影響。我們真正需要的是服務產業的生產力突破。未來科技的主要課題是如何在服務產業創新，如教育、醫療、政府機構等。誰能降低人力成本，減少從事服務業的人的時間，誰就會非常有價值。</p>
<h3 id="5G- 與 -WiFi6"><a href="#5G- 與 -WiFi6" class="headerlink" title="5G 與 WiFi6"></a>5G 與 WiFi6</h3><p>而隨著５Ｇ網路建設逐步推進，市場上關於５Ｇ可能取代 WiFi 的消息也層出不窮，難道 WiFi 真的會被淘汰？答案是否定的。傳輸範圍中 WiFi 屬於區域網路，５Ｇ屬於無線網路範圍，兩者服務於不同的使用場景，因此在網路密度需求快速上升之下，WiFi 6 將成為室內網路如體育館、車站、商圈等場所的最佳選擇，與５Ｇ形成相輔相成的關係。</p>
<h3 id="foodpanda- 外送員罷工抗議砍薪"><a href="#foodpanda- 外送員罷工抗議砍薪" class="headerlink" title="foodpanda 外送員罷工抗議砍薪"></a>foodpanda 外送員罷工抗議砍薪</h3><p><a href="https://www.bnext.com.tw/article/56307/foodpanda-protest-2020">foodpanda 外送員罷工抗議砍薪，熊貓官方、勞動部回應了</a></p>
<p>食物外送平台 foodpanda 近期修改許多制度，影響外送員權益，有 foodpanda 號召外送員，1/16 發起「拒絕送餐」抗議行動。除了「拒送」，《中央社》報導，foodpanda 外送員還在台北、新北、台中、高雄各地集結抗議。</p>
<h3 id="Atrium- 大裁員"><a href="#Atrium- 大裁員" class="headerlink" title="Atrium 大裁員"></a>Atrium 大裁員</h3><p>2020 年 1 月 11 日，LawSites 報道 Atrium 開始裁員部分律師，裁員人數在 10~50 人之間。</p>
<h3 id="美國 -Casper- 申請上市，年銷售近 -4- 億美元（但虧損依然嚴重，成長型）"><a href="# 美國 -Casper- 申請上市，年銷售近 -4- 億美元（但虧損依然嚴重，成長型）" class="headerlink" title="美國 Casper 申請上市，年銷售近 4 億美元（但虧損依然嚴重，成長型）"></a>美國 Casper 申請上市，年銷售近 4 億美元（但虧損依然嚴重，成長型）</h3><p>除了以優惠的價格吸引顧客，過去「多數人在實體店面根本分不出床墊的好壞，總是要『睡過』才知道不適合」的消費困境， Casper 以「試睡 100 天，無條件退費退貨」服務，打破僵局。這項售後服務一方面強調床墊的品質，一方面也讓顧客無後顧之憂的刷卡下單，成功獲得市場歡心</p>
<p>Casper 在毫無知名度之前，依靠內容行銷來增加自己的可信度與曝光。他們規律產出大量的自製文章，書寫所有關於睡眠、床墊、枕頭等知識內容，企圖成為「睡覺萬事通」。同時，他們也擅長與顧客在社群平台互動，邀請所有消費者寫下使用感想，或在網路上直接直播開箱、錄影試躺他們剛買到的床墊。只要介紹朋友也來買，Casper 就贈送 75 美元的 Amazon 禮券，而朋友也能得到 Casper 9 折折扣。</p>
<p>透過銷售回饋，與 Casper Labs 定期主持的研究，Casper 很快意識到事業若要成長，必須擴充產品項目，否則以床墊的損耗率及回購契機觀察，只能短暫維持目前的營運現況。<br>Krim 決定在 2018 年推出更多短線產品如床架、床單、枕頭、夜燈，甚至是寵物床墊，他們要讓 Casper 征服所有人寢室的每個角落，連狗狗也不放過。這個策略十分成功，Casper 在 2018 年總營收高達 4 億美元。</p>
<p>不過，即便 Casper 在網路上如何火紅，線上銷售仍只佔據整個床墊市場的 5 至 7% ，Krim 發現網路仍舊無法觸及某群仰賴實體消費體驗的顧客。Casper 決定在 2017 年將床墊、枕頭進軍至美國連鎖購物中心 Target ；隔年於紐約開設一間實體店面「Dreamery」，以 45 分鐘 20 美元的價格來邀請所有路過的人來體驗「Casper Style」的午覺。<br><a href="https://newtalk.tw/news/view/2019-12-22/339034">創夢專欄》Casper：愛你的顧客 就能征服下個里程碑 (下)</a></p>
<h3 id="Visa- 收購 -Plaid- 一案正式告吹"><a href="#Visa- 收購 -Plaid- 一案正式告吹" class="headerlink" title="Visa 收購 Plaid 一案正式告吹"></a>Visa 收購 Plaid 一案正式告吹</h3><p>Visa 在 2020 年的 1 月宣布將以 53 億美元買下金融新創 Plaid，但美國司法部同年的 12 月針對該案提出反托拉斯訴訟，使得 Visa 與 Plaid 在 1/12 宣布，將終止此一併購協議。</p>
<p>2013 年於美國舊金山成立的 Plaid 打造了一個技術平臺，以讓各種應用程式能夠連結使用者的銀行帳號，可協助開發人員建置金融應用，原本 Visa 打算將 Plaid 納入麾下，以拓展業務，然而，司法部卻認為 Plaid 技術對 Visa 造成威脅，Visa 是藉由併購來消弭競爭。</p>
<p>消息傳出的當天，Visa 股價微幅下滑了 1.89%，以 208.86 美元作收。<br><a href="https://www.ithome.com.tw/news/142191">Visa 收購 Plaid 一案正式告吹 </a><br><a href="https://www.bnext.com.tw/article/58109/visa-plaid-open-banking"> 從 Visa 併購 Plaid 案件談台灣開放銀行的發展</a></p>
<h3 id="Clearview-AI- 應用程式，一張照片就能查個資，臉部辨識再爆隱私爭議"><a href="#Clearview-AI- 應用程式，一張照片就能查個資，臉部辨識再爆隱私爭議" class="headerlink" title="Clearview AI 應用程式，一張照片就能查個資，臉部辨識再爆隱私爭議"></a>Clearview AI 應用程式，一張照片就能查個資，臉部辨識再爆隱私爭議 </h3><p><a href="https://technews.tw/2020/01/22/face-recognition-has-privacy-controversy-again/">30 億張圖庫，一張照片就能查個資！臉部辨識再爆隱私爭議</a><br> 據《紐約時報》（The New York Times）18 日報導，美國一家 AI 臉部辨識創業公司 Clearview 設計了突破性的臉部辨識應用程式 Clearview AI，用戶上傳照片後，可看到圖片人物的公開照及相關連結。</p>
<p>Clearview AI 的核心是擁有超過 30 億張圖片的資料庫，Clearview 聲稱這些圖片從 Facebook、YouTube、Venmo 和數百萬其他網站抓取，規模遠超出聯邦調查局（FBI）和矽谷巨頭的資料庫。《紐約時報》分析這款 App 背後的電腦代碼，包括將 Clearview AI 與 AR 眼鏡配對的程式語言，因此用戶拍到的所有人幾乎都能辨識。</p>
<h3 id="參考"><a href="# 參考" class="headerlink" title="參考"></a>參考</h3><p>《科技島讀》、《科技新報》、《數位時代》、《新頭殼 newtalk》</p>
<span id="more"></span>
<h3 id="2020- 科技新聞整理系列"><a href="#2020- 科技新聞整理系列" class="headerlink" title="2020 科技新聞整理系列"></a>2020 科技新聞整理系列</h3><p><a href="https://wangxchun.github.io/2021/05/11/news-2020-01/">2020/01 科技新聞</a><br><a href="https://wangxchun.github.io/2021/05/11/news-2020-02/">2020/02 科技新聞</a><br><a href="https://wangxchun.github.io/2021/05/11/news-2020-03/">2020/03 科技新聞</a><br><a href="https://wangxchun.github.io/2021/05/11/news-2020-04/">2020/04 科技新聞</a><br><a href="https://wangxchun.github.io/2021/05/11/news-2020-05/">2020/05 科技新聞</a><br><a href="https://wangxchun.github.io/2021/05/11/news-2020-06/">2020/06 科技新聞</a><br><a href="https://wangxchun.github.io/2021/05/11/news-2020-07/">2020/07 科技新聞</a><br><a href="https://wangxchun.github.io/2021/05/11/news-2020-08/">2020/08 科技新聞</a><br><a href="https://wangxchun.github.io/2021/05/11/news-2020-09/">2020/09 科技新聞</a><br><a href="https://wangxchun.github.io/2021/05/11/news-2020-10/">2020/10 科技新聞</a><br><a href="https://wangxchun.github.io/2021/05/11/news-2020-11/">2020/11 科技新聞</a><br><a href="https://wangxchun.github.io/2021/05/11/news-2020-12/">2020/12 科技新聞</a></p>
]]></content>
      <categories>
        <category>生活-科技新聞整理追蹤</category>
      </categories>
  </entry>
  <entry>
    <title>2020/02 科技新聞</title>
    <url>/2021/05/11/news-2020-02/</url>
    <content><![CDATA[<h3 id="LendingClub"><a href="#LendingClub" class="headerlink" title="LendingClub"></a>LendingClub</h3><p> 美國的 P2P 借貸公司 LendingClub 更於 2 月中宣布，將以高達 1.85 億美金（約合 55.5 億新台幣）收購純網路銀行 Radius Bank</p>
<h3 id="參考"><a href="# 參考" class="headerlink" title="參考"></a> 參考 </h3><p>《科技島讀》、《科技新報》、《數位時代》、《新頭殼 newtalk》</p>
<span id="more"></span>
<h3 id="2020- 科技新聞整理系列"><a href="#2020- 科技新聞整理系列" class="headerlink" title="2020 科技新聞整理系列"></a>2020 科技新聞整理系列 </h3><p><a href="https://wangxchun.github.io/2021/05/11/news-2020-01/">2020/01 科技新聞 </a><br><a href="https://wangxchun.github.io/2021/05/11/news-2020-02/">2020/02 科技新聞 </a><br><a href="https://wangxchun.github.io/2021/05/11/news-2020-03/">2020/03 科技新聞 </a><br><a href="https://wangxchun.github.io/2021/05/11/news-2020-04/">2020/04 科技新聞 </a><br><a href="https://wangxchun.github.io/2021/05/11/news-2020-05/">2020/05 科技新聞 </a><br><a href="https://wangxchun.github.io/2021/05/11/news-2020-06/">2020/06 科技新聞 </a><br><a href="https://wangxchun.github.io/2021/05/11/news-2020-07/">2020/07 科技新聞 </a><br><a href="https://wangxchun.github.io/2021/05/11/news-2020-08/">2020/08 科技新聞 </a><br><a href="https://wangxchun.github.io/2021/05/11/news-2020-09/">2020/09 科技新聞 </a><br><a href="https://wangxchun.github.io/2021/05/11/news-2020-10/">2020/10 科技新聞 </a><br><a href="https://wangxchun.github.io/2021/05/11/news-2020-11/">2020/11 科技新聞 </a><br><a href="https://wangxchun.github.io/2021/05/11/news-2020-12/">2020/12 科技新聞 </a></p>
]]></content>
      <categories>
        <category>生活-科技新聞整理追蹤</category>
      </categories>
  </entry>
  <entry>
    <title>2020/03 科技新聞</title>
    <url>/2021/05/11/news-2020-03/</url>
    <content><![CDATA[<h3 id="2020- 年 -3- 月 -4- 日，法律新創 -Atrium-LTS- 正式倒閉"><a href="#2020- 年 -3- 月 -4- 日，法律新創 -Atrium-LTS- 正式倒閉" class="headerlink" title="2020 年 3 月 4 日，法律新創 Atrium LTS 正式倒閉"></a>2020 年 3 月 4 日，法律新創 Atrium LTS 正式倒閉 </h3><p><a href="https://news.4k3.org/a/archives/254828/amp"> 融資超 7500 萬美元的法律界特斯拉 Atrium 倒閉，法律科技冬天來臨？</a></p>
<span id="more"></span>
<h3 id="2020- 科技新聞整理系列"><a href="#2020- 科技新聞整理系列" class="headerlink" title="2020 科技新聞整理系列"></a>2020 科技新聞整理系列</h3><p><a href="https://wangxchun.github.io/2021/05/11/news-2020-01/">2020/01 科技新聞</a><br><a href="https://wangxchun.github.io/2021/05/11/news-2020-02/">2020/02 科技新聞</a><br><a href="https://wangxchun.github.io/2021/05/11/news-2020-03/">2020/03 科技新聞</a><br><a href="https://wangxchun.github.io/2021/05/11/news-2020-04/">2020/04 科技新聞</a><br><a href="https://wangxchun.github.io/2021/05/11/news-2020-05/">2020/05 科技新聞</a><br><a href="https://wangxchun.github.io/2021/05/11/news-2020-06/">2020/06 科技新聞</a><br><a href="https://wangxchun.github.io/2021/05/11/news-2020-07/">2020/07 科技新聞</a><br><a href="https://wangxchun.github.io/2021/05/11/news-2020-08/">2020/08 科技新聞</a><br><a href="https://wangxchun.github.io/2021/05/11/news-2020-09/">2020/09 科技新聞</a><br><a href="https://wangxchun.github.io/2021/05/11/news-2020-10/">2020/10 科技新聞</a><br><a href="https://wangxchun.github.io/2021/05/11/news-2020-11/">2020/11 科技新聞</a><br><a href="https://wangxchun.github.io/2021/05/11/news-2020-12/">2020/12 科技新聞</a></p>
]]></content>
      <categories>
        <category>生活-科技新聞整理追蹤</category>
      </categories>
  </entry>
  <entry>
    <title>2020/05 科技新聞</title>
    <url>/2021/05/11/news-2020-05/</url>
    <content><![CDATA[<h3 id="微軟線上協作框架 -Fluid-Framework- 邁入公開預覽，未來將開源"><a href="# 微軟線上協作框架 -Fluid-Framework- 邁入公開預覽，未來將開源" class="headerlink" title="微軟線上協作框架 Fluid Framework 邁入公開預覽，未來將開源"></a>微軟線上協作框架 Fluid Framework 邁入公開預覽，未來將開源 </h3><p><a href="https://www.ithome.com.tw/news/137730"> 微軟線上協作框架 Fluid Framework 邁入公開預覽，未來將開源</a></p>
<span id="more"></span>
<h3 id="2020- 科技新聞整理系列"><a href="#2020- 科技新聞整理系列" class="headerlink" title="2020 科技新聞整理系列"></a>2020 科技新聞整理系列</h3><p><a href="https://wangxchun.github.io/2021/05/11/news-2020-01/">2020/01 科技新聞</a><br><a href="https://wangxchun.github.io/2021/05/11/news-2020-02/">2020/02 科技新聞</a><br><a href="https://wangxchun.github.io/2021/05/11/news-2020-03/">2020/03 科技新聞</a><br><a href="https://wangxchun.github.io/2021/05/11/news-2020-04/">2020/04 科技新聞</a><br><a href="https://wangxchun.github.io/2021/05/11/news-2020-05/">2020/05 科技新聞</a><br><a href="https://wangxchun.github.io/2021/05/11/news-2020-06/">2020/06 科技新聞</a><br><a href="https://wangxchun.github.io/2021/05/11/news-2020-07/">2020/07 科技新聞</a><br><a href="https://wangxchun.github.io/2021/05/11/news-2020-08/">2020/08 科技新聞</a><br><a href="https://wangxchun.github.io/2021/05/11/news-2020-09/">2020/09 科技新聞</a><br><a href="https://wangxchun.github.io/2021/05/11/news-2020-10/">2020/10 科技新聞</a><br><a href="https://wangxchun.github.io/2021/05/11/news-2020-11/">2020/11 科技新聞</a><br><a href="https://wangxchun.github.io/2021/05/11/news-2020-12/">2020/12 科技新聞</a></p>
]]></content>
      <categories>
        <category>生活-科技新聞整理追蹤</category>
      </categories>
  </entry>
  <entry>
    <title>2020/06 科技新聞</title>
    <url>/2021/05/11/news-2020-06/</url>
    <content><![CDATA[<h3 id="蘋果放棄 -Intel- 芯片改用 -ARM"><a href="# 蘋果放棄 -Intel- 芯片改用 -ARM" class="headerlink" title="蘋果放棄 Intel 芯片改用 ARM"></a>蘋果放棄 Intel 芯片改用 ARM</h3><p><a href="https://news.futunn.com/hk/post/6466882?level=1&amp;data_ticket=1620803121438705">苹果宣布正式推出基于 ARM 架构的处理器芯片，取代英特尔处理器 </a><br><a href="https://codingnote.cc/zh-hk/p/144485/"> 服務器 CPU 後起之秀挑戰英特爾和 AMD</a></p>
<span id="more"></span>
<h3 id="2020- 科技新聞整理系列"><a href="#2020- 科技新聞整理系列" class="headerlink" title="2020 科技新聞整理系列"></a>2020 科技新聞整理系列</h3><p><a href="https://wangxchun.github.io/2021/05/11/news-2020-01/">2020/01 科技新聞</a><br><a href="https://wangxchun.github.io/2021/05/11/news-2020-02/">2020/02 科技新聞</a><br><a href="https://wangxchun.github.io/2021/05/11/news-2020-03/">2020/03 科技新聞</a><br><a href="https://wangxchun.github.io/2021/05/11/news-2020-04/">2020/04 科技新聞</a><br><a href="https://wangxchun.github.io/2021/05/11/news-2020-05/">2020/05 科技新聞</a><br><a href="https://wangxchun.github.io/2021/05/11/news-2020-06/">2020/06 科技新聞</a><br><a href="https://wangxchun.github.io/2021/05/11/news-2020-07/">2020/07 科技新聞</a><br><a href="https://wangxchun.github.io/2021/05/11/news-2020-08/">2020/08 科技新聞</a><br><a href="https://wangxchun.github.io/2021/05/11/news-2020-09/">2020/09 科技新聞</a><br><a href="https://wangxchun.github.io/2021/05/11/news-2020-10/">2020/10 科技新聞</a><br><a href="https://wangxchun.github.io/2021/05/11/news-2020-11/">2020/11 科技新聞</a><br><a href="https://wangxchun.github.io/2021/05/11/news-2020-12/">2020/12 科技新聞</a></p>
]]></content>
      <categories>
        <category>生活-科技新聞整理追蹤</category>
      </categories>
      <tags>
        <tag>蘋果</tag>
        <tag>Intel</tag>
        <tag>ARM</tag>
        <tag>芯片</tag>
      </tags>
  </entry>
  <entry>
    <title>2021/01 科技新聞</title>
    <url>/2021/05/11/news-2021-01/</url>
    <content><![CDATA[<h3 id="2021- 年 -CES- 大展於台灣時間 -1- 月 -12- 日開幕，由美國電信商 -Verizon- 擔綱首場官方演講。"><a href="#2021- 年 -CES- 大展於台灣時間 -1- 月 -12- 日開幕，由美國電信商 -Verizon- 擔綱首場官方演講。" class="headerlink" title="2021 年 CES 大展於台灣時間 1 月 12 日開幕，由美國電信商 Verizon 擔綱首場官方演講。"></a>2021 年 CES 大展於台灣時間 1 月 12 日開幕，由美國電信商 Verizon 擔綱首場官方演講。</h3><p><a href="https://www.bnext.com.tw/article/60923/ces-2021-verizon">【CES 2021】Verizon 大秀 5G 應用！結合 NFL、大都會博物館，連拍 MV 都能玩？</a></p>
<h4 id="Verizon- 合作夥伴"><a href="#Verizon- 合作夥伴" class="headerlink" title="Verizon 合作夥伴"></a>Verizon 合作夥伴 </h4><p>（1）Verizon 在 2020 年與史密森尼美國藝術博物館（Smithsonian American Art Museum）推動 5G 數位典藏，透過 3D 掃描方式，把阿波羅 11 號的艙內模組建立成 3D 模型，提供民眾欣賞。<br>（2）攜手美國國家美式足球聯盟（NFL）：佈署 28 個體育館，透過 Verizon 5G SuperStadium App，觀眾能以 7 個不同視角在場內外欣賞超過 100 多場比賽 <br>（3）Verizon 與無人機隊公司 skyward 合作，共同與物流公司 UPS 在美國佛羅里達州測試 5G 無人機送貨可能性。<br>（4）Black Pumas 是一支美國靈魂樂樂隊，2020 年獲得第 62 屆葛萊美獎最佳新人提名。去年 11 月，Verizon 與 Snap 嘗試用 5G 結合 MV，由 Verizon 旗下的動態捕捉技術工作室負責建造樂團 3D 模型，將 Black Pumas 的暢銷歌曲 colors 拍成 AR 版 MV。民眾需拿著 5G 手機至大都會博物館外，透過 Snapchat 鏡頭才能欣賞整首歌曲。</p>
<span id="more"></span>
<h3 id="2021- 科技新聞整理系列"><a href="#2021- 科技新聞整理系列" class="headerlink" title="2021 科技新聞整理系列"></a>2021 科技新聞整理系列 </h3><p><a href="https://wangxchun.github.io/2021/05/11/news-2021-01/">2021/01 科技新聞 </a><br><a href="https://wangxchun.github.io/2021/05/11/news-2021-02/">2021/02 科技新聞 </a><br><a href="https://wangxchun.github.io/2021/05/11/news-2021-03/">2021/03 科技新聞 </a><br><a href="https://wangxchun.github.io/2021/05/11/news-2021-04/">2021/04 科技新聞 </a></p>
]]></content>
      <categories>
        <category>生活-科技新聞整理追蹤</category>
      </categories>
  </entry>
  <entry>
    <title>2021/02 科技新聞</title>
    <url>/2021/05/11/news-2021-02/</url>
    <content><![CDATA[<h3 id="澳洲和臉書為新聞付費槓上"><a href="# 澳洲和臉書為新聞付費槓上" class="headerlink" title="澳洲和臉書為新聞付費槓上"></a>澳洲和臉書為新聞付費槓上 </h3><p><a href="https://www.cna.com.tw/news/firstnews/202102240002.aspx"> 澳洲和臉書為新聞付費槓上 為何全世界都在看？</a><br>法新社報導，澳洲政府之所以盯上 Google 和臉書，因為澳洲市場競爭監管單位發現，花在網路廣告的費用，每 100 美元有 53 美元被 Google 賺走，有 28 美元被臉書賺走，其餘由其他網路平台瓜分。因此為了讓競爭環境更公平，澳洲當局決定立法要求這些網路平台大咖付費使用新聞內容。</p>
<p>另一方面，臉書為表達抗議，斷然封殺澳洲平台的新聞內容，造成當地一些緊急應變單位無法透過臉書對大眾發布火災、洪災或其他災害警報。這也引發外界質疑，是否應讓社群媒體能夠單方面移除形同重大基礎設施的危機應變相關服務。</p>
<span id="more"></span>
<h3 id="2021- 科技新聞整理系列"><a href="#2021- 科技新聞整理系列" class="headerlink" title="2021 科技新聞整理系列"></a>2021 科技新聞整理系列</h3><p><a href="https://wangxchun.github.io/2021/05/11/news-2021-01/">2021/01 科技新聞</a><br><a href="https://wangxchun.github.io/2021/05/11/news-2021-02/">2021/02 科技新聞</a><br><a href="https://wangxchun.github.io/2021/05/11/news-2021-03/">2021/03 科技新聞</a><br><a href="https://wangxchun.github.io/2021/05/11/news-2021-04/">2021/04 科技新聞</a></p>
]]></content>
      <categories>
        <category>生活-科技新聞整理追蹤</category>
      </categories>
  </entry>
  <entry>
    <title>2021/03 科技新聞</title>
    <url>/2021/05/11/news-2021-03/</url>
    <content><![CDATA[<h3 id="Chamath-Palihapitiya- 看空"><a href="#Chamath-Palihapitiya- 看空" class="headerlink" title="Chamath Palihapitiya 看空"></a>Chamath Palihapitiya 看空 </h3><p>Chamath Palihapitiya 說他在空臉書，Jim Cramer 說臉書、蘋果、谷歌便宜。<br>Google 這次淘汰第三方 Cookie 的事情其實稍早前就在講了，但正式發了個官方部落格後，還是把廣告商如 The Trade Desk, Magnite 等嚇癱。但在科技股大逃殺的這陣子行情，老實說也比較難看出到底有多少成份是受到消息刺激，畢竟科技幾乎都一起下去。<br> 長遠來看 Google, Apple 這些隱私拳打下去，對廣告商都會有一定程度的影響。FB 祖克伯這樣說要「讓蘋果痛苦」，雖然很多人把他當笑話看，但廣告上目前霸主終究是臉書。</p>
<h3 id="史上第一條 -Twitter- 貼文售出，靠 -NFT- 賣到近 -8- 千萬元！還有哪些天價加密藝術？"><a href="# 史上第一條 -Twitter- 貼文售出，靠 -NFT- 賣到近 -8- 千萬元！還有哪些天價加密藝術？" class="headerlink" title="史上第一條 Twitter 貼文售出，靠 NFT 賣到近 8 千萬元！還有哪些天價加密藝術？"></a>史上第一條 Twitter 貼文售出，靠 NFT 賣到近 8 千萬元！還有哪些天價加密藝術？</h3><p><a href="https://www.bnext.com.tw/article/61903/twitter-ceo-jack-dorseys-first-tweet-nft-sells-for-2point9-million">史上第一條 Twitter 貼文售出，靠 NFT 賣到近 8 千萬元！還有哪些天價加密藝術？</a></p>
<span id="more"></span>
<h3 id="2021- 科技新聞整理系列"><a href="#2021- 科技新聞整理系列" class="headerlink" title="2021 科技新聞整理系列"></a>2021 科技新聞整理系列</h3><p><a href="https://wangxchun.github.io/2021/05/11/news-2021-01/">2021/01 科技新聞</a><br><a href="https://wangxchun.github.io/2021/05/11/news-2021-02/">2021/02 科技新聞</a><br><a href="https://wangxchun.github.io/2021/05/11/news-2021-03/">2021/03 科技新聞</a><br><a href="https://wangxchun.github.io/2021/05/11/news-2021-04/">2021/04 科技新聞</a></p>
]]></content>
      <categories>
        <category>生活-科技新聞整理追蹤</category>
      </categories>
  </entry>
  <entry>
    <title>2021/04 科技新聞</title>
    <url>/2021/05/11/news-2021-04/</url>
    <content><![CDATA[<h3 id="臉書 -5- 億用戶個資外流"><a href="# 臉書 -5- 億用戶個資外流" class="headerlink" title="臉書 5 億用戶個資外流"></a>臉書 5 億用戶個資外流 </h3><p>Facebook 傳出有高達 5.33 億筆個資外流，台灣則約有 73 萬用戶受害。<br> 臉書發言人僅簡短地說：「這是 2019 年外洩的舊資料。我們已於 2019 年 8 月修復漏洞」。<br>2019 年時傳出，臉書流出了大量用戶資料，主要是用戶 ID、電話與使用者名稱。<span id="more"></span><br>2020 年 4 月，有人發現上述資料之上又附加了更多的用戶資料。<br>臉書強調，外流的部份僅限臉書的公開個人檔案（profiles）。</p>
<p>同樣在 2019 年，臉書因為劍橋分析資料外洩案而被美國政府重罰 50 億美金。<br>也同樣是因為臉書提供的 API 被開發者濫用。開發者沒有遵照使用條款銷毀資料，使得資料流出。</p>
<p>我們該怎麽做？<br>(1) <a href="https://haveibeenpwned.com/">Have I Been Pwned？</a> 網站隨後發布一項新功能，讓臉書用戶可以快速檢測自己的個資是否遭駭。<br>(2) 減少用手機簡訊的雙重認證，而是改為用身份驗證器（Authenticator），例如 <a href="https://mrmad.com.tw/google-authenticator">Google Authenticator</a> 或 <a href="https://tech.us3.list-manage.com/track/click?u=d5b0016249f4919c4ce5fa518&amp;id=a034da17ad&amp;e=994d081550">Microsoft Autheniticator</a>。<br>(3) 另一個作法是使用多組電話號碼，「混淆」駭客視聽。有些人根據不同的服務提供不同的虛擬號碼（virtual number），再利用軟體把所有的來電轉接到主要的電話號碼上。當然這也滿麻煩的。</p>
<h3 id="Clubhouse- 點燃「語音社群」戰火！從 -Spotify- 到 -Facebook- 都搶著模仿"><a href="#Clubhouse- 點燃「語音社群」戰火！從 -Spotify- 到 -Facebook- 都搶著模仿" class="headerlink" title="Clubhouse 點燃「語音社群」戰火！從 Spotify 到 Facebook 都搶著模仿"></a>Clubhouse 點燃「語音社群」戰火！從 Spotify 到 Facebook 都搶著模仿 </h3><p> 串流音樂服務 Spotify 宣布，收購運動主題的即時線上聊天室 Locker Room 的開發商 Betty Labs。<br>Spotify 表示併購後將維持 Locker Room 自主運作，繼續專注服務運動賽事類內容。<br>但 Spotify 自己顯然會從中學習，擷取適合 Spotify 本身的功能。這包含兩個部分：創作與收聽。</p>
<p>即時語音是 Clubhouse 的全部，卻只會是 Spotify 中的一小部分內容。<br>Spotify 以廣告與全平台訂閱為主，而 Clubhouse 則是圍繞著創作者變現。<br>例如 Clubhouse 剛剛推出第一個打賞工具，讓用戶可以直接付錢給創作者。<br>Spotify 想要成為聲音的大雜燴，而 Clubhouse 則成為網紅收費開講的小房間。</p>
<pre><code>Clubhouse 成立於去年 4 月，員工總數只有 9 位的這間新創，于 2021 年 4 月在全球擁有超過 1,200 萬下載量，
每週活躍用戶數上看 200 萬人──這還是在只有 iOS 版本，僅限邀請加入的前提下。
為了對抗鋒芒初現的新挑戰者，各大社群、聲音巨頭都緊鑼密鼓備戰當中。
</code></pre><p>疫情下大受民眾歡迎、半年內估值翻升一倍的遊戲通訊平台 Discord，近期也透露計畫推出類似 Clubhouse 的新功能。就連 Slack、Telegram 等通訊軟體，也都效法 Clubhouse 加入語音功能。</p>
<p>不久前，微軟也傳出有意以超過 100 億美元的高價入主 Discord，甚至傳出 Epic Games、亞馬遜等大型企業都曾與 Discord 接洽過。Discord 目前全球用戶高達 1.4 億人，前陣子完成 1 億美元融資後，估值上看 70 億美元。</p>
<p>早在 2020 年 12 月，推特就開始展開語音聊天室 Spaces 功能的小規模測試。<br>善於複製競爭對手功能的 Facebook，今年 2 月也傳出正在祕密開發類似 Clubhouse 的語音社群服務，只不過後續被發現並非獨立的 App，而是基於 Messenger 打造的新功能，更有逆向工程師挖掘出初期的界面樣板。</p>
<h3 id="Google、甲骨文 -10- 年版權案再反轉，最高法院裁定 -Google- 免賠 -88- 億美元"><a href="#Google、甲骨文 -10- 年版權案再反轉，最高法院裁定 -Google- 免賠 -88- 億美元" class="headerlink" title="Google、甲骨文 10 年版權案再反轉，最高法院裁定 Google 免賠 88 億美元"></a>Google、甲骨文 10 年版權案再反轉，最高法院裁定 Google 免賠 88 億美元</h3><p>2005 年，Google 併購了新創 Android。Android 團隊決定以 Java 語言為核心，建造新一代的手機作業系統。當時 Java 主要用於電腦與伺服器。問題是 Google 需取得 Java 的擁有者昇陽（昇陽於 2010 年被甲骨文併購）的授權。然而雙方始終無法談成。Google 希望吸引 Java 工程師轉來為 Android 開發，於是採用了一個巧妙的作法：它沒有照抄 Java 的所有程式碼，而是只抄襲了 Java 的 API。</p>
<p>Google 在上訴中提出了兩個主要辯護論點。<br>第一，Google 主張 API 不受著作權保護。<br>第二，Google 主張其是合理使用 Java 的 API。<br>判斷是否為合理使用：(1) 為什麼抄 (2) 被抄的是什麼樣的東西 (3) 抄了多大比例 (4) 害對方損失多少</p>
<p>最高法院裁定 Google 免賠 88 億美元。<br>判決一出，軟體社群大多一片好評，紛紛驚呼：「心頭大石終於落地了。」<br>因為使用既有的 API，再重新寫執行碼在業界實已是常態。如果甲骨文勝訴，整個軟體業都要重新調整。<br>但是法律界很失望，因爲法官沒有針對 API 是否受著作權保護的問題明確説明。</p>
<pre><code>著作權
著作權的存在是為了鼓勵創作，特別是鼓勵創作那些易於複製的東西，例如電影、書、音樂等。
也因此著作權的保護不是絕對的。著作權本質上是為了一個人（著作權人）的利益，限制整個社會的行為。
</code></pre><p><a href="https://wangxchun.github.io/2021/05/11/news-google-vs-oracle/">從 Google vs Oracle 訴訟案，討論著作權法</a></p>
<h3 id="2021- 科技新聞整理系列"><a href="#2021- 科技新聞整理系列" class="headerlink" title="2021 科技新聞整理系列"></a>2021 科技新聞整理系列</h3><p><a href="https://wangxchun.github.io/2021/05/11/news-2021-01/">2021/01 科技新聞</a><br><a href="https://wangxchun.github.io/2021/05/11/news-2021-02/">2021/02 科技新聞</a><br><a href="https://wangxchun.github.io/2021/05/11/news-2021-03/">2021/03 科技新聞</a><br><a href="https://wangxchun.github.io/2021/05/11/news-2021-04/">2021/04 科技新聞</a></p>
]]></content>
      <categories>
        <category>生活-科技新聞整理追蹤</category>
      </categories>
      <tags>
        <tag>Clubhouse</tag>
        <tag>臉書</tag>
        <tag>用戶個資外流</tag>
        <tag>Spotify</tag>
        <tag>Facebook</tag>
        <tag>甲骨文</tag>
        <tag>昇陽</tag>
        <tag>著作權</tag>
      </tags>
  </entry>
  <entry>
    <title>2021/05 科技新聞</title>
    <url>/2021/05/29/news-2021-05/</url>
    <content><![CDATA[<h3 id="Google：淘汰第三方 -Cookie- 後，不會採用新的追蹤用戶技術"><a href="#Google：淘汰第三方 -Cookie- 後，不會採用新的追蹤用戶技術" class="headerlink" title="Google：淘汰第三方 Cookie 後，不會採用新的追蹤用戶技術"></a>Google：淘汰第三方 Cookie 後，不會採用新的追蹤用戶技術</h3><p><a href="https://technews.tw/2021/03/04/google-says-it-will-not-use-new-ways-of-tracking-you-as-it-phases-out-browser-cookies-for-ads/">Google：淘汰第三方 Cookie 後，不會採用新的追蹤用戶技術</a></p>
<h3 id="Verizon- 敲定以 -50- 億美元出售 -Yahoo、AOL- 給私募股權公司阿波羅"><a href="#Verizon- 敲定以 -50- 億美元出售 -Yahoo、AOL- 給私募股權公司阿波羅" class="headerlink" title="Verizon 敲定以 50 億美元出售 Yahoo、AOL 給私募股權公司阿波羅"></a>Verizon 敲定以 50 億美元出售 Yahoo、AOL 給私募股權公司阿波羅</h3><p>Verizon 以用戶數計算，是美國最大的行動通訊電信商。2015 年收購 AOL，<br>2017 年再買下 Yahoo，買這兩家公司總計花費 Verizon 逾 90 億美元。<br><a href="https://www.bnext.com.tw/article/62594/verizon-sell-yahoo-aol">Verizon 敲定以 50 億美元出售 Yahoo、AOL 給私募股權公司阿波羅</a></p>
<p>Verizon 的數位媒體事業部門去年沒有達成 100 億美元的年度目標營收；而在 2018 年，Verizon 已減記大約 45 億美元的該事業部門價值。如果順利賣掉數位媒體資產，獲得的現金將用來支應 Verizon 確保 5G 頻譜執照。針對 5G 頻譜執照，Verizon 計畫今年投入 530 億美元經費。</p>
<h3 id="《Starbucks-a-Tech-Company》"><a href="#《Starbucks-a-Tech-Company》" class="headerlink" title="《Starbucks, a Tech Company》"></a>《Starbucks, a Tech Company》</h3><p>最近科技分析師 Mario Gabriele 寫了一篇長文《 星巴克，一家科技公司 》（<a href="https://www.readthegeneralist.com/briefing/starbucks?utm_source=daodu.tech.member&amp;utm_campaign=808d4168d9-member+email_COPY_01&amp;utm_medium=email&amp;utm_term=0_8a59991d0b-808d4168d9-215074536">Starbucks, a Tech Company</a>），回顧星巴克從賣咖啡到做行動支付的歷程。</p>
<p>從 1987 年至 2000 年，星巴克搭上美國經濟快速成長、消費力爆發的風口，不斷擴張。美國人受夠了一成不變的鋁箔包與即溶咖啡，渴望更多元的異國餐飲。而大城市的年輕人需要家與工作之外的休閒場所，又不想去傳統的酒吧或餐廳，正需要星巴克自我定義的「第三空間」（the Third Place）。</p>
<h3 id="NFT- 世代再寫歷史，Cryptopunk- 頭像在佳士得以 -4-7- 億成交"><a href="#NFT- 世代再寫歷史，Cryptopunk- 頭像在佳士得以 -4-7- 億成交" class="headerlink" title="NFT 世代再寫歷史，Cryptopunk 頭像在佳士得以 4.7 億成交"></a>NFT 世代再寫歷史，Cryptopunk 頭像在佳士得以 4.7 億成交 </h3><p> 佳士得今日拍賣會售出一組 NFT 商品，內容是 9 顆 Cryptopunk 人頭，最終以 1,696 萬美元成交，約新台幣 4.7 億元。</p>
<p>每一個 NFT 代表一組寫入區塊鏈中的紀錄。NFT 類似比特幣、以太幣等；差別在於比特幣可以彼此等值互換，但每一個 NFT 都是獨一無二的。<br><a href="https://technews.tw/2021/05/12/nft-christie-cryptopunk-set-sale-for-17m-usd/?utm_source=daodu.tech.member&amp;utm_campaign=3f9c20c367-member+email_COPY_01&amp;utm_medium=email&amp;utm_term=0_8a59991d0b-3f9c20c367-215074536">NFT 世代再寫歷史，Cryptopunk 頭像在佳士得以 4.7 億成交</a></p>
<h3 id="Gojek- 與 -Tokopedia- 合併"><a href="#Gojek- 與 -Tokopedia- 合併" class="headerlink" title="Gojek 與 Tokopedia 合併"></a>Gojek 與 Tokopedia 合併 </h3><p> 印尼的共享與外送平臺 Gojek，以及當地的電子商務龍頭 Tokopedia 在 5/17 宣布，它們已整併成 GoTo Group，這不僅是印尼最大的併購案，GoTo Group 也成為印尼最大的科技集團，估計整併後的 [估] 值為 180 億美元，並將持續擴大其經營規模。</p>
<p>GoTo 與最大對手 Grab 都將是「外送＋電商＋支付」的三位一體。與新加坡另一巨擘 SEA 鼎足而三。SEA 的三大業務分別是遊戲代理（Garena）、電商（蝦皮）與支付。這三大巨頭都號稱要邁向「超級 app」（Super app），也就是涵蓋消費者生活所有需求的 app。</p>
<p>事實上合併的真正目標是盡快去美國上市。彭博於二月份報導，Gojek CEO Andre Soelistyo 身負重任，必須在上市時達成 300 - 400 億美金的市值。這也是 Grab 於 4 月份宣布打算在美國上市的市值。兩家獨角獸看著 SEA 於 2017 年在美國成功上市，至今仍是東南亞最大的科技公司，肯定是心嚮往之。</p>
<h3 id="專門製作虛擬化身（avatar）的新創 -Genies- 最近完成 -6-500- 萬美元 -B- 輪融資"><a href="# 專門製作虛擬化身（avatar）的新創 -Genies- 最近完成 -6-500- 萬美元 -B- 輪融資" class="headerlink" title="專門製作虛擬化身（avatar）的新創 Genies 最近完成 6,500 萬美元 B 輪融資"></a>專門製作虛擬化身（avatar）的新創 Genies 最近完成 6,500 萬美元 B 輪融資 </h3><h3 id="美國廣告授權公司 -Veritone- 宣佈推出聲音平台"><a href="# 美國廣告授權公司 -Veritone- 宣佈推出聲音平台" class="headerlink" title="美國廣告授權公司 Veritone 宣佈推出聲音平台"></a> 美國廣告授權公司 Veritone 宣佈推出聲音平台 </h3><p> 今天該公司推出一新的平台叫 Marvel.ai，讓創作者與媒體人能建立聲音的深偽（deepfake）複製品並開放授權。</p>
<p>有了 Marvel.ai，任何人都能創造其嗓音的擬真複製品，並且隨其高興授權。當名人 Y 正在睡覺時，其聲音可能正努力的工作，錄製廣播節目、讀有聲書等等。創辦人甚至說平台可以「復活」已死之人的聲音，只要有足夠的聲音紀錄能訓練人工智慧。</p>
<p>用戶首先要對著電腦說各種語句，讓人工智慧學習。最終建立一個聲音模型，就可以開放授權使用。Veritone 進一步打算將服務做得像 AWS 一樣，任何人都能以及授權自己的聲音模型。Veritone 也將推出聲音模型的交易市場。</p>
<p>當表情與聲音都能深偽，人們如何確認線上的互動是「真實」還是「複製」？可能還是要靠 NFT。NFT 可以證明一段數位紀錄是獨一無二的。</p>
<h3 id="華納媒體與 -Discovery- 合併"><a href="# 華納媒體與 -Discovery- 合併" class="headerlink" title="華納媒體與 Discovery 合併"></a>華納媒體與 Discovery 合併</h3><p>AT＆T 宣布與 Discovery 達成協議，未來將由 AT＆T 旗下華納媒體（WarnerMedia）與 Discovery 合併成為全新公司，將鎖定全球串流影音內容市場。</p>
<p>華納媒體與 Discovery 雙方均認為，合併後可提升在全球規模的串流影音服務發展機會，藉此與 Netflix、迪士尼在串流影音市場競爭。</p>
<p>合併後的新公司 . . . 包含原本在華納媒體下的 HBO、華納兄弟影業、DC Comics、CNN、卡通頻道，以及透納廣播公司旗下 TNT、TBS 頻道，連同 Discovery 所有 HGTV、Food Network、Eurosport、TLC 節目內容與動物星球頻道內容，都會成為新公司持有資產。</p>
<pre><code>目前新華納集團包含以下內容：
故事類：HBO、華納兄弟影業、TNT、TBS、卡通頻道
非故事類（綜藝、紀錄片、實境秀）：HGTV、Food Network、TLC、動物星球
即時新聞：CNN
即時體育：Eurosport
IP：DC Comics（漫畫部門）
</code></pre><h3 id="由台灣政務委員唐鳳協助建置的「1922- 簡訊實聯制」系統（5-19- 推出）"><a href="# 由台灣政務委員唐鳳協助建置的「1922- 簡訊實聯制」系統（5-19- 推出）" class="headerlink" title="由台灣政務委員唐鳳協助建置的「1922 簡訊實聯制」系統（5/19 推出）"></a>由台灣政務委員唐鳳協助建置的「1922 簡訊實聯制」系統（5/19 推出）</h3><p>只要掃碼即可傳送簡訊至 1922 的功能，只要商家進行 QR Code 的申請，民眾只需要掃碼、傳送簡訊即可，「簡單來說，顧客端什麼都不用做，就是掃碼、傳簡訊。」</p>
<p>彭博記者 Tim Culpan 在推特上錄影盛讚<br><img src="/2021/05/29/news-2021-05/photo1.png" alt><br><a href="https://g0v.hackmd.io/@au/HkmyoS-Fu?utm_source=daodu.tech.member&amp;utm_campaign=701ee5b286-member+email_COPY_01&amp;utm_medium=email&amp;utm_term=0_8a59991d0b-701ee5b286-215074536">g0v 零時政府的工作紀錄</a></p>
<p>5/17 由 1922 中華電信、emask 關貿、疾管家三單位一起開發系統，5/18 完成測試，5/19 開記者會推出。<br>中華電信應該是負責 SMS 簡訊架構。關貿公司開發了口罩實名制的註冊系統，是店家 QR Code 的基礎。宏達電的 DeepQ 團隊開發了防疫團隊的 LINE 官方帳號「疾管家」。台灣網路認證公司（TWID）應是負責 <a href="https://blocktrend.substack.com/p/-20?utm_source=daodu.tech.member&amp;utm_campaign=701ee5b286-member+email_COPY_01&amp;utm_medium=email&amp;utm_term=0_8a59991d0b-701ee5b286-215074536">手機的認證</a>。</p>
<h3 id="Google-I-O- 開發者大會（5-18-5-20）"><a href="#Google-I-O- 開發者大會（5-18-5-20）" class="headerlink" title="Google I/O 開發者大會（5/18-5/20）"></a>Google I/O 開發者大會（5/18-5/20）</h3><h4 id="工作軟體 -Google-Workspace"><a href="# 工作軟體 -Google-Workspace" class="headerlink" title="工作軟體 Google Workspace"></a>工作軟體 Google Workspace</h4><h4 id="人工智慧模型 -MUM- 與 -LaMDA"><a href="# 人工智慧模型 -MUM- 與 -LaMDA" class="headerlink" title="人工智慧模型 MUM 與 LaMDA"></a>人工智慧模型 MUM 與 LaMDA</h4><h4 id="Google-Shopping"><a href="#Google-Shopping" class="headerlink" title="Google Shopping"></a>Google Shopping</h4><p>總的來說，Google 的人工智慧持續進展，亮點不斷；但在商業上仍然缺乏切入點。<br>或許這樣的速度最符合 Google 喜歡埋頭研究的學術風格。</p>
<pre><code>在桌機時代，靠著關鍵字廣告與廣告交換網（ad network）等，Google 成為了網路霸主。但在手機時代，人們需要的是 Facebook，以及 Whatsapp、LINE、WeChat 等即時訊息 app。訊息平台逐漸取代作業系統平台。在營收上，Google 今年的廣告收益仍然創新高，遠遠超越了傳統媒體；但竄最快的是 Facebook。
</code></pre><h3 id="校正回歸與規模化（5-22）"><a href="# 校正回歸與規模化（5-22）" class="headerlink" title="校正回歸與規模化（5/22）"></a>校正回歸與規模化（5/22）</h3><p>台灣防疫指揮官陳時中於 5 月 22 日首次表示，每日的確診數需「校正回歸」，引發熱議。</p>
<p>中央流行疫情指揮中心發言人莊人祥受訪時解釋，校正回歸病例定義是個案採檢通報後，因檢體運送、實驗室量能、無法及時登打檢驗結果等因素，未於 2 天內完成檢驗結果報告的個案。近日因登打系統造成確診個案資料未成功上傳，延遲收到數據，為真實呈現疫情，才會使用校正回歸。</p>
<p>當然校正只是治標。治本是要抒解「塞車」，提高檢驗供應鏈的產量。許多人因此質疑台灣政府為何沒有「超前部署」，在疫情擴大前提高檢驗的產量？</p>
<p>當一個系統高度追求效率，就容不下冗餘，無法處理突然飆升的需求。然而在需求尚未出現前投資，看起來就是浪費，犧牲了其他當時看來更急迫的任務，例如遊說採購疫苗、紓困企業、增加病床等等。</p>
<p>疫情指揮中心陳時中說，會先朝向 3 大規劃前進：先簡化通報程序，再來徵招生技業者，提供核酸檢驗器材，並且每家採購儀器最高補助 500 萬元。最後最重要的，就是增加醫護志工。這暗示瓶頸在流程、器材跟人才。<br>引起醫檢師不滿：為何需求突然提高，政府的作法不是提高價格 (醫檢師薪水)，而是破壞執照制度，擴大供給？<br>但事實是：培養醫檢師緩不濟急，而既有的醫檢師似乎也無法滿足飆升的檢驗需求。</p>
<p>所以核心問題就是：如何擴大人力服務的供給？<br>其實可以參考 Uber 替代計程車司機的過程。就是三個步驟：拆分、替代以及外包。<br>要快速擴大檢驗鏈的供給，就要將檢驗工作的每一個環節拆開，將可以自動化的部分交給電腦。將可以外包的部分交給「無執照人士」。只保留最專業，通常也最高風險的部分給有執照的醫檢師。</p>
<h3 id="國產疫苗引炒股疑慮？"><a href="# 國產疫苗引炒股疑慮？" class="headerlink" title="國產疫苗引炒股疑慮？"></a>國產疫苗引炒股疑慮？</h3><h3 id="參考：科技島讀、科技新報"><a href="# 參考：科技島讀、科技新報" class="headerlink" title="參考：科技島讀、科技新報"></a>參考：科技島讀、科技新報</h3>]]></content>
      <categories>
        <category>生活-科技新聞整理追蹤</category>
      </categories>
  </entry>
  <entry>
    <title>從 Google vs Oracle 訴訟案，討論著作權法</title>
    <url>/2021/05/11/news-google-vs-oracle/</url>
    <content><![CDATA[<h3 id="前言"><a href="# 前言" class="headerlink" title="前言"></a>前言</h3><p>Q：軟體的 SSO（structure, sequence, organization）是否受著作權保護？</p>
<p>著作權法中的「思想與表達分立原則」：<br>思想（idea）是不受著作權保護的，著作權保護的是思想的表達方式。<br>專利法保護的是思想（idea）。<br>如果某一個思想的表達方式很有限，則表達方式本身也不會被保護（被 merge 了）。</p>
<p>著作權法在不同的法域，有不同的規定。</p>
<h3 id="著作權法對於軟體的保護"><a href="# 著作權法對於軟體的保護" class="headerlink" title="著作權法對於軟體的保護"></a>著作權法對於軟體的保護 </h3><p> 電腦軟體成爲著作權法的標的之後，在 1992-1994 年間有很多著作權的案子。<br>軟體要用專利保護，還是著作權保護，有過一段爭執。<br>程式碼被當成文字創作來保護。<br>如果把程式看成一個 funtional 的東西，就是受到專利保護，不受著作權保護（風險：審查期長）。</p>
<h3 id="開源軟體"><a href="# 開源軟體" class="headerlink" title="開源軟體"></a>開源軟體 </h3><p>JAVA 本來也是開源軟體，但是 2009 年賣給 Oracle 之後變成利益導向，2010 年開始告 Google。<br> 能夠上訴到美國聯邦最高法院的案子非常少。<br>有位法官爲了判案，親自去學習寫代碼，用圖書館來比喻 JAVA 語言。</p>
<p>比喻：Oracle 認爲 Google 不可以抄襲 Java 的菜單（API），<br>例如可以把「糖醋排骨」寫成「酸酸甜甜帶骨頭的肉」。</p>
<h3 id="法官的看法"><a href="# 法官的看法" class="headerlink" title="法官的看法"></a>法官的看法 </h3><h4 id="1-2010- 一審（著作權適合性的問題）"><a href="#1-2010- 一審（著作權適合性的問題）" class="headerlink" title="1.2010 一審（著作權適合性的問題）"></a>1.2010 一審（著作權適合性的問題）</h4><p>(1) 認爲思想不受保護，表達才受保護（加上思想表達合并、必要場景）<br>(2) 著作權法不保護短語（案例法上的累積）（但其實好的商業標語是用專利法保護）<br>(3) Google 表示要和 Java 語言相容（但其實 Google 做出了的 Android 不和其他 JAVA 程式相容）<br>(4) 法官承認 JAVA 的 SSO（比喻：上菜的順序）是有原創性的，但是 functional 的東西不受保護。<br> 第一審 Google 大獲全勝</p>
<h4 id="2-2014-CFC- 聯邦上訴法院"><a href="#2-2014-CFC- 聯邦上訴法院" class="headerlink" title="2.2014 CFC 聯邦上訴法院"></a>2.2014 CFC 聯邦上訴法院 </h4><p>(1) merge 判斷的時間點的問題：當初昇陽在寫 JAVA code 的時候，這種菜的名稱有很多種表示方法，最後他選擇了糖醋排骨（一審法官則是認爲 merge 是在 Google 在寫的時候沒有太多選擇了，所以 merge 了）。而且 CFC 認爲 merge 不是在討論適合性的時候要討論的。<br>(2) 很多短語合起來就變成一個有原創性的排序。<br>(3) 你要和我相容，爲什麽變成我不受保護，且相容性應該是在合理使用的時候討論，不是這時候討論。<br> 結論：有侵權的可能（Google 上訴，最高法院沒有受理），就看 Google 能否主張合理使用抗辯。</p>
<h4 id="3- 威廉法官認爲合理使用成立"><a href="#3- 威廉法官認爲合理使用成立" class="headerlink" title="3. 威廉法官認爲合理使用成立"></a>3. 威廉法官認爲合理使用成立 </h4><h5 id="1- 使用的目的：商業、自己使用、轉化（例如博恩的詼諧轉化）"><a href="#1- 使用的目的：商業、自己使用、轉化（例如博恩的詼諧轉化）" class="headerlink" title="(1) 使用的目的：商業、自己使用、轉化（例如博恩的詼諧轉化）"></a>(1) 使用的目的：商業、自己使用、轉化（例如博恩的詼諧轉化）</h5><p> 不是作爲商業用途是你家的事，你該付的授權費還是要付 <br> 善意 vs 惡意（Google 兩大弱點：有談過授權、apple 自己寫自己的語言）<br>Google 主張自己有轉化：電腦的環境轉換到智慧型手機，但是 CFC 認爲 code 的功能還是一樣</p>
<h5 id="2- 著作權作品的性質：程式具有 -functional，受保護的程度比較低"><a href="#2- 著作權作品的性質：程式具有 -functional，受保護的程度比較低" class="headerlink" title="(2) 著作權作品的性質：程式具有 functional，受保護的程度比較低"></a>(2) 著作權作品的性質：程式具有 functional，受保護的程度比較低 </h5><p> 著作權法就是要討論對於 code 的保護啊</p>
<h5 id="3- 相對整個有著作權作品相比所使用的內容和數量（質和量）"><a href="#3- 相對整個有著作權作品相比所使用的內容和數量（質和量）" class="headerlink" title="(3) 相對整個有著作權作品相比所使用的內容和數量（質和量）"></a>(3) 相對整個有著作權作品相比所使用的內容和數量（質和量）</h5><p>Google 主張只用了 3%，CFC 認爲這個量還是多了</p>
<h5 id="4- 這種使用對有著作權作品的潛在市場或價值所產生的影響（替代效果）"><a href="#4- 這種使用對有著作權作品的潛在市場或價值所產生的影響（替代效果）" class="headerlink" title="(4) 這種使用對有著作權作品的潛在市場或價值所產生的影響（替代效果）"></a>(4) 這種使用對有著作權作品的潛在市場或價值所產生的影響（替代效果）</h5><p>Google 認爲 JAVA 是用在電腦，不會影響到你的市場<br>JAVA 本來就有要進入手機市場，嘗試寫了 JAVA SE</p>
<h4 id="4-2019- 上訴到最高法院，因爲 -covid-19，所以延遲辯論"><a href="#4-2019- 上訴到最高法院，因爲 -covid-19，所以延遲辯論" class="headerlink" title="4.2019 上訴到最高法院，因爲 covid-19，所以延遲辯論"></a>4.2019 上訴到最高法院，因爲 covid-19，所以延遲辯論 </h4><p> 看的重點：<br>(1) merge 的時機<br>(2) 分類法，SSO<br>(3) 事實問題還是法律問題<br>(4) 轉化的内涵是什麽</p>
]]></content>
      <categories>
        <category>生活-科技新聞整理追蹤</category>
      </categories>
  </entry>
  <entry>
    <title>職位中英文對照表</title>
    <url>/2021/04/13/position-in-english/</url>
    <content><![CDATA[<p> 電腦 / 互聯網 / 通訊 Technology/Internet<br> 高級硬體工程師 Senior Hardware Engineer<br> 硬體工程師 Hardware Engineer<br>IC 設計 / 應用工程師 IC Design/Application Engineer<br><span id="more"></span><br> 電子 / 電路工程師 Electronics/Circuit Engineer<br> 系統分析員 System Analyst<br> 高級軟體工程師 Senior Software Engineer<br> 軟體工程師 Software Engineer<br> 互聯網軟體發展工程師 Internet/E-Commerce Software Engineer<br> 多媒體 / 遊戲開發工程師 Multimedia Software/Game Development Engineer<br> 系統工程師 System Engineer<br>ERP 技術 / 應用顧問 ERP Technical/Application Consultant<br> 資料庫工程師 / 管理員 Database Engineer/Administrator<br> 網站營運經理 / 主管 Web Operations Manager/Supervisor<br> 網路工程師 Network Engineer<br> 系統管理員 / 網路管理員 System Manager/Webmaster<br> 網頁設計 / 製作 Web Designer/Production<br> 網站策劃 / 編輯 Web Planner/Editor<br> 資訊技術經理 / 主管 IT Manager/Supervisor<br> 資訊技術專員 IT Specialist<br> 通信技術工程師 Communications Engineer<br> 資料安全工程師 Information Security Engineer<br> 系統集成 / 支援 System Integration/Support<br> 智慧大廈 / 綜合佈線 Intelligent Building/Structure Cabling<br> 首席技術執行官 CTO/VP Engineering<br> 技術總監 / 經理 Technical Director/Manager<br> 專案經理 Project Manager<br> 專案主管 Project Supervisor<br> 專案執行 / 協調人員 Project Specialist / Coordinator<br> 技術支援經理 Technical Support Manager<br> 技術支援工程師 Technical Support Engineer<br> 品質經理 QA Manager<br> 軟體測試工程師 Software QA Engineer<br> 硬體測試工程師 Hardware QA Engineer<br> 測試員 Test Engineer<br> 技術文員 / 助理 Technical Clerk/Assistant<br> 其他 Other<br> 銷售 Sales<br> 銷售總監 Sales Director<br> 銷售經理 Sales Manager<br> 銷售主管 Sales Supervisor<br> 商務經理 Business Manager<br> 管道 / 分銷經理 Channel/Distribution Manager<br> 管道 / 分銷主管 Channel/Distribution Supervisor<br> 客戶經理 Sales Account Manager<br> 銷售行政經理 / 主管 Sales Admin. Manager/Supervisor<br> 區域銷售經理 Regional Sales Manager<br> 店長 / 賣場經理 Store Manager<br> 銷售代表 Sales Representative / Executive<br> 電話銷售 Telesales<br> 經銷商 Distributor<br> 醫藥代表 Pharmaceutical Sales Representative<br> 銷售工程師 Sales Engineer<br> 售前 / 售後技術服務經理 Technical Service Manager<br> 售前 / 售後技術服務主管 Technical Service Supervisor<br> 售前 / 售後技術服務工程師 Technical Service Engineer<br> 售後 / 客服經理（非技術） Customer Service Manager<br> 售後 / 客服主管（非技術） Customer Service Supervisor<br> 售後 / 客服專員（非技術） Customer Service Executive<br> 銷售助理 Sales Assistant / Trainee<br> 商務專員 / 助理 Business Executive/Assistant</p>
<p> 市場 / 公關 / 廣告 Marketing/PR/Advertising<br> 市場 / 廣告總監 Marketing/Advertising Director/VP<br> 市場 / 行銷經理 Marketing Manager<br> 市場 / 行銷主管 Marketing Supervisor<br> 市場 / 行銷專員 Marketing Executive/Communication<br> 市場助理 Marketing Assistant / Trainee<br> 產品 / 品牌經理 Product/Brand Manager<br> 產品 / 品牌主管 Product/Brand Supervisor<br> 產品 / 品牌專員 Product/Brand Executive<br> 市場通路經理 / 主管 Trade Marketing Manager/Supervisor<br> 促銷經理 Promotion Manager<br> 促銷主管 / 督導 Promotion Supervisor<br> 促銷員 / 導購 Promotions Specialist<br> 市場分析 / 調研人員 Market Analyst/ Research Analyst<br> 公關 / 會務經理 Public Relations Manager<br> 公關 / 會務主管 Public Relations Supervisor<br> 公關 / 會務專員 Public Relations Executive<br> 媒介經理 Media Manager<br> 媒介人員 Media Specialist<br> 廣告客戶經理 Advertising Account Manager<br> 廣告客戶主管 / 專員 Advertising Account Supervisor/Executive<br> 廣告創意 / 設計經理 Advertising Creative/Design Manager<br> 廣告創意 / 設計主管 / 專員 Advertising Creative/Design Supervisor/Executive<br> 文案 / 策劃人員 Copy writer/Creative<br> 企業 / 業務發展經理 Business Development Manager<br> 企業策劃人員 Corporate Planning</p>
<p> 財務 / 審計 / 統計 Finance/Accounting<br> 財務總監 CFO/Finance Director/VP<br> 財務經理 Finance Manager<br> 財務主管 / 總帳主管 Finance Supervisor<br> 會計經理 / 會計主管 Accounting Manager/Supervisor<br> 會計 Accountant / Accounting Trainee<br> 出納員 Cashier<br> 財務 / 會計助理 Finance/Accounting Assistant<br> 財務分析經理 / 主管 Financial Analysis Manager/Supervisor<br> 財務分析員 Financial Analyst<br> 成本經理 / 成本主管 Cost Accounting Manager/Supervisor<br> 成本管理員 Cost Accounting Specialist<br> 審計經理 / 主管 Audit Manager/Supervisor<br> 審計專員 / 助理 Audit Executive/Assistant<br> 稅務經理 / 稅務主管 Tax Manager/Supervisor<br> 稅務專員 Tax Executive</p>
<p> 金融 / 保險 / 銀行 Banking &amp; Financial Services / Insurance<br> 證券 / 期貨 / 外匯經紀人 Stock Broker<br> 投資 / 理財顧問 Investment Advisor<br> 證券分析師 Securities Analyst<br> 投資 / 基金專案經理 Investment Manager<br> 融資經理 / 融資主管 Treasury Manager/Supervisor<br> 融資專員 Treasury Specialist<br> 行長 / 副行長 President/Vice-President/Branch Manager<br> 資產評估 / 分析 Assets Valuation/Analyst<br> 風險控制 Risk Management<br> 進出口 / 信用證結算 Trading / LC Officer<br> 清算人員 Settlement Officer<br> 外匯主管 Foreign Exchange Supervisor<br> 高級客戶經理 / 客戶經理 Senior Relationship Manager<br> 客戶主管 / 專員 Relationship Supervisor/Executive<br> 信貸 / 信用調查 / 分析人員 Loan/Credit Officer<br> 銀行櫃檯出納 Bank Teller<br> 統計員 Statistician<br> 銀行卡、電子銀行業務推廣 Credit Card/E-banking business Develop<br> 保險精算師 Actuary<br> 保險核保 / 理賠 Adjuster<br> 保險代理 / 財務規劃師 / 儲備經理人 Insurance Agent/Financial Planner<br> 保險內勤 Insurance Office Staff</p>
<p> 生產 / 製造 / 工程 Manufacturing/Engineering<br> 工廠經理 / 廠長 Plant/Factory Manager<br> 總工程師 / 副總工程師 Chief Engineer<br> 專案經理 / 主管 Project Manager/Supervisor<br> 專案工程師 Project Engineer<br> 營運經理 Operations Manager<br> 營運主管 Operations Supervisor<br> 生產經理 / 車間主任 Production Manager/Workshop Supervisor<br> 生產計畫協調員 Production Planning Executive/Officer<br> 生產主管 / 督導 / 領班 Production Supervisor/Team Leader<br> 技術研發經理 / 主管 Technical Design Mgr./Spvr.<br> 技術研發工程師 Technical Design Engineer<br> 產品 / 工藝工程師 Process Engineer<br> 實驗室負責人 / 工程師 Lab Manager/Engineer<br> 技術研發工程師 Technical Design Engineer<br> 產品 / 工藝工程師 Process Engineer<br> 實驗室負責人 / 工程師 Lab Manager/Engineer<br> 工程 / 設備經理 Engineering/Facility Manager<br> 工程 / 設備主管 Engineering/Facility Supervisor<br> 工程 / 設備工程師 Engineering/Facility Engineer<br> 電氣 / 電子工程師 Electrical/Electronics Engineer<br> 機械工程師 Mechanical Engineer<br> 模具工程師 Tooling Engineer<br> 機電工程師 Electrical &amp; Mechanical Engineer<br> 維修工程師 Maintenance Engineer<br> 品質 / 品保 / 測試經理 QA Manager<br> 品質 / 品保 / 測試主管 QA Supervisor<br> 品質 / 品保 / 測試工程師 QA Engineer<br> 品質檢驗員 / 測試員 QA Inspector<br> 認證工程師 / 審核員 Certification Engineer/Auditor<br> 安全 / 健康 / 環境經理 / 主管 Safety/Health/Environment Manager/Supervisor<br> 安全 / 健康 / 環境工程師 Safety/Health/Environment Engineer<br> 工程 / 機械繪圖員 Project Drafting Specialist/Mechanical Drawing<br> 化驗員 Laboratory Technician<br> 服裝打樣 / 製版 Clothing/Apparel Sample Production<br> 技工 Technician / Engineer Trainee<br> 鉗工 / 機修工 / 鈑金工 Locksmith/Mechanic/Repairer<br> 電焊工 / 鉚焊工 Electric Welding Worker<br> 車工 / 磨工 / 銑工 / 衝壓工 / 鑼工 Latheman/Grinder/Miller/Puncher/Turner<br> 模具工 Mould Worker<br> 電工 Electrician<br> 叉車工 Forklift Worker<br> 空調工 / 電梯工 / 鍋爐工 Air-Condition Worker/Lift Worker/Steam Worker<br> 水工 / 木工 / 油漆工 Plumber/Carpenter/Painter<br> 普工 General Worker<br> 裁剪車縫熨燙 Tailor<br> 汽車修理工 Auto Repairing</p>
<p> 人力資源 Human Resources<br> 人事總監 Human Resources Director<br> 人事經理 Human Resources Manager<br> 人事主管 Human Resources Supervisor<br> 人事專員 Human Resources Specialist<br> 人事助理 Human Resources Assistant<br> 招聘經理 / 主管 Recruiting Manager/Supervisor<br> 招聘專員 / 助理 Recruiting Specialist/Assistant<br> 薪資福利經理 / 主管 Compensation &amp; Benefits Mgr./Supervisor<br> 薪資福利專員 / 助理 Compensation &amp; Benefits Specialist/Assistant<br> 培訓經理 / 主管 Training Manager/Supervisor<br> 培訓專員 / 助理 Training Specialist/Assistant</p>
<p> 行政 / 後勤 Admin./Support Services<br> 行政總監 Admin Director<br> 行政經理 / 主管 / 辦公室主任 Admin Manager/Supervisor/Office Manager<br> 行政專員 / 助理 Admin Staff/Assistant<br> 經理助理 / 秘書 Executive Assistant/Secretary<br> 前臺接待 / 總機 Receptionist<br> 後勤 Office Support<br> 圖書管理員 / 資料管理員 Librarian / Information/Data Management Specialist<br> 電腦操作員 / 打字員 Computer Operator/Typist</p>
<p> 高級管理 Senior Management<br> 首席執行官 / 總經理 / 總裁 CEO/GM/President<br> 副總經理 / 副總裁 Deputy GM/Vice President<br> 總監 Director<br> 合夥人 Partner<br> 總裁助理 / 總經理助理 CEO/GM/President Assistant</p>
<p> 物流 / 貿易 / 採購 Logis./Trading/Merchand./Purch.<br> 物流經理 Logistics Manager<br> 物流主管 Logistics Supervisor<br> 物流專員 / 助理 Logistics Specialist/Assistant<br> 供應鏈經理 Supply Chain Manager<br> 供應鏈主管 / 專員 Supply Chain Supervisor/Specialist<br> 物料經理 Materials Manager<br> 物料主管 / 專員 Materials Supervisor/Specialist<br> 採購經理 Purchasing Manager<br> 採購主管 Purchasing Supervisor<br> 採購員 Purchasing Specialist/Staff<br> 外貿 / 貿易經理 / 主管 Trading Manager/Supervisor<br> 外貿 / 貿易專員 / 助理 Trading Specialist/Assistant<br> 業務跟單經理 Merchandiser Manager<br> 高級業務跟單 Senior Merchandiser<br> 業務跟單 Merchandiser<br> 助理業務跟單 Assistant Merchandiser<br> 倉庫經理 / 主管 Warehouse Manager<br> 倉庫管理員 Warehouse Specialist<br> 運輸經理 / 主管 Distribution Manager/Supervisor<br> 報關員 Customs Specialist<br> 單證員 Documentation Specialist<br> 船務人員 Shipping Specialist<br> 快遞員 Courier<br> 理貨員 Warehouse Stock Management</p>
<p> 文字 / 藝術 / 設計 Writer/Editor/Creative Artist/Designer<br> 編輯 / 作家 / 撰稿人 Editor/Writer<br> 記者 Journalist / Reporter<br> 校對 / 錄入 Proofreader/Data Entry Staff<br> 排版設計 Layout Designer<br> 出版 / 發行 Publishing/Distribution<br> 藝術 / 設計總監 Creative/Design Director<br> 導演 / 影視策劃 / 製作人員 Director/Entertainment Planning/Production<br> 攝影師 Photographer<br> 音效師 Recording / Sounds Specialist<br> 經紀人 / 星探 Entertainment Agent<br> 演員 / 模特 / 主持人 Actor/Actress/Model/MC<br> 平面設計 Graphic Artist/Designer<br> 動畫 / 遊戲 / 3D 設計 Animation/Game/3D Design<br> 陳列設計 / 展覽設計 Display/Exhibition Design<br> 紡織 / 服裝設計 Clothing / Apparel Designer<br> 工業 / 產品設計 Industrial Designer<br> 工藝品 / 珠寶設計鑑定 Artwork/Jewelry Design and Appraisal</p>
<p> 科研人員 Research Specialist Staff<br> 科研管理人員 Research Management<br> 科研人員 Research Specialist Staff<br> 律師 / 法務 Legal<br> 律師 / 法律顧問 Lawyer/Counselor<br> 法務 / 專利 Legal Personnel<br> 律師助理 / 法務助理 Paralegal/Legal Assistant</p>
<p> 教師 Professor/Teacher<br> 教師 ProfessorTeacher<br> 教學 / 教務管理人員 Education/School Administrator<br> 講師 / 助教 Lecturer/Teaching Assistant<br> 幼教 Preschool Education<br> 家教 Tutor</p>
<p> 醫療 / 護理 Medicine / Nursing<br> 醫生（中、西醫） Medical Doctor<br> 醫學管理人員 Healthcare / Medical Management<br> 醫藥技術人員 Medical Technician<br> 藥庫主任 / 藥劑師 Pharmacist<br> 藥品註冊 Pharmaceuticals Register Specialist<br> 護士 / 護理人員 Nurse / Nursing Personnel<br> 臨床協調員 Clinical Coodinator<br> 臨床研究員 Clinical Researcher<br> 麻醉師 Anesthesiologist<br> 心理醫生 Psychologist/Psychiatrist<br> 醫藥學檢驗 Clinical Laboratory<br> 針灸、推拿 Acupuncture and Moxibustion &amp; Naprapathy<br> 營養師 Dietitian<br> 獸醫 Veterinarian<br> 生物工程 / 生物製藥 Biotechnology/Pharmaceuticals<br> 其他 Others<br> 諮詢 / 顧問 Consultant<br> 專業顧問 Senior Consultant<br> 諮詢總監 Consulting Director / Partner<br> 諮詢經理 Consulting Manager<br> 諮詢員 Consultant</p>
<p> 公務員 Official<br> 在校學生 Student<br> 應屆畢業生 Graduating Student<br> 實習生 Intern/Trainee<br> 培訓生 / 儲備幹部 Trainee/Intern<br> 培訓生 / 儲備幹部 Trainee</p>
<p> 服務 Service<br> 美容 / 健身顧問 Exercise Coach/Fitness Trainer<br> 餐飲 / 娛樂管理 Banquet Services Management<br> 賓館 / 酒店經理 Reception Manager<br> 領班 Supervisor<br> 服務員 / 乘務員 Service Staff/Conductor<br> 營業員 / 收銀員 / 理貨員 Shop Clerk/Salesperson<br> 廚師 Chief/Cook<br> 導遊 / 旅行顧問 / 票務 Tour Guide/Travel Agent<br> 司機 Chauffeur/Driver<br> 保安 Security<br> 尋呼員 / 話務員 Paging Operator<br> 家政服務 Housekeeping<br> 拍賣師 Auction</p>
<p> 建築 / 房地產 Construction/Real Estate<br> 建築工程師 Architect<br> 結構 / 土建工程師 Structural Engineer<br> 電氣工程師 Electrical Engineer<br> 給排水 / 暖通工程師 Drainage/HVAC Engineer<br> 工程造價師 / 預結算 Budgeting Specialist<br> 建築工程管理 Construction Management<br> 工程監理 Engineering Project Supervisor<br> 室內外裝潢設計 Decorator<br> 城市規劃與設計 Urban Design/Planning<br> 園藝 / 園林 / 景觀設計 Gardenning Designer<br> 建築製圖 CAD Drafter<br> 施工員 Construction Crew<br> 房地產開發 / 策劃 Real Estate Development/Planning<br> 房地產評估 Real Estate Appraisal<br> 房地產仲介 / 交易 Real Estate Agent/Broker<br> 物業管理 Property Management</p>
<p> 翻譯 Translator<br> 英語翻譯 English Translation<br> 日語翻譯 Japanese Translator<br> 德語翻譯 German Translator<br> 法語翻譯 French Translator<br> 俄語翻譯 Russian Translator<br> 西班牙語翻譯 Spanish Translator<br> 朝鮮語翻譯 Korean Translator<br> 阿拉伯語翻譯 Arabic Translator<br> 其他語種翻譯 Other Language Translator<br> 其他 Others<br> 兼職 Part Time</p>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
      <tags>
        <tag>職位</tag>
        <tag>中英文對照表</tag>
      </tags>
  </entry>
  <entry>
    <title>jupyter notebook 闪退</title>
    <url>/2021/04/04/python%20jupyter-notebook%20crash/</url>
    <content><![CDATA[<h3 id="起始位置"><a href="# 起始位置" class="headerlink" title="起始位置"></a>起始位置 </h3><p> 查看 jupyter 快捷文件的属性里的快捷方式，修改 “目标” 里的目录或文件，看看有没有 % HOME%，有的话去掉再运行试试。可能是找不到目标目录或文件了。</p>
<h3 id="jupyter-notebook-config"><a href="#jupyter-notebook-config" class="headerlink" title="jupyter_notebook_config"></a>jupyter_notebook_config</h3><p>打开 C:\Users 用户名 .jupyter 中的 jupyter_notebook_config<br>更改 #c.NotebookApp.notebook_dir = ‘’<br><a href="https://blog.csdn.net/LawenceRay/article/details/88622610">https://blog.csdn.net/LawenceRay/article/details/88622610</a></p>
<p>如果没有设置文件，则在 Anaconda Prompt 终端输入：<br><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">$ jupyter notebook --<span class="keyword">generate</span>-<span class="keyword">config</span></span><br></pre></td></tr></table></figure></p>
<p>更改默认浏览器 <a href="https://hackmd.io/@lido2370/SkfHHh6er">https://hackmd.io/@lido2370/SkfHHh6er</a></p>
<h3 id="python- 文章总览"><a href="#python- 文章总览" class="headerlink" title="python 文章总览"></a>python 文章总览</h3><p><a href="https://wangxchun.github.io/2021/04/04/python%20jupyter-notebook%20crash/">jupyter notebook 闪退</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>jupyter notebook</tag>
        <tag>闪退</tag>
      </tags>
  </entry>
  <entry>
    <title>python 应用 --1.Linux 命令</title>
    <url>/2021/04/20/python-advance-1/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>python应用</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python 应用 --2.Linux 按照软件、python 开发环境</title>
    <url>/2021/04/20/python-advance-2/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>python应用</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python 应用 --3. 网络</title>
    <url>/2021/04/20/python-advance-3/</url>
    <content><![CDATA[<h3 id="一、网络介绍"><a href="# 一、网络介绍" class="headerlink" title="一、网络介绍"></a>一、网络介绍 </h3><h4 id="1- 网络通信概述"><a href="#1- 网络通信概述" class="headerlink" title="1. 网络通信概述"></a>1. 网络通信概述</h4><p> 网络通信：就是为了联通多方然后进行通信用的，即把数据从一方传递给另外一方。<br>使用网络能够把多方链接在一起，然后可以进行数据传递。<br>所谓的网络编程就是，让在不同的电脑上的软件能够进行数据传递，即进程之间的通信。</p>
<h4 id="2-IP- 地址"><a href="#2-IP- 地址" class="headerlink" title="2.IP 地址"></a>2.IP 地址</h4><p><img src="/2021/04/20/python-advance-3/photo1.png" alt> 数据机和交换机的功能后面会介绍。<br><img src="/2021/04/20/python-advance-3/photo2.png" alt> IP 地址分类：<br><span id="more"></span></p>
<h5 id="A- 类"><a href="#A- 类" class="headerlink" title="A 类"></a>A 类 </h5><p> 地址范围：1.0.0.1-126.255.255.254<br>默认子网掩码：255.0.0.0 或  0xFF000000<br>一般用于大型网络。</p>
<h5 id="B- 类"><a href="#B- 类" class="headerlink" title="B 类"></a>B 类 </h5><p> 地址范围：128.1.0.1-191.255.255.254<br>默认子网掩码：255.255.0.0<br>一般用于中等规模网络。</p>
<h5 id="C- 类"><a href="#C- 类" class="headerlink" title="C 类"></a>C 类 </h5><p> 地址范围：192.0.1.1-223.255.255.254<br>子网掩码：255.255.255.0<br>一般用于小型网络。<br>假设某个小型网的网络号是 192.168.33<br>则可以容纳 254 台电脑，192.168.33.1-192.168.33.255</p>
<h5 id="D- 类"><a href="#D- 类" class="headerlink" title="D 类"></a>D 类 </h5><p> 地址范围：224.0.0.1-239.255.255.254<br>一般用于多路广播用户。<br>单播、广播、多播</p>
<h5 id="E- 类"><a href="#E- 类" class="headerlink" title="E 类"></a>E 类 </h5><p> 以 “1111” 开始，为将来使用保留<br>E 类地址保留，仅作实验和开发用</p>
<h5 id="私有 -IP"><a href="# 私有 -IP" class="headerlink" title="私有 IP"></a>私有 IP</h5><p>在这么多网络 IP 中，国际规定有一部分 IP 地址是用于我们的局域网使用，也就 <br> 是属于私网 IP，不在公网中使用的，它们的范围是：<br>10.0.0.0～10.255.255.255<br>172.16.0.0～172.31.255.255<br>192.168.0.0～192.168.255.255</p>
<h5 id="注释"><a href="# 注释" class="headerlink" title="注释"></a>注释 </h5><p>IP 地址 127．0．0．1~127．255．255．255 用于回路测试，<br> 如：127.0.0.1 可以代表本机 IP 地址，用 <a href="http://127.0.0.1">http://127.0.0.1</a> 就可以测试本机中配置的 Web 服务器。<br>例如：ping 127.0.0.1 来测试本机 TCP/IP 是否正常，<br><a href="http://127.0.0.1:8080">http://127.0.0.1:8080</a> 等效于 <a href="http://localhost:8080">http://localhost:8080</a></p>
<h4 id="3-Linux、windows- 查看网卡信息"><a href="#3-Linux、windows- 查看网卡信息" class="headerlink" title="3.Linux、windows 查看网卡信息"></a>3.Linux、windows 查看网卡信息 </h4><h5 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h5><p>(1) 透过图形界面<br> 搜索控制面板 -&gt; 网络和 Internet-&gt; 以太网 -&gt; 详细信息 -&gt; 描述行信息 <br><img src="/2021/04/20/python-advance-3/photo3.png" alt>(2) 命令行<br>win + R: 打开运行<br> 输入 cmd<br>输入指令：ipconfig</p>
<h5 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h5><p>输入指令：ifconfig<br><img src="/2021/04/20/python-advance-3/photo4.png" alt> ens40 的 ip 是对外通信用的，lo 是本地测试用的 <br> 关闭网卡：ifconfig ens40 down<br>    ctrl+A：鼠标快速回到行首 <br>    ctrl+E：鼠标快速回到行末<br> 开启网卡：ifconfig ens40 up</p>
<h4 id="4- 端口"><a href="#4- 端口" class="headerlink" title="4. 端口"></a>4. 端口</h4><p>IP 用于区分不同的电脑，端口用于一台电脑内的不同进程 (进程是运行起来的程序)。</p>
<h5 id="端口是怎么分配的："><a href="# 端口是怎么分配的：" class="headerlink" title="端口是怎么分配的："></a>端口是怎么分配的：</h5><p>(1) 知名端口 <br> 知名端口是众所周知的端口号，范围从 0 到 1023<br>例如：80 端口分配给 HTTP 服务，21 端口分配给 FTP 服务 <br> 一般情况下，如果一个程序需要使用知名端口的需要有 root 权限。<br>(2) 动态端口 <br> 动态端口的范围是从 1024 到 65535<br>之所以称为动态端口，是因为它一般不固定分配某种服务，而是动态分配。<br>动态分配是指当一个系统程序或应用程序程序需要网络通信时，它向主机申请一个端口，主机从可用的端口号中分配一个供它使用。当这个程序关闭时，同时也就释放了所占用的端口号。<br>端口并不是一一对应的。比如你的电脑作为客户机访问一台 WWW 服务器时，WWW 服务器使用 “80” 端口与你的电脑通信，但你的电脑则可能使用 “3457” 这样的端口。</p>
<h5 id="怎样查看端口 -？"><a href="# 怎样查看端口 -？" class="headerlink" title="怎样查看端口 ？"></a>怎样查看端口 ？</h5><p>(1) windows 中使用 netstat -an 查看端口状态 <br>-a 显示所有连线 (active connection) 以及接听连接端口 (listen port)<br>-n 以数字形式显示地址与连接端口号<br>(2) linux 中使用 netstat -an 查看端口状态<br>-a (all) 显示所有连线中的 Socket<br>-n (numeric) 直接使用 IP 地址，而不通过域名服务器。<br>(3) linux 中使用 lsof 检查监听端口<br>lsof（list open files）是一个列出当前系统打开文件的工具。<br><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo</span> lsof -nP -iTCP -sTCP:LISTEN</span><br></pre></td></tr></table></figure>-n 不要将端口号转换为端口名称<br>-p 不解析主机名，显示数字地址<br> 要查找正在侦听特定端口（例如端口 3306）的进程，可以使用：<br><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo</span> lsof -nP -iTCP:<span class="number">3306</span> -sTCP:LISTEN</span><br></pre></td></tr></table></figure> 参考：<a href="https://www.myfreax.com/check-listening-ports-linux/">如何在 Linux 中检查侦听端口（正在使用的端口）</a></p>
<h4 id="5-Socket- 简介"><a href="#5-Socket- 简介" class="headerlink" title="5.Socket 简介"></a>5.Socket 简介</h4><p>socket (简称 套接字) 是进程间通信的一种方式，它与其他进程间通信的一个主要不同是：它能实现不同主机间的进程间通信。我们网络上各种各样的服务大多都是基于 Socket 来完成通信的，例如我们每天浏览网页、QQ 聊天、收发 email 等等。</p>
<h5 id="套接字使用流程与文件的使用流程很类似："><a href="# 套接字使用流程与文件的使用流程很类似：" class="headerlink" title="套接字使用流程与文件的使用流程很类似："></a>套接字使用流程与文件的使用流程很类似：</h5><p>(1) 创建套接字<br>(2) 使用套接字收 / 发数据<br>(3) 关闭套接字</p>
<h5 id="Python- 编程"><a href="#Python- 编程" class="headerlink" title="Python 编程"></a>Python 编程 </h5><p> 在 Python 中使用 socket 模块的函数 socket 就可以完成：<br><figure class="highlight livecodeserver"><figcaption><span>python</span></figcaption><table><tr><td class="code"><pre><span class="line">import <span class="built_in">socket</span></span><br><span class="line"><span class="built_in">socket</span>.<span class="built_in">socket</span> (AddressFamily, Type)</span><br><span class="line"><span class="comment"># ... 这里是使用套接字的功能（省略）...</span></span><br><span class="line">s.<span class="built_in">close</span> ()</span><br></pre></td></tr></table></figure> 说明：<br>函数 socket.socket 创建一个 socket，该函数带有两个参数：<br>(1) Address Family：可以选择 AF_INET（用于 Internet 进程间通信）或者 AF_UNIX（用于同一台机器进程间通信）, 实际工作中常用 AF_INET<br>(2) Type：套接字类型，可以是 SOCK_STREAM（流式套接字，主要用于 TCP 协议）或者 SOCK_DGRAM（数据报套接字，主要用于 UDP 协议）</p>
<h3 id="二、UDP- 网络编程"><a href="# 二、UDP- 网络编程" class="headerlink" title="二、UDP 网络编程"></a>二、UDP 网络编程 </h3><h4 id="发送数据的流程"><a href="# 发送数据的流程" class="headerlink" title="发送数据的流程"></a> 发送数据的流程</h4><p>(1) 创建套接字<br>(2) 发送数据<br>(3) 关闭</p>
<h4 id="接收数据的流程"><a href="# 接收数据的流程" class="headerlink" title="接收数据的流程"></a>接收数据的流程</h4><p>(1) 创建套接字<br>(2) 绑定本机的信息 (IP 和 port)<br>(3) 接收数据<br>(4) 关闭<br><figure class="highlight clean"><figcaption><span>python</span></figcaption><table><tr><td class="code"><pre><span class="line">#coding=utf<span class="number">-8</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">def main ():</span><br><span class="line">    # <span class="number">1.</span> 创建 udp 套接字</span><br><span class="line">    udp_socket = socket (AF_INET, SOCK_DGRAM)</span><br><span class="line"></span><br><span class="line">    # <span class="number">2.</span> 准备接收方的地址</span><br><span class="line">    # <span class="string">&#x27;192.168.1.103&#x27;</span> 表示目的 ip 地址</span><br><span class="line">    # <span class="number">8080</span> 表示目的端口</span><br><span class="line">    dest_addr = (<span class="string">&#x27;192.168.1.103&#x27;</span>, <span class="number">8080</span>)  # 注意 是元组，ip 是字符串，端口是数字</span><br><span class="line"></span><br><span class="line">    # <span class="number">3.</span> 从键盘获取数据</span><br><span class="line">    send_data = input (<span class="string">&quot; 请输入要发送的数据:&quot;</span>)</span><br><span class="line"></span><br><span class="line">    # <span class="number">4.</span> 发送数据到指定的电脑上的指定程序中</span><br><span class="line">    udp_socket.sendto (send_data.encode (<span class="string">&#x27;utf-8&#x27;</span>), dest_addr)</span><br><span class="line">    # udp_socket.sendto (b<span class="string">&quot;hahaha&quot;</span>, (<span class="string">&quot;192.168.33.53&quot;</span>, <span class="number">8080</span>))</span><br><span class="line">    # utf<span class="number">-8</span>：一种编码格式，支持全球的语言都有一个唯一的标记</span><br><span class="line"></span><br><span class="line">    # <span class="number">5.</span> 绑定本地的相关信息，如果一个网络程序不绑定，则系统会随机分配</span><br><span class="line">    local_addr = (<span class="string">&#x27;&#x27;</span>, <span class="number">7788</span>) </span><br><span class="line">    #  ip 地址和端口号，ip 一般不用写，表示本机的任何一个 ip，只能绑定本地的 IP</span><br><span class="line">    udp_socket.bind (local_addr)</span><br><span class="line"></span><br><span class="line">    # <span class="number">6.</span> 等待接收对方发送的数据</span><br><span class="line">    recv_data = udp_socket.recvfrom (<span class="number">1024</span>)  # <span class="number">1024</span> 表示本次接收的最大字节数</span><br><span class="line"></span><br><span class="line">    # <span class="number">7.</span> 显示对方发送的数据</span><br><span class="line">    # 接收到的数据 recv_data 是一个元组</span><br><span class="line">    # 第 <span class="number">1</span> 个元素是对方发送的数据</span><br><span class="line">    # 第 <span class="number">2</span> 个元素是对方的 ip 和端口</span><br><span class="line">    print (recv_data [<span class="number">0</span>].decode (<span class="string">&#x27;gbk&#x27;</span>)) # window 默认的编码是 gbk，英文不用编码</span><br><span class="line">    print (recv_data [<span class="number">1</span>])</span><br><span class="line">    # print (<span class="string">&quot;% s:% s&quot;</span> %(str (send_addr), rect_msg.decode (<span class="string">&quot;gbk&quot;</span>)) )</span><br><span class="line">    # recv_data 是一个元组 (接收到的数据，(发送方的 IP, 发送方的端口号))</span><br><span class="line">	</span><br><span class="line">    # <span class="number">8.</span> 关闭套接字</span><br><span class="line">    udp_socket.close ()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">	main ()</span><br></pre></td></tr></table></figure></p>
<h4 id="问题 -1"><a href="# 问题 -1" class="headerlink" title="问题 1"></a>问题 1</h4><figure class="highlight apache"><figcaption><span>python</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attribute">udp_socket</span>.sendto (b<span class="string">&quot;hahaha&quot;</span>, (<span class="string">&quot;192.168.33.53&quot;</span>, <span class="number">8080</span>))</span><br></pre></td></tr></table></figure>
<p>在字符串前面加上 b 可以转换成字节</p>
<h4 id="问题 -2"><a href="# 问题 -2" class="headerlink" title="问题 2"></a>问题 2</h4><p>结果：Network is unreachable，可以使用 ping 测试网路连接状态，真的无法连线。<br>因为双方不是在同一个网段内（看 IP 地址）。<br>Q：怎么解决？ A：网络连接改成桥接模式。<br>使用 sudo dhclient，等待分配 IP</p>
<h4 id="问题 -3"><a href="# 问题 -3" class="headerlink" title="问题 3"></a>问题 3</h4><p><img src="/2021/04/20/python-advance-3/photo5.png" alt> 如果报这个错，代表程序是用 python2 写的，而且有中文，所以要加上 #coding=utf-8<br>vim 编辑器编辑模式下，ctrl+N 可以自动补全</p>
<h4 id="聊天室实现"><a href="# 聊天室实现" class="headerlink" title="聊天室实现"></a>聊天室实现</h4><figure class="highlight kotlin"><figcaption><span>python</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">true</span>：</span><br><span class="line">    send_data = input (<span class="string">&quot; 请输入要发送的数据:&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> send_data == <span class="string">&quot;exit&quot;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    udp_socket.sendto (send_data.encode (<span class="string">&#x27;utf-8&#x27;</span>), dest_addr)</span><br></pre></td></tr></table></figure>
<h4 id="接收"><a href="# 接收" class="headerlink" title="接收"></a>接收 </h4><p> 如果一个程序运行起来，没有一个固定的端口，你是没办法给它发数据的。<br>当重新运行时，如果没有确定到底用哪个，系统默认会随机分配。<br>一般情况下，在一台电脑上运行的网络程序有很多，为了不与其他的网络程序占用同一个端口号，往往在编程中，udp 的端口号一般不绑定。但是如果需要做成一个服务器端的程序的话，是需要绑定的。</p>
<h4 id="注释 -1"><a href="# 注释 -1" class="headerlink" title="注释"></a>注释</h4><p>python3 file: 用 python3 运行 xxx.py<br>python3: 打开 python3 的交互模式，用来验证某些知识点<br>ipython3: 比 python3 交互模式高端的一种交互模式</p>
]]></content>
      <categories>
        <category>python应用</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>python4</title>
    <url>/2021/04/20/python-advance-4/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>python应用</category>
      </categories>
  </entry>
  <entry>
    <title>python 基础 - 1. 变量和程序流程（顺序、分支、循环）</title>
    <url>/2021/06/25/python-basic-1/</url>
    <content><![CDATA[<h3 id="一、变量"><a href="# 一、变量" class="headerlink" title="一、变量"></a>一、变量</h3><h4 id="1- 基本使用"><a href="#1- 基本使用" class="headerlink" title="1. 基本使用"></a>1. 基本使用</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输入苹果单价</span></span><br><span class="line">price_str = <span class="built_in">input</span> (<span class="string">&quot; 请输入苹果价格：&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入苹果重量</span></span><br><span class="line">weight_str = <span class="built_in">input</span> (<span class="string">&quot; 请输入苹果重量：&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算金额</span></span><br><span class="line">price = <span class="built_in">float</span> (price_str)  <span class="comment"># 将苹果单价转换成小数</span></span><br><span class="line">weight = <span class="built_in">float</span> (weight_str)  <span class="comment"># 将苹果重量转换成小数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算付款金额</span></span><br><span class="line">money = price * weight</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (money)</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>改进后<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输入苹果单价</span></span><br><span class="line">price_str = <span class="built_in">float</span> (<span class="built_in">input</span> (<span class="string">&quot; 请输入苹果价格：&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入苹果重量</span></span><br><span class="line">weight_str = <span class="built_in">float</span> (<span class="built_in">input</span> (<span class="string">&quot; 请输入苹果重量：&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算付款金额</span></span><br><span class="line">money = price * weight</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (money)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果输入的不是一个数字，程序执行时会出错，有关数据转换的高级话题，后续会写到</span></span><br></pre></td></tr></table></figure></p>
<h4 id="2- 变量的格式化输出"><a href="#2- 变量的格式化输出" class="headerlink" title="2. 变量的格式化输出"></a>2. 变量的格式化输出 </h4><p> 如果希望输出文字信息的同时，一起输出数据，就需要使用到格式化操作符 %<br>包含 % 的字符串，被称为格式化字符串 <br>% 和不同的字符连用，不同类型的数据需要使用不同的格式化字符<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"> 在控制台依次提示用户输入：姓名、公司、职位、电话、电子邮箱</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">name = <span class="built_in">input</span> (<span class="string">&quot; 请输入姓名：&quot;</span>)</span><br><span class="line">company = <span class="built_in">input</span> (<span class="string">&quot; 请输入公司：&quot;</span>)</span><br><span class="line">title = <span class="built_in">input</span> (<span class="string">&quot; 请输入职位：&quot;</span>)</span><br><span class="line">phone = <span class="built_in">input</span> (<span class="string">&quot; 请输入电话：&quot;</span>)</span><br><span class="line">email = <span class="built_in">input</span> (<span class="string">&quot; 请输入邮箱：&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;*&quot;</span> * <span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span> (company)</span><br><span class="line"><span class="built_in">print</span> ()</span><br><span class="line"><span class="comment"># 若是有多个变数要替换则使用 tuple 传递需要替代的内容值</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;% s % s&quot;</span> % (name, title)) </span><br><span class="line"><span class="built_in">print</span> ()</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot; 电话：% s&quot;</span> % phone)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot; 邮箱：% s&quot;</span> % email)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;*&quot;</span> * <span class="number">50</span>)</span><br></pre></td></tr></table></figure></p>
<h4 id="3- 变量的命名规则"><a href="#3- 变量的命名规则" class="headerlink" title="3. 变量的命名规则"></a>3. 变量的命名规则</h4><p>（1）每个单词都使用小写字母，单词与单词之间使用_下划线连接<br>（2）小驼峰式命名法：第一个单词以小写字母开始，后续单词的首字母大写<br>（3）大驼峰式命名法：每一个单词的首字母都采用大写字母</p>
<h3 id="二、标识符和关键字"><a href="# 二、标识符和关键字" class="headerlink" title="二、标识符和关键字"></a>二、标识符和关键字 </h3><h4 id="1- 标识符"><a href="#1- 标识符" class="headerlink" title="1. 标识符"></a>1. 标识符</h4><p> 标示符可以由字母、下划线和数字组成 <br> 不能以数字开头 <br> 不能与关键字重名</p>
<h4 id="2- 关键字"><a href="#2- 关键字" class="headerlink" title="2. 关键字"></a>2. 关键字 </h4><p> 通过以下命令可以查看 Python 中的关键字<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> keyword</span><br><span class="line"><span class="built_in">print</span> (keyword.kwlist)</span><br></pre></td></tr></table></figure></p>
<h3 id="三、"><a href="# 三、" class="headerlink" title="三、"></a>三、</h3><h4 id="1-if- 判断语句"><a href="#1-if- 判断语句" class="headerlink" title="1.if 判断语句"></a>1.if 判断语句 </h4><p> 注意：代码的缩进为一个 tab 键，或者 4 个空格 —— 建议使用空格 <br> 在 Python 开发中，Tab 和空格不要混用<br>if 语句以及缩进部分是一个 完整的代码块<br>if 和 else 语句以及各自的缩进部分共同是一个完整的代码块</p>
<h4 id="2- 隨機數的處理"><a href="#2- 隨機數的處理" class="headerlink" title="2. 隨機數的處理"></a>2. 隨機數的處理 </h4><p> 导入模块后，可以直接在模块名称后面敲一个。然后按 Tab 键，会提示该模块中包含的所有函数<br>random.randint (a, b) ，返回 [a, b] 之间的整数，包含 a 和 b</p>
<h4 id="3-while"><a href="#3-while" class="headerlink" title="3.while"></a>3.while</h4><h3 id="四、print"><a href="# 四、print" class="headerlink" title="四、print"></a>四、print</h3><h4 id="1- 换行"><a href="#1- 换行" class="headerlink" title="1. 换行"></a>1. 换行 </h4><p> 在默认情况下，print 数输出内容之后，会自动在内容末尾增加换行<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 向控制台输出内容结束之后，不会换行</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;*&quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="comment"># 单纯的换行</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure></p>
<h4 id="2- 字符串中的转义字符"><a href="#2- 字符串中的转义字符" class="headerlink" title="2. 字符串中的转义字符"></a>2. 字符串中的转义字符</h4><p>\t 在控制台输出一个制表符，协助在输出文本时垂直方向保持对齐<br>\n 在控制台输出一个换行符</p>
]]></content>
      <categories>
        <category>python基础</category>
      </categories>
  </entry>
  <entry>
    <title>python 基础 - 2.python 一些进阶操作</title>
    <url>/2021/06/25/python-basic-2/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="读取文件"><a href="# 读取文件" class="headerlink" title="读取文件"></a> 读取文件 </h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">file = <span class="built_in">open</span> (<span class="string">&quot;./pvuv.txt&quot;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> file.readlines ():</span><br><span class="line">    <span class="built_in">print</span> (line)</span><br><span class="line">file.close ()</span><br><span class="line"></span><br><span class="line">file = <span class="built_in">open</span> (<span class="string">&quot;./pvuv.txt&quot;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> file:</span><br><span class="line">    <span class="built_in">print</span> (line)</span><br><span class="line">file.close ()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span> (<span class="string">&quot;./pvuv.txt&quot;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fin:</span><br><span class="line">    <span class="built_in">print</span> (<span class="built_in">type</span> (fin))</span><br><span class="line"><span class="comment"># 输出：&lt;class &#x27;_io.TextIOWrapper&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span> (<span class="string">&quot;./pvuv.txt&quot;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fin:</span><br><span class="line">    <span class="built_in">print</span> (fin)</span><br><span class="line"><span class="comment"># 输出：&lt;_io.TextIOWrapper name=&#x27;./pvuv.txt&#x27; mode=&#x27;r&#x27; encoding=&#x27;utf-8&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span> (<span class="string">&quot;./pvuv.txt&quot;</span>) <span class="keyword">as</span> fin:</span><br><span class="line">    <span class="built_in">print</span> (fin)</span><br><span class="line"><span class="comment"># 输出：&lt;_io.TextIOWrapper name=&#x27;./pvuv.txt&#x27; mode=&#x27;r&#x27; encoding=&#x27;cp936&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span> (<span class="string">&quot;./pvuv.txt&quot;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fin:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> fin:</span><br><span class="line">        <span class="built_in">print</span> (<span class="built_in">type</span> (line))</span><br><span class="line"><span class="comment"># 输出：多行的 &lt;class&#x27;str&#x27;&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">datas = []</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span> (<span class="string">&quot;./pvuv.txt&quot;</span>) <span class="keyword">as</span> fin:</span><br><span class="line">    is_first_line = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> fin:</span><br><span class="line">        <span class="keyword">if</span> is_first_line:</span><br><span class="line">            is_first_line = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        datas.append (line [:-<span class="number">1</span>].split (<span class="string">&quot;\t&quot;</span>))</span><br><span class="line"><span class="comment"># 这里用 line [:-1] 是因为读取各行的时候会连换行符 &#x27;\n&#x27; 一起读取 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以这样处理 </span></span><br><span class="line">datas = []</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span> (<span class="string">&quot;./pvuv.txt&quot;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fin:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> fin:</span><br><span class="line">        <span class="built_in">print</span> (line [:].replace (<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>))</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">txt = <span class="string">&quot;Google#Runoob#Taobao#Facebook&quot;</span></span><br><span class="line"><span class="comment"># 第二个参数为 1，返回两个参数列表 </span></span><br><span class="line">x = txt.split (<span class="string">&quot;#&quot;</span>, <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span> x</span><br><span class="line"><span class="comment"># 输出：[&#x27;Google&#x27;, &#x27;Runoob#Taobao#Facebook&#x27;]</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python基础</category>
      </categories>
  </entry>
  <entry>
    <title>python 基础 - 3.Pandas 数据分析</title>
    <url>/2021/06/27/python-basic-3/</url>
    <content><![CDATA[<span id="more"></span>
<h3 id="一、使用 -Pandas- 的好处"><a href="# 一、使用 -Pandas- 的好处" class="headerlink" title="一、使用 Pandas 的好处"></a>一、使用 Pandas 的好处 </h3><p> 方便和 Python 其他类库一起使用<br>numpy：用于数学计算<br>scikit-learn：用于机器学习</p>
<h3 id="二、Pandas- 读取数据"><a href="# 二、Pandas- 读取数据" class="headerlink" title="二、Pandas 读取数据"></a>二、Pandas 读取数据</h3><h4 id="1- 读取方式"><a href="#1- 读取方式" class="headerlink" title="1. 读取方式"></a>1. 读取方式</h4><p>pd.read_csv<br>pd.read_excel<br>pd.read_sql</p>
<h3 id="三、Pandas- 数据结构：Dataframe- 和 -Series"><a href="# 三、Pandas- 数据结构：Dataframe- 和 -Series" class="headerlink" title="三、Pandas 数据结构：Dataframe 和 Series"></a>三、Pandas 数据结构：Dataframe 和 Series</h3>]]></content>
      <categories>
        <category>python基础</category>
      </categories>
  </entry>
  <entry>
    <title>python 基础 - 4.Matplotlib</title>
    <url>/2021/06/27/python-basic-4/</url>
    <content><![CDATA[<span id="more"></span>
]]></content>
      <categories>
        <category>python基础</category>
      </categories>
  </entry>
  <entry>
    <title>python 基础 - 5.Numpy 数据处理</title>
    <url>/2021/06/28/python-basic-5/</url>
    <content><![CDATA[<h3 id="Numpy- 和原生 -Python-list- 性能对比"><a href="#Numpy- 和原生 -Python-list- 性能对比" class="headerlink" title="Numpy 和原生 Python list 性能对比"></a>Numpy 和原生 Python list 性能对比 </h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">def <span class="title">numpy_sum</span> <span class="params">(n)</span>:</span></span><br><span class="line"><span class="function">	a =</span> np.<span class="built_in">arange</span> (n) ** <span class="number">2</span></span><br><span class="line">	b = np.<span class="built_in">arange</span> (n) ** <span class="number">3</span></span><br><span class="line">	<span class="keyword">return</span> a+b</span><br><span class="line"><span class="comment">// 调用函数后输出：array ([0,   2,  12,  36,  80, 150, 252, 392, 576, 810], dtype=int32)</span></span><br></pre></td></tr></table></figure><span id="more"></span>
<p> 原生 Python 中两个 list 相加不是对应元素相加，而是变成一个更大的 list</p>
]]></content>
      <categories>
        <category>python基础</category>
      </categories>
  </entry>
  <entry>
    <title>python-pachong</title>
    <url>/2021/07/03/python-pachong/</url>
    <content><![CDATA[<p><a href="https://www.codenong.com/cs106018741/">https://www.codenong.com/cs106018741/</a></p>
]]></content>
  </entry>
  <entry>
    <title>《给忙碌者的天文物理学》（Neil Tyson）</title>
    <url>/2022/01/13/quick-read-1/</url>
    <content><![CDATA[<h3 id="物理规律在全宇宙都适用"><a href="# 物理规律在全宇宙都适用" class="headerlink" title="物理规律在全宇宙都适用"></a>物理规律在全宇宙都适用 </h3><h4 id="牛顿万有引力是第一个宣称适用于整个宇宙的理论"><a href="# 牛顿万有引力是第一个宣称适用于整个宇宙的理论" class="headerlink" title="牛顿万有引力是第一个宣称适用于整个宇宙的理论"></a> 牛顿万有引力是第一个宣称适用于整个宇宙的理论 </h4><h4 id="每个化学元素的光谱都有自己唯一的特征"><a href="# 每个化学元素的光谱都有自己唯一的特征" class="headerlink" title="每个化学元素的光谱都有自己唯一的特征"></a> 每个化学元素的光谱都有自己唯一的特征 </h4><h4 id="宇宙起源于大爆炸 - 距今 -150- 亿年 - 这个奇点物理定理失效"><a href="# 宇宙起源于大爆炸 - 距今 -150- 亿年 - 这个奇点物理定理失效" class="headerlink" title="宇宙起源于大爆炸 (距今 150 亿年)(这个奇点物理定理失效)"></a> 宇宙起源于大爆炸 (距今 150 亿年)(这个奇点物理定理失效)</h4><p>普朗克时间 $10^{-34}$<br>-&gt; 四个作用力分开<br>-&gt; 夸克和轻子 (例如电子) 正反轻子的产生和湮灭<br>-&gt; 三个夸克被束缚成重子 (质子和中子) 正反重子的产生和湮灭<br>-&gt;100 秒 质子和中子结合成原子核 原子核<br>-&gt;38 万年 原子核捕获电子 形成原子<br>-&gt; 原子变成恒星 变成星系<br>-&gt; 很大的恒星在高温高压之下，可以生产一些更重的元素，这些恒星最后会爆炸，重元素被散布在整个宇宙之中<br>-&gt;90 亿年 太阳 地球<br>-&gt; 机缘巧合<br>Q：为什么大爆炸后宇宙温度会一直降低？<br>Q：大爆炸和上帝是矛盾的吗？</p>
<h4 id="宇宙微波背景辐射的温度预测是 -5K，实际测量出来是 -2-72K"><a href="# 宇宙微波背景辐射的温度预测是 -5K，实际测量出来是 -2-72K" class="headerlink" title="宇宙微波背景辐射的温度预测是 5K，实际测量出来是 2.72K"></a>宇宙微波背景辐射的温度预测是 5K，实际测量出来是 2.72K</h4><p>原子是在宇宙年龄 38 万年形成的<br>1948 年的时候，几个美国物理学家使用三个理论，预测了微波背景辐射的存在：<br>（1）1916 年爱因斯坦提出的广义相对论<br>（2）1929 年哈勃发现宇宙正在膨胀<br>（3）二战前后，美国为搞原子弹的曼哈顿计划中一系列原子物理实验结果</p>
<h3 id="物理学家不知道的事：暗物质和暗能量"><a href="# 物理学家不知道的事：暗物质和暗能量" class="headerlink" title="物理学家不知道的事：暗物质和暗能量"></a>物理学家不知道的事：暗物质和暗能量 </h3><p>1937 年的时候，天文学家 Fritz Zwicky 仔细观察了后发座星系团 (Coma Cluster)。<br> 中心提供的引力越大，能支持的旋转速度就越大。<br>暗物质的总质量，必须是已知物质总质量的 6 倍之多。<br>目前所有的仪器都测不到暗物质，物理学家知道的四种相互作用，暗物质很可能只参与引力，没有其他三种。<br>Q：普通物质有哪些作用力？</p>
<h3 id="宇宙有开始也有终结 - 终结是什么？"><a href="# 宇宙有开始也有终结 - 终结是什么？" class="headerlink" title="宇宙有开始也有终结 (终结是什么？)"></a>宇宙有开始也有终结 (终结是什么？)</h3><p>在广义相对论的引力场方程中的宇宙常数仅仅是为了让宇宙不膨胀而被爱因斯坦引入。<br>1929 年哈勃发现星系红移 -&gt; 宇宙正在膨胀 -&gt; 大爆炸理论的起源 -&gt; 爱因斯坦错过预测宇宙膨胀 -&gt; 删掉宇宙常数</p>
<p>早期的宇宙的膨胀速度到处都超过光速。而在现在遥远的星系离我们而去的速度也是超光速的。<br>这就意味着我们不可能看到它们，不管它们那里发生什么，我们都无法知道。<br>但是在引力的作用下，我们设想，宇宙的膨胀速度应该是越来越慢的。</p>
<p>用超新星亮度算的实际距离，比用宇宙膨胀历史算的距离远了 15%。<br>这就意味着，宇宙膨胀不但没有减速，而且还在加速。<br>物理学家就只好再把宇宙常数放回到爱因斯坦场方程中去，只不过它的数值得改，变成让宇宙加速膨胀。<br>那之前的问题就又回来了， 宇宙常数到底有什么物理意义呢？<br>物理学家现在解释不了，只好沿袭 “暗物质” 的命名传统，称之为 “暗能量”。<br>暗能量提供了一种真空中的斥力，但是它到底是什么样的物理机制，我们完全不知道。<br>物理学家计算，再过一万亿年，除了银河系以外，我们的天空中将再也看不到其他的星星。</p>
<h3 id="宇宙学视角"><a href="# 宇宙学视角" class="headerlink" title="宇宙学视角"></a>宇宙学视角 </h3><p> 矛盾：考虑到生命、甚至组成生命的每个粒子出现的概率之小，我们应该觉得自己特别幸运；可是考虑到宇宙之大，我们又觉得自己特别渺小。</p>
<h4 id="宇宙不因我们而存在"><a href="# 宇宙不因我们而存在" class="headerlink" title="宇宙不因我们而存在"></a>宇宙不因我们而存在 </h4><h4 id="宇宙跟每个人都有连接"><a href="# 宇宙跟每个人都有连接" class="headerlink" title="宇宙跟每个人都有连接"></a> 宇宙跟每个人都有连接 </h4><h4 id="眼光更长远，不要只看自己"><a href="# 眼光更长远，不要只看自己" class="headerlink" title="眼光更长远，不要只看自己"></a> 眼光更长远，不要只看自己 </h4><h4 id="要更谦卑，人格才会自由"><a href="# 要更谦卑，人格才会自由" class="headerlink" title="要更谦卑，人格才会自由"></a> 要更谦卑，人格才会自由</h4>]]></content>
      <categories>
        <category>主题书籍速读-天文和物理</category>
      </categories>
  </entry>
  <entry>
    <title>《时间简史》（Hawking）</title>
    <url>/2022/01/13/quick-read-2/</url>
    <content><![CDATA[<h3 id="霍金和英国数学家彭罗斯一起，证明了著名的 -“奇点定理”，这个理论跟广义相对论和宇宙膨胀有关"><a href="# 霍金和英国数学家彭罗斯一起，证明了著名的 -“奇点定理”，这个理论跟广义相对论和宇宙膨胀有关" class="headerlink" title="霍金和英国数学家彭罗斯一起，证明了著名的 “奇点定理”，这个理论跟广义相对论和宇宙膨胀有关"></a>霍金和英国数学家彭罗斯一起，证明了著名的 “奇点定理”，这个理论跟广义相对论和宇宙膨胀有关 </h3><p> 在 20 世纪之前，人们都以为宇宙是静止的，直到科学家发现红移和宇宙膨胀。<br>科学家在研究膨胀的宇宙模型时发现，在 150 亿年前，所有的星系之间的距离都是 0，<br>宇宙在当时是一个体积无限小，密度、弯曲程度、引力无限大的奇点。<br>霍金和彭罗斯用严谨的数学方法证明了，如果广义相对论是正确的，则宇宙必然诞生于这样的一个奇点。</p>
<h3 id="霍金提出了无边界的宇宙模型，这是对上帝的一次挑战"><a href="# 霍金提出了无边界的宇宙模型，这是对上帝的一次挑战" class="headerlink" title="霍金提出了无边界的宇宙模型，这是对上帝的一次挑战"></a>霍金提出了无边界的宇宙模型，这是对上帝的一次挑战 </h3><p> 宇宙诞生的那一刻，被称为 “大爆炸”，这个奇点，就叫大爆炸奇点。<br>宇宙大爆炸理论，是目前最主流的描述宇宙起源的模型。</p>
<p>奇点定理以及宇宙大爆炸模型的时候一直有一个前提：假设广义相对论是正确的 <br> 但是广义相对论是一个不完全的理论（在奇点失效），没有跟量子力学结合起来。</p>
<p>在广义相对论的基础上，宇宙只有两种可能，存在无限长的时间，或是有一个大爆炸奇点这样的开端。<br>但如果把量子力学引进来之后，就会出现一种新的可能：也就是一个 “有限无界” 的宇宙。</p>
<p>霍金的无边界宇宙模型里的宇宙，是一个空间和时间交织在一起所组成的四维宇宙。<br>在这个宇宙中，时空就像是地球的表面，在范围上是有限的，但却没有形成边界，也没有形成奇点。<br>时空上的每一个点，就跟地球上的某个点一样，没什么特别的，科学规律在任何一个时空点上都适用。</p>
<p>在无边界宇宙模型中，宇宙没有一个特别的奇点，也就不需要上帝来指定一个特殊的规律。</p>
<p>需要注意的是，霍金自己也特别强调，说无边界宇宙模型目前还只是一个设想。<br>试图将量子力学和相对论所结合起来的一种尝试，而且也是可以被检验的科学理论。</p>
<h3 id="霍金证明了黑洞也可以发出辐射，这种辐射就被称为 -“霍金辐射”"><a href="# 霍金证明了黑洞也可以发出辐射，这种辐射就被称为 -“霍金辐射”" class="headerlink" title="霍金证明了黑洞也可以发出辐射，这种辐射就被称为 “霍金辐射”"></a>霍金证明了黑洞也可以发出辐射，这种辐射就被称为 “霍金辐射”</h3><p>太阳内部温度很高，氢原子之间激烈碰撞，结合在一起形成氦原子，这个过程会释放出巨大的能量，会给太阳提供一个支撑的斥力。这么一来，当太阳的引力和支撑力相互平衡之后，恒星就可以保持稳定了。所以太阳至今也没有坍缩。</p>
<p>恒星的最终归宿，有好几种可能。如果恒星的质量较小，那它的引力就能跟内部粒子的斥力相平衡，最终变成中子星或者白矮星；但是，如果这颗恒星质量巨大，比一个半的太阳还大的话，那么它内部的任何斥力，都不足以抵消它的引力，这样的话，这颗恒星就会一直坍缩，变成质量极大，体积极小的黑洞。</p>
<p>黑洞吸引一切的性质，跟热力学第二定律产生了冲突。根据这条定律，黑洞也应该有温度，有温度的物体就会向外发出辐射和粒子，黑洞也不应该例外。但如果连光都逃不出黑洞的引力，那怎么可能有粒子能从黑洞里跑出来呢？这不就矛盾了吗？</p>
<p>利用量子理论，霍金成功地回答了这个问题：他发现，黑洞的确会发射出粒子，但这些粒子，并不是从黑洞里面跑出来的，而是从黑洞边缘的空虚的空间里，无中生有变出来的。</p>
<p>霍金辐射在物理学上，是一个极富价值的理论。因为黑洞的诞生，是利用广义相对论算出来的；黑洞的辐射，又跟量子力学有关。也就是说，霍金辐射是把广义相对论、量子力学、热力学结合起来的一次尝试，所以虽然霍金辐射目前没有被观测到，但仍然具有很高的理论价值。</p>
]]></content>
      <categories>
        <category>主题书籍速读-天文和物理</category>
      </categories>
  </entry>
  <entry>
    <title>黑洞简史（Marcia Bartusiak）</title>
    <url>/2022/01/13/quick-read-3/</url>
    <content><![CDATA[<p>黑洞理论和广义相对论的关系？</p>
<h3 id="黑洞理论发展"><a href="# 黑洞理论发展" class="headerlink" title="黑洞理论发展"></a>黑洞理论发展 </h3><p> 米歇尔：恒星质量够大，会把发射的光吸收回去，变成黑洞 -&gt; 被忽略</p>
<p>随着广义相对论的提出，爱因斯坦发现恒星会将光向自身的方向吸引。既然光线会被恒星吸引过来，德国的物理学家史瓦西就做出了一个大胆的猜想：如果有一个恒星的质量特别大，以至于它不仅仅是将光线 “稍微向自己弯曲”，而是把光线完全吸引到自己的势力范围内，从而使光线根本没有办法逃出去，那么这颗恒星不仅不会被外界看到，还会变成一个 “无底洞”，光和任何物质都只能进去，根本没有办法出来。-&gt; 被质疑</p>
<p>钱德勒・塞卡和奥本海默这两个重量级的物理学大师分别通过计算发现，恒星的质量如果足够大，那它在死亡的时候，会由于自身的引力过大，而不断地向内塌陷，最终形成一个质量无限大、体积无限小的黑洞。-&gt; 被攻击</p>
<p>到了 20 世纪 60 年代，随着射电望远镜的应用，物理学家第一次发现宇宙中居然真的存在密度比中子星还要大的天体时，才开始关注到黑洞的相关理论，并最终接受了黑洞的概念。-&gt; 被接收</p>
<p>-&gt; 在 1929 年的股市大跌之前，他将自己的所有资金转移到了安全的地方，这让他作为美国最富有的人之一。</p>
<h3 id="如何看到黑洞"><a href="# 如何看到黑洞" class="headerlink" title="如何看到黑洞"></a>如何看到黑洞 </h3><h4 id="X- 射线"><a href="#X- 射线" class="headerlink" title="X 射线"></a>X 射线</h4><p> 捕捉黑洞在吞食恒星过程中向外发射出的 X 射线</p>
<p>恒星的物质在靠近黑洞的时候，并不是直接掉进去，而是由于黑洞的旋转，也开始旋转起来，并且越往黑洞靠拢，旋转的速度也越大，以至于在靠近黑洞视界的时候，物质旋转的速度会接近光速。如果这些旋转的物质受到了某种干扰，它就有机会从垂直的方向被发射出去。黑洞附近的干扰确实太多了，比如黑洞强大的磁场就是这样的一种干扰源。当一个黑洞在吞食其他恒星的时候，会由于自身的磁场而发射出大量 X 射线。正是通过这样的方式，科学家 “看到” 了黑洞。</p>
<h4 id="引力波"><a href="# 引力波" class="headerlink" title="引力波"></a>引力波</h4><p>2016 年的时候，科学家发布消息，人类第一次探测到引力波的存在，这样的引力波是由两个黑洞合并造成的。</p>
<p>随着广义相对论的提出，爱因斯坦发现恒星会将光向自身的方向吸引。</p>
]]></content>
      <categories>
        <category>主题书籍速读-天文和物理</category>
      </categories>
  </entry>
  <entry>
    <title>平行宇宙（加来道雄）</title>
    <url>/2022/01/14/quick-read-4/</url>
    <content><![CDATA[<h3 id="M- 理论是如何从无到有，一步步地发展成人类最前沿物理学理论的"><a href="#M- 理论是如何从无到有，一步步地发展成人类最前沿物理学理论的" class="headerlink" title="M 理论是如何从无到有，一步步地发展成人类最前沿物理学理论的"></a>M 理论是如何从无到有，一步步地发展成人类最前沿物理学理论的 </h3><h4 id="弱电理论 - 标准模型"><a href="# 弱电理论 - 标准模型" class="headerlink" title="弱电理论 标准模型"></a> 弱电理论 标准模型 </h4><p> 虽然爱因斯坦没能构建起万物理论，但他为物理学界打开了视野，所以后来的学者都能朝这条路努力。比如 20 世纪 60 年代，美国物理学家史蒂文・温伯格等人成功地把四种基本力中的两种，也就是把弱核力和电磁力，用弱电理论统一起来，他们也因此获得了诺贝尔物理学奖。</p>
<p>7 年之后，科学家们又进一步，他们提出了一个叫做 “标准模型” 的新理论，这个理论统一了电磁力、弱核力和强核力，也就是说除了引力之外，统一了四种力中的三种。到目前为止，标准模型能满足所有关于粒子物理学的实验数据，按理来说也算是挺成功了，但科学家们却很不满意，因为标准模型有很大问题，那就是它本身特别奇怪。比如，为了符合实验数据，模型里有人为放进去的 19 个参数，而这些参数本身没有任何理由和意义，所以这个模型看起来就像是修修补补拼凑出来的。再加上标准模型并没有把引力统一进去，所以它也不是科学家们想要追求的万物理论。</p>
<h4 id="弦论"><a href="# 弦论" class="headerlink" title="弦论"></a>弦论 </h4><p> 同样是 20 世纪 60 年代，意大利物理学家韦内齐亚诺和同事创立了一种叫做弦论的物理理论，就是我们刚才提到的弦论。为什么叫弦论呢？因为这个理论认为，所有的微观粒子，比如电子和中微子，本质上都是空间中一根根微小的弦通过振动产生的，因为弦具有不同的振动状态，所以粒子才会出现不同的种类。这个弦有多小呢？科学家们规定，它的长度是物理学能允许存在的最小长度，用术语说就是一个普朗克长度，大约有 $1.6 \times 10^{-33}$ 厘米这么小。</p>
<h4 id="M- 理论"><a href="#M- 理论" class="headerlink" title="M 理论"></a>M 理论 </h4><p> 科学家们就发现了弦论的形式其实不止有一种，而是多达五种，这五种形式不同的弦论都自成一体，能自圆其说。这就让科学家们很困惑，他们没法解释为什么宇宙中会有五种弦论，再加上其他种种问题，科学家们逐渐意识到弦论还有着重大的理论缺陷。</p>
<p>直到 1994 年，美国物理学家 Edward Witten 等人才从数学角度做出了重大突破。他们发现，我们其实可以用一种更包罗万象的理论来把五种不同的弦论统一在一起，而这种包罗万象的理论就是 M 理论。M 理论的突破之处就在于，它可以利用数学方法，用五种方式来演算，变幻成五种不同的弦论，所以它实质上就是五种弦论的统一体，这样就能解决弦论的理论缺陷了。</p>
<h3 id="M- 理论和其他各种推论是怎么支持平行宇宙存在猜想的"><a href="#M- 理论和其他各种推论是怎么支持平行宇宙存在猜想的" class="headerlink" title="M 理论和其他各种推论是怎么支持平行宇宙存在猜想的"></a>M 理论和其他各种推论是怎么支持平行宇宙存在猜想的 </h3><h4 id="M- 理论的数百万个方程解"><a href="#M- 理论的数百万个方程解" class="headerlink" title="M 理论的数百万个方程解"></a>M 理论的数百万个方程解</h4><p> 所以有越来越多的科学家认为，如果我们没有办法给弦论的方程式找到一个独一无二的解，那干脆就别费这个劲儿了，因为所有的解可能都是对的，每个解都对应着一个平行宇宙。</p>
<h4 id="暗物质"><a href="# 暗物质" class="headerlink" title="暗物质"></a>暗物质 </h4><p> 因为 M 理论推导出，引力可以穿越时空的界限，抵达其他的宇宙空间，也就是说，平行宇宙中的星系产生的引力，可以抵达我们的宇宙，从而被我们观测到，所以我们虽然看不到其他宇宙中的星系，但是却能通过观察它们产生的引力，间接地发现它们的存在，这就是暗物质的来源。</p>
<h4 id="Andrei-Linde"><a href="#Andrei-Linde" class="headerlink" title="Andrei Linde"></a>Andrei Linde</h4><p>从哲学的角度来看，如果我们认为宇宙是通过某种过程产生的，那这种过程就没理由只发生一次，所以作者说，只要我们承认一个宇宙可以被创造出来，那我们就几乎要被迫承认，无限多个平行宇宙也可以被创造出来。</p>
<h4 id="Martin-John-Rees"><a href="#Martin-John-Rees" class="headerlink" title="Martin John Rees"></a>Martin John Rees</h4><p>生命的诞生条件是很苛刻的，而我们的宇宙恰好满足能产生生命的所有条件，那这就不应该只是一个巧合，我们也不应该把它当成一个巧合。要想解释这个现象，就最好假定存在着无数个宇宙，在这么多宇宙里，大多数都不具备产生生命的条件。</p>
<h3 id="为什么说平行宇宙很可能是人类的最终归宿"><a href="# 为什么说平行宇宙很可能是人类的最终归宿" class="headerlink" title="为什么说平行宇宙很可能是人类的最终归宿"></a>为什么说平行宇宙很可能是人类的最终归宿 </h3><h4 id="世界末日"><a href="# 世界末日" class="headerlink" title="世界末日"></a> 世界末日 </h4><p> 目前，宇宙大爆炸理论，是人类所有关于宇宙演化的理论中最被科学家们认可的一个。大爆炸理论猜想的是，宇宙是从一个叫做奇点的无限小的点爆炸而来的，奇点爆炸之后就一直在不断膨胀，一直过了 137 亿年才形成了今天我们所看到的宇宙，而且这个膨胀的过程一直还在持续着。目前科学家们还没法确定，这个膨胀的进程是会一直持续下去，还是有一天会停止。</p>
<p>世界末日可能会有两种形式：第一种是，宇宙会像现在一样继续膨胀，而且无限膨胀下去，最后所有生物灭亡；<br>(1) 宇宙中所有发光发热的恒星，我们可以把它们类比成煤球，虽然可以点着，但总有一天会熄灭<br>(2) 热力学第二定律 -&gt; 降温</p>
<p>第二种是，宇宙有一天会停止膨胀，然后开始收缩，进行一个大爆炸的反向过程，最后宇宙里所有的物质都会收缩到一个点上，然后同样的，所有生物都会灭亡。</p>
<h4 id="哪些方法延续文明"><a href="# 哪些方法延续文明" class="headerlink" title="哪些方法延续文明"></a>哪些方法延续文明 </h4><p> 俄罗斯物理学家尼古拉・卡尔达舍夫，曾经就提出过宇宙中智慧文明等级的分类方法，他把文明分成三等，用罗马数字的 Ⅰ、Ⅱ、Ⅲ 来标记。Ⅰ 类文明指的是能掌握行星级别能量的文明；Ⅱ 类文明则可以掌握一颗恒星的能量；Ⅲ 类文明指的是能掌握一整个星系所包含能量的文明。每类文明和更低一等级文明之间的差距约为 100 亿倍。人类文明目前还达不到 Ⅰ 类文明的水平，因为我们还不能随心所欲地掌握地球上的所有能量。科学家们估算，人类文明目前只能算是 0.7 类文明，而只有达到 Ⅲ 类文明时，我们可能才会拥有逃离这个宇宙的能力。</p>
<p>先让我们乐观地假设，人类还可以安全快速地发展很长很长时间，最终达到 Ⅲ 类文明，那如果有一天未来人类铁了心，要趁宇宙灭亡前离开我们这个宇宙，那还必须经过一系列的步骤。</p>
<p>第一步，未来人类要创立一个万物理论。这个理论肯定要能解释宇宙中一切的基本现象，然后还需要用先进技术对这个理论进行验证，这样他们就能弄清楚很多方案的可行性了，比如怎么打开通往另一个宇宙的时空隧道。第二步，进入时空隧道或者制造一个新宇宙。未来人类可以通过先进的技术找到宇宙中自然存在的时空隧道，甚至可以自己制造出来时空隧道，这样就能前往其他的平行宇宙。或者人类也可以自己创造一个平行宇宙，因为到那时候，人类说不定就掌握了主动引发宇宙大爆炸的能力，可以在自己身边再造一个宇宙。第三步，如果刚刚说的所有路都被堵死，未来人类发现自己确实没有办法进行宇宙间的穿越，那唯一的出路可能就是再造文明了。霍金认为，根据量子理论的原理，如果物体的尺寸足够小的话，那这个物体就有可能进行时空穿越。如果未来人类能把自己的文明信息放到一个特别小的载体上，那或许就能让自己文明的信息穿越到另一个宇宙空间，这样一来，承载着人类文明种子的载体，也可以肩负起重担，在平行宇宙中再造人类文明。</p>
<p>Q：为什么想延续文明，这是哪种哲学思想？</p>
<p>美国物理学家 Steven Weinberg 曾经说过，“人生是场闹剧，只有为数不多的几件事可以让人生变得略有意义，努力认识宇宙便是其中之一，可以让人生带上一点悲剧性的色彩。” 中国的苏轼也有云，“寄蜉蝣于天地，渺沧海之一粟。</p>
]]></content>
      <categories>
        <category>主题书籍速读-天文和物理</category>
      </categories>
  </entry>
  <entry>
    <title>quick-read-5</title>
    <url>/2022/01/14/quick-read-5/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>《仿生人会梦见电子羊吗》</title>
    <url>/2022/01/15/quick-read-kehuan-1/</url>
    <content><![CDATA[<h3 id="仿生人的悲剧"><a href="# 仿生人的悲剧" class="headerlink" title="仿生人的悲剧"></a>仿生人的悲剧 </h3><p> 外在环境的压力迫使人类文明趋向于创造出超越人类自身能力的造物，并把它们作为工具，而随着造物不断接近人类本体，双方必然产生无法调和的矛盾冲突。</p>
<h3 id="仿生人悲剧的必然"><a href="# 仿生人悲剧的必然" class="headerlink" title="仿生人悲剧的必然"></a>仿生人悲剧的必然 </h3><p> 人类必然需要为自己的造物上一层保险，限制它们的超级能力反过来危害人类，但同时这种限制成为检验人性善恶的一面镜子，将引起人类文明伦理道德基准的反思与动摇。</p>
<p>工具必然会接近并超越人类 vs 工具天然处于被支配地位 人类对工具严格限制<br>-&gt; 矛盾造成悲剧</p>
<h3 id="推论与现实对照"><a href="# 推论与现实对照" class="headerlink" title="推论与现实对照"></a>推论与现实对照 </h3><h4 id="追求强大工具的客观现实必要性"><a href="# 追求强大工具的客观现实必要性" class="headerlink" title="追求强大工具的客观现实必要性"></a> 追求强大工具的客观现实必要性 </h4><p> 这篇小说的设定里，作者采用了一个近未来后启示录背景，也就是《圣经》中启示录的末日预警之后。这种设定在科幻小说里很常见，巨大的灾难比如核战争，毁掉了地球，人类进入了极端残酷的生存环境。这样设定带来最重要的点，就是故事中的人类面临的生存压力非常大。在巨大的压力下，各种东西都会被推到极端，很多温情脉脉的面纱都会揭掉，露出最残忍的人性本性来。</p>
<p>我们可以对应地看一下现实，推动工具快速进步的主要是人类永远无法满足的欲望。地球人口有七十亿，2004 年的时候，地球生态报告警告人类消耗已经超出了地球负荷。光是维持人类的食物供应，农药，化肥，杂交育种，辐射育种，很多技术在争议中快速发展。如果停下来，我们可能就无法供养人类的生活。在这一点上，我们本质和小说中巨大的生存压力并无区别。</p>
<h4 id="工具能力向人类逼近，直到超越人类"><a href="# 工具能力向人类逼近，直到超越人类" class="headerlink" title="工具能力向人类逼近，直到超越人类"></a>工具能力向人类逼近，直到超越人类 </h4><h4 id="工具处于支配地位"><a href="# 工具处于支配地位" class="headerlink" title="工具处于支配地位"></a> 工具处于支配地位 </h4><h4 id="所以必须严格限制出厂条件"><a href="# 所以必须严格限制出厂条件" class="headerlink" title="所以必须严格限制出厂条件"></a> 所以必须严格限制出厂条件 </h4><h4 id="必然产生矛盾"><a href="# 必然产生矛盾" class="headerlink" title="必然产生矛盾"></a> 必然产生矛盾 </h4><h3 id="人类为何同情仿生人"><a href="# 人类为何同情仿生人" class="headerlink" title="人类为何同情仿生人"></a> 人类为何同情仿生人 </h3><p> 约翰・罗尔斯在《正义论》里提出过一个重要的概念，叫 “无知之幕”。这个概念提出一种原则，来实现社会政策的正义公正。无知之幕的意思是，当选择社会政策的时候，每个选择的人都应该删除自己是什么身份地位出身的记忆，以 “无知” 的方式进行选择。比如选择应不应该保留黑人奴隶制度的时候，你不知道自己是黑人还是白人。选择买卖妇女是不是合法的时候，你不知道自己是男人还是女人。</p>
<p>这个无知之幕，立在一个基础上，就是 “我们” 拥有对等的能力和智慧，我们相信白人和黑人、男人和女人在幸福和痛苦上是平等的，一方感受到的东西，另一方也能感受到。所以我们能真切地 “同情” 到对方。你不能跟龙虾、跟带鱼一起披上无知之幕，因为你们在能力、智慧和感知上不可能平等。</p>
<p>但是当人类创造出来的工具越来越接近我们，在能力上越来越平等的时候，不管他们是 AI、机器人还是仿生人，我们总有一天能和他们一起披上无知之幕。当我们披上无知之幕，我们就能明白，我们对仿生人命运悲剧的同情，本质是希望避免自己有一天也遭遇同样的悲剧。</p>
<p>Q：为什么创造的工具外表要无限逼近人？？</p>
]]></content>
      <categories>
        <category>主题书籍速读-科幻</category>
      </categories>
  </entry>
  <entry>
    <title>西方古典文学 -《神曲》（但丁）</title>
    <url>/2022/01/16/quick-read-wenxue-1/</url>
    <content><![CDATA[<h3 id="介绍"><a href="# 介绍" class="headerlink" title="介绍"></a>介绍 </h3><h4 id="作者"><a href="# 作者" class="headerlink" title="作者"></a> 作者 </h4><p> 但丁</p>
<ul>
<li>中世纪伟大诗人</li>
<li>文艺复兴的先驱</li>
<li>意大利语之父</li>
</ul>
<p>如果说西方文学史的殿堂只能保留两个名字，那只能是但丁和莎士比亚。但丁对后世的影响极为深远，我们中国的文化进程也深受其影响。比如，他曾激励戊戌变法失败后的梁启超，让在日本留学的鲁迅看到了用语言凝聚民族的希望，而发起 “白话文运动” 的胡适，效仿的正是但丁对意大利语的创造和革新。</p>
<p>但丁是用他惊人的原创力征服世界的。他发明了意大利语。但丁出生于 1265 年的意大利，当时意大利并不是一个统一的国家，只是一个地理概念。当时的欧洲通用语是拉丁文，各地老百姓说的语言被称为 “俗语”，英语、法语、意大利语，都是俗语。文人著书立说用的都是拉丁文，因为这种语言被认为是神圣和不朽的。拉丁文和俗语的关系，很像我们新文化运动前文言文和白话文的关系。</p>
<h4 id="作品"><a href="# 作品" class="headerlink" title="作品"></a>作品</h4><p>《神曲》</p>
<ul>
<li>一部百科全书式作品</li>
<li>一册不朽诗篇</li>
</ul>
<p>简单地说，《神曲》写的是神游三界的故事：朝圣者但丁在人生旅途上迷失了，陷入了一片黑暗森林，找不到出路，这时，罗马大诗人维吉尔出现了，他和一个叫贝亚特丽斯的圣女带领但丁游历了地狱、炼狱和天堂，最终见到了上帝。</p>
<p>几个世纪以来，几乎每个重视教育的西方家庭中都有一本《神曲》，一般来说都是多雷的版画插图珍藏版，孩子们从小就阅读甚至背诵它，被其中或可怖或怪诞或恢宏的景象所征服。但其实，它实在是一本极为复杂的书。它是一部百科全书式作品，囊括了中世纪所有的人文知识，有着把整个宇宙囊括进去的野心。它写了一百多个人物，从地狱一路铺到天堂，这一百多个灵魂的故事，贯穿了从古希腊罗马到但丁生活的中世纪尾页的历史人物、神话人物、文学人物和与但丁同时代的真实人物。</p>
<h3 id="创作神曲的原动力"><a href="# 创作神曲的原动力" class="headerlink" title="创作神曲的原动力"></a>创作神曲的原动力 </h3><h4 id="贝亚特丽斯是最重要的事"><a href="# 贝亚特丽斯是最重要的事" class="headerlink" title="贝亚特丽斯是最重要的事"></a> 贝亚特丽斯是最重要的事 </h4><p> 美德美人 -&gt; 精神苦恋 -&gt; 私人神话 -&gt; 永恒纪念</p>
<h4 id="被佛罗伦萨放逐开始流亡"><a href="# 被佛罗伦萨放逐开始流亡" class="headerlink" title="被佛罗伦萨放逐开始流亡"></a>被佛罗伦萨放逐开始流亡 </h4><p> 政治斗争 -&gt; 放逐流亡 -&gt; 独特观点 -&gt; 创作史诗</p>
<p>那时候，流亡是对一个人最严厉的惩罚。因为在中世纪的观念中，一个人在城邦里占据的位置是他最重要的东西，不能占有城市中的一个位置，就意味着你什么也不是。这对一个致力于世俗生活的普通人来说是惩罚，但对一个诗人来说却是一种幸福。</p>
<p>开始流亡后，但丁彻底抛弃了忠于哪种党派的观念，开始拥有自己的独特观点。他开始了语言上的研究，试图找到一个统一的、可以综合所有意大利语言的可能，来描述以君主帝国来统一世界的必要性。他开始继续写作《神曲》，他的生命也因此重新绽放。这一次，他的创作从早年私人的爱情神话变成了属于公众的神话、史诗和百科全书。</p>
<h3 id="神曲开篇"><a href="# 神曲开篇" class="headerlink" title="神曲开篇"></a>神曲开篇 </h3><p> 古罗马最伟大的诗人罗吉尔，他的灵活作为但丁的导师</p>
<p>神曲是有韵的诗，开篇的韵脚是由 vita（也就是 “生命” 这个词）和 smarrita（也就是 “迷失”）所构成的，故事的开局就是 “迷失的生命”。主人公是朝圣者但丁，一个迷途的普通人，而叙述者是全知全能的作者但丁，我们必须把这两者区分开。按照当时人对寿命的理解，人的寿命最长大约 70 岁，那么人生的中途就是 35 岁，一个容易产生中年危机的年龄。</p>
<p>开篇有一系列象征和用典。黑暗森林象征人类精神世界的种种罪恶和过失，也指当时的意大利社会的腐败和党派之争。三只猛兽来源于圣经中的典故，在《启示录》中代表 “反基督”，因为豹子（lonza）、狮子（leone）、狼（lupa）的意大利文都以字母 “l” 开头，这正是魔鬼路西法（Lucifer）名字的起首字母。豹象征的是肉欲和享乐，在政治上指的是将但丁驱逐出去的佛罗伦萨，狮子象征野心和强权，在政治上指法兰西国王出兵意大利，母狼象征贪欲，在政治上指的是贪婪的罗马教皇。在《地狱篇》第 2 歌中，但丁借维吉尔之口预言说，一只猎犬将成为意大利的救星，将象征贪欲的母狼赶回地狱，这只猎犬以 “智慧、爱和美德” 为食，指的是当时但丁给予厚望的君主：神圣罗马帝国的皇帝亨利七世。</p>
<p>你看，这里的象征都是具有双重含义的，既是在说人生面临的困境，也是在说意大利面临的困境，而但丁的写作意图也是双重的，他要讲述自己摆脱人性的诱惑，走出人生困境的旅程，也希望意大利能扫除罪恶，得到拯救。其实，《神曲》讲述的就是但丁在流亡期间，游走在不同城市之间，作为一个旁观者，深刻地发现意大利的真正问题所在的故事，他讲述自己对这个四分五裂的世界的认知，告诉人们如何才能齐心协力，从分裂走向整合。</p>
<h3 id="朝圣者但丁的新三界"><a href="# 朝圣者但丁的新三界" class="headerlink" title="朝圣者但丁的新三界"></a>朝圣者但丁的新三界 </h3><h4 id="地狱"><a href="# 地狱" class="headerlink" title="地狱"></a> 地狱 </h4><p> 地狱最外围的一层叫灵泊，limbo，这里漂浮着古代圣贤的灵魂，其中有哲学家苏格拉底、诗人荷马，还有但丁诗歌上的老师维吉尔等等。你可能要问，他们有什么罪呢？</p>
<p>按照但丁的神学观念，古代圣贤生活在基督诞生之前，当然不可能有基督教信仰，所以，他们不能得到救赎，永远悬在半空，地狱不罚他们，天堂也不要他们。正像维吉尔说的，他们既不期盼，也不等候，不抱希望地存在着。所以，这其实也是一种惩罚，因为这种状态就是被放逐。但丁对灵泊的创造很可能来源于自己被放逐的经历。不同的是，但丁始终是怀有希望的。如今 limbo 早已成为一个常用词，用来指这种边缘和放逐的状态。比如电影《盗梦空间》中的 limbo，“迷失域”，指的就是潜意识的边缘，一种没有构建、没有秩序、仅有潜意识投射的状态。人一旦进入到这里，就会忘了自己在做梦，也忘了时间，这无疑是一种放逐。</p>
<p>我们再沿着《神曲》中的地狱往下走。真正的地狱开始于第二圈，这里住着色欲场中的灵魂，在狂风中飘荡；第三圈是犯了饕餮罪的，躺在臭雨冰雹之下，第四圈是贪婪浪费者，永远推着重物上山，互相冲撞；第五圈是愤怒者，他们的灵魂在死的河里争斗。地狱前五圈的罪基本对应的是 “七宗罪”：骄傲，妒忌，愤怒，懒惰，贪财，贪吃，贪色，第五圈之下是 “下层地狱”，这里的罪出自但丁的原创，因此分类也更详细。第六圈是不信灵魂存在的邪教徒。第七圈是残暴者，包括对他人施暴的人和对自己施暴的人也就是自杀者，以及对上帝残暴的人和对自然残暴的人等等。但丁的老师拉蒂尼就被安排在这一圈，学者认为，但丁给老师安排的罪名不太有说服力，他这么安排很可能只是为了凸显自己在道德上比老师更高尚。第八圈是欺诈者，包括但丁痛恨的贪官污吏、伪君子等，著名的尤利西斯的灵魂也在这里。第九圈是一个冰湖，罪人都冰冻在里面，中心是万恶所归的魔王路西法，就是撒旦。</p>
<p>爱欲问题是西方文化的关键词之一，很多学者认为，爱欲问题也是但丁的 “全部问题”。这里的爱是希腊语 Eros 也就是 “爱欲” 的爱，它是一种生命动力，类似于 “力比多” 和 “自由意志”。</p>
<p>在但丁心里，狂妄的求知欲是一种很深的罪。作为一个百科全书式的求知者，但丁是矛盾的。一方面，他像笔下的尤利西斯一样，想要穷尽一切知识，另一方面，按照他的信仰，求知欲始于过度的好奇，来自人对超越自身限度的善的渴望，而这种渴望是一种傲慢，傲慢是最深的罪。在圣经故事中，人类的始祖亚当夏娃正是因为过度的好奇而吃下智慧树的果子，有了原罪。对未知世界，正确的态度是保持几分审慎和谦卑。</p>
<h4 id="炼狱"><a href="# 炼狱" class="headerlink" title="炼狱"></a>炼狱 </h4><p> 炼狱是一座山，形状跟地狱正相反，像一个倒立的漏斗，加上净界山和地上乐园，也是 9 层，越往上越接近天堂。炼狱的灵魂犯下的也是七宗罪，但跟地狱的灵魂不同的是，他们知道忏悔，还有得救的希望。</p>
<p>如果说《地狱篇》展示的是各种堕落的爱，《炼狱篇》展示的就是人用自由意志对爱欲的纠正，对爱之罪的医治。自由意志是《炼狱篇》重点讨论的关键词。</p>
<h4 id="天堂"><a href="# 天堂" class="headerlink" title="天堂"></a>天堂</h4><p>《天堂篇》所展示的，是爱的完满状态，这里居住着幸福的灵魂，他们是行善者、虔诚的教士、为信仰而战死的英雄、哲学家和神学家、正直的君主，基督和天使。</p>
<p>宇宙运转的真理 - 爱 <br> 这种爱，是基督教中的仁爱（caritas），或者说信仰之爱。</p>
<p>爱的完满状态就是兼具人性与神性，调和了尤利西斯的求知之爱，维吉尔的理智之爱，贝亚特丽斯的信仰之爱的状态。这就是但丁关于爱的理想，是他对自己灵魂进阶的要求，也是他为纷乱的人世间开出的药方。</p>
<h3 id="延伸阅读 -《月亮与六便士》-《千面英雄》-《荷马史诗》"><a href="# 延伸阅读 -《月亮与六便士》-《千面英雄》-《荷马史诗》" class="headerlink" title="延伸阅读 《月亮与六便士》 《千面英雄》 《荷马史诗》"></a>延伸阅读 《月亮与六便士》 《千面英雄》 《荷马史诗》</h3>]]></content>
      <categories>
        <category>主题书籍速读-文学</category>
      </categories>
  </entry>
  <entry>
    <title>查拉图斯特拉如是说（尼采）</title>
    <url>/2022/01/14/quick-read-zhexue-1/</url>
    <content><![CDATA[<p>弗里德里希・尼采（Friedrich Nietzsche, 1844-1900），德国哲学家、古典学家，19 世纪的天才思想家之一。尼采 24 岁当上大学教授，34 岁因病退休，44 岁精神崩溃，在 20 年的写作生涯中，创作了大量批判基督教和理性主义的著作（如《悲剧的诞生》《快乐的科学》《道德的谱系》《善恶的彼岸》《偶像的黄昏》《查拉图斯特拉如是说》《敌基督者》等），堪称西方哲学和宗教传统尖锐的批判者，对 20 世纪的思想史产生了深远的影响。</p>
<h3 id="查拉图斯特拉是谁？"><a href="# 查拉图斯特拉是谁？" class="headerlink" title="查拉图斯特拉是谁？"></a>查拉图斯特拉是谁？</h3><h4 id="历史上的查拉图斯特拉是古代波斯的一个先知，创立了一个宗教"><a href="# 历史上的查拉图斯特拉是古代波斯的一个先知，创立了一个宗教" class="headerlink" title="历史上的查拉图斯特拉是古代波斯的一个先知，创立了一个宗教"></a>历史上的查拉图斯特拉是古代波斯的一个先知，创立了一个宗教 </h4><p> 查拉图斯特拉这个波斯语的名字在希腊语里对应的是琐罗亚斯德，他创立的那个宗教在西方就叫作 “琐罗亚斯德教”，也被称为 “拜火教”。这种宗教曾经是波斯帝国的国教，在南北朝时期就传到了中国，被称为 “祆教”，或者 “火祆教”。</p>
<h4 id="尼采为什么借用查拉图斯特拉德名字来写这本书"><a href="# 尼采为什么借用查拉图斯特拉德名字来写这本书" class="headerlink" title="尼采为什么借用查拉图斯特拉德名字来写这本书"></a>尼采为什么借用查拉图斯特拉德名字来写这本书 </h4><p>(1) 尼采德代言人 -&gt; 尼采把自己看作先知，预示自己来带给人类思想文化的革命<br>(2) 批判时代的弊病 -&gt; 诊断西方文化的危机（当时东方主义，人们对东方有好感，因此采用东方来对照）<br>(3) 开辟新的思想 -&gt; 反对宗教的恶劣影响<br> 尼采认为，查拉图斯特拉创立的宗教虽然在东方，但是对西方哲学中的柏拉图主义和基督教都产生了深远的影响，开创了西方人关注道德和关注来世的传统，而这正是尼采要重点反对的，因此他在著作中复活了查拉图斯特拉，让这位创始人去反对由他开创的宗教给世界带来的恶劣影响。</p>
<p>这是尼采所有作品里唯一一部用戏剧化的方式呈现的，他记载了查拉图斯特拉的思想和谈话，也记录了这位先知精神上的成长，读起来很有点 “成长小说” 的味道。</p>
<h3 id="他都说了什么重要的事情？"><a href="# 他都说了什么重要的事情？" class="headerlink" title="他都说了什么重要的事情？"></a>他都说了什么重要的事情？</h3><h4 id="上帝死了：揭示虚无主义的真相（骆驼）"><a href="# 上帝死了：揭示虚无主义的真相（骆驼）" class="headerlink" title="上帝死了：揭示虚无主义的真相（骆驼）"></a>上帝死了：揭示虚无主义的真相（骆驼）</h4><p>尼采说上帝死了，并且是我们杀死了上帝，意思是随着自然科学、历史学、社会学、人类学、宗教学等等学科的发展，越来越多的人意识到上帝只不过是人类的发明，世界进入了一个世俗化的时代，或者用马克斯・韦伯（Maximilian Weber）的话说，世界被 “祛魅”（Disenchantment）了。而当人们意识到上帝只不过是人类的发明，没有真正的神圣性，更没有任何实质性的力量时，自然也就不再相信上帝了，这就相当于杀死了上帝。而且尼采认为，这个科学化和世俗化的进程看起来是不可逆转的，因此他会说，上帝彻底死了，“再也活不过来了”。</p>
<h4 id="超人：克服虚无主义的智慧（狮子）"><a href="# 超人：克服虚无主义的智慧（狮子）" class="headerlink" title="超人：克服虚无主义的智慧（狮子）"></a>超人：克服虚无主义的智慧（狮子）</h4><p>尼采高声向人们宣告：“所有的神都死了，现在我们要让超人活起来！”<br>尼采的 “超人” 学说非常有名，英语里的超人 superman 就是从翻译尼采的德文词 Übermensch 来的。</p>
<p>那尼采心目中的 “超人” 想要实现什么目标呢？他的目标只有一个，那就是尼采心目中一切生命体的本质：权力意志。在这里尼采受到了叔本华的影响，叔本华认为这个世界的本质是 “生存意志”，也就是要活下去的意志。尼采接受了意志作为世界的本质，但是反对叔本华说的生存意志，尼采认为权力意志才是更加根本的动机。一切生物，不管是植物还是动物，都以扩大或增加自己的力量作为生存的目标，这就是生命的意志本身。而那些强调谦卑、关注来世的哲学和宗教，都是对生命本身的否定。所以尼采的 “超人” 学说，就是让人关注身体、关注大地、关注今生，现实地提高自己在各方面的力量，而不是把希望寄托在道德这种内在的要求，或者天国、来生之类虚幻的前景上。</p>
<p>理解了尼采的 “超人” 学说，我们也就可以理解《查拉图斯特拉如是说》那个谜一般的副标题了。尼采为什么说这本书既是写给所有人的，又不是写给任何人的呢？说它 “为所有人而写”，是因为只要一个人能够听懂尼采的教导，走上自我超越的道路，这本书就是为他而写的，这是对每个人都成立的人生理想。说它 “不为任何人而写”，是因为尼采主张的这种自我超越，说起来容易，做起来却很难。</p>
<h4 id="永恒轮回：拥抱永恒轮回的超人（小孩）"><a href="# 永恒轮回：拥抱永恒轮回的超人（小孩）" class="headerlink" title="永恒轮回：拥抱永恒轮回的超人（小孩）"></a>永恒轮回：拥抱永恒轮回的超人（小孩）</h4><p>“永恒轮回” 带来了比 “上帝之死” 更大的虚无，给前面说的通过自我超越创造意义的学说狠狠地泼了一盆冷水，把那个努力超越自己的 “超人” 重新推回到了虚无之中。认识到永恒轮回，让尼采笔下的查拉图斯特拉也经历了一场严重的精神危机。他整整三天不吃、不喝、不睡，也不跟人说话。</p>
<p>查拉图斯特拉精神上的最终成熟，正是通过这场精神危机实现的。经过长时间的思考，他转换了视角，把永恒轮回看作检验自己是否真的接受了 “超人” 学说的试金石，因为真正的 “超人” 就是要坦然接受永恒轮回，甚至要热情拥抱这个可怕的真理，然后将它也一起克服掉。真正的 “超人” 明明知道整个世界是被决定的，一切都会重演，但是依然勇敢坚毅地生活下去，依然努力地超越自己，拥抱在每一个当下实现出来的美好，每一个当下展现出来的力量。这才是尼采心目中，人对虚无主义取得的最终胜利。</p>
<p>加缪的小说《西西弗斯的神话》。西西弗斯因为冒犯了诸神，被罚每天推一块大石头上山，他每次费尽力气把石头推山上之后，石头就会自己滚下来，然后西西弗斯就要再次把它推山上，周而复始。这个驴拉磨一样的工作看起来毫无意义，就像尼采说的永恒轮回。但是在加缪笔下，西西弗斯勇敢地面对命运的荒谬，为自己赢得了意义，这正是尼采那里真正的 “超人” 所做的事情。</p>
<h3 id="影响"><a href="# 影响" class="headerlink" title="影响"></a>影响 </h3><p> 在哲学方面，尼采被称为 “存在主义之前的存在主义者”，他对虚无主义和人生意义的深刻反思，启发了海德格尔、雅思贝尔斯、加缪这些存在主义者。进入 20 世纪六七十年代，尼采又在法国思想界掀起了第二波的浪潮，形成了一个所谓的 “法国尼采学派”，巴塔耶、福柯、德勒兹、德里达都是《查拉图斯特拉如是说》的深度粉丝，他们从里面发展出了反本质主义、反理性主义、解构主义的思想。</p>
<p>在心理学方面，19 世纪末到 20 世纪上半叶最重要的三位心理学家弗洛伊德、阿德勒和荣格都深受《查拉图斯特拉如是说》的影响，荣格还在好几年里专门开课讲过这本书。他们看到了尼采对人类心理细致入微的观察，还有对人类心灵力量的肯定。</p>
<p>《查拉图斯特拉如是说》对当代文学和艺术的影响更是惊人的，它被誉为 19 世纪末 20 世纪初 “新艺术运动” 的 “圣经”。这本书里展现的革命精神，解放了人类心灵里面的隐秘力量，让艺术家们大胆地反对 19 世纪的现实主义和自然主义，开启了象征主义、表现主义、意识流、蒙太奇等等一系列的文学艺术观念，诗人霍夫曼施塔尔、里尔克、叶芝，小说家托马斯・曼、黑塞、纪德、乔伊斯、普鲁斯特，剧作家布莱希特、萧伯纳，作曲家马勒和理查・施特劳斯都深受它的影响。特别值得一提的是，理查・施特劳斯创作了题为《查拉图斯特拉如是说》的交响诗，这部交响诗的开篇非常著名，用辉煌灿烂的音响表现了旭日东升，查拉图斯特拉离开自己的山洞，与太阳对话的场景，听起来让人有种灵魂飞升的震撼。这段音乐也被用在了很多影视作品里，其中最有名的大概就是库布里克的电影《2001 太空漫游》了。</p>
]]></content>
      <categories>
        <category>主题书籍速读-哲学</category>
      </categories>
  </entry>
  <entry>
    <title>robomaster 机械 (1) 兵种机器人介绍</title>
    <url>/2021/10/27/robomaster-1-1/</url>
    <content><![CDATA[<p>【一句话规则】在 5 种机器人的配合下，发射弹丸互怼，7 分钟内率先摧毁敌方基地就胜利<br><img src="/2021/10/27/robomaster-1-1/photo1.jpg" alt="2019 赛季比赛场地"></p>
<h3 id="一、步兵机器人"><a href="# 一、步兵机器人" class="headerlink" title="一、步兵机器人"></a>一、步兵机器人</h3><p><img src="/2021/10/27/robomaster-1-1/photo2.png" alt="2019 赛季比赛场地"></p>
<h4 id="1- 主要功能"><a href="#1- 主要功能" class="headerlink" title="1. 主要功能"></a>1. 主要功能 </h4><p> 步兵机器人灵活小巧，一般负责游走偷家、围殴敌方机器人。<br>主要组成：发射结构 、云台 架 、车架 、 轮组系统 、 外壳。<br><span id="more"></span></p>
<h3 id="二、英雄机器人"><a href="# 二、英雄机器人" class="headerlink" title="二、英雄机器人"></a>二、英雄机器人</h3><p><img src="/2021/10/27/robomaster-1-1/photo3.jpg" alt="2019 赛季比赛场地"></p>
<h3 id="三、工程机器人"><a href="# 三、工程机器人" class="headerlink" title="三、工程机器人"></a>三、工程机器人</h3><p><img src="/2021/10/27/robomaster-1-1/photo4.png" alt="2019 赛季比赛场地"></p>
<h4 id="1- 主要功能 -1"><a href="#1- 主要功能 -1" class="headerlink" title="1. 主要功能"></a>1. 主要功能</h4><p>(1) 为英雄机器人提供大弹丸（需要上岛取弹）<br>(2) 救援阵亡机器人</p>
<h4 id="2-2019- 新规则"><a href="#2-2019- 新规则" class="headerlink" title="2.2019 新规则"></a>2.2019 新规则 </h4><p> 相比于 RoboMaster2018 总决赛规则，2019 总决赛的规则有如下变化：<br>(1) 英雄机器人不再具备取弹功能。意味着工程机器人成为唯一能够获取大弹丸的机器人，且只有完成交接以后英雄机器人才具有输出能力。这要求工程机器人的取弹与供弹能力足够稳定，否则队伍将陷入没有任何大弹丸的局面。<br>(2) 资源岛上方的大弹丸由两方共享，可以互相抢夺。意味着工程机器人的上岛与取弹速度至关重要，需要互相比拼。<br>(3) 基地不再具有无敌状态。意味着队伍将倾向于采取进攻态势，机器人阵亡数量大幅上升，因此工程机器人的救援能力是维持有生力量的重要保证。<br>(4) 工程机器人阵亡后具有自动复活能力。意味着机器人即使被击杀也能够迅速复活，队伍仍具有大弹丸供应与救援的能力。这要求机器人性能稳定，重心低，决不能造成整体翻倒或卡死的局面。否则，机器人将会真正意义上地 “阵亡”。</p>
<h4 id="3- 上岛方案"><a href="#3- 上岛方案" class="headerlink" title="3. 上岛方案"></a>3. 上岛方案 </h4><p> 在 2018 总决赛中，工程机器人的取弹方案基本相同，而上岛方式则有多种主流方案，需要进行竞品分析。<br>上岛方案主要分为四种：<br>(1) 抱柱方案，以华南理工大学为代表<br>(2) 月球车方案，以哈尔滨工业大学为代表<br>(3) 伸缩腿方案，以中国矿业大学为代表<br>(4) 升降架方案，以深圳大学为代表。</p>
<h3 id="四、哨兵机器人"><a href="# 四、哨兵机器人" class="headerlink" title="四、哨兵机器人"></a>四、哨兵机器人 </h3><h3 id="五、无人机"><a href="# 五、无人机" class="headerlink" title="五、无人机"></a> 五、无人机 </h3><h3 id="六、飞镖（2020- 新增）"><a href="# 六、飞镖（2020- 新增）" class="headerlink" title="六、飞镖（2020 新增）"></a> 六、飞镖（2020 新增）</h3><h3 id="七、雷达站（2020- 新增）"><a href="# 七、雷达站（2020- 新增）" class="headerlink" title="七、雷达站（2020 新增）"></a>七、雷达站（2020 新增）</h3>]]></content>
      <categories>
        <category>大学比赛-robomaster</category>
      </categories>
  </entry>
  <entry>
    <title>robomaster 机械 (1) 常见机构</title>
    <url>/2021/11/06/robomaster-1-2/</url>
    <content><![CDATA[<h3 id="一、常见的弹丸发射机构"><a href="# 一、常见的弹丸发射机构" class="headerlink" title="一、常见的弹丸发射机构"></a>一、常见的弹丸发射机构 </h3><h4 id="1- 弹弓"><a href="#1- 弹弓" class="headerlink" title="1. 弹弓"></a>1. 弹弓</h4><h4 id="2- 摩擦轮（robomaster- 采用）"><a href="#2- 摩擦轮（robomaster- 采用）" class="headerlink" title="2. 摩擦轮（robomaster 采用）"></a>2. 摩擦轮（robomaster 采用）</h4><p> 比赛开始后，步兵机器人需要发射 17mm 的弹丸攻击地方装甲 <br> 步兵机器人的发射机构主要由：(1) 弹仓 (2) 摩擦轮 (3) 供弹链路 组成 <br> 通过拨盘旋转，弹丸到达输弹孔，由于重力因素落入发弹管中，<br>接触到两个高速反转的摩擦轮后，被摩擦轮产生的合力挤出发射口<br><img src="/2021/11/06/robomaster-1-2/photo1.jpg" alt></p>
<h4 id="3- 水弹发射机构"><a href="#3- 水弹发射机构" class="headerlink" title="3. 水弹发射机构"></a>3. 水弹发射机构 </h4><p> 供给端主要由弹仓和发弹装置组成，实现原理是在拨弹装置底部安装一个弹簧和拨弹杆相连 <br> 发射端主要由驱动电机、波箱 (变速箱)、活塞发射机构 (有两级活塞) 组成 <br> 波箱 (变速箱)：通过三级齿轮改变为适用于活塞发射机构的速度，同时通过半齿轮连接活塞的直齿 <br> 可以类比成注射器注射液体的过程<br><span id="more"></span></p>
<h3 id="二、麦克纳姆轮平移原理"><a href="# 二、麦克纳姆轮平移原理" class="headerlink" title="二、麦克纳姆轮平移原理"></a>二、麦克纳姆轮平移原理 </h3><p> 有 A (向前和向左)、B (向后和向右) 两种轮子 <br>4 个轮子总共有 16 中组合，有些是正确的，有些是错误的<br> 正确的例如 ABAB，例如当 A 轮反转，B 轮正转的时候，车子会向右 <br> 每个轮子的运动方向往往是不一样的，所以每个麦轮都需要一个单独的电机来驱动，还需要一套控制系统</p>
<h3 id="三、"><a href="# 三、" class="headerlink" title="三、"></a>三、</h3><h4 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h4><h4 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h4><h4 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h4>]]></content>
      <categories>
        <category>大学比赛-robomaster</category>
      </categories>
  </entry>
  <entry>
    <title>robomaster 电控 (2) 常见模块</title>
    <url>/2021/10/27/robomaster-2-1/</url>
    <content><![CDATA[<h3 id="一、PID- 控制器"><a href="# 一、PID- 控制器" class="headerlink" title="一、PID 控制器"></a>一、PID 控制器 </h3><h4 id="1- 开环控制系统 - 无反馈 - 和闭环控制系统 - 有反馈"><a href="#1- 开环控制系统 - 无反馈 - 和闭环控制系统 - 有反馈" class="headerlink" title="1. 开环控制系统 (无反馈) 和闭环控制系统 (有反馈)"></a>1. 开环控制系统 (无反馈) 和闭环控制系统 (有反馈)</h4><h3 id="二、挨打反击"><a href="# 二、挨打反击" class="headerlink" title="二、挨打反击"></a> 二、挨打反击 </h3><h4 id="1- 什么是挨打反击"><a href="#1- 什么是挨打反击" class="headerlink" title="1. 什么是挨打反击"></a>1. 什么是挨打反击</h4><p> 当机器人的装甲板收到攻击后，机器人能够迅速转向受攻击侧 <br> 并持续转动底盘向目标发起反击</p>
<h4 id="2- 装甲板的分布位置和工作原理（位于地盘的 -4- 个和位于云台的两个）"><a href="#2- 装甲板的分布位置和工作原理（位于地盘的 -4- 个和位于云台的两个）" class="headerlink" title="2. 装甲板的分布位置和工作原理（位于地盘的 4 个和位于云台的两个）"></a>2. 装甲板的分布位置和工作原理（位于地盘的 4 个和位于云台的两个）</h4><span id="more"></span>
]]></content>
      <categories>
        <category>大学比赛-robomaster</category>
      </categories>
  </entry>
  <entry>
    <title>robomaster 视觉 (1) 概述</title>
    <url>/2021/10/27/robomaster-3-1/</url>
    <content><![CDATA[<p>机器人的视野中出现视觉标签的时候，机器人的云台会迅速瞄准视觉标签的中心同时发射弹丸 <br> 当视觉标签在视野中移动的时候，云台会跟着移动</p>
<h3 id="一、基础"><a href="# 一、基础" class="headerlink" title="一、基础"></a>一、基础</h3><h4 id="1- 各个兵种需的功能和需要的视觉算法"><a href="#1- 各个兵种需的功能和需要的视觉算法" class="headerlink" title="1. 各个兵种需的功能和需要的视觉算法"></a>1. 各个兵种需的功能和需要的视觉算法</h4><h4 id="2- 计算平台的选择"><a href="#2- 计算平台的选择" class="headerlink" title="2. 计算平台的选择"></a>2. 计算平台的选择</h4><div class="table-container">
<table>
<thead>
<tr>
<th>名字</th>
<th>说明</th>
<th>特点</th>
</tr>
</thead>
<tbody>
<tr>
<td>NUC</td>
<td>英特尔推出的移动便携式计算平台</td>
<td>CPU 强劲，但是 GPU 比较弱，同时 nuc 体积较小</td>
</tr>
<tr>
<td>minipc</td>
<td>继承 NUC 的传统，但是体积更加小，同时更轻便</td>
<td>CPU 继承 NUC，GPU 根据每个厂商的情况，结构一般为定制盒装的，成本比偏高</td>
</tr>
<tr>
<td>工控机</td>
<td>这种一般为实验室使用的低成本高效益的计算平台，一般用于工厂之类的</td>
<td>CPU 可能要略差于 NUC 和 minipc，但是够用，体积英特尔系列中最小的也是最轻的，同时散热性出众，成本较低</td>
</tr>
<tr>
<td>Jetson TX2</td>
<td>英伟达推出的计算平台，主要应用于人工智能与图像处理等方面</td>
<td>在同等价格上，CPU 比较弱。GPU 强劲，体格较小，安装在机器人时需要自己定制外壳，成本较高</td>
</tr>
<tr>
<td>妙算</td>
<td>DJI 所推出的机载计算机，主要应用在无人机上面</td>
<td>机载计算集群，CPU 较弱，GPU 较强（继承了 Jetson TX2 的性能），同性能上，成本是最高的（6999￥不打折的话）</td>
</tr>
</tbody>
</table>
</div>
<p><a href="https://blog.csdn.net/whl970831/article/details/103152735?utm_medium=distribute.pc_relevant.none-task-blog-title-2&amp;spm=1001.2101.3001.4242">Robomaster 计算平台的选型与感想（主流几款）</a><br><span id="more"></span></p>
<h4 id="3-Linux- 基础"><a href="#3-Linux- 基础" class="headerlink" title="3.Linux 基础"></a>3.Linux 基础 </h4><h5 id="1-Linux- 命令行的基本操作"><a href="#1-Linux- 命令行的基本操作" class="headerlink" title="(1) Linux 命令行的基本操作"></a>(1) Linux 命令行的基本操作</h5><h5 id="2- 撰写 -Shell- 脚本"><a href="#2- 撰写 -Shell- 脚本" class="headerlink" title="(2) 撰写 Shell 脚本"></a>(2) 撰写 Shell 脚本</h5><h5 id="3- 对代码进行版本管理 -git- 的使用"><a href="#3- 对代码进行版本管理 -git- 的使用" class="headerlink" title="(3) 对代码进行版本管理 (git 的使用)"></a>(3) 对代码进行版本管理 (git 的使用)</h5><p><a href="https://www.liaoxuefeng.com/wiki/896043488029600"> 廖雪峰的 git 教程</a></p>
<h4 id="4- 相机"><a href="#4- 相机" class="headerlink" title="4. 相机"></a>4. 相机 </h4><h5 id="1- 摄像头的选型与应用"><a href="#1- 摄像头的选型与应用" class="headerlink" title="(1) 摄像头的选型与应用"></a>(1) 摄像头的选型与应用</h5><h5 id="2- 怎么调用函数和设置参数"><a href="#2- 怎么调用函数和设置参数" class="headerlink" title="(2) 怎么调用函数和设置参数"></a>(2) 怎么调用函数和设置参数</h5><h5 id="3- 决定相机的帧率，相机的帧率会跟调整的各参数有一定的关系"><a href="#3- 决定相机的帧率，相机的帧率会跟调整的各参数有一定的关系" class="headerlink" title="(3) 决定相机的帧率，相机的帧率会跟调整的各参数有一定的关系"></a>(3) 决定相机的帧率，相机的帧率会跟调整的各参数有一定的关系</h5><h4 id="5- 关于串口通信"><a href="#5- 关于串口通信" class="headerlink" title="5. 关于串口通信"></a>5. 关于串口通信</h4><h5 id="1- 关于信息传输"><a href="#1- 关于信息传输" class="headerlink" title="(1) 关于信息传输"></a>(1) 关于信息传输</h5><h5 id="2- 关于信息传送失败"><a href="#2- 关于信息传送失败" class="headerlink" title="(2) 关于信息传送失败"></a>(2) 关于信息传送失败</h5><h5 id="3- 调通信的技巧"><a href="#3- 调通信的技巧" class="headerlink" title="(3) 调通信的技巧"></a>(3) 调通信的技巧</h5><h5 id="4- 自启动的设置"><a href="#4- 自启动的设置" class="headerlink" title="(4) 自启动的设置"></a>(4) 自启动的设置</h5><h5 id="5- 焦距的调整"><a href="#5- 焦距的调整" class="headerlink" title="(5) 焦距的调整"></a>(5) 焦距的调整</h5><p> 机器人飞坡测试的振动，或相机上调焦距的螺丝没拧紧导致错位都可能导致焦距变化</p>
<h5 id="6- 标定，获取 -PNP- 所需参数"><a href="#6- 标定，获取 -PNP- 所需参数" class="headerlink" title="(6) 标定，获取 PNP 所需参数"></a>(6) 标定，获取 PNP 所需参数 </h5><p> 将世界坐标系中的三维点投影到相机像素坐标上，有以下步骤：<br>a. 利用由两个坐标系之间的旋转和平移组成的外部矩阵，将三维点从世界坐标转换为相机坐标。<br>b. 在相机坐标系中，利用相机内部焦距、光心等参数构成的内部矩阵将新的三维点投影到图像平面上。<br>校正方法：当我们完全控制成像过程时，执行校准的最佳方法是从不同的视角捕获一个物体或已知尺寸模式的多个图像。<br><a href="https://blog.csdn.net/LuohenYJ/article/details/104697062">[OpenCV 实战] 38 基于 OpenCV 的相机标定 </a><br><a href="https://www.bilibili.com/video/BV1R7411m7ZQ"> 上海交大博士生分享相机标定原理的经验 b 站</a></p>
<h5 id="7- 补充：四种流行的姿态表示法 - 欧拉角、旋转矩阵、四元数和旋转矢量"><a href="#7- 补充：四种流行的姿态表示法 - 欧拉角、旋转矩阵、四元数和旋转矢量" class="headerlink" title="(7) 补充：四种流行的姿态表示法 (欧拉角、旋转矩阵、四元数和旋转矢量)"></a>(7) 补充：四种流行的姿态表示法 (欧拉角、旋转矩阵、四元数和旋转矢量)</h5><p>姿态是用来描述两个坐标系之间相对关系的。一个点相对于一个坐标系没办法定义姿态。<br>a. 欧拉角 (旋转轴顺序，和旋转角度)<br>拿我们最常见的 X 滚转 roll$\phi$、Y 俯仰 pitch$\theta$ 、Z 偏航 yaw$\psi$ 来说，它们的含义是：从 W 系出发，首先绕 Z 轴旋转 $\phi$ ，然后绕 Y 轴旋转 $\theta$ ，最后沿 X 轴旋转 $\phi$，就和 B 系重合了；将这样的旋转顺序称为（从静止坐标系到动坐标系的）Z-Y-X。<br><img src="/2021/10/27/robomaster-3-1/photo1.jpg" alt><br><img src="/2021/10/27/robomaster-3-1/photo2.jpg" alt><br><a href="https://zhuanlan.zhihu.com/p/86464027">对于旋转矩阵的理解：怎么判断是 body-to-world 还是 world-to-body</a></p>
<h3 id="二、简述各视觉算法"><a href="# 二、简述各视觉算法" class="headerlink" title="二、简述各视觉算法"></a>二、简述各视觉算法</h3><p>2.1 自瞄算法<br>2.1.1 需要掌握什么知识<br>2.1.2 什么是自瞄算法<br>2.1.3 自瞄算法的具体流程<br>2.1.4 自瞄算法的其他细节<br>2.1.4.1 掉帧处理<br>2.1.4.2 抬头补偿<br>2.1.5 反陀螺算法<br>2.1.5.1 自动识别敌方陀螺状态算法<br>2.1.5.2 反陀螺策略<br>2.1.6 数字识别<br>2.2 能量机关算法<br>2.2.1 整体思路<br>2.2.2 击打思路<br>2.2.3 一些遇到的坑<br>2.3 飞镖制导算法<br>2.3.1 整体思路介绍<br>2.3.2 算法实现思路<br>2.3.3 测试与展望<br>2.4 雷达站目标检测算法<br>2.4.1 整体思路<br>2.4.2 目标检测算法实现的细节</p>
<ol>
<li>一些心得</li>
</ol>
]]></content>
      <categories>
        <category>大学比赛-robomaster</category>
      </categories>
  </entry>
  <entry>
    <title>slam-1</title>
    <url>/2021/11/04/slam-1/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>大学课程-slam</category>
      </categories>
  </entry>
  <entry>
    <title>slam 基础 --（2）基本图像处理</title>
    <url>/2021/11/08/slam-2/</url>
    <content><![CDATA[<h3 id="一、图像传感器"><a href="# 一、图像传感器" class="headerlink" title="一、图像传感器"></a>一、图像传感器 </h3><h4 id="1-CMOS- 和 -CCD"><a href="#1-CMOS- 和 -CCD" class="headerlink" title="1.CMOS 和 CCD"></a>1.CMOS 和 CCD</h4><h4 id="1-CMOS"><a href="#1-CMOS" class="headerlink" title="(1) CMOS"></a>(1) CMOS</h4><p> 每个像素里的光电二极管遇到光时，就会因为光电效应累计一定数量的电荷，将光信号转为电信号 <br>CMOS 每个像素均包含放大器和 AD 转换电路，额外的电路使得像素的可感光面积变小，感光度低<br> 每个像素也会因为电路干扰产生固定的噪声信号</p>
<h5 id="2-CCD"><a href="#2-CCD" class="headerlink" title="(2) CCD"></a>(2) CCD</h5><p>在像素上增加电压，透过电荷耦合，将像素点中的电荷逐级转移到相同输出端，<br>最后逐个输出电压信号，通过 A/D 转换变为数字信号<br>CCD 需要比较高的电压，增加功耗 <span id="more"></span></p>
<p><a href="https://www.bilibili.com/video/BV1tt4y1Q77z">【回形针化】CMOS 与 CCD 有何不同</a><br><!-- more --></p>
<h4 id="2- 颜色"><a href="#2- 颜色" class="headerlink" title="2. 颜色"></a>2. 颜色 </h4><h5 id="1-Bayer-Pattern- 拜尔阵列"><a href="#1-Bayer-Pattern- 拜尔阵列" class="headerlink" title="(1) Bayer Pattern (拜尔阵列)"></a>(1) Bayer Pattern (拜尔阵列)</h5><p> 拜耳阵列指的是 CCD 或者 CMOS 器件作为光传感器的时候，采集数字图像时用到的一种常见的方法。<br>bayer pattern 得到的图像中，实际只有 $1\over3$ 的内容是真实的，其他都是根据先验知识插值得到。这也说明了自然图像中具有大量的冗余信息。<br>Q：具体如何从 bayer pattern 中将高清图片重建出来？<br><a href="https://blog.csdn.net/edogawachia/article/details/84963652">拜耳阵列（Bayer Pattern）简介</a></p>
<h5 id="2- 颜色空间"><a href="#2- 颜色空间" class="headerlink" title="(2) 颜色空间"></a>(2) 颜色空间</h5><p>RGB<br>HSV<br>LAB：两个颜色的差异可以用向量距离表示</p>
<h4 id="3-global-shutter- 全局快门 - 和 -rolling-shutter- 卷帘快门 - 果冻效应"><a href="#3-global-shutter- 全局快门 - 和 -rolling-shutter- 卷帘快门 - 果冻效应" class="headerlink" title="3.global shutter (全局快门) 和 rolling shutter (卷帘快门 果冻效应)"></a>3.global shutter (全局快门) 和 rolling shutter (卷帘快门 果冻效应)</h4><p>CMOS 是由上往下逐行扫描 <br> 避免果冻效应的三种方法：<br>(1) 搭配机械快门（全局曝光的缺点：如果曝光时间长会增加读出噪声）<br>(2) 使用没有果冻效应的传感器（使用全域快门的 CMOS 和 CCD 传感器）<br>(3) 提升 CMOS 的刷新频率<br>(4) 拍摄较为稳定的素材进行后期修正（稳定器 ex：Steadicam、电子三轴稳定器、Trinity） </p>
<p>后面处理多视角几何的前提是：图像是利用针孔模型取得，rolling shutter 会破坏这个前提。</p>
<p><a href="https://www.bilibili.com/video/BV1bJ41147Zx">什么是果冻效应？它是怎么产生的 ——【菲林番外】</a><br><a href="https://blog.csdn.net/lz0499/article/details/102616773">详细图解，一眼就能看懂！卷帘快门（Rolling Shutter）与全局快门（Global Shutter）的区别</a></p>
<h3 id="二、图像在计算机中就是一个阵列"><a href="# 二、图像在计算机中就是一个阵列" class="headerlink" title="二、图像在计算机中就是一个阵列"></a>二、图像在计算机中就是一个阵列 </h3><h4 id="1- 图像可以看出一个二维函数"><a href="#1- 图像可以看出一个二维函数" class="headerlink" title="1. 图像可以看出一个二维函数"></a>1. 图像可以看出一个二维函数</h4><p> 在一个像素点周围可以看出连续的函数，可以利用高数中的分析方法 <br> 例如：局部进行泰勒展开，梯度进行线性近似</p>
<h4 id="2- 图像在计算机中是一个二维阵列"><a href="#2- 图像在计算机中是一个二维阵列" class="headerlink" title="2. 图像在计算机中是一个二维阵列"></a>2. 图像在计算机中是一个二维阵列 </h4><h3 id="三、线性滤波器"><a href="# 三、线性滤波器" class="headerlink" title="三、线性滤波器"></a> 三、线性滤波器 </h3><h4 id="1- 滤波和卷积（基于线性核的滤波，就是我们所熟悉的卷积）"><a href="#1- 滤波和卷积（基于线性核的滤波，就是我们所熟悉的卷积）" class="headerlink" title="1. 滤波和卷积（基于线性核的滤波，就是我们所熟悉的卷积）"></a>1. 滤波和卷积（基于线性核的滤波，就是我们所熟悉的卷积）</h4><p> 信号处理称为滤波器，数学称为卷积核 <br> 卷积核大小大部分为奇数，这样才有中心 <br><a href="https://blog.csdn.net/zouxy09/article/details/49080029"> 图像卷积与滤波的一些知识点</a></p>
<p>(1) 均值模糊 Box Filter (Averaging)<br>(2) 高斯模糊 Gaussian Filter<br>(3) 卷积后的大小 <br> 假设原始图像为 $M \times M$，卷积核大小为 $N \times N$，边缘填充像素个数为 pad，步长为 stride<br>则卷积后图像的尺寸为 $\displaystyle m={M-N+2 \times pad \over stride} +1$<br>(4) 卷积相当于 4 个嵌套回圈<br>(5) 卷积的快速计算 FFT</p>
<h4 id="2- 图像梯度算子"><a href="#2- 图像梯度算子" class="headerlink" title="2. 图像梯度算子"></a>2. 图像梯度算子 </h4><p> 图像梯度计算的是图像变化的速度。对于边缘部分，其灰度值变化较大，梯度值也较大；相反，较平滑的部分，灰度值变化较小，相应的梯度值也较小，一般情况时，图像梯度计算的是图像的边缘信息。严格来讲，计算图像梯度需要求导数，但是图像梯度一般通过计算像素值的差来得到梯度的近似值（近似导数值）。<br>边界是指左侧的像素值与右侧的像素值差值不为零。<br>(1) sober 算子 <br><img src="/2021/11/08/slam-2/photo1.png" alt><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">img = cv2.imread (<span class="string">&#x27;dige.jpg&#x27;</span>)</span><br><span class="line">// 不能写成 sobelx = cv2.Sobel (img, -<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>)</span><br><span class="line">// 因为 - <span class="number">1</span> 代表输入和输出的图像深度是一样的 (例如 <span class="number">8</span> 位位图 <span class="number">0</span>-<span class="number">255</span>)</span><br><span class="line">// 如果相减的灰度值是负数会截断成 <span class="number">0</span></span><br><span class="line">// 所以指定的深度较大 cv2.CV_64F，可以包含负数</span><br><span class="line">sobelx = cv2.Sobel (img, cv2.CV_64F,<span class="number">1</span>,<span class="number">0</span>)</span><br><span class="line">sobely = cv2.Sobel (img, cv2.CV_64F, <span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">// 然后再利用 cv2.convertScaleAbs 转换成正数</span><br><span class="line">sobelx = cv2.convertScaleAbs (sobelx)</span><br><span class="line">sobely = cv2.convertScaleAbs (sobely)</span><br><span class="line">//xy 分开算再相加而不是写成 sobel = cv2.Sobel (img, cv2.CV_64F,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">sobelxy = cv2.addWeighted (sobelx,<span class="number">0.5</span>,sobely,<span class="number">0.5</span>,<span class="number">0</span>)</span><br><span class="line">cv2.imshow (<span class="string">&#x27;img&#x27;</span>,img)</span><br><span class="line">cv2.imshow (<span class="string">&#x27;sobelxy&#x27;</span>,sobelxy)</span><br><span class="line">cv2.waitKey ()</span><br><span class="line">cv2.destroyAllWindows ()</span><br></pre></td></tr></table></figure><br>(2) scharr 算子<br><img src="/2021/11/08/slam-2/photo2.png" alt> Scharr 算子可以被看做是对 Sobel 算子的改进，不仅具有和 sobel 算子同样的速度，且精度更高。<br> 在函数 cv2.Sobel () 中，如果 ksize=-1，则会使用 Scharr 滤波器。<br>Q：为什么换成这样的参数会使得细节处理的比较好？<br>(3) laplace 算子<br><img src="/2021/11/08/slam-2/photo3.png" alt> laplace 算子类似于二阶 sobel 导数，实际上在 opencv 中是通过调用 sobel 算子来计算 laplace 算子。<br>Q：如何通过 sobel 算子计算出 laplace 算子？<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">img = cv2.imread (<span class="string">&#x27;opencv.jpg&#x27;</span>,cv2.IMREAD_GRAYSCALE)</span><br><span class="line">laplacian = cv2.Laplacian (img,cv2.CV_64F)</span><br><span class="line">laplacian = cv2.convertScaleAbs (laplacian)</span><br><span class="line">cv2.imshow (<span class="string">&#x27;img&#x27;</span>,img)</span><br><span class="line">cv2.imshow (<span class="string">&#x27;laplacian&#x27;</span>,laplacian)</span><br><span class="line">cv2.waitKey ()</span><br><span class="line">cv2.destroyAllWindows ()</span><br></pre></td></tr></table></figure></p>
<p><a href="https://blog.csdn.net/weixin_42415138/article/details/107458973">【OpenCV 学习】图像梯度：Sobel 算子、Scharr 算子、Laplacian 算子 </a><br><a href="https://www.bilibili.com/video/BV1iz411z7uH"> 这系列的视频</a></p>
<h3 id="四、图像求导"><a href="# 四、图像求导" class="headerlink" title="四、图像求导"></a>四、图像求导 </h3><h3 id="五、非线性滤波器"><a href="# 五、非线性滤波器" class="headerlink" title="五、非线性滤波器"></a> 五、非线性滤波器 </h3><h3 id="六、模板匹配 -SSD-ZNCC"><a href="# 六、模板匹配 -SSD-ZNCC" class="headerlink" title="六、模板匹配 - SSD/ZNCC"></a> 六、模板匹配 - SSD/ZNCC</h3><h3 id="七、直方图均衡化 - 特例化"><a href="# 七、直方图均衡化 - 特例化" class="headerlink" title="七、直方图均衡化 / 特例化"></a>七、直方图均衡化 / 特例化</h3><p>(1)<br>(2)<br>(3)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>大学课程-slam</category>
      </categories>
  </entry>
  <entry>
    <title>slam 基础 --（3）特征检测和追踪</title>
    <url>/2021/11/08/slam-3/</url>
    <content><![CDATA[<h3 id="一、特征点"><a href="# 一、特征点" class="headerlink" title="一、特征点"></a>一、特征点 </h3><h4 id="1- 好的特征点：稳定、可识别、精确"><a href="#1- 好的特征点：稳定、可识别、精确" class="headerlink" title="1. 好的特征点：稳定、可识别、精确"></a>1. 好的特征点：稳定、可识别、精确</h4><h4 id="2- 特征检测和描述"><a href="#2- 特征检测和描述" class="headerlink" title="2. 特征检测和描述"></a>2. 特征检测和描述</h4><h4 id="3- 特征匹配和追踪"><a href="#3- 特征匹配和追踪" class="headerlink" title="3. 特征匹配和追踪"></a>3. 特征匹配和追踪</h4><h3 id="二、光流算法"><a href="# 二、光流算法" class="headerlink" title="二、光流算法"></a> 二、光流算法 </h3><h3 id="三、FAST-Corner-detector"><a href="# 三、FAST-Corner-detector" class="headerlink" title="三、FAST (Corner detector)"></a> 三、FAST (Corner detector)</h3><h3 id="四、LoG-DoG-MSER-Blob-detector"><a href="# 四、LoG-DoG-MSER-Blob-detector" class="headerlink" title="四、LoG/DoG/MSER (Blob detector)"></a>四、LoG/DoG/MSER (Blob detector)</h3><h3 id="五、BRIEF-ORB-BRISK-FREAK-fast-descriptor"><a href="# 五、BRIEF-ORB-BRISK-FREAK-fast-descriptor" class="headerlink" title="五、BRIEF/ORB/BRISK/FREAK (fast descriptor)"></a>五、BRIEF/ORB/BRISK/FREAK (fast descriptor)</h3><h3 id="六、SIFT-SURF-HOG-slow-descriptor"><a href="# 六、SIFT-SURF-HOG-slow-descriptor" class="headerlink" title="六、SIFT/SURF/HOG (slow descriptor)"></a>六、SIFT/SURF/HOG (slow descriptor)</h3><h3 id="七、Learning-based-features"><a href="# 七、Learning-based-features" class="headerlink" title="七、Learning-based features"></a>七、Learning-based features</h3><h3 id="八、Other-features"><a href="# 八、Other-features" class="headerlink" title="八、Other features"></a>八、Other features</h3><h3 id="九、"><a href="# 九、" class="headerlink" title="九、"></a>九、</h3>]]></content>
      <categories>
        <category>大学课程-slam</category>
      </categories>
  </entry>
  <entry>
    <title>slam 基础 --（4）特征检测和追踪</title>
    <url>/2021/11/22/slam-4/</url>
    <content><![CDATA[<h3 id="一、Reference-Frame- 参考坐标"><a href="# 一、Reference-Frame- 参考坐标" class="headerlink" title="一、Reference Frame 参考坐标"></a>一、Reference Frame 参考坐标 </h3><h4 id="1-Inertial-Frame"><a href="#1-Inertial-Frame" class="headerlink" title="1.Inertial Frame"></a>1.Inertial Frame</h4><p>(1) Earth-Centered Inertial frame (ECI)<br>(2) Earth-Centered and Earth-Fixed Inertial Frame<br>X 轴固定在地球表面随着地球转动而转动<br> 最常见的地球坐标系</p>
<h4 id="2-Earth-Fixed-Frame- 局部地理坐标系 - 世界坐标系"><a href="#2-Earth-Fixed-Frame- 局部地理坐标系 - 世界坐标系" class="headerlink" title="2.Earth-Fixed Frame 局部地理坐标系 / 世界坐标系"></a>2.Earth-Fixed Frame 局部地理坐标系 / 世界坐标系 </h4><p> 原点在地球表面</p>
<h4 id="3-Body-fixed-Frame-Body-Frame"><a href="#3-Body-fixed-Frame-Body-Frame" class="headerlink" title="3.Body-fixed Frame (Body Frame)"></a>3.Body-fixed Frame (Body Frame)</h4><p>坐标原点在机体上 <br> 坐标原点是自己定义的 ex: 在图像传感器中心 <br> 最后算出来的姿态和定义的坐标系有关</p>
<h3 id="二、Rigid-Transformation"><a href="# 二、Rigid-Transformation" class="headerlink" title="二、Rigid Transformation"></a>二、Rigid Transformation</h3><p>刚体变换 = 旋转变换 + 平移变换 $x’=Rx+t$<br>刚体变换保长度、保角度 <br> 证明旋转矩阵都是正交矩阵，反之则否 <br><a href="https://blog.csdn.net/jhope/article/details/83067956?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-3&amp;spm=1001.2101.3001.4242.2"> 旋转矩阵 (Rotate Matrix) 的性质分析 </a><br><a href="https://www.zhihu.com/question/316200199"> 正交矩阵都是旋转矩阵吗？</a><br><img src="/2021/11/22/slam-4/photo1.jpg" alt="刚体变换和 t 是无关的，后面会讲到应用 (消失点投影)"></p>
<h4 id="1-Pose-representation- 位姿"><a href="#1-Pose-representation- 位姿" class="headerlink" title="1.Pose representation 位姿"></a>1.Pose representation 位姿 </h4><p> 位姿可以用刚体变换描述</p>
<h4 id="2-Body-to-world-transformation- 机器人用的比较多"><a href="#2-Body-to-world-transformation- 机器人用的比较多" class="headerlink" title="2.Body-to-world transformation (机器人用的比较多)"></a>2.Body-to-world transformation (机器人用的比较多)</h4><p>$<br>x_w=<br>\begin {bmatrix}<br>    R_1 &amp; R_2 &amp; R_3 \\<br>    R_4 &amp; R_5 &amp; R_6 \\<br>    R_7 &amp; R_8 &amp; R_9 \\<br>\end {bmatrix}<br>x+t<br>$<br>旋转矩阵的第一 column 表示 body 坐标系 X 轴在世界坐标系下投影<br>(Column vectors in $R$ are the directions of body axes in the world frame)<br>$t$ 代表体坐标系原点投影在世界坐标系的坐标</p>
<h4 id="3-World-to-body-transformation- 计算机视觉用的比较多"><a href="#3-World-to-body-transformation- 计算机视觉用的比较多" class="headerlink" title="3.World-to-body transformation (计算机视觉用的比较多)"></a>3.World-to-body transformation (计算机视觉用的比较多)</h4><p>$<br>x=<br>\begin {bmatrix}<br>R_1 &amp; R_2 &amp; R_3 \\<br>R_4 &amp; R_5 &amp; R_6 \\<br>R_7 &amp; R_8 &amp; R_9 \\<br>\end {bmatrix}<br>x_w+t<br>$<br>旋转矩阵的第一 row 表示 body 坐标系 X 轴在世界坐标系下投影<br>(Row vectors in $R$ are the directions of body axes in the world frame)<br>$x_w^0=-R^T t$</p>
<h3 id="三、Projective-geometry"><a href="# 三、Projective-geometry" class="headerlink" title="三、Projective geometry"></a>三、Projective geometry</h3><h4 id="1-Homogenous-coordinates"><a href="#1-Homogenous-coordinates" class="headerlink" title="1.Homogenous coordinates"></a>1.Homogenous coordinates</h4><p>描述比较简洁 ex: 一个矩阵就可以描述刚体变换 <br> 可以描述笛卡尔坐标系无法描述的元素 ex: 无穷远的点 <br> 齐次坐标在《图形学》应用广泛</p>
<p>$<br>\left [\begin {matrix}<br>    x’ \\<br>    1 \\<br>\end {matrix}\right] \sim<br>\left [\begin {matrix}<br>    R &amp; t \\<br>    0^T &amp; 1 \\<br>\end {matrix}\right]<br>\left [\begin {matrix}<br>    x \\<br>    1 \\<br>\end {matrix}\right]<br>$</p>
<h4 id="2-2D-projective-geometry- 之坐标表示"><a href="#2-2D-projective-geometry- 之坐标表示" class="headerlink" title="2.2D projective geometry 之坐标表示"></a>2.2D projective geometry 之坐标表示 </h4><p> 在二维空间中点和线是对偶关系 <br> 点的表达：$\mathbf {x}=(x,y,1)^T$<br>线的表达 $ax+by+c$：$\mathbf {l}=(a,b,c)^T$<br>两线交点：两条线叉乘 <br> 两个点连成一条线：兩个点叉乘 <br> 无穷远点：两个平行线交点 <br> 无穷远线</p>
<h4 id="3-2D-projective-geometry- 之 -homography-matrix- 实现点的变换"><a href="#3-2D-projective-geometry- 之 -homography-matrix- 实现点的变换" class="headerlink" title="3.2D projective geometry 之 homography matrix (实现点的变换)"></a>3.2D projective geometry 之 homography matrix (实现点的变换)</h4><p><img src="/2021/11/22/slam-4/photo3.jpg" alt><br><img src="/2021/11/22/slam-4/photo4.jpg" alt><br><img src="/2021/11/22/slam-4/photo5.jpg" alt><br>(1) 刚体变换：保长度，保角度 <br> 刚性变换：只由平移变换和旋转变换组成。<br>(2) 相似变换：保比例 <br>(3) 仿射变换主要包括平移变换、旋转变换、缩放变换、错切变换、翻转变换，有六个自由度。<br> 仿射变换保持二维图形的 “平直性” 和 “平行性”，但是角度会改变。<br>“平直性”：变换后直线还是直线、圆弧还是圆弧。<br>“平行性”：平行线还是平行线，直线上点的位置顺序不变。<br>(4) 射影变换 (投影变换)<br>射影变换：是最一般的线性变换。有 8 个自由度。<br>射影变换保持重合关系和交比不变。但不会保持平行性。<br><a href="https://blog.csdn.net/Homography/article/details/105986226">交比不变 (顺便学习射影几何)</a><br><a href="https://lyingheart6174.pixnet.net/blog/post/5122408">[射影幾何] 交比 (Cross Ratio)</a><br><img src="/2021/11/22/slam-4/photo6.jpg" alt></p>
<p><img src="/2021/11/22/slam-4/photo8.jpg" alt="单应矩阵有八个自由度，需要二维空间的四个点对来求解"><br><img src="/2021/11/22/slam-4/photo9.jpg" alt="单应矩阵求解"><br><img src="/2021/11/22/slam-4/photo7.jpg" alt="单应矩阵的应用：实现图像校正"><br>step1: 找出两幅图像之间的单应矩阵 <br>step2: 逐行扫描图像二中的像素，透过单应矩阵找出与之对应在图像一中的像素<br> 利用该像素的值对图像一的像素进行着色，如果对应过去是亚像素则进行插值<br>Q: 线条的变换？<br><img src="/2021/11/22/slam-4/photo10.jpg" alt></p>
<h4 id="4-3D-projective-geometry"><a href="#4-3D-projective-geometry" class="headerlink" title="4.3D projective geometry"></a>4.3D projective geometry</h4><p>在三维空间中点和面是对偶关系<br><img src="/2021/11/22/slam-4/photo11.jpg" alt><br>(1) 三维点的表示：<br>(2) 三维平面的表示：<br>(3) 三个点形成一平面：<br>(4) 三个平面确定一个交点：<br>(5) 三维平面的变换：</p>
<h3 id="补充 - 动三维空间刚体运 - 一、旋转矩阵"><a href="# 补充 - 动三维空间刚体运 - 一、旋转矩阵" class="headerlink" title="[补充 动三维空间刚体运] 一、旋转矩阵"></a>[补充 动三维空间刚体运] 一、旋转矩阵 </h3><h4 id="1- 点、向量、坐标系"><a href="#1- 点、向量、坐标系" class="headerlink" title="1. 点、向量、坐标系"></a>1. 点、向量、坐标系</h4><p> 大部分 3D 程序库使用右手系 (如 OpenGL、3DMax 等)，<br>也有部分库使用左手系 (如 Unity、Direct3D 等)<br>$a \dot b$<br>$<br>a \times b =<br>\begin {Vmatrix}<br>    \mathbf {e_1} &amp; \mathbf {e_2} &amp; \mathbf {e_3} \\<br>    a_1 &amp; a_2 &amp; a_3 \\<br>    b_1 &amp; b_2 &amp; b_3 \\<br>\end {Vmatrix} =<br>\left [\begin {matrix}<br>    a_2 b_3 - a_3 b_2 \\<br>    a_3 b_1 - a_1 b_3 \\<br>    a_1 b_2 - a_2 b_1 \\<br>\end {matrix}\right] =<br>\left [\begin {matrix}<br>    0 &amp; -a_3 &amp; a_2 \\<br>    a_3 &amp; 0 &amp; -a_1 \\<br>    -a_2 &amp; a_1 &amp; 0 \\<br>\end {matrix}\right] \mathbf {b} \overset {def}{=}<br>a<br>$^$b$</p>
<p><a href="https://blog.csdn.net/yihaizhiyan/article/details/12707459?spm=1001.2101.3001.6650.2&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-2.no_search_link&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-2.no_search_link">latex 等号上面有字 \overset {def}{=}</a></p>
<h4 id="2- 坐标矩阵间的欧式变换"><a href="#2- 坐标矩阵间的欧式变换" class="headerlink" title="2. 坐标矩阵间的欧式变换"></a>2. 坐标矩阵间的欧式变换</h4><h4 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h4>]]></content>
      <categories>
        <category>大学课程-slam</category>
      </categories>
  </entry>
  <entry>
    <title>slam 基础 --（5）3D Rotation</title>
    <url>/2021/11/22/slam-5/</url>
    <content><![CDATA[<p> 问题：例如梯度下降法更新参数，如果参数是旋转量，怎么更新这个参数？</p>
<h3 id="一、Parameter-update"><a href="# 一、Parameter-update" class="headerlink" title="一、Parameter update"></a> 一、Parameter update</h3><h4 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h4><h4 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h4><h4 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h4><h3 id="二、Rotation-matrix"><a href="# 二、Rotation-matrix" class="headerlink" title="二、Rotation matrix"></a> 二、Rotation matrix</h3><h4 id="1- 旋转矩阵是属于 -SO-n- 群"><a href="#1- 旋转矩阵是属于 -SO-n- 群" class="headerlink" title="1. 旋转矩阵是属于 $SO (n)$ 群"></a>1. 旋转矩阵是属于 $SO (n)$ 群 </h4><p>Special Orthogonal group SO (n) is a set that satisfies:<br>$SO (n)=\{\mathbf {M} \in \mathbb {R} | \mathbf {M}\mathbf {M}^T=\mathbf {I},det (\mathbf {M})=1\}$<br>A 3x3 rotation matrix is in the SO (3) group<br><a href="https://blog.csdn.net/liyuanbhu/article/details/51474533">MathJax 支持的 Latex 符号总结（各种数学字体）</a></p>
<h4 id="2- 什么是群"><a href="#2- 什么是群" class="headerlink" title="2. 什么是群"></a>2. 什么是群 </h4><p>A group $G$ is a set with a binary operation $\circ$ defined on the elements of $G$, if it satisfies:<br>Closure: $g_1 \circ g_2 \in G$<br>Identity: $e \circ g = g \circ e = e$<br>Inverse: $g \circ g^{-1} = g^{-1} \circ g = e$<br>Associativity: $g_1 \circ (g_2 \circ g_3) = (g_1 \circ g_2) \circ g_3$<br><a href="https://blog.csdn.net/anxiaoxi45/article/details/39449445">LaTeX 各种命令，符号 </a><br><a href="http://zh.wikipedia.org/wiki/Help:MATH">Latex 使用说明 数学公式 </a></p>
<h3 id="三、Lie-group-SO-3-Lie-algebra-so-3"><a href="# 三、Lie-group-SO-3-Lie-algebra-so-3" class="headerlink" title="三、Lie group SO (3) / Lie algebra so (3)"></a> 三、Lie group SO (3) / Lie algebra so (3)</h3><h4 id="1-1"><a href="#1-1" class="headerlink" title="1."></a>1.</h4><h4 id="2-1"><a href="#2-1" class="headerlink" title="2."></a>2.</h4><h4 id="3-1"><a href="#3-1" class="headerlink" title="3."></a>3.</h4><h3 id="四、Euler-angles"><a href="# 四、Euler-angles" class="headerlink" title="四、Euler angles"></a> 四、Euler angles</h3><h4 id="1-2"><a href="#1-2" class="headerlink" title="1."></a>1.</h4><h4 id="2-2"><a href="#2-2" class="headerlink" title="2."></a>2.</h4><h4 id="3-2"><a href="#3-2" class="headerlink" title="3."></a>3.</h4><h3 id="五、Quaternion"><a href="# 五、Quaternion" class="headerlink" title="五、Quaternion"></a> 五、Quaternion</h3><h4 id="1-3"><a href="#1-3" class="headerlink" title="1."></a>1.</h4><h4 id="2-3"><a href="#2-3" class="headerlink" title="2."></a>2.</h4><h4 id="3-3"><a href="#3-3" class="headerlink" title="3."></a>3.</h4>]]></content>
      <categories>
        <category>大学课程-slam</category>
      </categories>
  </entry>
  <entry>
    <title>slam-6</title>
    <url>/2021/11/22/slam-6/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>slam-7</title>
    <url>/2021/11/28/slam-7/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>slam 基础 -- 期末作业</title>
    <url>/2021/12/11/slam-final-hw/</url>
    <content><![CDATA[<h3 id="前期知识："><a href="# 前期知识：" class="headerlink" title="前期知识："></a>前期知识：</h3><h4 id="1- 复习深度学习基础知识"><a href="#1- 复习深度学习基础知识" class="headerlink" title="1. 复习深度学习基础知识"></a>1. 复习深度学习基础知识 </h4><p>(1) 【神经网络】 卷基层和池化层输出大小计算公式（长、宽、深度）<br> 先定义几个参数 <br> 输入图片大小 $W×W$<br>Filter 大小 $F×F$<br>步长 $S$<br>padding 的像素数 $P$<br>于是我们可以得出 <br>$N = (W − F + 2P)/S+1$<br> 输出图片大小为 $N×N$</p>
<h4 id="2-VGG"><a href="#2-VGG" class="headerlink" title="2.VGG"></a>2.VGG</h4><p>(深度学习之路四 ——vgg16 的学习)[<a href="https://www.jianshu.com/p/2728610a6130">https://www.jianshu.com/p/2728610a6130</a>]<br>(4.1 VGG 网络详解及感受野的计算)[<a href="https://www.bilibili.com/video/BV1q7411T7Y6?from=search&amp;seid=14261498746433466254&amp;spm_id_from=333.337.0.0">https://www.bilibili.com/video/BV1q7411T7Y6?from=search&amp;seid=14261498746433466254&amp;spm_id_from=333.337.0.0</a>]</p>
]]></content>
      <categories>
        <category>大学课程-slam</category>
      </categories>
  </entry>
  <entry>
    <title>slam-hw-1</title>
    <url>/2021/11/04/slam-hw-1/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>slam 课程作业 2</title>
    <url>/2021/11/04/slam-hw-2/</url>
    <content><![CDATA[<h3 id="一、齐次坐标"><a href="# 一、齐次坐标" class="headerlink" title="一、齐次坐标"></a>一、齐次坐标 </h3><h4 id="1- 题目"><a href="#1- 题目" class="headerlink" title="1. 题目"></a>1. 题目</h4><p> 为什么要引入齐次坐标，具体有那些好处？（10 分）</p>
<h3 id="二、求解 -KLT"><a href="# 二、求解 -KLT" class="headerlink" title="二、求解 KLT"></a>二、求解 KLT</h3><h4 id="1- 题目 -1"><a href="#1- 题目 -1" class="headerlink" title="1. 题目"></a>1. 题目 </h4><p> 为什么说求解 KLT 光流就是求解一个非线性最小二乘问题？(10 分)</p>
<h3 id="三、坐标轴可视化"><a href="# 三、坐标轴可视化" class="headerlink" title="三、坐标轴可视化"></a>三、坐标轴可视化 </h3><h4 id="1- 题目 -2"><a href="#1- 题目 -2" class="headerlink" title="1. 题目"></a>1. 题目</h4><p> 附件 (camera_pose.txt) 保存的是每个时刻相机的位姿 ($R^i$, $t^i$)，文件中每一行代表的是第𝑖<br>时刻旋转与平移量的各个元素，排列如下</p>
<p>若已知该相机在做圆周运动，请分析该相机位姿表示方式是 world-to-body 还是 body-toworld?<br>并编写程序将相机每个时刻三个坐标轴进行可视化</p>
<h4 id="四、"><a href="# 四、" class="headerlink" title="四、"></a>四、</h4>]]></content>
      <categories>
        <category>大学课程-slam课程作业</category>
      </categories>
  </entry>
  <entry>
    <title>slam 小車：(一) 前期準備 --1. 機器人架構設計流程</title>
    <url>/2019/05/20/slam1/</url>
    <content><![CDATA[<p><a href="https://wangxchun.github.io/2019/05/20/slam1/">(一) 前期準備 —1. 機器人架構設計流程</a><br><a href="https://wangxchun.github.io/2019/05/21/slam2/">(一) 前期準備 —2.Linux 目錄結構與常用指令</a></p>
<h3 id="一、了解機器人架構"><a href="# 一、了解機器人架構" class="headerlink" title="一、了解機器人架構"></a>一、了解機器人架構 </h3><p> 機器人包含四大部分：機械結構、驅動裝置、感測裝置、控制與算法。<br>機器人的研發涉及機械工程、電機工程、資訊工程、醫學工程等領域，次技術領域包括能量學、驅動技術、感知技術和決策技術等。</p>
<h3 id="二、機器人概念設計（選擇機器人平台）"><a href="# 二、機器人概念設計（選擇機器人平台）" class="headerlink" title="二、機器人概念設計（選擇機器人平台）"></a>二、機器人概念設計（選擇機器人平台）</h3><span id="more"></span>
<h4 id="1- 定義機器人的功能："><a href="#1- 定義機器人的功能：" class="headerlink" title="1. 定義機器人的功能："></a>1. 定義機器人的功能：</h4><h4 id="2- 決定機器人的載具和移動方式："><a href="#2- 決定機器人的載具和移動方式：" class="headerlink" title="2. 決定機器人的載具和移動方式："></a>2. 決定機器人的載具和移動方式：</h4><p>機械手臂、雙腳、四肢、八腳蜘蛛、輪車等。</p>
<h4 id="3- 確認機器人的控制方式："><a href="#3- 確認機器人的控制方式：" class="headerlink" title="3. 確認機器人的控制方式："></a>3. 確認機器人的控制方式：</h4><h5 id="1- 有線控制（電線、網路線）"><a href="#1- 有線控制（電線、網路線）" class="headerlink" title="(1) 有線控制（電線、網路線）"></a>(1) 有線控制（電線、網路線）</h5><h5 id="2- 無線控制（紅外線、藍芽、WIFI、GPRS、無線射頻）"><a href="#2- 無線控制（紅外線、藍芽、WIFI、GPRS、無線射頻）" class="headerlink" title="(2) 無線控制（紅外線、藍芽、WIFI、GPRS、無線射頻）"></a>(2) 無線控制（紅外線、藍芽、WIFI、GPRS、無線射頻）</h5><h5 id="3- 自主控制"><a href="#3- 自主控制" class="headerlink" title="(3) 自主控制"></a>(3) 自主控制 </h5><h3 id="三、零件選用"><a href="# 三、零件選用" class="headerlink" title="三、零件選用"></a> 三、零件選用 </h3><h4 id="1- 動力源與驅動器"><a href="#1- 動力源與驅動器" class="headerlink" title="1. 動力源與驅動器"></a>1. 動力源與驅動器</h4><p> 考量因素：功率和比能量，還有位置控制、雙向運動、可靠度、力量控制。</p>
<h5 id="1- 液壓驅動：多用於特大功率的機器人系統"><a href="#1- 液壓驅動：多用於特大功率的機器人系統" class="headerlink" title="(1) 液壓驅動：多用於特大功率的機器人系統"></a>(1) 液壓驅動：多用於特大功率的機器人系統 </h5><h5 id="2- 氣壓驅動：功率較小，而且速度不易控制，所以多用於精度不高的點位控制系統"><a href="#2- 氣壓驅動：功率較小，而且速度不易控制，所以多用於精度不高的點位控制系統" class="headerlink" title="(2) 氣壓驅動：功率較小，而且速度不易控制，所以多用於精度不高的點位控制系統"></a>(2) 氣壓驅動：功率較小，而且速度不易控制，所以多用於精度不高的點位控制系統</h5><h5 id="3- 電器驅動：轉動輪子或齒輪（馬達轉子、減速齒輪、力感測器和負載）"><a href="#3- 電器驅動：轉動輪子或齒輪（馬達轉子、減速齒輪、力感測器和負載）" class="headerlink" title="(3) 電器驅動：轉動輪子或齒輪（馬達轉子、減速齒輪、力感測器和負載）"></a>(3) 電器驅動：轉動輪子或齒輪（馬達轉子、減速齒輪、力感測器和負載）</h5><p> 線性驅動器：將電動馬達的旋轉運動轉換為線性運動</p>
<h5 id="4- 壓電驅動：電陶瓷材料可以達到較大的比功率、SMA- 形狀記憶合金具有輕量化結構"><a href="#4- 壓電驅動：電陶瓷材料可以達到較大的比功率、SMA- 形狀記憶合金具有輕量化結構" class="headerlink" title="(4) 壓電驅動：電陶瓷材料可以達到較大的比功率、SMA 形狀記憶合金具有輕量化結構"></a>(4) 壓電驅動：電陶瓷材料可以達到較大的比功率、SMA 形狀記憶合金具有輕量化結構 </h5><p> 可以產生較大的比能量（希望達到與人類肌肉相同的比功率和比能量），適合小尺度。</p>
<h4 id="2- 感測器"><a href="#2- 感測器" class="headerlink" title="2. 感測器"></a>2. 感測器 </h4><p> 能量轉換裝置，能將被測量的物理量（例如加速的）轉換成電能或其他需要形式的信號。</p>
<h5 id="1- 機身本身的測量"><a href="#1- 機身本身的測量" class="headerlink" title="(1) 機身本身的測量"></a>(1) 機身本身的測量 </h5><p> 方向（指南針、陀螺儀、傾斜儀）<br>位置（輪子編碼器、信標、GPS）<br>運動（慣性測量單元：量測線性和角位移、速度和加速度）</p>
<h5 id="2- 環境的測量"><a href="#2- 環境的測量" class="headerlink" title="(2) 環境的測量"></a>(2) 環境的測量 </h5><p> 距離（聲納、雷射測距儀、超聲波測距儀紅、外線感測器）<br>化學成分（光譜儀）<br>視覺（相機）</p>
<h4 id="3- 控制器（機器人的大腦）"><a href="#3- 控制器（機器人的大腦）" class="headerlink" title="3. 控制器（機器人的大腦）"></a>3. 控制器（機器人的大腦）</h4><h5 id="1- 微控制器（MCU- 單片機）：Arduino，STM32，BasicATOM，BasicX，POB- 技術，-Pololu，Parallax- 等等"><a href="#1- 微控制器（MCU- 單片機）：Arduino，STM32，BasicATOM，BasicX，POB- 技術，-Pololu，Parallax- 等等" class="headerlink" title="(1) 微控制器（MCU 單片機）：Arduino，STM32，BasicATOM，BasicX，POB 技術， Pololu，Parallax 等等"></a>(1) 微控制器（MCU 單片機）：Arduino，STM32，BasicATOM，BasicX，POB 技術， Pololu，Parallax 等等 </h5><pre><code> 因為 Arduino 開發了簡單的函數，還有許多應用庫，這樣就不用直接去操作暫存器了，適合沒有單片機基礎的
</code></pre><p>製作小車使用的是微控制器，選擇時需要考慮以下三點：<br>(a) 哪個微控制器在我應用領域上是最常用的？<br>(b) 它有機器人需要的所有特殊功能嗎？<br>有些功能所有微控制器都有支持（例如：數位輸入和輸出，執行簡單的數學運算，比較值和做決定），而有些功能則需要特定的硬體做搭配才能完成（例如 ADC，PWM 和通訊協議的支援）。另外，還需要考慮記憶體和速度的要求，還有接腳數。<br>(c) 是否找得到所選定微控制器可以搭配的相關零件？</p>
<h5 id="2- 微處理器（MPU）：树莓派，S3C2440，CubieBoard-CC80，Jetson-TK1- 等等"><a href="#2- 微處理器（MPU）：树莓派，S3C2440，CubieBoard-CC80，Jetson-TK1- 等等" class="headerlink" title="(2) 微處理器（MPU）：树莓派，S3C2440，CubieBoard CC80，Jetson TK1 等等"></a>(2) 微處理器（MPU）：树莓派，S3C2440，CubieBoard CC80，Jetson TK1 等等 </h5><p> 嵌入式微處理器 MPU 和一般的電腦 CPU 還有區別，嵌入式微處理器大多工作在特定設計的系統中，其中主流的体系有 ARM、MIPS、PowerPC、X86 和 SH 等，与全球 PC 市场不同的是，没有一种嵌入式微处理器可以主导市场。</p>
<h5 id="3- 工業用控制板：機器人大廠多自行研發控制器，例如：Fanuc、ABB、Yaskawa、KUKA、EPSON、DENSO、TOSHIBA"><a href="#3- 工業用控制板：機器人大廠多自行研發控制器，例如：Fanuc、ABB、Yaskawa、KUKA、EPSON、DENSO、TOSHIBA" class="headerlink" title="(3) 工業用控制板：機器人大廠多自行研發控制器，例如：Fanuc、ABB、Yaskawa、KUKA、EPSON、DENSO、TOSHIBA"></a>(3) 工業用控制板：機器人大廠多自行研發控制器，例如：Fanuc、ABB、Yaskawa、KUKA、EPSON、DENSO、TOSHIBA</h5><pre><code>補充：選擇馬達控制器（控制器 - 馬達控制器 - 馬達）
雖然微控制器決定馬達的速度和方向，它卻不能直接驅動它們，因為它的功率（電流和電壓）輸出非常有限。
另一方面，馬達控制器可以提供所需電壓的電流，但不能決定馬達應該轉動多快。
</code></pre><h3 id="四、機器人組裝"><a href="# 四、機器人組裝" class="headerlink" title="四、機器人組裝"></a>四、機器人組裝 </h3><p> 瓦楞紙、木材、金屬薄板、3D 列印等等。</p>
<h3 id="五、控制與算法"><a href="# 五、控制與算法" class="headerlink" title="五、控制與算法"></a>五、控制與算法 </h3><p> 這是我們激光 slam 小車專題的重點，後面文章會詳細闡述。</p>
]]></content>
      <categories>
        <category>大学课程项目-激光slam小車</category>
      </categories>
      <tags>
        <tag>slam</tag>
        <tag>智能車</tag>
        <tag>機器人</tag>
        <tag>設計流程</tag>
      </tags>
  </entry>
  <entry>
    <title>slam 小車：(一) 前期準備 --2.Linux 目錄結構與常用指令</title>
    <url>/2019/05/21/slam2/</url>
    <content><![CDATA[<p><a href="https://wangxchun.github.io/2019/05/20/slam1/">(一) 前期準備 —1. 機器人架構設計流程</a><br><a href="https://wangxchun.github.io/2019/05/21/slam2/">(一) 前期準備 —2.Linux 目錄結構與常用指令</a></p>
<h3 id="一、Linux- 目錄結構"><a href="# 一、Linux- 目錄結構" class="headerlink" title="一、Linux 目錄結構"></a>一、Linux 目錄結構 </h3><h3 id="二、Linux- 常用指令"><a href="# 二、Linux- 常用指令" class="headerlink" title="二、Linux 常用指令"></a> 二、Linux 常用指令</h3><h4 id="1- 打开 -terminal"><a href="#1- 打开 -terminal" class="headerlink" title="1. 打开 terminal"></a>1. 打开 terminal</h4><span id="more"></span>
<p>(1) 右鍵 -&gt; 打開終端<br>(2) Ctrl+Alt+t 或者 Ctrl+Shift+t</p>
<h4 id="2- 常用快速鍵"><a href="#2- 常用快速鍵" class="headerlink" title="2. 常用快速鍵"></a>2. 常用快速鍵 </h4><p>(1) tab<br> 一次 tab：命令補齊 <br> 兩次 tab：提示內容 <br>(2) Ctrl+c<br>Ctrl+c 中斷，強行打斷進程<br>(3) Ctrl+d<br>Ctrl+d 退出，相當於 exit 和 quit<br> 比如用 python 命令進入 python 交互環境後，就可以用 Ctrl+d 退出 python 交互環境 <br>(4) Ctrl+Shift+c 和 Ctrl+Shift+v<br> 先用滑鼠選中需要複製的內容，然後用 Ctrl+Shift+c 進行複製，再用 Ctrl+Shift+v 進行貼上<br>(5) 圖形介面與純文字互動模式切換<br>Ctrl+Alt+F1-F6：純文字交互模式登入 tty1-tty6 終端機<br>Ctrl+Alt+F7：切回圖形介面</p>
<h3 id="3- 關機與重啟命令"><a href="#3- 關機與重啟命令" class="headerlink" title="3. 關機與重啟命令"></a>3. 關機與重啟命令</h3><p>(1) 關機<br>$ sudo poweroff<br>(2) 重新啟動<br>$ sudo reboot</p>
<h3 id="4- 終端命令列中一些常用符號瞭解"><a href="#4- 終端命令列中一些常用符號瞭解" class="headerlink" title="4. 終端命令列中一些常用符號瞭解"></a>4. 終端命令列中一些常用符號瞭解</h3><p>(1) 使用者家目錄：~<br>(2) 系統根目錄：/<br>(3) 一般使用者提示符：$<br>(4) root 使用者提示符：#</p>
<h3 id="5- 目錄與文件相關命令"><a href="#5- 目錄與文件相關命令" class="headerlink" title="5. 目錄與文件相關命令"></a>5. 目錄與文件相關命令</h3><p>(1) 顯示檔案與目錄清單<br>$ ls<br>(2) 切換目錄（ 2）<br>$ cd &lt; 目標目錄 &gt;<br>(3) 顯示目前所在工作目錄<br>$ pwd<br>(4) 建立檔案<br>$ touch &lt; 檔名 &gt;<br>(5) 複製檔案<br>$ cp &lt; 源檔案路徑 &gt; &lt; 目標檔案路徑 &gt;<br>(6) 移動檔案<br>$ mv &lt; 源檔案路徑 &gt; &lt; 目標檔案路徑 &gt;<br>(7) 刪除檔案<br>$ rm &lt; 檔名 &gt;<br>(8) 顯示檔案內容<br>$ cat &lt; 檔名 &gt;<br>(9) 建立資料夾<br>$ mkdir &lt; 資料夾名 &gt;<br>(10) 刪除資料夾<br>$ rmdir &lt; 資料夾名 &gt;</p>
<h3 id="6- 文件許可權"><a href="#6- 文件許可權" class="headerlink" title="6. 文件許可權"></a>6. 文件許可權</h3><p>(1) 修改檔案讀寫可執行權限，該權限由遮罩， 如 777 權限全開<br>$ sudo chmod 777 &lt; 檔名 &gt;<br>(2) 修改檔案擁有者<br>$ sudo chown &lt; 使用者名 &gt;：&lt; 組名 &gt; &lt; 檔名 &gt;</p>
<h3 id="7- 檔案查找"><a href="#7- 檔案查找" class="headerlink" title="7. 檔案查找"></a>7. 檔案查找</h3><p>(1) locate<br>$ sudo updatedb<br>$ locate &lt; 待查找檔名 &gt;<br>(2) find<br>$ find -name &lt; 待查找檔名 &gt;</p>
<h3 id="8- 網路相關命令"><a href="#8- 網路相關命令" class="headerlink" title="8. 網路相關命令"></a>8. 網路相關命令</h3><p>(1) 網路連線與否測試<br>$ ping &lt; 待測目標主機 IP 或域名 &gt;<br>(2) 本地 IP 位址檢視<br>$ ifconfig<br>(3) 遠端登入目標主機<br>$ ssh &lt; 目標主機使用者名 &gt;@&lt; 目標主機 IP 位址 &gt;</p>
<h3 id="9- 系統軟體安裝與軟體運行方法"><a href="#9- 系統軟體安裝與軟體運行方法" class="headerlink" title="9. 系統軟體安裝與軟體運行方法"></a>9. 系統軟體安裝與軟體運行方法</h3><p>(1) 系統預設的套件安裝方法 apt-get<br>$ sudo apt-get update<br>$ sudo apt-get install &lt; 軟體套件名稱 &gt;<br>(2) source 方法執行系統文稿，例如執行使用者預設配置文件.bashrc<br>$ source ~/.bashrc<br>(3) ./ 方法執行一般可執行檔<br>$ ./&lt; 可执行文件 &gt;</p>
<h3 id="10- 文字編輯器 -vim- 使用"><a href="#10- 文字編輯器 -vim- 使用" class="headerlink" title="10. 文字編輯器 vim 使用"></a>10. 文字編輯器 vim 使用 </h3><p>(1) vim 檢視檔案內容<br>$ vim &lt; 檔名 &gt;<br>(2) vim 進入編輯模式<br> 在 vim 查看檔案內容的介面中，按 i 鍵進入編輯模式，然後就可以編輯檔案的內容了 <br>(3) vim 退出編輯模式<br> 在 vim 編輯檔案內容的介面中，按 Esc 鍵退出編輯模式，然後就又回到查看檔案內容的介面了<br>(4) vim 編輯內容儲存<br>vim 在編輯完檔內容，退出到查看檔內容的介面後，可以輸入 “：w” 對編輯內容進行保存，也可以輸入 “：wq” 對編輯內容進行保存並退出 vim</p>
]]></content>
      <categories>
        <category>大学课程项目-激光slam小車</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>slam</tag>
        <tag>智能車</tag>
        <tag>命令列指令</tag>
      </tags>
  </entry>
  <entry>
    <title>一些观察</title>
    <url>/2021/05/29/some-observation-1/</url>
    <content><![CDATA[<h3 id="西方制裁华为"><a href="# 西方制裁华为" class="headerlink" title="西方制裁华为"></a>西方制裁华为 </h3><h4 id="1-5G- 是兵家必争之地"><a href="#1-5G- 是兵家必争之地" class="headerlink" title="1.5G 是兵家必争之地"></a>1.5G 是兵家必争之地</h4><p> 移动通信技术每一代发展都会有新的巨头出来<br>1G：摩托罗拉<br>2G：爱立信、诺基亚<br>3G：高通、苹果<br>4G：高通、苹果、华为</p>
<h4 id="2- 美国不希望中国崛起"><a href="#2- 美国不希望中国崛起" class="headerlink" title="2. 美国不希望中国崛起"></a>2. 美国不希望中国崛起 </h4><h4 id="3- 华为太安全了，不方便提供数据给政府（猜测）"><a href="#3- 华为太安全了，不方便提供数据给政府（猜测）" class="headerlink" title="3. 华为太安全了，不方便提供数据给政府（猜测）"></a>3. 华为太安全了，不方便提供数据给政府（猜测）</h4><h3 id="美国的硬件封锁"><a href="# 美国的硬件封锁" class="headerlink" title="美国的硬件封锁"></a> 美国的硬件封锁 </h3><h4 id="1- 硬件"><a href="#1- 硬件" class="headerlink" title="1. 硬件"></a>1. 硬件</h4><p>CPU：英特尔的 X86 架构<br> 手机的 ARM 架构 <br> 电子产业的原材料和一些基础工业，中国和美国有着不可忽视的落差，所以要不靠美国是非常难的</p>
<h4 id="2- 软件"><a href="#2- 软件" class="headerlink" title="2. 软件"></a>2. 软件 </h4><p> 根据开源的安卓系统建一套操作系统是不难的，难的是建设一个软件生态 <br> 但是谷歌的商业套件是闭源的，美国的开发者大多会依赖这个套件（需要授权）</p>
<h3 id="面对制裁，需要什么"><a href="# 面对制裁，需要什么" class="headerlink" title="面对制裁，需要什么"></a>面对制裁，需要什么 </h3><h4 id="1- 信心"><a href="#1- 信心" class="headerlink" title="1. 信心"></a>1. 信心</h4><h4 id="2- 实力"><a href="#2- 实力" class="headerlink" title="2. 实力"></a>2. 实力</h4><p> 技术、人才、市场、資金</p>
<h4 id="3- 筹码"><a href="#3- 筹码" class="headerlink" title="3. 筹码"></a>3. 筹码</h4><p>ex：禁止苹果设备在中国销售<br>ex：禁止工程销售苹果的设备<br>Q：不会冲击到中国自己相关的上下游产业？？？</p>
<h4 id="4- 舆论的胜利"><a href="#4- 舆论的胜利" class="headerlink" title="4. 舆论的胜利"></a>4. 舆论的胜利 </h4><h3 id="创始人有两种"><a href="# 创始人有两种" class="headerlink" title="创始人有两种"></a> 创始人有两种 </h3><h4 id="1- 借风口起来的"><a href="#1- 借风口起来的" class="headerlink" title="1. 借风口起来的"></a>1. 借风口起来的</h4><p> 例如小米是借智能手机的风口起来的，直接他们希望能引领智能硬件的风口</p>
<h4 id="2- 创造封口"><a href="#2- 创造封口" class="headerlink" title="2. 创造封口"></a>2. 创造封口 </h4><h3 id="币圈和互联网圈"><a href="# 币圈和互联网圈" class="headerlink" title="币圈和互联网圈"></a> 币圈和互联网圈 </h3><p> 互联网是传递信息的，比特币可以传递价值，区块链可以传递信任</p>
<h3 id="信用卡交易过程"><a href="# 信用卡交易过程" class="headerlink" title="信用卡交易过程"></a>信用卡交易过程 </h3><p> 参与者：(1) 制订规则 ex：visa (2) 发卡银行，消费者 (3) 卖家银行，卖家，square/paypal<br>ex：MasterCard，Square，摩根大通，汇丰银行，美国银行，提供风险评估的第三方机构</p>
<p>假设我现在拿着汇丰银行的 MasterCard 信用卡去买奶茶 <br> 首先，奶茶店老板要在 square 的 pos 机上输入我需要付款的金额 <br> 我刷卡输入密码后，POS 机会读取我的支付信息 <br> 经过 Processer 加密后，Square 会把我的信息传递给 MasterCard 的网络中 <br> 此时在网路中的汇丰银行就会检查我的账户余额 <br> 第三方机构 (？) 会评估这笔交易的风险 (比如会不会是诈骗等)<br>没有问题，汇丰银行会批准交易，发送指令到 Square 的 pos 机上，显示刷卡成功 <br> 这时，我会收到汇丰银行给我的小票 <br> 此后，汇丰银行会通过 MasterCard 的网络把钱转给 Square 背后的摩根大通 <br> 摩根大通再把钱转给 Square，Square 再把钱转给奶茶店老板使用的美国银行 <br> 最后，汇丰银行再月底寄给我一张账单，我把我的奶茶钱付掉 <br> 奶茶店老板要付手续费给信用卡发行银行、信用卡商、Payment Processor</p>
<h3 id="Visa- 角色"><a href="#Visa- 角色" class="headerlink" title="Visa 角色"></a>Visa 角色 </h3><p> 讓我們試著思考以下情境，今天你在某家 3C 產品販賣店發現喜歡的產品，當你拿出信用卡想要消費，卻發現這家特約商店僅與 A 銀行合作，無法使用手中的 B 銀行的信用卡。若 B 銀行想使其信用卡能在該 3C 商店使用，就必須與該商店洽談特約商店簽約，或是考慮與 A 銀行談合作，並互相約定彼此所發行的信用卡都能在彼此間的特約商店使用，再去談價錢、技術或拆帳等議題間的合作細節。</p>
<p>若只有兩家銀行，那這中間的協商和洽談成本可能還能支應，然若有十家甚而是百家，這中間的成本和協商時間對單一銀行來說就很麻煩，若涉及跨國不同語言，這中間問題就更多。因此，就有如 Visa 或 Master Card 等中介者出現，希望能夠整合不同銀行的資訊，並協助不同銀行的特約商店串接，甚而是 Visa 等業者自己接洽之特約店，讓 A 銀行和 B 銀行所發行的信用卡能透過 Visa 的串接和服務，用於不同的商家節省成本，因此就出現只要你卡上有 Visa 的標誌，那麼你就能在相關的店消費使用。</p>
<p>所以我們可以發現 Visa 的商業模式，也是透過整理銀行對消費者的信用卡債權債務和特約商店資訊，進行中間的串接或結清算，使銀行把這些繁瑣的合作細節和記帳工作交給 Visa，專心處理它信用卡產品的設計、優惠等商業面向，也能藉由 Visa 的後端協助擴大其信用卡使用範圍，拓展國內外市場。</p>
<h3 id="當每一個 -Google- 搜尋結果都像廣告"><a href="# 當每一個 -Google- 搜尋結果都像廣告" class="headerlink" title="當每一個 Google 搜尋結果都像廣告"></a>當每一個 Google 搜尋結果都像廣告</h3><p>Google 破壞使用者體驗有兩個根本性原因。</p>
<p>第一，它是壟斷。Google 搜尋是壟斷，Chrome 瀏覽器也幾乎壟斷。壟斷者不需擔心顧客流失，就不會在乎用戶體驗。</p>
<p>第二，它規模太大。Google 集團最近市值破兆美金。這對股東是好消息，對於守護信念卻是壞消息。如果一年想成長 5%，代表 Google 每年得增加 500 億美金的市值。這對任何經營者都是巨大的壓力。</p>
<p>而 Google 至今賺錢只有一招：廣告。其他業務如 YouTube、雲服務、硬體、遊戲、無人車等雖然很熱鬧，但目前都看不出賺錢。只看得出花錢 — 開發手機、建資料庫中心、做無人車都很貴。無法節流，就只能開源，想辦法增加廣告收入了。</p>
<p>Google 無法搶競爭者的市場 — 因為已經沒有競爭者了。它只能壓迫供應商，也就是用戶 — 是我們供給注意力給 Google 販賣。把廣告跟真實結果混淆，就是在壓榨我們交出更多的注意力。</p>
<p>眼看 Google 慢慢失去堅持，令人相當傷感。當 Google 變成只是另一家唯利是圖的企業，就失去了用戶的好感。或許在某一個大學研究室裡，有兩位充滿理想的研究生，正在思考如何將它推翻。</p>
<h3 id="現代國家面對的三重打擊："><a href="# 現代國家面對的三重打擊：" class="headerlink" title="現代國家面對的三重打擊："></a>現代國家面對的三重打擊：</h3><p>（1）自身膨脹導致營運成本提高 <br>（2）稅收基礎縮減使得資金降低<br>（3）實際提供的新價值減少（因為價值在知識）<br> 合在一起，就是國家看起來效率越來越低落。</p>
<p>工業革命與槍砲推翻了帝國，網路與駭客會不會推翻現代國家？<br>有些科技圈人士提出「個人主權」（sovereign individual），認為個人（相對於政府）應該控制更多資源，來維繫個人的自由。例如，今日你看似自由，實際上土地的記載是國家說了算，存款是銀行說了算，水電瓦斯與網路由國家控制，資料則在網路平台手中。</p>
<p>但即便在有「個人主權」的時代，實體世界仍然重要，因此國家 / 政府也仍然重要。政府的角色會轉為專注於解決科技無法處理，甚至造成惡化的問題上，如貧富差距、壟斷、環境污染、健康、人權等。</p>
<h3 id="Google- 的發展"><a href="#Google- 的發展" class="headerlink" title="Google 的發展"></a>Google 的發展 </h3><p> 賣手機不只是賣功能，還包含研發、製造、銷售甚至保固，是一個綜合性的競爭。現在手機市場大勢底定，Google 想靠技術突破非常困難。Google 必須拉出一條新的戰線，那就是此次發表會正式提出的願景：普及運算（ambient computing）。</p>
<p>例如一開頭提到的星空照，就牽涉到許多價值判斷。Marc Levoy 指出 Pixel 4 用了多種技術。包括：<br>（1）用機器學習調整白平衡。<br>（2）用語義分割（semantic segmentation）辨識照片的內容。<br>（3）用計算攝影（computational photograph）剔除因長時間曝光而過熱的像素。</p>
<p>換言之，Pixel 4 首先判斷「現在要照一張星空照」。再根據由資料庫所訓練出的模型，設定基本的白平衡參數。接著，Pixel 4 再透過語義分割判斷「上半部是星空，下半部是地面」，因此強化地面與星空的邊界，同時降低星空（上半部）的雜訊。最後，再保留正常的像素所捕捉的資訊，剔除過度曝光的像素。因此這一張照片不僅利用現場的資訊，也融入了其他人（在資料庫中）的照片。甚至還加入 Google 的審美觀！</p>
<p>未來 Pixel 4 照片中的世界，會比人類實際的體驗更細節、更立體，也更美 — 因為加上了提香的美術指導。我們不用再多次拍照、測試不同的曝光條件 — Google 會推薦最好的結果。這或許不足以帶動 Google 的硬體脫穎而出，但會進一步建立普及運算的基礎，讓人們習慣交給電腦更多權利。等到人們再也不想輸入複雜的指令，就是普及運算起飛的時刻。</p>
<h3 id="Gartner：2019- 年十大無線通訊技術趨勢"><a href="#Gartner：2019- 年十大無線通訊技術趨勢" class="headerlink" title="Gartner：2019 年十大無線通訊技術趨勢"></a>Gartner：2019 年十大無線通訊技術趨勢</h3><p>（1）Wi-Fi<br>（2）5G 蜂巢式網絡<br>（3）車聯網（V2X）無線技術<br>（4）長距離無線供電<br>（5）低功耗廣域（LPWA）網絡<br>（6）無線感測<br>（7）增强型無線定位追蹤功能<br>（8）毫米波無線技術<br>（9）反向散射網絡（backscatter networking）<br>（10）軟件定義無線電（SDR）</p>
<h3 id="Gartner-2019- 年新興技術發展週期報告，歸納 -5- 大重點新興科技趨勢"><a href="#Gartner-2019- 年新興技術發展週期報告，歸納 -5- 大重點新興科技趨勢" class="headerlink" title="Gartner 2019 年新興技術發展週期報告，歸納 5 大重點新興科技趨勢"></a>Gartner 2019 年新興技術發展週期報告，歸納 5 大重點新興科技趨勢</h3><p><a href="https://technews.tw/2019/09/02/gartner-2019-top-5-skill/">Gartner 2019 年新興技術發展週期報告，歸納 5 大重點新興科技趨勢</a><br>（1）感測與行動力<br>（2）擴增人類能力<br>（3）後傳統（postclassical）運算及通訊<br>（4）數位生態系<br>（5）先進人工智慧與分析技術</p>
<h3 id="Gartner- 預測 -2019- 年十大策略科技，智慧空間、量子運算入列"><a href="#Gartner- 預測 -2019- 年十大策略科技，智慧空間、量子運算入列" class="headerlink" title="Gartner 預測 2019 年十大策略科技，智慧空間、量子運算入列"></a>Gartner 預測 2019 年十大策略科技，智慧空間、量子運算入列</h3><p><a href="https://technews.tw/2018/10/18/top-10-strategic-technology-trends-for-2019/">Gartner 預測 2019 年十大策略科技，智慧空間、量子運算入列</a><br>（1）自動化物件<br>（2）增強分析<br>（3）人工智慧驅動開發<br>（4）數位分身<br>（5）更強大的邊緣運算<br>（6）沉浸式體驗<br>（7）區塊鏈<br>（8）智慧空間<br>（9）數位倫理和隱私<br>（10）量子運算</p>
<h3 id="中東和美國"><a href="# 中東和美國" class="headerlink" title="中東和美國"></a>中東和美國 </h3><p> 以色列和巴勒斯坦衝突，衝突無解的原因：動武對雙方政府都有利。<br>沙烏地阿拉伯和以色列是美國在中東唯二的盟友。<br>阿拉伯聯合大公國、巴林、蘇丹等國家，2020 年在川普政府的斡旋下，第一次和以色列建立建交。<br>這些國家在這次的以巴衝突 (2021/05) 中保持沉默，<br>暗示和以色列建交的好處（例如未來可以共同抗衡伊朗、土耳其等等），比義氣相挺更加重要。</p>
<h3 id="財務報表"><a href="# 財務報表" class="headerlink" title="財務報表"></a>財務報表 </h3><p> 財務報表 = 資產負債表 + 損益表</p>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>暑期實習經驗參考</title>
    <url>/2020/02/25/summer-intern/</url>
    <content><![CDATA[<p><a href="https://shannon112.blogspot.com/2018/08/2018-summer-intern_24.html">https://shannon112.blogspot.com/2018/08/2018-summer-intern_24.html</a></p>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>臺北捷運藍線 (板南線)</title>
    <url>/2021/05/06/trip-taipei-blue/</url>
    <content><![CDATA[<span id="more"></span>
<p><img src="/2021/05/06/trip-taipei-blue/photo1.jpg" alt="捷運地圖"></p>
<h2 id><a href="#" class="headerlink" title="#"></a>#</h2><h2 id="-1"><a href="#-1" class="headerlink" title="#"></a>#</h2><h2 id="-2"><a href="#-2" class="headerlink" title="#"></a>#</h2><h3 id="臺北捷運景點系列"><a href="# 臺北捷運景點系列" class="headerlink" title="臺北捷運景點系列"></a>臺北捷運景點系列 </h3><p><a href="https://wangxchun.github.io/2021/05/06/trip-taipei-brown/"> 臺北捷運文湖線 </a><br><a href="https://wangxchun.github.io/2021/05/06/trip-taipei-red/"> 臺北捷運紅線 (淡水信義線)</a><br><a href="https://wangxchun.github.io/2021/05/06/trip-taipei-green/">臺北捷運綠線 (松山新店線)</a><br><a href="https://wangxchun.github.io/2021/05/06/trip-taipei-yellow/">臺北捷運黃線 (中和新蘆線)</a><br><a href="https://wangxchun.github.io/2021/05/06/trip-taipei-blue/">臺北捷運藍線 (板南線)</a></p>
]]></content>
      <categories>
        <category>生活-出去玩做功課</category>
      </categories>
  </entry>
  <entry>
    <title>臺北捷運文湖線</title>
    <url>/2021/05/06/trip-taipei-brown/</url>
    <content><![CDATA[<span id="more"></span>
<p><img src="/2021/05/06/trip-taipei-brown/photo1.jpg" alt="捷運地圖"></p>
<h3 id="BR20- 大湖"><a href="#BR20- 大湖" class="headerlink" title="BR20 大湖"></a>BR20 大湖 </h3><h4 id="大湖公園 - 内湖區"><a href="# 大湖公園 - 内湖區" class="headerlink" title="大湖公園 (内湖區)"></a> 大湖公園 (内湖區)</h4><p>湖公園落雨松 (12 月)、大湖公園釣魚、大湖公園野餐這三個是最多人做的活動。<br>大湖公園美食餐廳 (Triple Cafe 親子咖啡廳、蒔蘿餐廳)。</p>
<h3 id="BR19- 内湖 - 轉小 -2- 公車"><a href="#BR19- 内湖 - 轉小 -2- 公車" class="headerlink" title="BR19 内湖 轉小 2 公車"></a>BR19 内湖 轉小 2 公車 </h3><p> 碧山巖去看櫻花，去走白石湖吊橋，再去看同心池夫妻樹。</p>
<h4 id="碧山巖"><a href="# 碧山巖" class="headerlink" title="碧山巖"></a>碧山巖 </h4><p> 碧山巖漳聖王廟</p>
<h4 id="白石湖吊橋"><a href="# 白石湖吊橋" class="headerlink" title="白石湖吊橋"></a>白石湖吊橋 </h4><p> 白石湖吊橋是白石湖休閒農業園區裡面的吊橋，是一座山裡的紫色吊橋。<br>白石湖吊橋 -&gt; 同心池 -&gt; 夫妻樹 <br> 白石湖這邊有很多觀光果園，大家說內湖有草莓可以採，指的就是白石湖社區。</p>
<h3 id="BR15- 劍南路"><a href="#BR15- 劍南路" class="headerlink" title="BR15 劍南路"></a>BR15 劍南路 </h3><h4 id="美麗華"><a href="# 美麗華" class="headerlink" title="美麗華"></a> 美麗華 </h4><p> 影城和游樂園</p>
<h4 id="劍南山夜景"><a href="# 劍南山夜景" class="headerlink" title="劍南山夜景"></a>劍南山夜景 </h4><p><a href="https://nixojov.pixnet.net/blog/post/328619079-% E3%80%90% E5%8F% B0% E5%8C%97% E6%97%85% E9%81%8A% E3%80%91% E5%8A%8D% E5%8D%97% E5% B1% B1% E5% A4%9C% E6%99% AF-% E4% B8%8D% E7%94% A8% E7%88% AC% E5% B1% B1% E4% B9%9F% E8%83% BD% E7%9C%8B% E5%88% B0"> 怎麽騎車上去 </a><br> 接下來會看到湧泉寺的岔路往左邊騎， 又一個岔路往右邊騎</p>
<h4 id="劍南山步道・蝴蝶步道"><a href="# 劍南山步道・蝴蝶步道" class="headerlink" title="劍南山步道・蝴蝶步道"></a>劍南山步道・蝴蝶步道 </h4><p> 在捷運劍南站 1 號出口劍潭古寺旁 </p>
<h3 id="BR01- 動物園"><a href="#BR01- 動物園" class="headerlink" title="BR01 動物園"></a>BR01 動物園 </h3><p> 企鵝、駱駝、羊駝、狐獴、浣熊、河馬、長頸鹿、大象、紅鶴、鵜鶘、無尾熊、大貓熊、蒙古野馬、<br>台灣黑熊、石虎、鴯鶓、袋鼠、穿山甲、水豚、水獺</p>
<h3 id="臺北捷運景點系列"><a href="# 臺北捷運景點系列" class="headerlink" title="臺北捷運景點系列"></a>臺北捷運景點系列 </h3><p><a href="https://wangxchun.github.io/2021/05/06/trip-taipei-brown/"> 臺北捷運文湖線 </a><br><a href="https://wangxchun.github.io/2021/05/06/trip-taipei-red/"> 臺北捷運紅線 (淡水信義線)</a><br><a href="https://wangxchun.github.io/2021/05/06/trip-taipei-green/">臺北捷運綠線 (松山新店線)</a><br><a href="https://wangxchun.github.io/2021/05/06/trip-taipei-yellow/">臺北捷運黃線 (中和新蘆線)</a><br><a href="https://wangxchun.github.io/2021/05/06/trip-taipei-blue/">臺北捷運藍線 (板南線)</a></p>
]]></content>
      <categories>
        <category>生活-出去玩做功課</category>
      </categories>
  </entry>
  <entry>
    <title>臺北捷運綠線 (松山新店線)</title>
    <url>/2021/05/06/trip-taipei-green/</url>
    <content><![CDATA[<span id="more"></span>
<p><img src="/2021/05/06/trip-taipei-green/photo1.jpg" alt="捷運地圖"></p>
<h3 id="G12- 西門"><a href="#G12- 西門" class="headerlink" title="G12 西門"></a>G12 西門 </h3><h3 id="G10- 中正紀念堂"><a href="#G10- 中正紀念堂" class="headerlink" title="G10 中正紀念堂"></a>G10 中正紀念堂</h3><h3 id="G07- 公館"><a href="#G07- 公館" class="headerlink" title="G07 公館"></a>G07 公館</h3><h3 id="G01- 新店"><a href="#G01- 新店" class="headerlink" title="G01 新店"></a>G01 新店</h3><p> 碧潭</p>
<h3 id="臺北捷運景點系列"><a href="# 臺北捷運景點系列" class="headerlink" title="臺北捷運景點系列"></a>臺北捷運景點系列 </h3><p><a href="https://wangxchun.github.io/2021/05/06/trip-taipei-brown/"> 臺北捷運文湖線 </a><br><a href="https://wangxchun.github.io/2021/05/06/trip-taipei-red/"> 臺北捷運紅線 (淡水信義線)</a><br><a href="https://wangxchun.github.io/2021/05/06/trip-taipei-green/">臺北捷運綠線 (松山新店線)</a><br><a href="https://wangxchun.github.io/2021/05/06/trip-taipei-yellow/">臺北捷運黃線 (中和新蘆線)</a><br><a href="https://wangxchun.github.io/2021/05/06/trip-taipei-blue/">臺北捷運藍線 (板南線)</a></p>
]]></content>
      <categories>
        <category>生活-出去玩做功課</category>
      </categories>
  </entry>
  <entry>
    <title>臺北捷運紅線 (淡水信義線)</title>
    <url>/2021/05/06/trip-taipei-red/</url>
    <content><![CDATA[<p><img src="/2021/05/06/trip-taipei-red/photo1.jpg" alt="捷運地圖"><br><span id="more"></span></p>
<h3 id="R28- 淡水 -R27- 紅樹林"><a href="#R28- 淡水 -R27- 紅樹林" class="headerlink" title="R28 淡水 R27 紅樹林"></a>R28 淡水 R27 紅樹林 </h3><h4 id="紅樹林自然景觀步道"><a href="# 紅樹林自然景觀步道" class="headerlink" title="紅樹林自然景觀步道"></a> 紅樹林自然景觀步道 </h4><p> 位於淡水河北岸的紅樹林是世界上分布最廣的水筆仔樹林。</p>
<h4 id="福佑宮、重建街、3D- 彩繪階梯"><a href="# 福佑宮、重建街、3D- 彩繪階梯" class="headerlink" title="福佑宮、重建街、3D 彩繪階梯"></a>福佑宮、重建街、3D 彩繪階梯 </h4><p> 從淡水捷運站一號出口，往老街方向步行 10 分鐘即可以抵達重建街（福佑宮旁）。<br>短短 600 公尺即可看到明朝、清朝及日治時期的房屋。重建街偶爾也會舉辦市集。<br>從捷運淡水站一號出口，沿淡水老街步行約 20 分鐘，可到達淡水禮拜堂。</p>
<h4 id="淡水老街"><a href="# 淡水老街" class="headerlink" title="淡水老街"></a>淡水老街 </h4><p> 淡水阿給、鐵蛋、魚酥、魚丸是淡水老街的必吃美食。<br>阿給：油豆腐塞入 Q 彈冬粉再用魚漿封口。<br>魚酥：許義魚酥和隔壁的合益魚酥。<br>魚丸：老字號的可口魚丸是淡水老街最有名的魚丸店。<br>洪媽酸梅湯、阿香蝦捲、百葉溫州餛飩 (周董套餐)、阿婆鐵蛋、<br>李圓圓黑糖珍珠鮮奶 (很像公館陳三鼎黑糖珍珠鮮奶)、海邊走走手工肉鬆蛋捲。</p>
<h4 id="漁人碼頭"><a href="# 漁人碼頭" class="headerlink" title="漁人碼頭"></a>漁人碼頭 </h4><p> 景點 1：漁人碼頭情人橋：有分手傳説 <br><img src="/2021/05/06/trip-taipei-red/photo8.jpg" alt="漁人碼頭情人橋"> 景點 2：藍色公路水上風光<br> 新北市藍色公路起始點就在漁人碼頭<br><img src="/2021/05/06/trip-taipei-red/photo9.jpg" alt="藍色公路起點"> 景點 3：漁人碼頭夕陽＆夜景<br><img src="/2021/05/06/trip-taipei-red/photo10.jpg" alt="漁人碼頭夕陽＆夜景"></p>
<h4 id="紅毛城、牛津學堂 - 真理大學内 -、海關碼頭"><a href="# 紅毛城、牛津學堂 - 真理大學内 -、海關碼頭" class="headerlink" title="紅毛城、牛津學堂 (真理大學内)、海關碼頭"></a>紅毛城、牛津學堂 (真理大學内)、海關碼頭</h4><ul>
<li>捷運淡水站，搭 857 / 紅 26/836 公車至紅毛城站（真理大學站）下車。</li>
<li>公車「紅毛城站」，跨越馬路後往河堤岸走約 30 公尺，即可到達海關碼頭。</li>
</ul>
<p>紅毛城是國家一級古蹟。<br>最早建城是在 1628 年統治台灣北部的西班牙人所興建的「聖多明哥城」，<br>但後來聖多明哥城遭到摧毀，1644 年荷蘭人於原址附近予以重建，並命名為「安東尼堡」。<br><img src="/2021/05/06/trip-taipei-red/photo7.jpg" alt="紅毛城"></p>
<h4 id="小白宮"><a href="# 小白宮" class="headerlink" title="小白宮"></a>小白宮 </h4><p> 建於 1870 年，清朝淡水關稅務司的官邸，三級古蹟。<br>位於新北市淡水區埔頂，因之又名「埔頂洋樓」。<br>逛完了紅毛城之後，也不要錯過步行五分鐘就能到的小白宮。<br>雖然，裡面現在的展覽不是不多，但建築物本身的美就很吸引人了。<br><img src="/2021/05/06/trip-taipei-red/photo6.jpg" alt="小白宮"></p>
<h4 id="天元宮："><a href="# 天元宮：" class="headerlink" title="天元宮："></a>天元宮：</h4><p>擁有五層圓型寶塔的壯觀寺廟，每逢櫻花季會吸引大批人潮。<br>3 月中下旬是天元宮吉野櫻盛開之際，不同於山櫻花的點點桃紅，吉野櫻則可以爆炸的粉色花海來形容。<br><img src="/2021/05/06/trip-taipei-red/photo5.jpg" alt="天元宮櫻花"><a href="https://wangxchun.github.io/2021/05/06/trip-taiwan-flower/">台灣賞花地點和季節</a></p>
<h4 id="滬尾藝文休閒園區"><a href="# 滬尾藝文休閒園區" class="headerlink" title="滬尾藝文休閒園區"></a>滬尾藝文休閒園區</h4><ul>
<li>捷運淡水站轉乘公車，紅 26、757、837、857 至滬尾砲台站</li>
</ul>
<p>樓層 1 樓、2 樓為禮萊廣場及國賓影城，3 樓葛林之森空中花園及將捷金鬱金香酒店。<br>禮萊廣場 1F 包含路易莎咖啡、7-11、funbox toys、淡水國賓影城、餐廳、台灣伴手禮專門店。<br>禮萊廣場 2F 包含奇樂多親子樂園、自做自受烘培坊、多功能藝文展演廳。<br>走上三樓葛林之森空中花園，有造景，可以看夕陽。<br><img src="/2021/05/06/trip-taipei-red/photo11.jpg" alt="葛林之森空中花園"></p>
<h3 id="R22A- 新北投 -R22- 北投"><a href="#R22A- 新北投 -R22- 北投" class="headerlink" title="R22A 新北投 R22 北投"></a>R22A 新北投 R22 北投</h3><p><img src="/2021/05/06/trip-taipei-red/photo12.png" alt="北投地圖"></p>
<h4 id="北投圖書館"><a href="# 北投圖書館" class="headerlink" title="北投圖書館"></a>北投圖書館 </h4><p> 北投圖書館是台灣第一個「綠建築」圖書館</p>
<h4 id="溫泉博物館"><a href="# 溫泉博物館" class="headerlink" title="溫泉博物館"></a>溫泉博物館 </h4><p> 浴場主體是巴洛克式建築，保存的相當完整，現在已經不能泡湯，變成藝術裝置的場地</p>
<h4 id="北投梅庭 - 于右任故居"><a href="# 北投梅庭 - 于右任故居" class="headerlink" title="北投梅庭 (于右任故居)"></a>北投梅庭 (于右任故居)</h4><p>北投梅庭是臺北市北投區的一棟日式宿舍，為建於台灣日治時期 1930 年代末期的高級民宅。</p>
<h4 id="地熱谷"><a href="# 地熱谷" class="headerlink" title="地熱谷"></a>地熱谷 </h4><p> 景色很像日本九州的別府地獄 <br> 行程結合北投地熱谷旁邊水都溫泉會館煮蛋，兩顆 50 元就能體驗自己動手煮溫泉蛋的樂趣</p>
<h4 id="中心新村"><a href="# 中心新村" class="headerlink" title="中心新村"></a>中心新村 </h4><p> 中心新村是台北市唯一完整保存的眷村，也是全台唯一的溫泉眷村，保存了當時的公共溫泉澡堂，也有展示眷村的居住空間、家具擺設，讓你了解從前人們的生活</p>
<h4 id="滿來溫泉拉麵"><a href="# 滿來溫泉拉麵" class="headerlink" title="滿來溫泉拉麵"></a>滿來溫泉拉麵 </h4><p> 在北投公園對面</p>
<h4 id="新豐特製綿綿冰"><a href="# 新豐特製綿綿冰" class="headerlink" title="新豐特製綿綿冰"></a>新豐特製綿綿冰 </h4><h4 id="農禪寺"><a href="# 農禪寺" class="headerlink" title="農禪寺"></a> 農禪寺 </h4><p> 清水模建築</p>
<h4 id="硫磺谷"><a href="# 硫磺谷" class="headerlink" title="硫磺谷"></a>硫磺谷 </h4><p> 北投硫磺谷交通有點麻煩離捷運站遠，得轉搭公車。但對開車族就方便了，專屬硫磺谷停車場就在旁邊。<br>硫磺谷早期叫「大磺嘴」，採硫磺用途，擁有豐富的火山碎屑岩、沉積岩地質地形，是參觀的一大亮點。<br>位於陽明山國家公園西南側，和「龍鳳谷」相鄰，彼此有步道可直達，開車的話約 10 分鐘路程。<br>繼續往前行，也就是龍鳳谷的方向邁進，初冬時芒草盛開時可是很有意境的。<br>硫磺谷經由人工開鑿地熱井，引出地熱後，將清水導入混合井內混合，是加溫而形成的「人工溫泉」，<br>泉質屬酸性硫酸鹽泉，pH 值 3-5，泉色黃白色，俗稱「白磺溫泉」，目前供應北投合法溫泉旅館使用。</p>
<h4 id="北投市場"><a href="# 北投市場" class="headerlink" title="北投市場"></a>北投市場 </h4><p> 矮仔財滷肉飯（市場 2 樓 436 號攤）<br>唯美手工包子饅頭（市場 1 樓 245 攤）<br>高記茶莊（市場 1 樓 13 攤）<br>阿泓潤餅（台北市北投區新市街 63 號）<br>駱小姐銅鑼燒（北投市場口前，阿弘潤餅旁）<br>簡記排骨酥麵（台北市北投區新市街 47 號，沒有招牌）<br>明泉紅茶（台北市北投區光明路 129 號）<br>台北北投市場陳家剉冰（台北市北投區新市街 22 之 1 號）16:00 才營業 <br> 北投有三大紅茶店，高記茶莊、蔡元益紅茶、明泉紅茶，高記茶莊的紅茶有決明子的味道、蔡元益紅茶加入了黑糖，有淡淡的黑糖香氣，明泉紅茶則最像小時候喝的古早味。<br><a href="https://bobowin.blog/beitou-10/">北投一日遊怎麼玩</a></p>
<h3 id="R16- 士林"><a href="#R16- 士林" class="headerlink" title="R16 士林"></a>R16 士林</h3><h3 id="R15- 劍潭"><a href="#R15- 劍潭" class="headerlink" title="R15 劍潭"></a>R15 劍潭</h3><h3 id="R10- 臺北車站"><a href="#R10- 臺北車站" class="headerlink" title="R10 臺北車站"></a>R10 臺北車站</h3><h3 id="R09- 臺大醫院"><a href="#R09- 臺大醫院" class="headerlink" title="R09 臺大醫院"></a>R09 臺大醫院</h3><h3 id="R08- 中正紀念堂"><a href="#R08- 中正紀念堂" class="headerlink" title="R08 中正紀念堂"></a>R08 中正紀念堂</h3><h3 id="R07- 東門"><a href="#R07- 東門" class="headerlink" title="R07 東門"></a>R07 東門</h3><h3 id="R06- 大安森林公園"><a href="#R06- 大安森林公園" class="headerlink" title="R06 大安森林公園"></a>R06 大安森林公園</h3><h3 id="R03- 臺北 -101- 世貿"><a href="#R03- 臺北 -101- 世貿" class="headerlink" title="R03 臺北 101 / 世貿"></a>R03 臺北 101 / 世貿</h3><h3 id="R02- 象山"><a href="#R02- 象山" class="headerlink" title="R02 象山"></a>R02 象山</h3><p><img src="/2021/05/06/trip-taipei-red/photo2.png" alt="地圖 1"><br><img src="/2021/05/06/trip-taipei-red/photo3.png" alt="地圖 2"> 如果專程想看夜景，建議去捷運站最近的步道入口，沿路都有路燈也比較多人走，會比較安全。</p>
<p><img src="/2021/05/06/trip-taipei-red/photo4.png" alt="六巨石"></p>
<p><center>iG 打卡熱點「六巨石」，在這裡拍照要排隊等待 </center><br><a href="https://trekkingjourney.com/mount-elephant/">【IG 熱點 - 象山步道】怎麼去？附近有啥美食？這篇為你解鎖</a></p>
<h3 id="臺北捷運景點系列"><a href="# 臺北捷運景點系列" class="headerlink" title="臺北捷運景點系列"></a>臺北捷運景點系列 </h3><p><a href="https://wangxchun.github.io/2021/05/06/trip-taipei-brown/"> 臺北捷運文湖線 </a><br><a href="https://wangxchun.github.io/2021/05/06/trip-taipei-red/"> 臺北捷運紅線 (淡水信義線)</a><br><a href="https://wangxchun.github.io/2021/05/06/trip-taipei-green/">臺北捷運綠線 (松山新店線)</a><br><a href="https://wangxchun.github.io/2021/05/06/trip-taipei-yellow/">臺北捷運黃線 (中和新蘆線)</a><br><a href="https://wangxchun.github.io/2021/05/06/trip-taipei-blue/">臺北捷運藍線 (板南線)</a></p>
]]></content>
      <categories>
        <category>生活-出去玩做功課</category>
      </categories>
  </entry>
  <entry>
    <title>臺北捷運黃線 (中和新蘆線)</title>
    <url>/2021/05/06/trip-taipei-yellow/</url>
    <content><![CDATA[<span id="more"></span>
<p><img src="/2021/05/06/trip-taipei-yellow/photo1.jpg" alt="捷運地圖"></p>
<h3 id="臺北捷運景點系列"><a href="# 臺北捷運景點系列" class="headerlink" title="臺北捷運景點系列"></a>臺北捷運景點系列 </h3><p><a href="https://wangxchun.github.io/2021/05/06/trip-taipei-brown/"> 臺北捷運文湖線 </a><br><a href="https://wangxchun.github.io/2021/05/06/trip-taipei-red/"> 臺北捷運紅線 (淡水信義線)</a><br><a href="https://wangxchun.github.io/2021/05/06/trip-taipei-green/">臺北捷運綠線 (松山新店線)</a><br><a href="https://wangxchun.github.io/2021/05/06/trip-taipei-yellow/">臺北捷運黃線 (中和新蘆線)</a><br><a href="https://wangxchun.github.io/2021/05/06/trip-taipei-blue/">臺北捷運藍線 (板南線)</a></p>
]]></content>
      <categories>
        <category>生活-出去玩做功課</category>
      </categories>
  </entry>
  <entry>
    <title>臺北市區</title>
    <url>/2021/05/06/trip-taipei/</url>
    <content><![CDATA[<p><img src="/2021/05/06/trip-taipei/photo1.png" alt="臺北市區地圖"></p>
<h3 id="北投區"><a href="# 北投區" class="headerlink" title="北投區"></a>北投區 </h3><h3 id="士林區"><a href="# 士林區" class="headerlink" title="士林區"></a> 士林區 </h3><h3 id="大同區"><a href="# 大同區" class="headerlink" title="大同區"></a> 大同區 </h3><h3 id="中山區"><a href="# 中山區" class="headerlink" title="中山區"></a> 中山區 </h3><h3 id="内湖區"><a href="# 内湖區" class="headerlink" title="内湖區"></a> 内湖區 </h3><h4 id="文心藝所 -Winsing-Art-Place"><a href="# 文心藝所 -Winsing-Art-Place" class="headerlink" title="文心藝所 Ｗinsing Art Place"></a> 文心藝所 Ｗinsing Art Place</h4><pre><code>捷運板南線昆陽站轉乘「藍 36、284 路」公車至湖興站下車
</code></pre><p>一樓空間打造成展覽專區，不定期展示藝術品，分享收藏及展覽，並把一樓的開放式空間，右側為展覽、講座場域，二樓規畫成書店，放入國內外建築相關讀物，讓入內的人們能在閒適空間內輕鬆接觸藝術。<br>藝所的藏書種類以建築、美學為主，其次為人文類書籍。</p>
<h4 id="劍南山蝶園蝴蝶步道"><a href="# 劍南山蝶園蝴蝶步道" class="headerlink" title="劍南山蝶園蝴蝶步道"></a>劍南山蝶園蝴蝶步道 </h4><p> 在捷運劍南站 1 號出口劍潭古寺旁 </p>
<h4 id="金面山親山步道"><a href="# 金面山親山步道" class="headerlink" title="金面山親山步道"></a>金面山親山步道 </h4><h4 id="白石湖吊橋步道"><a href="# 白石湖吊橋步道" class="headerlink" title="白石湖吊橋步道"></a> 白石湖吊橋步道 </h4><h4 id="樂活公園"><a href="# 樂活公園" class="headerlink" title="樂活公園"></a> 樂活公園 </h4><h3 id="松山區"><a href="# 松山區" class="headerlink" title="松山區"></a> 松山區 </h3><h3 id="信義區"><a href="# 信義區" class="headerlink" title="信義區"></a> 信義區 </h3><h3 id="南港區"><a href="# 南港區" class="headerlink" title="南港區"></a> 南港區 </h3><h3 id="文山區"><a href="# 文山區" class="headerlink" title="文山區"></a> 文山區 </h3><h3 id="中正區"><a href="# 中正區" class="headerlink" title="中正區"></a> 中正區 </h3><h3 id="大安區"><a href="# 大安區" class="headerlink" title="大安區"></a> 大安區 </h3><h3 id="萬華區"><a href="# 萬華區" class="headerlink" title="萬華區"></a> 萬華區</h3>]]></content>
      <categories>
        <category>生活-出去玩做功課</category>
      </categories>
  </entry>
  <entry>
    <title>trip-taiwan-36</title>
    <url>/2021/05/11/trip-taiwan-36/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>台灣賞花地點和季節</title>
    <url>/2021/05/06/trip-taiwan-flower/</url>
    <content><![CDATA[<h3 id="櫻花"><a href="# 櫻花" class="headerlink" title="櫻花"></a>櫻花 </h3><h4 id="北部"><a href="# 北部" class="headerlink" title="北部"></a> 北部 </h4><p> 羅莊櫻花步道    2021/2 月 <br> 三峽大熊櫻花林    2021/3/1～2021/4/15<br>樂活夜櫻季    2021/1/30/2/28<br>陽明山櫻花季    2021/2/5～3/21<br>北橫櫻花季 (拉拉山 / 上巴陵)    2021/2/17～3/21<br>翠墨櫻花季    2021/2/1～3/1</p>
<h4 id="中部"><a href="# 中部" class="headerlink" title="中部"></a>中部 </h4><p> 武陵農場    2021/2/12～3/1<br>奧萬大    2021 / 1～3 月 <br> 草坪頭    2021/1/30～3/14<br>小半天石馬公園    2021/1/30～2/6<br>日月潭九族櫻花季    2021/1/30～3/7</p>
<h4 id="南部"><a href="# 南部" class="headerlink" title="南部"></a>南部 </h4><p> 桃源綻放河津櫻    2021/1/16～2/21<br>霧台櫻花季    2021/2/1～3/1<br>草嶺櫻花季    2021/2/12～3/7<br>烏山頭水庫櫻花    2021 / 2～3 月 <br> 阿里山櫻花季    2021/3/10～4/10</p>
]]></content>
      <categories>
        <category>生活-出去玩做功課</category>
      </categories>
  </entry>
  <entry>
    <title>新北西部</title>
    <url>/2021/05/09/trip-xinbei-west/</url>
    <content><![CDATA[<span id="more"></span>
<p><img src="/2021/05/09/trip-xinbei-west/photo1.jpg" alt="新北地圖"></p>
<h3 id="新北景點"><a href="# 新北景點" class="headerlink" title="新北景點"></a>新北景點 </h3><p><a href="https://wangxchun.github.io/2021/05/09/trip-xinbei-east/"> 新北東部 </a><br><a href="https://wangxchun.github.io/2021/05/09/trip-xinbei-west/"> 新北西部</a></p>
]]></content>
      <categories>
        <category>生活-出去玩做功課</category>
      </categories>
  </entry>
  <entry>
    <title>C++ review(2)</title>
    <url>/2018/10/14/C++%20review2/</url>
    <content><![CDATA[<p><a href="https://wangxchun.github.io/2018/09/30/C++%20review1/">C++ review (1)</a><br><a href="https://wangxchun.github.io/2018/10/14/C++%20review2/">C++ review (2)</a><br><a href="https://wangxchun.github.io/2018/10/14/C++%20review3/">C++ review (3)</a></p>
<h3 id="一、記憶體分區模型"><a href="# 一、記憶體分區模型" class="headerlink" title="一、記憶體分區模型"></a>一、記憶體分區模型</h3><p><img src="/2018/10/14/C++%20review2/photo1.png" alt></p>
<h4 id="1- 程式運行前"><a href="#1- 程式運行前" class="headerlink" title="1. 程式運行前"></a>1. 程式運行前 </h4><p> 在程式編譯後，生成了 exe 可執行程式，未執行該程式前分爲三個區域<br><span id="more"></span><br>(1) 代碼區：共享和只讀的<br>(2) 全局區：全局變量、靜態變量、<br>(3) 常量區：常量、const 修飾的全局常量、字符串常量</p>
<h4 id="2- 程式運行後"><a href="#2- 程式運行後" class="headerlink" title="2. 程式運行後"></a>2. 程式運行後</h4><p>(1) 棧區 (stack)：由編譯器自動分配釋放，存放函數的參數值、局部變量等<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">func</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">return</span> &amp;a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> *p = <span class="built_in">func</span> ();</span><br><span class="line">	cout &lt;&lt; *p &lt;&lt; endl; <span class="comment">// 報錯</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><br><!-- more --><br>(2) 堆區 (heap)：堆區數據由管理員開闢和釋放（利用 new 和 delete）<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">func</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span>* a = <span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span> (<span class="number">10</span>);</span><br><span class="line">	<span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> *p = <span class="built_in">func</span> ();</span><br><span class="line">	cout &lt;&lt; *p &lt;&lt; endl; <span class="comment">// 正確</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></p>
<h4 id="3-new- 和 -delete- 操作符"><a href="#3-new- 和 -delete- 操作符" class="headerlink" title="3.new 和 delete 操作符"></a>3.new 和 delete 操作符</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> *p = <span class="keyword">new</span> <span class="keyword">int</span>;</span><br></pre></td></tr></table></figure>
<p>在這段程式中，new 運算子會配置 int 需要的空間，並傳回該空間的位址，可以使用指標 p 來儲存位址，這段程式只配置空間但不初始空間的值。想在配置完成後指定儲存值，可以如下:<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> *p = <span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span> (<span class="number">100</span>);</span><br></pre></td></tr></table></figure><br>這段程式在配置空間之後，會將空間中的儲存值設定為 100。<br>如果想配置連續個指定型態的空間，可以如下：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> *p = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">1000</span>];</span><br></pre></td></tr></table></figure><br>配置後的空間資料是未知的，[] 中指定的長度可以是來自於運算式，不必是編譯時期就得決定的值，這個值必須自行儲存下來，因為沒有任何方式，可以從 p 得知到底配置的長度是多少。因此上面的方式，會被用來克服陣列大小必須事先決定的問題，也就是可以用來動態地配置連續空間，並當成陣列來操作。<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot; 輸出長度：&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cin &gt;&gt; size;</span><br><span class="line">	<span class="keyword">int</span> *arr = <span class="keyword">new</span> <span class="keyword">int</span> [size](<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot; 指定元素：&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;arr [&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;] =&quot;</span>;</span><br><span class="line">		cin &gt;&gt; arr [i];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="二、引用"><a href="# 二、引用" class="headerlink" title="二、引用"></a>二、引用</h3><h4 id="1- 引用的基本使用"><a href="#1- 引用的基本使用" class="headerlink" title="1. 引用的基本使用"></a>1. 引用的基本使用</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> &amp;b = a;</span><br></pre></td></tr></table></figure>
<h4 id="2- 引用注意事項"><a href="#2- 引用注意事項" class="headerlink" title="2. 引用注意事項"></a>2. 引用注意事項 </h4><p> 引用必須初始化 <br> 引用在初始化後，不可以改變</p>
<h4 id="3- 引用做函數參數"><a href="#3- 引用做函數參數" class="headerlink" title="3. 引用做函數參數"></a>3. 引用做函數參數</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 地址傳遞</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mySwap01</span> <span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span>* b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> temp = *a;</span><br><span class="line">	*a = *b;</span><br><span class="line">	*b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用傳遞</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mySwap02</span> <span class="params">(<span class="keyword">int</span>&amp; a, <span class="keyword">int</span>&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> temp = a;</span><br><span class="line">	a = b;</span><br><span class="line">	b = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通過引用參數產生的效果和按地址傳遞是一樣的，引用的語法更清楚簡單。</p>
<h4 id="4- 引用做函數返回值"><a href="#4- 引用做函數返回值" class="headerlink" title="4. 引用做函數返回值"></a>4. 引用做函數返回值</h4><h5 id="1- 當函數返回引用類型時，沒有複製返回值，返回的是對象本身。"><a href="#1- 當函數返回引用類型時，沒有複製返回值，返回的是對象本身。" class="headerlink" title="(1) 當函數返回引用類型時，沒有複製返回值，返回的是對象本身。"></a>(1) 當函數返回引用類型時，沒有複製返回值，返回的是對象本身。</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 這裡參數用到常量引用，後面會講到</span></span><br><span class="line"><span class="function"><span class="keyword">const</span> string&amp; <span class="title">shorterString</span> <span class="params">(<span class="keyword">const</span> string&amp; s1, <span class="keyword">const</span> string&amp; s2)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> s1.size &lt; s2.size ? s1 : s2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="2- 在函數的參數中，包含引用或指針，需要被返回的參數"><a href="#2- 在函數的參數中，包含引用或指針，需要被返回的參數" class="headerlink" title="(2) 在函數的參數中，包含引用或指針，需要被返回的參數"></a>(2) 在函數的參數中，包含引用或指針，需要被返回的參數</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span>&amp; <span class="title">abc</span> <span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, <span class="keyword">int</span>&amp; result)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	result = a + b + c;</span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以改寫成：</span></span><br><span class="line"><span class="function"><span class="keyword">int</span>&amp; <span class="title">abc</span> <span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, <span class="keyword">int</span>* result)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	result = a + b + c;</span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="3- 不能返回局部對象的引用"><a href="#3- 不能返回局部對象的引用" class="headerlink" title="(3) 不能返回局部對象的引用"></a>(3) 不能返回局部對象的引用 </h5><p> 當函數執行完之後，將釋放分配給局部對象的存儲空間，此時，對局部對象的引用就會指向不確定的空間。</p>
<h5 id="4- 引用返回一個左值"><a href="#4- 引用返回一個左值" class="headerlink" title="(4) 引用返回一個左值"></a>(4) 引用返回一個左值 </h5><h5 id="5- 如果不希望返回的對象被修改，可以返回 -const- 引用"><a href="#5- 如果不希望返回的對象被修改，可以返回 -const- 引用" class="headerlink" title="(5) 如果不希望返回的對象被修改，可以返回 const 引用"></a>(5) 如果不希望返回的對象被修改，可以返回 const 引用</h5><h4 id="5- 引用的本質"><a href="#5- 引用的本質" class="headerlink" title="5. 引用的本質"></a>5. 引用的本質</h4><p> 引用在 C++ 内部實現是一個指針常量，指針常量本身不可改，這也説明了爲什麽引用不可更改<br>C++ 推薦引用，因爲語法方便，引用的本質是指針常量，但是所有的指針操作編譯器幫忙做了<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span> <span class="params">(<span class="keyword">int</span>&amp; ref)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ref = <span class="number">100</span>; <span class="comment">//ref 是引用，轉換成 *ref = 100; </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span>&amp; b = a; <span class="comment">// 自動轉換成 int* const b = &amp;a;</span></span><br><span class="line">	b = <span class="number">20</span>; <span class="comment">// 自動轉換成 *b = 20;</span></span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt;endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;b:&quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">func</span> (a); <span class="comment">// 在函數中轉換成 int* const ref = &amp;a;</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="6- 常量引用"><a href="#6- 常量引用" class="headerlink" title="6. 常量引用"></a>6. 常量引用 </h4><p> 函數中常用常量引用防止誤修改實參，例如：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">const</span> string&amp; <span class="title">shorterString</span> <span class="params">(<span class="keyword">const</span> string&amp; s1, <span class="keyword">const</span> string&amp; s2)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> s1.size &lt; s2.size ? s1 : s2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>常量引用的初始化<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>&amp; ref = <span class="number">10</span>; <span class="comment">// 引用本身需要一個合法空間，10 是沒有地址的，因此這列錯誤</span></span><br></pre></td></tr></table></figure></p>
<h3 id="三、函數進階"><a href="# 三、函數進階" class="headerlink" title="三、函數進階"></a>三、函數進階 </h3><h3 id="四、類和對象"><a href="# 四、類和對象" class="headerlink" title="四、類和對象"></a> 四、類和對象</h3><p>C++ 面向對象的三大特性：封裝、繼承、多態</p>
<h4 id="1- 封裝"><a href="#1- 封裝" class="headerlink" title="1. 封裝"></a>1. 封裝</h4><h5 id="1- 封裝的意義"><a href="#1- 封裝的意義" class="headerlink" title="(1) 封裝的意義"></a>(1) 封裝的意義</h5><h5 id="2-struct- 和 -class- 的區別"><a href="#2-struct- 和 -class- 的區別" class="headerlink" title="(2) struct 和 class 的區別"></a>(2) struct 和 class 的區別</h5><p>struct 默認權限為公有<br>class 默認權限為私有</p>
<h5 id="3- 成員屬性設置為私有"><a href="#3- 成員屬性設置為私有" class="headerlink" title="(3) 成員屬性設置為私有"></a>(3) 成員屬性設置為私有 </h5><p> 將所有成員屬性設置為私有，可以自己控制讀寫權限 <br> 對於寫權限，可以檢測用戶輸入數據的有效性<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//point.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">setX</span> <span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line">		<span class="function"><span class="keyword">int</span> <span class="title">getX</span> <span class="params">()</span></span>;</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">setY</span> <span class="params">(<span class="keyword">int</span> y)</span></span>;</span><br><span class="line">		<span class="function"><span class="keyword">int</span> <span class="title">getY</span> <span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span>:</span><br><span class="line">		<span class="keyword">int</span> m_X;</span><br><span class="line">		<span class="keyword">int</span> m_Y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//point.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;point.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Point:<span class="built_in">setX</span> (<span class="keyword">int</span> x)</span><br><span class="line">&#123;</span><br><span class="line">	m_X = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Point:<span class="built_in">getX</span> ()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> m_X;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setY</span> <span class="params">(<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	m_X = y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getY</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> m_Y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<h4 id="2- 對象的初始化和清理"><a href="#2- 對象的初始化和清理" class="headerlink" title="2. 對象的初始化和清理"></a>2. 對象的初始化和清理 </h4><h5 id="1- 構造函數和析構函數"><a href="#1- 構造函數和析構函數" class="headerlink" title="(1) 構造函數和析構函數"></a>(1) 構造函數和析構函數</h5><p>(a) 如果數據成員包含指針，在析構函數中要 delete 掉<br>(b) 析構函數調用時機<br> 如果對象是動態變量，則當執行完定義該對象的程式區塊時，將調用該對象的析構函數；<br>如果對象是靜態變量 (外部、靜態、靜態外部、來自命名空間)，則在程式結束時調用對象的析構函數；<br>如果對象是用 new 創建的，則僅當顯式使用 delete 刪除對象時，其析構函數才會被調用<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Time *a = <span class="keyword">new</span> <span class="built_in">Time</span> ();</span><br><span class="line">...</span><br><span class="line"><span class="keyword">delete</span> a;</span><br></pre></td></tr></table></figure></p>
<h5 id="2- 構造函數的分類和調用"><a href="#2- 構造函數的分類和調用" class="headerlink" title="(2) 構造函數的分類和調用"></a>(2) 構造函數的分類和調用</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 調用無參構造函數</span></span><br><span class="line">Person p; </span><br><span class="line"><span class="comment">// 調用有參構造函數</span></span><br><span class="line"><span class="function">Person <span class="title">p1</span> <span class="params">(<span class="number">10</span>)</span></span>; <span class="comment">// 刮號法</span></span><br><span class="line"><span class="comment">// 顯式法</span></span><br><span class="line">Person p2 = <span class="built_in">Person</span> (<span class="number">10</span>);</span><br><span class="line">Person p3 = <span class="built_in">Person</span> (p2);</span><br><span class="line"><span class="comment">// 隱式轉換法</span></span><br><span class="line">Person p4 = <span class="number">10</span>;</span><br><span class="line">Person p5 = p4;</span><br></pre></td></tr></table></figure>
<h5 id="3- 複製構造函數調用時機"><a href="#3- 複製構造函數調用時機" class="headerlink" title="(3) 複製構造函數調用時機"></a>(3) 複製構造函數調用時機</h5><p>(a) 使用一個已經創建完畢的對象來初始化一個新對象<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">Person <span class="title">man</span> <span class="params">(<span class="number">100</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">newman1</span> <span class="params">(man)</span></span>; <span class="comment">// 調用複製構造函數</span></span><br><span class="line">Person newman2 = man; <span class="comment">// 調用複製構造函數</span></span><br><span class="line">Person newman3;</span><br><span class="line">newman3 = man1; <span class="comment">// 這是賦值，不是調用複製構造函數</span></span><br></pre></td></tr></table></figure><br>(b) 值傳遞的方式給函數參數傳值<br>(c) 以值方式返回局部對象<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">Time <span class="title">Time::max</span> <span class="params">(<span class="keyword">const</span> Time &amp;t1, <span class="keyword">const</span> Time &amp;t2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> t1;</span><br><span class="line">	<span class="comment">// 值方式返回，需要創建一份 t1 對象的副本 (調用複製構造函數)，效率比較低</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 因爲在參數中聲明 t1 為 const 類型的，所以返回值也必須聲明為 const</span></span><br><span class="line"><span class="function"><span class="keyword">const</span> Time&amp; <span class="title">Time::max</span> <span class="params">(<span class="keyword">const</span> Time &amp;t1, <span class="keyword">const</span> Time &amp;t2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> t1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h5 id="4- 構造函數調用規則"><a href="#4- 構造函數調用規則" class="headerlink" title="(4) 構造函數調用規則"></a>(4) 構造函數調用規則 </h5><p> 如果用戶定義有參構造函數，C++ 不再提供默認無參構造函數，但是會提供默認複製函數 <br> 如果用戶定義複製構造函數，C++ 不會再提供其他構造函數</p>
<h5 id="5- 淺複製和深複製"><a href="#5- 淺複製和深複製" class="headerlink" title="(5) 淺複製和深複製"></a>(5) 淺複製和深複製 </h5><p> 淺複製：簡單的賦值複製操作 <br> 深複製：在堆區重新申請空間，進行複製操作<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Person</span> (<span class="keyword">const</span> Person&amp; p)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 如果不利用深複製在堆區創建新空間，會導致淺複製帶來的重複釋放堆區的問題</span></span><br><span class="line">	<span class="comment">// 因爲如果單純的進行指針賦值，兩個不同對象的指針成員會指向同一個空間</span></span><br><span class="line">	age = p.age;</span><br><span class="line">	height = <span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span> (*p.height);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h5 id="6- 初始化列表"><a href="#6- 初始化列表" class="headerlink" title="(6) 初始化列表"></a>(6) 初始化列表</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Person</span> (<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c):<span class="built_in">m_A</span> (a), <span class="built_in">m_B</span> (b), <span class="built_in">m_C</span> (c) &#123;&#125;;</span><br></pre></td></tr></table></figure>
<h5 id="7- 類對象作爲類成員"><a href="#7- 類對象作爲類成員" class="headerlink" title="(7) 類對象作爲類成員"></a>(7) 類對象作爲類成員 </h5><p> 當類中成員是其他類對象時，我們稱該成員為對象成員 <br> 構造的順序是：先調用對象成員的構造，再調用本類構造；析構順序與構造相反</p>
<h5 id="8- 靜態成員"><a href="#8- 靜態成員" class="headerlink" title="(8) 靜態成員"></a>(8) 靜態成員 </h5><p> 非整型 / 枚舉型 const 的靜態屬性，都必須在實現檔案 (.cpp) 中進行初始化，且不能在成員函數中 <br> 整型 / 枚舉型 const 的靜態屬性，才可以且必須在聲明檔案 (.h) 中初始化 <br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Time.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> TIME_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TIME_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Time</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> hours;</span><br><span class="line">	<span class="keyword">int</span> minutes;</span><br><span class="line">	<span class="keyword">int</span> seconds;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> count;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Time</span> ();</span><br><span class="line">	<span class="built_in">Time</span> (<span class="keyword">int</span> h = <span class="number">0</span>, <span class="keyword">int</span> m = <span class="number">0</span>, <span class="keyword">int</span> s = <span class="number">0</span>);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Time.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Time.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span> <span class="comment">//abort () 函數</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> Time::count = <span class="number">0</span>;<span class="comment">// 初始化時不用加 static</span></span><br><span class="line"> </span><br><span class="line">Time::<span class="built_in">Time</span> ()</span><br><span class="line">&#123;</span><br><span class="line">	hours = minutes = seconds = <span class="number">0</span>;</span><br><span class="line">	count++;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">Time::<span class="built_in">Time</span> (<span class="keyword">int</span> h, <span class="keyword">int</span> m, <span class="keyword">int</span> s)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (h &lt; <span class="number">0</span> || h &gt; <span class="number">24</span> || m &gt; <span class="number">60</span> || m &lt; <span class="number">0</span> || s &gt; <span class="number">60</span> || s &lt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot; 初始化參數輸入有誤，程式終止！&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="built_in">abort</span> (); <span class="comment">// 終止程式執行，直接從調用的地方跳出</span></span><br><span class="line">	&#125;</span><br><span class="line">	hours = h;</span><br><span class="line">	minutes = m;</span><br><span class="line">	seconds = s;</span><br><span class="line">	count++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>(a) 靜態成員變量<br> 所有對象共享一份數據 <br> 在編譯階段分配記憶體 <br> 類内聲明，類外初始化 <br>(b) 靜態成員函數<br> 所有對象共享同一個函數 <br> 靜態成員函數只能訪問靜態成員變量（因爲調用靜態函數時，不會有 this 指針）</p>
<h4 id="3-C- 對象模型和 -this- 指針"><a href="#3-C- 對象模型和 -this- 指針" class="headerlink" title="3.C++ 對象模型和 this 指針"></a>3.C++ 對象模型和 this 指針 </h4><h5 id="1- 成員變量和成員函數分開存儲"><a href="#1- 成員變量和成員函數分開存儲" class="headerlink" title="(1) 成員變量和成員函數分開存儲"></a>(1) 成員變量和成員函數分開存儲</h5><p> 非靜態成員變量占對象空間；靜態成員變量不占對象空間 <br> 非靜態成員函數不占對象空間，所有對象共享一個函數實例；靜態成員函數不占對象空間</p>
<h5 id="2-this- 指針的概念"><a href="#2-this- 指針的概念" class="headerlink" title="(2) this 指針的概念"></a>(2) this 指針的概念 </h5><p> 所有同類型的對象共享一個函數實例，那如何區分是哪個對象調用該函數呢？<br>this 指針指向被調用的成員函數所屬的對象 <br>(a) 當形參和成員變量同名時，可以用 this 指針來區分，隱含在每一個非靜態成員函數内，不須定義，可以直接使用<br>(b) 在類的非靜態函數中返回對象本身，可以使用 return *this;<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"> 訪問對象就可以連續調用</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="built_in">Person</span> (<span class="keyword">int</span> age)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function">Person&amp; <span class="title">PersonAddPerson</span> <span class="params">(Person p)</span></span></span><br><span class="line"><span class="function">		</span>&#123;</span><br><span class="line">			<span class="keyword">this</span>-&gt;age = p.age;</span><br><span class="line">			<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Person <span class="title">p1</span> <span class="params">(<span class="number">20</span>)</span></span>;</span><br><span class="line">	<span class="function">Person <span class="title">p2</span> <span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">	p2.<span class="built_in">PersonAddPerson</span> (p1).<span class="built_in">PersonAddPerson</span> (p1).<span class="built_in">PersonAddPerson</span> (p1);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;p2.age =&quot;</span> &lt;&lt; p2.age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h5 id="3- 空指針訪問成員函數"><a href="#3- 空指針訪問成員函數" class="headerlink" title="(3) 空指針訪問成員函數"></a>(3) 空指針訪問成員函數 </h5><p> 空指針可以訪問屬性是 public 的成員函數，但是函數中不可以用到 this 指針<br><img src="/2018/10/14/C++%20review2/photo2.png" alt><br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">foo</span> <span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;B foo&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    B *somenull = <span class="literal">NULL</span>;</span><br><span class="line">    somenull-&gt;<span class="built_in">foo</span> ();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h5 id="4-const- 修飾成員函數"><a href="#4-const- 修飾成員函數" class="headerlink" title="(4) const 修飾成員函數"></a>(4) const 修飾成員函數 </h5><p>(a) 常函數<br> 若成員函數後加 const，我們稱這個函數為常函數 <br> 常函數不可以修改成員屬性 <br> 但如果成員屬性在聲明時加關鍵字 mutable，在常函數中依然可以修改 <br>(b) 常對象<br> 聲明對象前加 const 稱爲常對象 <br> 常對象只能調用常函數</p>
<h4 id="4- 友元"><a href="#4- 友元" class="headerlink" title="4. 友元"></a>4. 友元 </h4><p> 友元就是讓類外某些特殊的函數或類訪問另一個類中的私有成員</p>
<h5 id="1- 全局函數做友元"><a href="#1- 全局函數做友元" class="headerlink" title="(1) 全局函數做友元"></a>(1) 全局函數做友元</h5><h5 id="2- 類做友元"><a href="#2- 類做友元" class="headerlink" title="(2) 類做友元"></a>(2) 類做友元</h5><h5 id="3- 成員函數做友元"><a href="#3- 成員函數做友元" class="headerlink" title="(3) 成員函數做友元"></a>(3) 成員函數做友元</h5><h4 id="5- 運算符重載"><a href="#5- 運算符重載" class="headerlink" title="5. 運算符重載"></a>5. 運算符重載</h4><h5 id="1- 加號運算符重載"><a href="#1- 加號運算符重載" class="headerlink" title="(1) 加號運算符重載"></a>(1) 加號運算符重載</h5><p>(a) 利用成員函數實現加號重載<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Person <span class="keyword">operator</span>+ (<span class="keyword">const</span> Person &amp;p)</span><br><span class="line">&#123;</span><br><span class="line">	Person temp;</span><br><span class="line">	temp.m_A = <span class="keyword">this</span>-&gt;m_A + p.m_A;</span><br><span class="line">	temp.m_B = <span class="keyword">this</span>-&gt;m_B + p.m_B;</span><br><span class="line">	<span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person p3 = p1.opertor+(p2);</span><br><span class="line"><span class="comment">// 可以簡化成 (使用編譯器提供的名稱)：</span></span><br><span class="line">Person p3 = p1 + p2;</span><br></pre></td></tr></table></figure><br>(b) 利用全局函數重載加號<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Person <span class="keyword">operator</span>+ (Person &amp;p1, Person &amp;p2)</span><br><span class="line">&#123;</span><br><span class="line">	Person temp;</span><br><span class="line">	temp.m_A = p1.m_A + p2.m_A;</span><br><span class="line">	temp.m_B = p1.m_B + p2.m_B;</span><br><span class="line">	<span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person p3 = <span class="keyword">operator</span>+ (p1, p2);</span><br><span class="line"><span class="comment">// 可以簡化成:</span></span><br><span class="line">Person p3 = p1 + p2;</span><br></pre></td></tr></table></figure><br>(c) 全局函數又實現一次函數重載<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Person <span class="keyword">operator</span>+ (<span class="keyword">const</span> Person &amp;p1, <span class="keyword">int</span> val)</span><br><span class="line">&#123;</span><br><span class="line">	Person temp;</span><br><span class="line">	temp.m_A = p1.m_A + val;</span><br><span class="line">	temp.m_B = p2.m_A + val;</span><br><span class="line">	<span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h5 id="2- 左移運算符重載"><a href="#2- 左移運算符重載" class="headerlink" title="(2) 左移運算符重載"></a>(2) 左移運算符重載</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">Person p;</span><br><span class="line">p.m_A = <span class="number">10</span>;</span><br><span class="line">p.m_B = <span class="number">20</span>;</span><br><span class="line">cout &lt;&lt; p &lt;&lt; endl; <span class="comment">// 不知道你有什麽屬性成員 // 運算符沒有和操作數匹配</span></span><br></pre></td></tr></table></figure>
<p>(a) 利用成員函數重載 (不會使用)<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="keyword">operator</span>&lt;&lt;(Person &amp;p);</span><br><span class="line"><span class="comment">//p.operator (p) 不是我們想要的效果</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="keyword">operator</span>&lt;&lt;(cout);</span><br><span class="line"><span class="comment">//p.operator (p) 簡化后可以寫成 p &lt;&lt; cout 但是我們想要的結果是 cout &lt;&lt; p</span></span><br></pre></td></tr></table></figure><br>(b) 利用全局函數實現左移重載<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//cout 這個對象全局只能有一個，所以要用引用的，不能創建一個新的</span></span><br><span class="line"><span class="comment">//operator&lt;&lt;(cout, p) 簡化成 cout &lt;&lt; p</span></span><br><span class="line"><span class="comment">// 返回 cout 類型，才可以連續輸出</span></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, Person&amp; p)</span><br><span class="line">&#123;</span><br><span class="line">	out &lt;&lt; <span class="string">&quot;m_A =&quot;</span> &lt;&lt; p.m_A &lt;&lt; <span class="string">&quot;, m_B =&quot;</span> &lt;&lt; p.m_B;</span><br><span class="line">	<span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果 m_A 和 m_B 是私有成員屬性，就要把重載函數設定成友元</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, Person&amp; p);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h5 id="3- 遞增運算符重載"><a href="#3- 遞增運算符重載" class="headerlink" title="(3) 遞增運算符重載"></a>(3) 遞增運算符重載</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInteger</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt; (ostream&amp; out, MyInteger myint);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="built_in">MyInteger</span> ()</span><br><span class="line">		&#123;</span><br><span class="line">			m_Num = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 返回引用是爲了對同一個數據進行遞增操作 ++(++a)</span></span><br><span class="line">		MyInteger&amp; <span class="keyword">operator</span>++ ()</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">// 先自增</span></span><br><span class="line">			m_Num ++;</span><br><span class="line">			<span class="comment">// 再返回</span></span><br><span class="line">			<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//int 代表占位參數，可以用於區分前置和後置</span></span><br><span class="line">		<span class="comment">// 後置要返回值，不能返回引用，不然就是返回局部對象的引用，會出錯</span></span><br><span class="line">		MyInterger <span class="keyword">operator</span>+ (<span class="keyword">int</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			MyInteger temp = *<span class="keyword">this</span>;</span><br><span class="line">			m_Num++;</span><br><span class="line">			<span class="keyword">return</span> temp;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">private</span>:</span><br><span class="line">		<span class="keyword">int</span> m_Num;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt; (ostream&amp; out, MyInteger myint)</span><br><span class="line">&#123;</span><br><span class="line">	out &lt;&lt; myint.m_Num;</span><br><span class="line">	<span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="4- 賦值運算符重載"><a href="#4- 賦值運算符重載" class="headerlink" title="(4) 賦值運算符重載"></a>(4) 賦值運算符重載 </h5><p>C++ 編譯器至少給一個類添加 4 個函數<br>(a) 默認構造函數（無參，函數體為空）<br>(b) 默認析構函數（無參，函數體爲空）<br>(c) 默認複製構造函數，對屬性進行值拷貝<br>(d) 賦值運算符 operator=，對屬性進行值拷貝<br> 如果類中有屬性指向堆區，做賦值操作時也會出現深淺拷貝<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="built_in">Person</span> (<span class="keyword">int</span> age)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">// 將年齡數據開闢到堆區</span></span><br><span class="line">			m_Age = <span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span> (age);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 重載賦值運算符，要返回自身，才可以做連續賦值</span></span><br><span class="line">		Person&amp; <span class="keyword">operator</span>= (Person &amp;p)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">// 編譯器提供的函數是淺拷貝</span></span><br><span class="line">			<span class="comment">//m_Age = p.m_Age;</span></span><br><span class="line"></span><br><span class="line">			<span class="comment">// 應先判斷是否有屬性在堆區，如果有先釋放乾净，然後再深拷貝</span></span><br><span class="line">			<span class="keyword">if</span> (m_Age != <span class="literal">NULL</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">delete</span> m_Age;</span><br><span class="line">				m_Age = <span class="literal">NULL</span>;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// 深拷貝，會造成兩個不同的對象的屬性成員指針指向同一個空間</span></span><br><span class="line">			m_Age = <span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span> (*p.m_Age);</span><br><span class="line"></span><br><span class="line">			<span class="comment">// 返回自身</span></span><br><span class="line">			<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		~<span class="built_in">Person</span> ()</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (m_Age != <span class="literal">NULL</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">delete</span> m_Age;</span><br><span class="line">				m_Age = <span class="literal">NULL</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 指向年齡的指針</span></span><br><span class="line">		<span class="keyword">int</span> *m_Age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h5 id="5- 關係運算符重載"><a href="#5- 關係運算符重載" class="headerlink" title="(5) 關係運算符重載"></a>(5) 關係運算符重載</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="built_in">Person</span> (string name, <span class="keyword">int</span> age)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">			<span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">bool</span> <span class="keyword">operator</span>== (Person &amp;p)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Name == p.m_Name &amp;&amp; <span class="keyword">this</span>-&gt;m_Age == p.m_Age)</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="keyword">bool</span> <span class="keyword">operator</span>!= (Person &amp;p)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Name == p.m_Name &amp;&amp; <span class="keyword">this</span>-&gt;m_Age == p.m_Age)</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h5 id="6- 函數調用運算符重載"><a href="#6- 函數調用運算符重載" class="headerlink" title="(6) 函數調用運算符重載"></a>(6) 函數調用運算符重載 </h5><p> 由於重載之後使用的方式非常像函數的調用，因此稱爲仿函數 <br> 仿函數沒有固定寫法，非常靈活<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPrint</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">operator</span> <span class="params">()</span><span class="params">(string next)</span></span></span><br><span class="line"><span class="function">		</span>&#123;</span><br><span class="line">			cout &lt;&lt; text &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyAdd</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="function"><span class="keyword">int</span> <span class="title">operator</span> <span class="params">()</span><span class="params">(<span class="keyword">int</span> v1, <span class="keyword">int</span> v2)</span></span></span><br><span class="line"><span class="function">		</span>&#123;</span><br><span class="line">			<span class="keyword">return</span> v1+v2;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	MyPrint myFunc;</span><br><span class="line">	<span class="built_in">myFunc</span> (<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line"></span><br><span class="line">	MyAdd add;</span><br><span class="line">	<span class="keyword">int</span> ret = <span class="built_in">add</span> (<span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">	cout &lt;&lt; ret &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 匿名函數對象，當前列用完了即被釋放</span></span><br><span class="line">	cout &lt;&lt; <span class="built_in">MyAdd</span> ()(<span class="number">100</span>, <span class="number">100</span>) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="6- 繼承"><a href="#6- 繼承" class="headerlink" title="6. 繼承"></a>6. 繼承 </h4><p> 繼承可以減少重複的程式塊<br>class A : public B<br>A 類稱爲子類 或 派生類<br>B 類稱爲父類 或 基類</p>
<p>派生類中的成員，包含兩大部分：<br>一類是從基類繼承過來的，一類是自己增加的成員 <br> 從基類繼承過來的表現其共性，而新增的成員體現其個性</p>
<h5 id="1- 繼承的基本語法"><a href="#1- 繼承的基本語法" class="headerlink" title="(1) 繼承的基本語法"></a>(1) 繼承的基本語法 </h5><p> 以簡易版頁面顯示爲例：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasePage</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">header</span> <span class="params">()</span></span></span><br><span class="line"><span class="function">		</span>&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot; 頁面、公開課、登錄、注冊...（公共頭部）&quot;</span> &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">footer</span> <span class="params">()</span></span></span><br><span class="line"><span class="function">		</span>&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot; 幫助中心、交流合作、站内地圖...（公共底部）&quot;</span> &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">left</span> <span class="params">()</span></span></span><br><span class="line"><span class="function">		</span>&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;Java,Python,C++...（公共分類列表）&quot;</span> &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Java</span> :</span> <span class="keyword">public</span> BasePage</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">content</span> <span class="params">()</span></span></span><br><span class="line"><span class="function">		</span>&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;JAVA 學科影片 &quot;</span> &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Python</span> :</span> <span class="keyword">public</span> BasePage</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">content</span> <span class="params">()</span></span></span><br><span class="line"><span class="function">		</span>&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;Python 學科影片 &quot;</span> &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>++ :</span> <span class="keyword">public</span> BasePage</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">content</span> <span class="params">()</span></span></span><br><span class="line"><span class="function">		</span>&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;C++ 學科影片 &quot;</span> &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h5 id="2- 繼承方式"><a href="#2- 繼承方式" class="headerlink" title="(2) 繼承方式"></a>(2) 繼承方式</h5><p><img src="/2018/10/14/C++%20review2/photo3.png" alt></p>
<h5 id="3- 繼承中的對象模型"><a href="#3- 繼承中的對象模型" class="headerlink" title="(3) 繼承中的對象模型"></a>(3) 繼承中的對象模型 </h5><p> 父類中所有非靜態成員屬性都會被子類繼承下去 <br> 父類中私有成員屬性是被編譯器給隱藏了，因此是訪問不到的，但是確實被繼承了 <br>Q: 怎麽得知？<br>(a) cout &lt;&lt; sizeof (Son) &lt;&lt; endl;<br>(b) 利用工具查看<br> 打開 Visual Studio 的 Developer Command Prompt<br>定位到當前.cpp 檔案的槽，cd 進入檔案所在位置 <br> 然後輸入 cl /d1 reportSingleClassLayout 查看的類名 所屬檔案名</p>
<h5 id="4- 繼承中構造和析構順序"><a href="#4- 繼承中構造和析構順序" class="headerlink" title="(4) 繼承中構造和析構順序"></a>(4) 繼承中構造和析構順序 </h5><p> 先調用父類構造函數，再調用子類構造函數，析構順序與構造相反</p>
<h5 id="5- 繼承中同名成員的處理方式"><a href="#5- 繼承中同名成員的處理方式" class="headerlink" title="(5) 繼承中同名成員的處理方式"></a>(5) 繼承中同名成員的處理方式 </h5><p> 子類對象可以直接訪問到子類中同名成員 <br> 子類對象加作用域可以訪問到父類中同名成員 <br> 當子類與父類擁有同名的成員函數，子類會隱藏父類中所有版本的同名成員函數 (包含重載)，加作用域可以訪問</p>
<h5 id="6- 繼承中同名靜態成員的處理方式"><a href="#6- 繼承中同名靜態成員的處理方式" class="headerlink" title="(6) 繼承中同名靜態成員的處理方式"></a>(6) 繼承中同名靜態成員的處理方式 </h5><p> 同名靜態成員處理方式和非靜態成員處理方式一樣，只不過有兩種訪問方式 (通過對象 和 通過類名)</p>
<h5 id="7- 多繼承語法"><a href="#7- 多繼承語法" class="headerlink" title="(7) 多繼承語法"></a>(7) 多繼承語法 </h5><p>C++ 允許一個類繼承多個類<br> 多繼承可能會引發父類中有同名成員出現，需要加作用域區分<br>C++ 實際開發中不建議用多繼承<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> :</span> <span class="keyword">public</span> Base2, <span class="keyword">public</span> Base1</span><br><span class="line">&#123;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h5 id="8- 菱形繼承"><a href="#8- 菱形繼承" class="headerlink" title="(8) 菱形繼承"></a>(8) 菱形繼承 </h5><p>(a) 菱形繼承的概念<br> 兩個派生類繼承同一個基類 <br> 又有個類同時繼承這兩個派生類 <br> 這種繼承被稱爲菱形繼承，或者鑽石繼承 <br>(b) 舉例<br> 羊繼承了動物的數據，駝也繼承了動物的數據，草泥馬多繼承了羊和駝的數據 <br>(c) 問題<br> 草泥馬繼承自動物的數據就有了兩份，當草泥馬使用數據的時候就會產生歧義 <br> 子類繼承了兩份相同的數據，導致資源浪費以及毫無意義 <br>(d) 解決<br> 利用虛繼承可以解決菱形繼承的問題，相當於共享數據<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="keyword">int</span> m_Age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sheep</span> :</span> <span class="keyword">virtual</span> <span class="keyword">public</span> Animal &#123;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tuo</span> :</span> <span class="keyword">virtual</span> <span class="keyword">public</span> Animal &#123;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SheepTuo</span> :</span> <span class="keyword">public</span> Sheep, <span class="keyword">public</span> Tuo &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	SheepTuo st;</span><br><span class="line">	st.Sheep::m_Age = </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="7- 多態"><a href="#7- 多態" class="headerlink" title="7. 多態"></a>7. 多態 </h4><h3 id="五、檔案操作"><a href="# 五、檔案操作" class="headerlink" title="五、檔案操作"></a> 五、檔案操作</h3>]]></content>
      <categories>
        <category>C++ review</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>新北東部</title>
    <url>/2021/05/09/trip-xinbei-east/</url>
    <content><![CDATA[<span id="more"></span>
<p><img src="/2021/05/09/trip-xinbei-east/photo1.jpg" alt="新北地圖"></p>
<h3 id="一、貢寮區"><a href="# 一、貢寮區" class="headerlink" title="一、貢寮區"></a>一、貢寮區 </h3><h4 id="九孔水池"><a href="# 九孔水池" class="headerlink" title="九孔水池"></a> 九孔水池 </h4><p> 沿著台二線奔馳，沿路可見不少九孔池。</p>
<h4 id="北勢坑溯溪"><a href="# 北勢坑溯溪" class="headerlink" title="北勢坑溯溪"></a>北勢坑溯溪 </h4><p> 先從道路邊徒步至海邊，緊接著順著北勢坑溯溪而上，整個溯溪路程約莫 30-40 分鐘，沿途水質清澈，不時可見紅娘、蜻蜓飛舞，魚兒螃蟹悠游，其中還隱藏著一處舊時的橋墩，格外適合取景拍攝。建議參與導覽活動以及著溯溪鞋較為安全。</p>
<h4 id="卯澳石頭古厝建築"><a href="# 卯澳石頭古厝建築" class="headerlink" title="卯澳石頭古厝建築"></a>卯澳石頭古厝建築 </h4><p> 早期物資匱乏，多半建築都是就地取材，其中貢寮卯澳一帶的石頭古厝建築就是一個經典代表，<br>取自海岸的砂岩加上山上的竹材搭建而成。<br><img src="/2021/05/09/trip-xinbei-east/photo20.jpg" alt="卯澳石頭古厝建築"></p>
<h4 id="萊萊地質區"><a href="# 萊萊地質區" class="headerlink" title="萊萊地質區"></a>萊萊地質區 </h4><p> 萊萊地質區為厚砂岩與頁岩互層，隨著風化侵蝕，易侵蝕的砂頁岩被剝蝕，留下質地堅硬的岩牆，形成如今平行排列的黑色怪岩，條列行布的景致，也因此被稱作為「魔鬼的洗衣板」。<br><img src="/2021/05/09/trip-xinbei-east/photo21.jpg" alt="萊萊地質區"></p>
<h4 id="三貂角燈塔"><a href="# 三貂角燈塔" class="headerlink" title="三貂角燈塔"></a>三貂角燈塔 </h4><pre><code> 可以選擇開車直達燈塔或是停在山腳下馬崗社區前的免費停車場，步行上去大約 5-10 分鐘，並不會很久，
大部分的人都會開車直達燈塔旁的停車場，但假日的時候車位有限，建議還是停在山腳下比較保險。
</code></pre><p><img src="/2021/05/09/trip-xinbei-east/photo5.png" alt="熱門拍婚紗地點"><center> 熱門拍婚紗地點 </center><br>台灣島上極東 — 三貂角燈塔，這裡也是看日出的極佳之地。<br>燈塔是二戰曾遭損毀，民國 35 年修復運作，目前仍殘留有當年戰爭機槍掃射的痕跡。<br>三貂角與鼻頭角及富貴角合稱為北台灣三角。<br>從涼亭能遠眺「馬崗社區」的風景及濱海公路，馬崗村是台灣最東邊的村落，現在仍還保有石頭古厝。</p>
<p><img src="/2021/05/09/trip-xinbei-east/photo3.jpg" alt="馬崗街 27 號咖啡小館"><center> 馬崗街 27 號咖啡小館 - 台灣最東邊的咖啡館 </center></p>
<h4 id="草嶺古道"><a href="# 草嶺古道" class="headerlink" title="草嶺古道"></a>草嶺古道</h4><p><a href="https://www.necoast-nsa.gov.tw/Festival-Content.aspx?a=307&amp;l=1">2020 年交通部觀光局草嶺古道芒花季的官網</a></p>
<pre><code>【福隆火車站】→【福隆遊客中心】→【遠望坑親水公園】→【草嶺古道】入口
→【雄鎮蠻煙碑】拍照留念→【野餐區】休息→【埡口涼亭】拍照休息
→【護管所】喝茶→【草嶺古道】出口→【草嶺慶雲宮】天公廟祈福吃平安粥
→【大里火車站】搭火車或【大里遊客中心】搭接駁車至「福隆遊客中心」轉火車
</code></pre><p>埡口涼亭：埡口，就是兩山交會點為自然形成的凹地，即「鞍部」；整個山，面迎台灣北部強大的東北季風，加上雪山山脈高山阻擋，季風沿著山谷上升，使風勢強勁、終年不停息，所以附近只有低矮的芒草及地被植物得以生長，這也是為什麼強韌的芒草可以在這裡生存的很好。<br><img src="/2021/05/09/trip-xinbei-east/photo6.png" alt="草嶺古道芒花"></p>
<h4 id="舊草嶺隧道"><a href="# 舊草嶺隧道" class="headerlink" title="舊草嶺隧道"></a>舊草嶺隧道 </h4><p> 除了開通古道以外，隨著鐵路發展也有了「草嶺隧道」，後來不敷使用而另建新草嶺隧道，原先的隧道則閒置荒廢，直到 98 年重新開放後，成為貢寮一條相當愜意的自行車道，奔馳在隧道之中還能跨越北宜之間，來回騎乘約莫 30 分鐘。<br><img src="/2021/05/09/trip-xinbei-east/photo22.jpg" alt="舊草嶺隧道"></p>
<h4 id="龍洞"><a href="# 龍洞" class="headerlink" title="龍洞"></a>龍洞 </h4><p> 龍洞灣海洋公園，可以玩水或烤肉 (烤肉要預約)<br><img src="/2021/05/09/trip-xinbei-east/photo8.png" alt="龍洞灣海洋公園價目表"><center> 龍洞灣海洋公園價目表 </center></p>
<h4 id="桃源谷大草原"><a href="# 桃源谷大草原" class="headerlink" title="桃源谷大草原"></a>桃源谷大草原 </h4><p> 開車來比較方便<br><img src="/2021/05/09/trip-xinbei-east/photo7.jpg" alt="桃源谷大草原"></p>
<h4 id="老街五號藝術咖啡屋"><a href="# 老街五號藝術咖啡屋" class="headerlink" title="老街五號藝術咖啡屋"></a>老街五號藝術咖啡屋 </h4><p> 有種個人興趣私藏的風格，旁邊都是老闆自己個人蒐藏小物 <br> 咖啡屋內有店家自己親手製作的手工藝十字繡藝術作品<br><img src="/2021/05/09/trip-xinbei-east/photo2.jpg" alt="老街五號藝術咖啡屋"></p>
<h4 id="貢寮有機書店 - 林榮豐米店"><a href="# 貢寮有機書店 - 林榮豐米店" class="headerlink" title="貢寮有機書店 林榮豐米店"></a>貢寮有機書店 林榮豐米店 </h4><p> 與「老街五號藝術咖啡屋」在同一條貢寮巷弄（這條街是貢寮老街，街口是貢寮老街駐地工作站）<br>可以捐書，也可隨緣帶走喜歡的書（鼓勵換書），自助書店的概念，是政府的文創補助計劃。<br><img src="/2021/05/09/trip-xinbei-east/photo3.jpg" alt="貢寮有機書店"></p>
<h4 id="田邊聊寮"><a href="# 田邊聊寮" class="headerlink" title="田邊聊寮"></a>田邊聊寮 </h4><p> 賣咖啡、介紹水梯田的故事<br><img src="/2021/05/09/trip-xinbei-east/photo24.png" alt="田邊聊寮"></p>
<h4 id="海鮮"><a href="# 海鮮" class="headerlink" title="海鮮"></a>海鮮 </h4><p> 位於沿海地帶的貢寮，孕育出許多新鮮的海鮮，其中小卷和九孔更是貢寮在地的特色海產，幾乎每到餐廳，每一桌上必定會出現的佳餚。</p>
<h3 id="二、瑞芳區"><a href="# 二、瑞芳區" class="headerlink" title="二、瑞芳區"></a>二、瑞芳區 </h3><p> 推薦住宿：不厭晴民宿</p>
<h4 id="九份老街"><a href="# 九份老街" class="headerlink" title="九份老街"></a>九份老街 </h4><pre><code> 雖然九份可以自己開車前往，但如果是假日去的話，停車位非常難找。
</code></pre><p>九份位在新北市的瑞芳區，早期因為盛產金礦而興盛，有黃金山城之稱。不過後來礦坑挖掘殆盡而因此沒落，一直到 1990 年代後侯孝賢導演的電影《悲情城市》在九份取景，才讓九份獨特的歷史建築和坡地景觀再次受到注目，現在已經成為非常受到歡迎的觀光地，許多外國遊客都會慕名而來。<br>我們一般俗稱的九份老街包含基山街和豎崎路一帶。<br>九分山城可以看夜景和日出。<br><img src="/2021/05/09/trip-xinbei-east/photo25.png" alt="夜晚的九份老街"><center> 九份老街大約晚上 9 點 - 10 點店家就會陸續休息 </center><br><img src="/2021/05/09/trip-xinbei-east/photo26.png" alt="九份山城空拍夜景"><center> 九份山城空拍夜景 </center></p>
<h5 id="基山觀海亭"><a href="# 基山觀海亭" class="headerlink" title="基山觀海亭"></a>基山觀海亭 </h5><p> 通往九份老街的舊道入口時，會先經過基山觀海亭， 基山觀海亭外觀看起來充滿歷史歲月的痕跡，雖說建築有點老舊，但登上涼亭，眺望的美景依舊讓人覺得療癒呀。基山觀海亭可以欣賞基隆嶼、基隆港、八斗子及和平島，相當動人的海岸線景觀，也很值得旅人走上來欣賞。</p>
<h5 id="九份茶坊"><a href="# 九份茶坊" class="headerlink" title="九份茶坊"></a>九份茶坊 </h5><p> 九份茶坊包含茶坊與藝術館兩個部分，展示了許多飲茶相關文化的器具，還有固定時間的導覽活動。</p>
<h5 id="九份阿妹茶樓"><a href="# 九份阿妹茶樓" class="headerlink" title="九份阿妹茶樓"></a>九份阿妹茶樓 </h5><p> 外觀非常特別，很像是《神隱少女》中湯婆婆的湯屋。<br>來到阿妹茶樓就是要坐在外邊的位置眺望九份山城的風景，另外推薦阿妹茶樓的高山茶，會有服務員到桌邊幫你沖茶。</p>
<h5 id="九份泥人吳"><a href="# 九份泥人吳" class="headerlink" title="九份泥人吳"></a>九份泥人吳</h5><p><img src="/2021/05/09/trip-xinbei-east/photo9.jpg" alt="九份泥人吳"></p>
<h5 id="九份昇平戲院"><a href="# 九份昇平戲院" class="headerlink" title="九份昇平戲院"></a>九份昇平戲院 </h5><p> 經過重新整修後才成為現在的樣子。整座戲院保留 1961 年的風格，門口的復古售票口、老電影海報，還有戲院內的販賣部以及展示品，非常值得來體驗當時看電影的氛圍！</p>
<h5 id="九份美食"><a href="# 九份美食" class="headerlink" title="九份美食"></a>九份美食 </h5><p> 阿柑姨芋圓、賴阿婆芋圓 <br> 阿蘭草仔粿 <br> 金枝紅糟肉圓 <br> 郵局前油蔥粿</p>
<h4 id="金瓜石 - 黃金博物館"><a href="# 金瓜石 - 黃金博物館" class="headerlink" title="金瓜石 - 黃金博物館"></a>金瓜石 - 黃金博物館 </h4><p> 在博物館裡展示許多當時採礦的工具、模擬模型、歷史等等，最有名的就是博物館裡的超大金磚。<br>這塊金磚是可以讓大家觸摸的，重量約 220 公斤。</p>
<h4 id="金瓜石 - 黃金瀑布"><a href="# 金瓜石 - 黃金瀑布" class="headerlink" title="金瓜石 - 黃金瀑布"></a>金瓜石 - 黃金瀑布 </h4><p> 因為金瓜石一帶有礦脈，地下水和雨水以及礦物經過化學反應後水色帶有氧化後的金屬礦石顏色，讓黃金瀑布的水色略微帶一點黃色，再加上裸露的石塊也是黃色，所以取名黃金瀑布。沉積的金黃色氧化鐵讓岩石閃閃發亮，非常特別～</p>
<h4 id="金瓜石：十三層遺址（水湳洞選煉廠遺址）"><a href="# 金瓜石：十三層遺址（水湳洞選煉廠遺址）" class="headerlink" title="金瓜石：十三層遺址（水湳洞選煉廠遺址）"></a>金瓜石：十三層遺址（水湳洞選煉廠遺址）</h4><p>距離黃金瀑布不遠的就是有「天空之城」稱號的十三層遺址，又叫做水湳洞選煉廠遺址。<br>這裡曾經是日治時期處理礦砂、生產粗銅的煉製場，生產線一直運作直到 1985 年，曾一度產量大到獲得「亞洲第一貴金屬礦山」的美名。不過現在十三層遺址是不能進入的，因為煉銅廠時期重金屬污染非常嚴重，所以只能在外面拍拍照。</p>
<p>在這裡工作的礦工經常罹患肺病，死傷人數本就不少。<br>金瓜石戰俘營時 (1942 年至 1945 年)，被日軍關押的盟軍戰俘，又被命令在此採礦，不服從便遭受殘忍虐打。<br>傷亡人數不計其數，難怪體質較敏感的朋友，總說來到附近便暈眩，耳中哀嚎聲不斷傳來，總算知道原因了。</p>
<h4 id="金瓜石 - 不厭亭"><a href="# 金瓜石 - 不厭亭" class="headerlink" title="金瓜石 - 不厭亭"></a>金瓜石 - 不厭亭 </h4><p> 不厭亭位在台 102 線公路上雙溪與九份交界處的附近，因為山區獨特區段的風景知名度大開，相信大家一定常常在 IG 上看到這個打卡點！之前福特汽車廣告曾經在此拍攝過，現在不厭亭也成為眾多喜愛攝影的人必拍的口袋景點，不過因為不厭亭比較遠，建議有交通工具的人再來。<br><img src="/2021/05/09/trip-xinbei-east/photo10.png" alt="不厭亭"></p>
<h4 id="金瓜石 - 水湳洞陰陽海"><a href="# 金瓜石 - 水湳洞陰陽海" class="headerlink" title="金瓜石 - 水湳洞陰陽海"></a>金瓜石 - 水湳洞陰陽海 </h4><p> 陰陽海也是大家都耳熟能詳的景點，正確的名字應該是濂洞灣。陰陽海的海水顏色因為天然礦物所以呈現黃褐色，與外海的正常藍色海水形成鮮明對比，所以叫做陰陽海，就像是大自然的調色盤一樣。<br>其實只要從山坡高處向下看就很容易可以欣賞到陰陽海了，不必真的跑到海邊去。<br><img src="/2021/05/09/trip-xinbei-east/photo11.png" alt="水湳洞陰陽海"></p>
<h4 id="金瓜石 - 茶壺山步道"><a href="# 金瓜石 - 茶壺山步道" class="headerlink" title="金瓜石 - 茶壺山步道"></a>金瓜石 - 茶壺山步道 </h4><p> 無耳茶壺山就像它的名字一樣，形狀奇特像是沒有手把的茶壺。雖然無耳茶壺山的高度並沒有很高，山頂的腹地也不大，但是登上茶壺山之後的景色非常漂亮！周邊的陰陽海、基隆山、金瓜石等等都一覽無遺。</p>
<h4 id="東北海岸 - 鼻頭角步道"><a href="# 東北海岸 - 鼻頭角步道" class="headerlink" title="東北海岸 - 鼻頭角步道"></a>東北海岸 - 鼻頭角步道 </h4><p> 先看好路線再出發，步道全程走下來來回約 2 小時，步道沿山邊而建，一路上都可以看見海。<br>走在步道上仔細看，會發現通往海邊的階梯，下去要走一大段，幾乎都是釣客。</p>
<h4 id="東北海岸 - 象鼻岩"><a href="# 東北海岸 - 象鼻岩" class="headerlink" title="東北海岸 - 象鼻岩"></a>東北海岸 - 象鼻岩 </h4><p> 象鼻岩位在深澳漁港內。<br>通往象鼻岩的路是沒有鋪好的棧道之類，只能沿著巨石海岸慢慢的往前走。<br>東北海岸推薦打卡路線：正濱漁港＞忘憂谷＞潮境公園＞八斗子車站＞象鼻岩＞鼻頭國小＞鼻頭步道 <br><a href="https://bunnyann.com/bunnyann205/"> 新北景點》瑞芳象鼻岩奇景，深海古代巨象，東北角海岸一日遊～</a></p>
<h4 id="南雅奇石"><a href="# 南雅奇石" class="headerlink" title="南雅奇石"></a>南雅奇石 </h4><p><a href="https://wangxchun.github.io/2021/05/11/trip-taiwan-36/"> 台灣 36 秘境景點</a> 之一<br><img src="/2021/05/09/trip-xinbei-east/photo27.jpg" alt="南雅奇石"></p>
<h4 id="猴硐貓村"><a href="# 猴硐貓村" class="headerlink" title="猴硐貓村"></a>猴硐貓村</h4><p><img src="/2021/05/09/trip-xinbei-east/photo29.png" alt="猴硐煤礦博物園區願景館"><center> 猴硐煤礦博物園區願景館 </center><br><img src="/2021/05/09/trip-xinbei-east/photo30.png" alt="瑞三礦業整煤廠"><center> 瑞三礦業整煤廠 </center><br><img src="/2021/05/09/trip-xinbei-east/photo31.png" alt="瑞三運煤橋"><center> 瑞三運煤橋 </center><br><img src="/2021/05/09/trip-xinbei-east/photo32.png" alt="侯硐坑休閒園區"><center> 侯硐坑休閒園區最主要是可以搭小火車，門票大人 150 元、小孩 120 元，可以體驗礦坑的實際狀況
</center></p>
<h3 id="三、平溪區"><a href="# 三、平溪區" class="headerlink" title="三、平溪區"></a>三、平溪區 </h3><p> 十分瀑布＞十分老街＞望古瀑布＞平溪老街＞菁桐老街＞天燈館打卡</p>
<h4 id="十分瀑布"><a href="# 十分瀑布" class="headerlink" title="十分瀑布"></a>十分瀑布 </h4><p> 從遊客中心出發前往十分瀑布，要先經過兩座吊橋，以及一個市集與溪畔步道，<br>來回要約一小時左右，一早先走比較不累。<br>十分瀑布是全台最大瀑布，有台灣尼加拉瀑布美稱，賞瀑步道平坦好走，還有不同角度的觀瀑玻璃平台。<br><img src="/2021/05/09/trip-xinbei-east/photo12.png" alt="十分瀑布"></p>
<h4 id="十分老街"><a href="# 十分老街" class="headerlink" title="十分老街"></a>十分老街 </h4><p> 平溪景點放天燈店家非常多，不用問了都是公定價，單一色最便宜 150 元。</p>
<h4 id="望古瀑布"><a href="# 望古瀑布" class="headerlink" title="望古瀑布"></a>望古瀑布 </h4><p> 望古車站下車沿著馬路往山上走，大約五分鐘可到瀑布入口，<br>沿途步道起伏不算太大，大概二十分鐘可到。</p>
<h4 id="平溪老街"><a href="# 平溪老街" class="headerlink" title="平溪老街"></a>平溪老街 </h4><p> 平溪老街附近有私人停車場，停一次一百元不限時，很多人車停這裡然後轉搭火車玩。<br>平溪老街可以近距離拍到火車。</p>
<h4 id="青桐老街"><a href="# 青桐老街" class="headerlink" title="青桐老街"></a>青桐老街 </h4><p> 相較於十分跟平溪的人潮，菁桐老街就顯得人潮稀落，<br>不過美麗的卸煤平台搭鐵軌，仍是取景外拍的好地方。<br>平溪線的菁桐車站，有世界唯一的天燈派出所</p>
<h4 id="天燈館"><a href="# 天燈館" class="headerlink" title="天燈館"></a>天燈館 </h4><p> 可至 2 樓寫下祈福卡片許願，即可欣賞長達 7 分鐘的祈福天燈秀<br><img src="/2021/05/09/trip-xinbei-east/photo13.jpg" alt="天燈館"></p>
<h3 id="四、坪林區"><a href="# 四、坪林區" class="headerlink" title="四、坪林區"></a>四、坪林區 </h3><h4 id="逮魚堀溪自行車道"><a href="# 逮魚堀溪自行車道" class="headerlink" title="逮魚堀溪自行車道"></a> 逮魚堀溪自行車道 </h4><p> 一路上不僅可以看見清澈見底的溪流及魚群，還看可看見山巒及茶園<br><img src="/2021/05/09/trip-xinbei-east/photo14.jpg" alt="逮魚堀溪自行車道"></p>
<h4 id="茶葉博物館"><a href="# 茶葉博物館" class="headerlink" title="茶葉博物館"></a>茶葉博物館 </h4><p> 坪林茶葉博物館內含展示館、體驗館、茶藝教室等空間 <br> 坪林茶葉博物館旁 (新北市坪林區水德里水聳淒坑 19-1 號) 有「坪林寧波餡餅」<br><img src="/2021/05/09/trip-xinbei-east/photo15.jpg" alt="茶葉博物館"></p>
<h4 id="坪林老街"><a href="# 坪林老街" class="headerlink" title="坪林老街"></a>坪林老街 </h4><p> 坪林老街裡的店家雖然不算多，但走起來很舒服很自在，而滴滴香茶行就在坪林保坪宮旁。<br>滴滴香除了提供各種好茶，還可以購買各種茶製品。<br>推薦：茶油麵線、鐵觀音冰淇淋、鐵觀音爆米花、茶點。<br><img src="/2021/05/09/trip-xinbei-east/photo16.png" alt="坪林老街"></p>
<h4 id="觀音台步道"><a href="# 觀音台步道" class="headerlink" title="觀音台步道"></a>觀音台步道 </h4><p> 鄰近坪林老街的觀音台步道，是個可以 360 度觀賞坪林景色的好地方，<br>海拔 250 公尺的輕鬆步道，很適合在老街享用美食後順遊。<br><img src="/2021/05/09/trip-xinbei-east/photo17.png" alt="觀音台步道"></p>
<h4 id="南山寺日出"><a href="# 南山寺日出" class="headerlink" title="南山寺日出"></a>南山寺日出</h4><p><img src="/2021/05/09/trip-xinbei-east/photo34.png" alt="南山寺日出"></p>
<h3 id="五、石碇區"><a href="# 五、石碇區" class="headerlink" title="五、石碇區"></a>五、石碇區</h3><p><img src="/2021/05/09/trip-xinbei-east/photo18.png" alt="石碇區"></p>
<h4 id="石碇淡蘭藝文舘"><a href="# 石碇淡蘭藝文舘" class="headerlink" title="石碇淡蘭藝文舘"></a>石碇淡蘭藝文舘 </h4><p> 走馬看花的話一圈十分鐘就出來了</p>
<h4 id="石碇東街"><a href="# 石碇東街" class="headerlink" title="石碇東街"></a>石碇東街 </h4><p> 一粒粽（推薦：桂花粽、南部粽）<br>王氏豆腐 <br> 阿嫲手工麻糬 <br> 陳記豆腐蛋糕（冰）<br>許家手工麵線 <br> 美美飲食店 <br> 福寳飲食店 <br> 包種茶 <br> 百年石頭屋、吊腳樓 <br> 石碇之心咖啡廣場，可以坐下來休息<br><img src="/2021/05/09/trip-xinbei-east/photo19.png" alt="吊腳樓"><center> 從側面看的出來，柱子一根根地把屋子撐起來，故稱吊腳樓 </center></p>
<h4 id="石碇西街"><a href="# 石碇西街" class="headerlink" title="石碇西街"></a>石碇西街 </h4><p> 石碇國小 <br> 集順廟 <br> 西街水底倒影 <br> 親山步道</p>
<h4 id="淡蘭吊橋、淡蘭古道、老茶壺標幟"><a href="# 淡蘭吊橋、淡蘭古道、老茶壺標幟" class="headerlink" title="淡蘭吊橋、淡蘭古道、老茶壺標幟"></a>淡蘭吊橋、淡蘭古道、老茶壺標幟 </h4><pre><code> 淡蘭吊橋，在開車去石碇老街的路上，106 乙隧道前
搭捷運文湖線木柵站 &gt; 公車 666 &gt; 雙溪口站下車
</code></pre><p>吊橋全長 100 公尺，可以從吊橋走到淡蘭古道，徒步 40 分鐘到石碇老街 <br> 淡蘭古道全長 3700 公尺，步行時間 1.5 小時</p>
<h4 id="千島湖"><a href="# 千島湖" class="headerlink" title="千島湖"></a>千島湖 </h4><h3 id="六、深坑區"><a href="# 六、深坑區" class="headerlink" title="六、深坑區"></a> 六、深坑區 </h3><h4 id="深坑老街"><a href="# 深坑老街" class="headerlink" title="深坑老街"></a> 深坑老街 </h4><p><img src="/2021/05/09/trip-xinbei-east/photo36.png" alt="深坑老街地圖"><br> 深坑半日遊：深坑老街吃飯＋逛老街可以抓 4 小時（有逛小店的話）。</p>
<pre><code>推薦行程：
木柵動物園 + 深坑老街
深坑老街 + 炮仔崙瀑布或步道
深坑老街 + 石碇老街及淡蘭步道，或是攀岩場皇帝殿步道
深坑老街 + 平溪老街放天燈
深坑老街 + 瑞芳九份金瓜石
</code></pre><p><img src="/2021/05/09/trip-xinbei-east/photo35.png" alt="深坑地圖"></p>
<h5 id="集順廟"><a href="# 集順廟" class="headerlink" title="集順廟"></a>集順廟 </h5><p> 深坑老街也是過年春節時期必來走春的老街景點，尤其集順廟在初一初二會有特別的乞龜儀式，拜紅龜粿乞求來年平安。</p>
<h4 id="永安居"><a href="# 永安居" class="headerlink" title="永安居"></a>永安居 </h4><p> 永安居為三級古蹟，也被列為台灣十大古厝之一，除了有閩式建築的燕尾圓弧，更為了嚇阻盜匪，裝置槍砲的銃樓、銃孔，加上多層次圍牆，可以將宅院保護得滴水不漏，目前永安居僅開放週日及假日參觀，若是平日，則需電話預約。</p>
<h4 id="街旁的溪邊步道 - 中正橋到平埔橋"><a href="# 街旁的溪邊步道 - 中正橋到平埔橋" class="headerlink" title="街旁的溪邊步道 (中正橋到平埔橋)"></a>街旁的溪邊步道 (中正橋到平埔橋)</h4><p><img src="/2021/05/09/trip-xinbei-east/photo37.png" alt="街旁的溪邊步道"></p>
<h4 id="炮仔崙瀑布 - 四龍瀑布"><a href="# 炮仔崙瀑布 - 四龍瀑布" class="headerlink" title="炮仔崙瀑布 (四龍瀑布)"></a>炮仔崙瀑布 (四龍瀑布)</h4><p>從老街步行約 30 分鐘，開車到登山口約 5 分鐘，來回約 15 分鐘的炮仔崙瀑布又稱四龍瀑布，水量豐沛時有四道水流，蠻多修行者或是沖瀑的人來。入口處不明顯，需認明電線桿「阿柔幹 44」。</p>
<h4 id="炮仔崙步道看 -101"><a href="# 炮仔崙步道看 -101" class="headerlink" title="炮仔崙步道看 101"></a>炮仔崙步道看 101</h4><p>從老街步行約 30 分鐘，開車到登山口約 5 分鐘的炮仔崙步道，<br>起點位於阿柔里炮子崙 20 號，平緩的步道，可以遠眺 101。</p>
<h4 id="天龍宮與萬福生態公園可賞桐花"><a href="# 天龍宮與萬福生態公園可賞桐花" class="headerlink" title="天龍宮與萬福生態公園可賞桐花"></a>天龍宮與萬福生態公園可賞桐花 </h4><h4 id="假日限定的網美餐廳 -Arc-Cafe"><a href="# 假日限定的網美餐廳 -Arc-Cafe" class="headerlink" title="假日限定的網美餐廳 Arc Cafe"></a> 假日限定的網美餐廳 Arc Cafe</h4><p>僅有在周五六日營業的 Arc Cafe 是深坑近年來最夯的網美餐廳，<br>森林系的布置，更是大家最愛拍照的地方，餐點以簡餐為主。<br><img src="/2021/05/09/trip-xinbei-east/photo38.png" alt="假日限定的網美餐廳 Arc Cafe"><a href="https://evalife.cc/shenkeng-2/">深坑景點推薦，除了老街，你還可以走路去附近古蹟老厝／瀑布步道／網美餐廳</a></p>
<h3 id="七、汐止區"><a href="# 七、汐止區" class="headerlink" title="七、汐止區"></a>七、汐止區 </h3><h4 id="新山夢湖"><a href="# 新山夢湖" class="headerlink" title="新山夢湖"></a> 新山夢湖 </h4><h4 id="拱北殿"><a href="# 拱北殿" class="headerlink" title="拱北殿"></a> 拱北殿 </h4><h3 id="八、烏來區"><a href="# 八、烏來區" class="headerlink" title="八、烏來區"></a> 八、烏來區 </h3><h4 id="烏來老街"><a href="# 烏來老街" class="headerlink" title="烏來老街"></a> 烏來老街 </h4><h4 id="烏來瀑布"><a href="# 烏來瀑布" class="headerlink" title="烏來瀑布"></a> 烏來瀑布 </h4><h4 id="烏來台車"><a href="# 烏來台車" class="headerlink" title="烏來台車"></a> 烏來台車 </h4><h4 id="雲仙樂園"><a href="# 雲仙樂園" class="headerlink" title="雲仙樂園"></a> 雲仙樂園 </h4><h4 id="内洞森林遊樂區"><a href="# 内洞森林遊樂區" class="headerlink" title="内洞森林遊樂區"></a> 内洞森林遊樂區 </h4><h3 id="新北景點"><a href="# 新北景點" class="headerlink" title="新北景點"></a> 新北景點 </h3><p><a href="https://wangxchun.github.io/2021/05/09/trip-xinbei-east/"> 新北東部 </a><br><a href="https://wangxchun.github.io/2021/05/09/trip-xinbei-west/"> 新北西部</a></p>
]]></content>
      <categories>
        <category>生活-出去玩做功課</category>
      </categories>
  </entry>
  <entry>
    <title>机器学习实战 --（1）regression</title>
    <url>/2022/05/07/machine-learning-practice-1/</url>
    <content><![CDATA[<h3 id="一、前言"><a href="# 一、前言" class="headerlink" title="一、前言"></a> 一、前言 </h3><p>Objectives:</p>
<ul>
<li>Solve a regression problem with deep neural networks (DNN).</li>
<li>Understand basic DNN training tips.</li>
<li>Familiarize yourself with PyTorch.</li>
</ul>
<h3 id="二、引入 -python- 库"><a href="# 二、引入 -python- 库" class="headerlink" title="二、引入 python 库"></a> 二、引入 python 库 </h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;# Import packages&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Numerical Operations</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># Reading/Writing Data</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="comment"># For Progress Bar</span></span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line"><span class="comment"># Pytorch</span></span><br><span class="line"><span class="keyword">import</span> torch </span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset, DataLoader, random_split</span><br><span class="line"></span><br><span class="line"><span class="comment"># For plotting learning curve</span></span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br></pre></td></tr></table></figure>
<h3 id="三、Utility-Functions"><a href="# 三、Utility-Functions" class="headerlink" title="三、Utility Functions"></a> 三、Utility Functions</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">same_seed</span> (<span class="params">seed</span>):</span> </span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;Fixes random number generator seeds for reproducibility.&#x27;&#x27;&#x27;</span></span><br><span class="line">    torch.backends.cudnn.deterministic = <span class="literal">True</span></span><br><span class="line">    torch.backends.cudnn.benchmark = <span class="literal">False</span></span><br><span class="line">    np.random.seed (seed)</span><br><span class="line">    torch.manual_seed (seed)</span><br><span class="line">    <span class="keyword">if</span> torch.cuda.is_available ():</span><br><span class="line">        torch.cuda.manual_seed_all (seed)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_valid_split</span> (<span class="params">data_set, valid_ratio, seed</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;Split provided training data into training set and validation set&#x27;&#x27;&#x27;</span></span><br><span class="line">    valid_set_size = <span class="built_in">int</span> (valid_ratio * <span class="built_in">len</span> (data_set)) </span><br><span class="line">    train_set_size = <span class="built_in">len</span> (data_set) - valid_set_size</span><br><span class="line">    train_set, valid_set = random_split (data_set, [train_set_size, valid_set_size], generator=torch.Generator ().manual_seed (seed))</span><br><span class="line">    <span class="keyword">return</span> np.array (train_set), np.array (valid_set)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict</span> (<span class="params">test_loader, model, device</span>):</span></span><br><span class="line">    model.<span class="built_in">eval</span> () <span class="comment"># Set your model to evaluation mode.</span></span><br><span class="line">    preds = []</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> tqdm (test_loader):</span><br><span class="line">        x = x.to (device)                        </span><br><span class="line">        <span class="keyword">with</span> torch.no_grad ():                   </span><br><span class="line">            pred = model (x)                     </span><br><span class="line">            preds.append (pred.detach ().cpu ())   </span><br><span class="line">    preds = torch.cat (preds, dim=<span class="number">0</span>).numpy ()  </span><br><span class="line">    <span class="keyword">return</span> preds</span><br></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"> 设置 torch.backends.cudnn.benchmark=<span class="literal">True</span> 将会让程序在开始时花费一点额外时间，为整个网络的每个卷积层搜索最适合它的卷积实现算法，进而实现网络的加速。适用场景是网络结构固定（不是动态变化的），网络的输入形状（包括 batch size，图片大小，输入的通道）是不变的，其实也就是一般情况下都比较适用。反之，如果卷积层的设置一直变化，将会导致程序不停地做优化，反而会耗费更多的时间。</span><br><span class="line"></span><br><span class="line">torch.backends.cudnn.deterministic=<span class="literal">True</span></span><br><span class="line"> 每次返回的卷积算法将是确定的，即默认算法。cudnn 中包含很多卷积算法。基于 GEMM (General Matrix Multiply) 的，基于 FFT 的，基于 Winograd 算法的等等。</span><br><span class="line"></span><br><span class="line"> 设置 seed () 里的数字就相当于设置了一个盛有随机数的 “聚宝盆”，一个数字代表一个 “聚宝盆”，当我们在 seed（）的括号里设置相同的 seed，“聚宝盆” 就是一样的，从里面拿出的随机数就会相同。</span><br><span class="line"></span><br><span class="line">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;rng&lt;/span&gt; ():&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;range&lt;/span&gt; (&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        np.random.seed (&lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt; (np.random.rand (&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rng ()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt;[&lt;span class=&quot;number&quot;&gt;0.69646919&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0.28613933&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0.22685145&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0.55131477&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [&lt;span class=&quot;number&quot;&gt;0.69646919&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0.28613933&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0.22685145&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0.55131477&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [&lt;span class=&quot;number&quot;&gt;0.69646919&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0.28613933&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0.22685145&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0.55131477&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [&lt;span class=&quot;number&quot;&gt;0.69646919&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0.28613933&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0.22685145&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0.55131477&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [&lt;span class=&quot;number&quot;&gt;0.69646919&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0.28613933&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0.22685145&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0.55131477&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;rng_n&lt;/span&gt; ():&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    np.random.seed (&lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;range&lt;/span&gt; (&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt; (np.random.rand (&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rng_n ()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt;[&lt;span class=&quot;number&quot;&gt;0.69646919&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0.28613933&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0.22685145&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0.55131477&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [&lt;span class=&quot;number&quot;&gt;0.71946897&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0.42310646&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0.9807642&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;0.68482974&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [&lt;span class=&quot;number&quot;&gt;0.4809319&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;0.39211752&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0.34317802&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0.72904971&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [&lt;span class=&quot;number&quot;&gt;0.43857224&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0.0596779&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;0.39804426&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0.73799541&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [&lt;span class=&quot;number&quot;&gt;0.18249173&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0.17545176&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0.53155137&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0.53182759&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</span><br><span class="line">&lt;p&gt; 在神经网络中，参数默认是进行随机初始化的。如果不设置的话每次训练时的初始化都是随机的，导致结果不确定。如果设置初始化，则每次初始化都是固定的。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; args.seed &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    random.seed (args.seed) &lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    torch.manual_seed (args.seed)  &lt;span class=&quot;comment&quot;&gt;# 为 CPU 设置种子用于生成随机数，以使得结果是确定的   　　 torch.cuda.manual_seed (args.seed) #为当前 GPU 设置随机种子；&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cudnn.deterministic = &lt;span class=&quot;literal&quot;&gt;True&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 如果使用多个 GPU，应该使用 torch.cuda.manual_seed_all () 为所有的 GPU 设置种子。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;</span><br><span class="line">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;torch.utils.data.random_split (dataset, lengths, generator=&amp;lt;torch._C.Generator &lt;span class=&quot;built_in&quot;&gt;object&lt;/span&gt;&amp;gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</span><br><span class="line">&lt;p&gt; 在 CPU 中设置生成随机数的种子，并返回一个 torch.Generator 对象。当设置的种子固定下来的时候，之后依次 pytorch 生成的随机数序列也被固定下来。需要注意的是当只调用 torch.manual_seed () 一次时并不能生成相同的随机数序列。如果想要得到相同的随机数序列就需要每次产生随机数的时候都要调用一下 torch.manual_seed ()。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; torch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;torch.manual_seed (&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;torch._C.Generator &lt;span class=&quot;built_in&quot;&gt;object&lt;/span&gt; at &lt;span class=&quot;number&quot;&gt;0x000001EB8F3A1918&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt; (torch.randn (&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tensor ([[&lt;span class=&quot;number&quot;&gt;0.3923&lt;/span&gt;, -&lt;span class=&quot;number&quot;&gt;0.2236&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [-&lt;span class=&quot;number&quot;&gt;0.3195&lt;/span&gt;, -&lt;span class=&quot;number&quot;&gt;1.2050&lt;/span&gt;]])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt; (torch.randn (&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tensor ([[&lt;span class=&quot;number&quot;&gt;1.0445&lt;/span&gt;, -&lt;span class=&quot;number&quot;&gt;0.6332&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;number&quot;&gt;0.5731&lt;/span&gt;,  &lt;span class=&quot;number&quot;&gt;0.5409&lt;/span&gt;]])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/357075502&quot;&gt;Pytorch：model.train () 和 model.eval () 用法和区别 &lt;/a&gt;&lt;/p&gt;</span><br><span class="line">&lt;h3 id=&quot; 四、Dataset”&quot;&gt;&lt;a href=&quot;# 四、Dataset”&quot; class=&quot;headerlink&quot; title=&quot; 四、Dataset”&quot;&gt;&lt;/a&gt; 四、Dataset”&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;COVID19Dataset&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;Dataset&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    x: Features.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    y: Targets, if none, do prediction.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    &amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;self, x, y=&lt;span class=&quot;literal&quot;&gt;None&lt;/span&gt;&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; y &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            self.y = y&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            self.y = torch.FloatTensor (y)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.x = torch.FloatTensor (x)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__getitem__&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;self, idx&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; self.y &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; self.x [idx]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; self.x [idx], self.y [idx]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__len__&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt; (self.x)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</span><br><span class="line">&lt;h3 id=&quot; 五、Neural-Network-Model&quot;&gt;&lt;a href=&quot;# 五、Neural-Network-Model&quot; class=&quot;headerlink&quot; title=&quot; 五、Neural Network Model&quot;&gt;&lt;/a&gt; 五、Neural Network Model&lt;/h3&gt;&lt;p&gt;Try out different model architectures by modifying the class below.&lt;/p&gt;</span><br><span class="line">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;My_Model&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;nn.Module&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;self, input_dim&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;super&lt;/span&gt; (My_Model, self).__init__()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# &lt;span class=&quot;doctag&quot;&gt;TODO:&lt;/span&gt; modify model&amp;#x27;s structure, be aware of dimensions. &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.layers = nn.Sequential (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            nn.Linear (input_dim, &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            nn.ReLU (),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            nn.Linear (&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            nn.ReLU (),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            nn.Linear (&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;forward&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;self, x&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        x = self.layers (x)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        x = x.squeeze (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;# (B, 1) -&amp;gt; (B)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</span><br><span class="line">&lt;p&gt;Pytorch Tensor 的通道排序：[batch, channel, height, weight]&lt;br&gt;&lt;a href=&quot;https://pytorch.org/tutorials/beginner/blitz/neural_networks_tutorial.html&quot;&gt;pytorch lenet&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://blog.csdn.net/jokerxsy/article/details/108614661&quot;&gt;nn.Conv1d\nn.Conv2d 以及 groups\dilation 参数的理解 &lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.jianshu.com/p/c1232e47661f&quot;&gt;PyTorch 教程 - 3：PyTorch 中神经网络的构建与训练基础 &lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://blog.csdn.net/qq_26442553/article/details/81775449&quot;&gt;Python 多继承与 super 使用详解 &lt;/a&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;img src=&quot;./machineLearning-1/1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/york1996/article/details/81949843&quot;&gt;PyTorch 中 view 的用法 &lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/27382990&quot;&gt; 图像基本操作 torchvision.transforms&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt; ():&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    transform = transforms.Compose (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [transforms.ToTensor (),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         transforms.Normalize ((&lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt;), (&lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt;))])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# 50000 张训练图片 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# 第一次使用时要将 download 设置为 True 才会自动去下载数据集 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    train_set = torchvision.datasets.CIFAR10 (root=&lt;span class=&quot;string&quot;&gt;&amp;#x27;./data&amp;#x27;&lt;/span&gt;, train=&lt;span class=&quot;literal&quot;&gt;True&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                             download=&lt;span class=&quot;literal&quot;&gt;False&lt;/span&gt;, transform=transform)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    train_loader = torch.utils.data.DataLoader (train_set, batch_size=&lt;span class=&quot;number&quot;&gt;36&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                               shuffle=&lt;span class=&quot;literal&quot;&gt;True&lt;/span&gt;, num_workers=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# 10000 张验证图片 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# 第一次使用时要将 download 设置为 True 才会自动去下载数据集 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    val_set = torchvision.datasets.CIFAR10 (root=&lt;span class=&quot;string&quot;&gt;&amp;#x27;./data&amp;#x27;&lt;/span&gt;, train=&lt;span class=&quot;literal&quot;&gt;False&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                           download=&lt;span class=&quot;literal&quot;&gt;False&lt;/span&gt;, transform=transform)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    val_loader = torch.utils.data.DataLoader (val_set, batch_size=&lt;span class=&quot;number&quot;&gt;5000&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                             shuffle=&lt;span class=&quot;literal&quot;&gt;False&lt;/span&gt;, num_workers=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    val_data_iter = &lt;span class=&quot;built_in&quot;&gt;iter&lt;/span&gt; (val_loader)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    val_image, val_label = val_data_iter.&lt;span class=&quot;built_in&quot;&gt;next&lt;/span&gt; ()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</span><br><span class="line">&lt;p&gt;&lt;img src=&quot;./machineLearning-1/photo2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;</span><br><span class="line">&lt;h3 id=&quot; 六、Feature-Selection&quot;&gt;&lt;a href=&quot;# 六、Feature-Selection&quot; class=&quot;headerlink&quot; title=&quot; 六、Feature Selection&quot;&gt;&lt;/a&gt; 六、Feature Selection&lt;/h3&gt;&lt;p&gt;Choose features you deem useful by modifying the function below.&lt;/p&gt;</span><br><span class="line">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;select_feat&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;train_data, valid_data, test_data, select_all=&lt;span class=&quot;literal&quot;&gt;True&lt;/span&gt;&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&amp;#x27;&amp;#x27;&amp;#x27;Selects useful features to perform regression&amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    y_train, y_valid = train_data [:,-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;], valid_data [:,-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    raw_x_train, raw_x_valid, raw_x_test = train_data [:,:-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;], valid_data [:,:-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;], test_data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; select_all:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        feat_idx = &lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;range&lt;/span&gt; (raw_x_train.shape [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        feat_idx = [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;] &lt;span class=&quot;comment&quot;&gt;# &lt;span class=&quot;doctag&quot;&gt;TODO:&lt;/span&gt; Select suitable feature columns.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; raw_x_train [:,feat_idx], raw_x_valid [:,feat_idx], raw_x_test [:,feat_idx], y_train, y_valid&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</span><br><span class="line">&lt;h3 id=&quot; 六、Training-Loop&quot;&gt;&lt;a href=&quot;# 六、Training-Loop&quot; class=&quot;headerlink&quot; title=&quot; 六、Training Loop&quot;&gt;&lt;/a&gt; 六、Training Loop&lt;/h3&gt;&lt;p&gt;(1) batchsize：批大小。在深度学习中，一般采用 SGD 训练，即每次训练在训练集中取 batchsize 个样本训练；&lt;br&gt;(2) iteration：1 个 iteration 等于使用 batchsize 个样本训练一次；&lt;br&gt;(3) epoch：1 个 epoch 等于使用训练集中的全部样本训练一次；&lt;/p&gt;</span><br><span class="line">&lt;p&gt; 举个例子，训练集有 1000 个样本，batchsize=10，那么，&lt;br&gt; 训练完整个样本集需要：100 次 iteration，1 次 epoch。&lt;/p&gt;</span><br><span class="line">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;trainer&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;train_loader, valid_loader, model, config, device&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    criterion = nn.MSELoss (reduction=&lt;span class=&quot;string&quot;&gt;&amp;#x27;mean&amp;#x27;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;# Define your loss function, do not modify this.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# Define your optimization algorithm. &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# &lt;span class=&quot;doctag&quot;&gt;TODO:&lt;/span&gt; Please check https://pytorch.org/docs/stable/optim.html to get more available algorithms.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# &lt;span class=&quot;doctag&quot;&gt;TODO:&lt;/span&gt; L2 regularization (optimizer (weight decay...) or implement by your self).&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    optimizer = torch.optim.SGD (model.parameters (), lr=config [&lt;span class=&quot;string&quot;&gt;&amp;#x27;learning_rate&amp;#x27;&lt;/span&gt;], momentum=&lt;span class=&quot;number&quot;&gt;0.9&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    writer = SummaryWriter () &lt;span class=&quot;comment&quot;&gt;# Writer of tensoboard.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; os.path.isdir (&lt;span class=&quot;string&quot;&gt;&amp;#x27;./models&amp;#x27;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        os.mkdir (&lt;span class=&quot;string&quot;&gt;&amp;#x27;./models&amp;#x27;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;# Create directory of saving models.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    n_epochs, best_loss, step, early_stop_count = config [&lt;span class=&quot;string&quot;&gt;&amp;#x27;n_epochs&amp;#x27;&lt;/span&gt;], math.inf, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; epoch &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;range&lt;/span&gt; (n_epochs):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        model.train () &lt;span class=&quot;comment&quot;&gt;# Set your model to train mode.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        loss_record = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# tqdm is a package to visualize your training progress.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        train_pbar = tqdm (train_loader, position=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, leave=&lt;span class=&quot;literal&quot;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; x, y &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; train_pbar:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            optimizer.zero_grad ()               &lt;span class=&quot;comment&quot;&gt;# Set gradient to zero.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            x, y = x.to (device), y.to (device)   &lt;span class=&quot;comment&quot;&gt;# Move your data to device. &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            pred = model (x)             &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            loss = criterion (pred, y)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            loss.backward ()                     &lt;span class=&quot;comment&quot;&gt;# Compute gradient (backpropagation).&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            optimizer.step ()                    &lt;span class=&quot;comment&quot;&gt;# Update parameters.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            step += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            loss_record.append (loss.detach ().item ())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;# Display current epoch number and loss on tqdm progress bar.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            train_pbar.set_description (&lt;span class=&quot;string&quot;&gt;f&amp;#x27;Epoch [&lt;span class=&quot;subst&quot;&gt;&amp;#123;epoch+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;&lt;/span&gt;/&lt;span class=&quot;subst&quot;&gt;&amp;#123;n_epochs&amp;#125;&lt;/span&gt;]&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            train_pbar.set_postfix (&amp;#123;&lt;span class=&quot;string&quot;&gt;&amp;#x27;loss&amp;#x27;&lt;/span&gt;: loss.detach ().item ()&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mean_train_loss = &lt;span class=&quot;built_in&quot;&gt;sum&lt;/span&gt; (loss_record)/&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt; (loss_record)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        writer.add_scalar (&lt;span class=&quot;string&quot;&gt;&amp;#x27;Loss/train&amp;#x27;&lt;/span&gt;, mean_train_loss, step)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        model.&lt;span class=&quot;built_in&quot;&gt;eval&lt;/span&gt; () &lt;span class=&quot;comment&quot;&gt;# Set your model to evaluation mode.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        loss_record = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; x, y &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; valid_loader:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            x, y = x.to (device), y.to (device)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; torch.no_grad ():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                pred = model (x)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                loss = criterion (pred, y)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            loss_record.append (loss.item ())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mean_valid_loss = &lt;span class=&quot;built_in&quot;&gt;sum&lt;/span&gt; (loss_record)/&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt; (loss_record)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;f&amp;#x27;Epoch [&lt;span class=&quot;subst&quot;&gt;&amp;#123;epoch+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;&lt;/span&gt;/&lt;span class=&quot;subst&quot;&gt;&amp;#123;n_epochs&amp;#125;&lt;/span&gt;]: Train loss: &lt;span class=&quot;subst&quot;&gt;&amp;#123;mean_train_loss:&lt;span class=&quot;number&quot;&gt;.4&lt;/span&gt;f&amp;#125;&lt;/span&gt;, Valid loss: &lt;span class=&quot;subst&quot;&gt;&amp;#123;mean_valid_loss:&lt;span class=&quot;number&quot;&gt;.4&lt;/span&gt;f&amp;#125;&lt;/span&gt;&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        writer.add_scalar (&lt;span class=&quot;string&quot;&gt;&amp;#x27;Loss/valid&amp;#x27;&lt;/span&gt;, mean_valid_loss, step)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; mean_valid_loss &amp;lt; best_loss:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            best_loss = mean_valid_loss&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            torch.save (model.state_dict (), config [&lt;span class=&quot;string&quot;&gt;&amp;#x27;save_path&amp;#x27;&lt;/span&gt;]) &lt;span class=&quot;comment&quot;&gt;# Save your best model&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&amp;#x27;Saving model with loss &amp;#123;:.3f&amp;#125;...&amp;#x27;&lt;/span&gt;.&lt;span class=&quot;built_in&quot;&gt;format&lt;/span&gt; (best_loss))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            early_stop_count = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            early_stop_count += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; early_stop_count &amp;gt;= config [&lt;span class=&quot;string&quot;&gt;&amp;#x27;early_stop&amp;#x27;&lt;/span&gt;]:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&amp;#x27;\nModel is not improving, so we halt the training session.&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</span><br><span class="line">&lt;h2 id=&quot; 七、Configurations&quot;&gt;&lt;a href=&quot;# 七、Configurations&quot; class=&quot;headerlink&quot; title=&quot; 七、Configurations&quot;&gt;&lt;/a&gt; 七、Configurations&lt;/h2&gt;&lt;p&gt;&lt;code&gt;config&lt;/code&gt; contains hyper-parameters for training and the path to save your model.&lt;/p&gt;</span><br><span class="line">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;device = &lt;span class=&quot;string&quot;&gt;&amp;#x27;cuda&amp;#x27;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; torch.cuda.is_available () &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;cpu&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;config = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&amp;#x27;seed&amp;#x27;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;5201314&lt;/span&gt;,      &lt;span class=&quot;comment&quot;&gt;# Your seed number, you can pick your lucky number. :)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&amp;#x27;select_all&amp;#x27;&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;True&lt;/span&gt;,   &lt;span class=&quot;comment&quot;&gt;# Whether to use all features.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&amp;#x27;valid_ratio&amp;#x27;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0.2&lt;/span&gt;,   &lt;span class=&quot;comment&quot;&gt;# validation_size = train_size * valid_ratio&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&amp;#x27;n_epochs&amp;#x27;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;3000&lt;/span&gt;,     &lt;span class=&quot;comment&quot;&gt;# Number of epochs.            &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&amp;#x27;batch_size&amp;#x27;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;256&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&amp;#x27;learning_rate&amp;#x27;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1e-5&lt;/span&gt;,              &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&amp;#x27;early_stop&amp;#x27;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;400&lt;/span&gt;,    &lt;span class=&quot;comment&quot;&gt;# If model has not improved for this many consecutive epochs, stop training.     &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&amp;#x27;save_path&amp;#x27;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;./models/model.ckpt&amp;#x27;&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;# Your model will be saved here.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</span><br><span class="line">&lt;p&gt;“””<span class="comment"># Dataloader&lt;br&gt;Read data from files and set up training, validation, and testing sets. You do not need to modify this part.&lt;br&gt;“””&lt;/p&gt;</span></span><br><span class="line">&lt;h1 id=&quot;Set-seed-for-reproducibility&quot;&gt;&lt;a href=&quot;#Set-seed-for-reproducibility&quot; class=&quot;headerlink&quot; title=&quot;Set seed for reproducibility&quot;&gt;&lt;/a&gt;Set seed for reproducibility&lt;/h1&gt;&lt;p&gt;same_seed (config [‘seed’])&lt;/p&gt;</span><br><span class="line">&lt;h1 id=&quot;train-data-size-2699-x-118-id-37-states-16-features-x-5-days&quot;&gt;&lt;a href=&quot;#train-data-size-2699-x-118-id-37-states-16-features-x-5-days&quot; class=&quot;headerlink&quot; title=&quot;train_data size: 2699 x 118 (id + 37 states + 16 features x 5 days)&quot;&gt;&lt;/a&gt;train_data size: 2699 x 118 (id + 37 states + 16 features x 5 days)&lt;/h1&gt;&lt;h1 id=&quot;test-data-size-1078-x-117-without-last-day’s-positive-rate&quot;&gt;&lt;a href=&quot;#test-data-size-1078-x-117-without-last-day’s-positive-rate&quot; class=&quot;headerlink&quot; title=&quot;test_data size: 1078 x 117 (without last day’s positive rate)&quot;&gt;&lt;/a&gt;test_data size: 1078 x 117 (without last day’s positive rate)&lt;/h1&gt;&lt;p&gt;train_data, test_data = pd.read_csv (‘./covid.train.csv’).values, pd.read_csv (‘./covid.test.csv’).values&lt;br&gt;train_data, valid_data = train_valid_split (train_data, config [‘valid_ratio’], config [‘seed’])&lt;/p&gt;</span><br><span class="line">&lt;h1 id=&quot;Print-out-the-data-size&quot;&gt;&lt;a href=&quot;#Print-out-the-data-size&quot; class=&quot;headerlink&quot; title=&quot;Print out the data size.&quot;&gt;&lt;/a&gt;Print out the data size.&lt;/h1&gt;&lt;p&gt;print (f”””train_data size: &#123;train_data.shape&#125;&lt;br&gt;valid_data size: &#123;valid_data.shape&#125;&lt;br&gt;test_data size: &#123;test_data.shape&#125;”””)&lt;/p&gt;</span><br><span class="line">&lt;h1 id=&quot;Select-features&quot;&gt;&lt;a href=&quot;#Select-features&quot; class=&quot;headerlink&quot; title=&quot;Select features&quot;&gt;&lt;/a&gt;Select features&lt;/h1&gt;&lt;p&gt;x_train, x_valid, x_test, y_train, y_valid = select_feat (train_data, valid_data, test_data, config [‘select_all’])&lt;/p&gt;</span><br><span class="line">&lt;h1 id=&quot;Print-out-the-number-of-features&quot;&gt;&lt;a href=&quot;#Print-out-the-number-of-features&quot; class=&quot;headerlink&quot; title=&quot;Print out the number of features.&quot;&gt;&lt;/a&gt;Print out the number of features.&lt;/h1&gt;&lt;p&gt;print (f’number of features: &#123;x_train.shape [1]&#125;’)&lt;/p&gt;</span><br><span class="line">&lt;p&gt;train_dataset, valid_dataset, test_dataset = COVID19Dataset (x_train, y_train), \&lt;br&gt;                                            COVID19Dataset (x_valid, y_valid), \&lt;br&gt;                                            COVID19Dataset (x_test)&lt;/p&gt;</span><br><span class="line">&lt;h1 id=&quot;Pytorch-data-loader-loads-pytorch-dataset-into-batches&quot;&gt;&lt;a href=&quot;#Pytorch-data-loader-loads-pytorch-dataset-into-batches&quot; class=&quot;headerlink&quot; title=&quot;Pytorch data loader loads pytorch dataset into batches.&quot;&gt;&lt;/a&gt;Pytorch data loader loads pytorch dataset into batches.&lt;/h1&gt;&lt;p&gt;train_loader = DataLoader (train_dataset, batch_size=config [‘batch_size’], shuffle=True, pin_memory=True)&lt;br&gt;valid_loader = DataLoader (valid_dataset, batch_size=config [‘batch_size’], shuffle=True, pin_memory=True)&lt;br&gt;test_loader = DataLoader (test_dataset, batch_size=config [‘batch_size’], shuffle=False, pin_memory=True)&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<h3 id="Start-training"><a href="#Start-training" class="headerlink" title="Start training!"></a>Start training!</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">model = My_Model (input_dim=x_train.shape [<span class="number">1</span>]).to (device) <span class="comment"># put your model and data on the same computation device.</span></span><br><span class="line">trainer (train_loader, valid_loader, model, config, device)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="Plot-learning-curves-with-tensorboard-optional"><a href="#Plot-learning-curves-with-tensorboard-optional" class="headerlink" title="Plot learning curves with tensorboard (optional)"></a>Plot learning curves with <code>tensorboard</code> (optional)</h3><h3 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h3><p>The predictions of your model on testing set will be stored at <code>pred.csv</code>.<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_pred</span> (<span class="params">preds, file</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27; Save predictions to specified file &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span> (file, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        writer = csv.writer (fp)</span><br><span class="line">        writer.writerow ([<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;tested_positive&#x27;</span>])</span><br><span class="line">        <span class="keyword">for</span> i, p <span class="keyword">in</span> <span class="built_in">enumerate</span> (preds):</span><br><span class="line">            writer.writerow ([i, p])</span><br><span class="line"></span><br><span class="line">model = My_Model (input_dim=x_train.shape [<span class="number">1</span>]).to (device)</span><br><span class="line">model.load_state_dict (torch.load (config [<span class="string">&#x27;save_path&#x27;</span>]))</span><br><span class="line">preds = predict (test_loader, model, device) </span><br><span class="line">save_pred (preds, <span class="string">&#x27;pred.csv&#x27;</span>)</span><br></pre></td></tr></table></figure></p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p>This notebook uses code written by Heng-Jui Chang @ NTUEE (<a href="https://github.com/ga642381/ML2021-Spring/blob/main/HW01/HW01.ipynb">https://github.com/ga642381/ML2021-Spring/blob/main/HW01/HW01.ipynb</a>)</p>
]]></content>
  </entry>
  <entry>
    <title>rl-baseline-2-result_plotter</title>
    <url>/2022/07/05/rl-baseline-2-result-plotter/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>openai baselines/logger.py 分析学习</title>
    <url>/2022/07/05/rl-baseline-1-logger/</url>
    <content><![CDATA[<h3 id="python3- 自动继承 -object- 这个 -class"><a href="#python3- 自动继承 -object- 这个 -class" class="headerlink" title="python3 自动继承 object 这个 class"></a>python3 自动继承 object 这个 class</h3><p>[‘<strong>class</strong>‘, ‘<strong>delattr</strong>‘, ‘<strong>dir</strong>‘, ‘<strong>doc</strong>‘, ‘<strong>eq</strong>‘, ‘<strong>format</strong>‘, ‘<strong>ge</strong>‘, ‘<strong>getattribute</strong>‘, ‘<strong>gt</strong>‘, ‘<strong>hash</strong>‘, ‘<strong>init</strong>‘, ‘<strong>le</strong>‘, ‘<strong>lt</strong>‘, ‘<strong>ne</strong>‘, ‘<strong>new</strong>‘, ‘<strong>reduce</strong>‘, ‘<strong>reduce_ex</strong>‘, ‘<strong>repr</strong>‘, ‘<strong>setattr</strong>‘, ‘<strong>sizeof</strong>‘, ‘<strong>str</strong>‘, ‘<strong>subclasshook</strong>‘]</p>
<p>（待更：这些 attribute 的用法）</p>
<h3 id="一个 -object- 就是某个 -class- 的 -instance"><a href="# 一个 -object- 就是某个 -class- 的 -instance" class="headerlink" title="一个 object 就是某个 class 的 instance"></a>一个 object 就是某个 class 的 instance</h3><h3 id="怎么写一个 -logger- 模块"><a href="# 怎么写一个 -logger- 模块" class="headerlink" title="怎么写一个 logger 模块"></a>怎么写一个 logger 模块</h3><p><a href="https://editor.leonh.space/2022/python-log/">python log 从小白到入门</a></p>
<h3 id="Python-isinstance- 函数：判断 -A- 是否是 -B- 类型，输出 -True- 或 -False"><a href="#Python-isinstance- 函数：判断 -A- 是否是 -B- 类型，输出 -True- 或 -False" class="headerlink" title="Python isinstance () 函数：判断 A 是否是 B 类型，输出 True 或 False"></a>Python isinstance () 函数：判断 A 是否是 B 类型，输出 True 或 False</h3><p>isinstance () 与 type () 区别：<br>type () 不会认为子类是一种父类类型，不考虑继承关系。<br>isinstance () 会认为子类是一种父类类型，考虑继承关系。</p>
<h3 id="四种 -python- 底线命名"><a href="# 四种 -python- 底线命名" class="headerlink" title="四种 python 底线命名"></a>四种 python 底线命名 </h3><h4 id="1-foo"><a href="#1-foo" class="headerlink" title="1.foo_"></a>1.foo_</h4><p> 避免与 Python 的 built-in keywords 或 built-in functions 取一样的名字</p>
<h4 id="2-foo"><a href="#2-foo" class="headerlink" title="2._foo"></a>2._foo</h4><p>不希望他直接被访问</p>
<h4 id="3-foo"><a href="#3-foo" class="headerlink" title="3.foo"></a>3.<strong>foo</strong></h4><p>Never invent such names; only use them as documented.</p>
<h4 id="4-foo"><a href="#4-foo" class="headerlink" title="4.__foo"></a>4.__foo</h4><p>you have attributes that you do not want subclasses to use<br><a href="https://medium.com/ai% E5%8F%8D% E6%96%97% E5%9F%8E/python-% E5% BA%95% E7% B7%9A-% E4% BB%8B% E7% B4% B9-% E8% BD%89% E9%8C%84-5b0349efdf52">(Python)<strong>底線 </strong> 介紹！(轉錄)</a></p>
]]></content>
  </entry>
  <entry>
    <title>硕士研究 1-1</title>
    <url>/2022/07/29/yanjiu-1-1/</url>
    <content><![CDATA[<p>安装流程，主要参考这两篇，但是安装 python3.6 会有问题，于是我安装 python3.8<br><a href="https://blog.csdn.net/hehedadaq/article/details/109012048">安装 mujoco, mujoco-py,gym [all],robosuite</a><br><a href="https://blog.csdn.net/captainAAAjohn/article/details/123024952">这篇主要参考 dm_control 的安装</a></p>
<h4 id="安装 -tf-gpu"><a href="# 安装 -tf-gpu" class="headerlink" title="安装 tf-gpu"></a>安装 tf-gpu</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">conda create -n mujoco_38 python==<span class="number">3.8</span></span><br><span class="line">conda activate mujoco_38</span><br><span class="line"><span class="comment"># 注意，一定要用 conda 来安装，而不是 pip，conda 会帮你安装相关依赖。依赖冲突后面我们再解决</span></span><br><span class="line">conda install tensorflow-gpu</span><br><span class="line"></span><br><span class="line">python</span><br><span class="line"><span class="comment"># 进入 python 程序</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">sess = tf.Session ()</span><br><span class="line"><span class="comment"># 若上述命名执行没有报错，则说明 tensorflow 安装成功。</span></span><br></pre></td></tr></table></figure>
<h4 id="安装 -mujoco210"><a href="# 安装 -mujoco210" class="headerlink" title="安装 mujoco210"></a>安装 mujoco210</h4><p><a href="http://www.roboti.us/license.html">(1) 下载 license—mjkey.txt</a><br><a href="https://github.com/openai/mujoco-py">(2) 下载 mujoco210</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#(3) 在 home 目录下创建隐藏文件夹 mujoco，并将刚才下载好的安装包解压到这个文件夹下</span></span><br><span class="line">mkdir ~/.mujoco</span><br><span class="line">cp mujoco210-linux-x86_64.tar.gz ~/.mujoco</span><br><span class="line">cd ~/.mujoco</span><br><span class="line">tar -zxvf mujoco210-linux-x86_64.tar.gz</span><br><span class="line"><span class="comment"># 注意，这时候要修改 mujoco210_linux 文件夹名称为 mujoco210</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#(4) 将获得的 mjkey.txt 放到～/.mujoco 和～/.mujoco/mujoco210/bin 下</span></span><br><span class="line">cp mjkey.txt ~/.mujoco</span><br><span class="line">cp mjkey.txt ~/.mujoco/mujoco210/<span class="built_in">bin</span></span><br><span class="line"><span class="comment">#(5) 添加环境变量，打开～/.bashrc 文件，将以下命令添加进去</span></span><br><span class="line">vim ~/.bashrc</span><br><span class="line">export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/root/.mujoco/mujoco210/<span class="built_in">bin</span></span><br><span class="line">export LD_LIBRARY_PATH=~/.mujoco/mujoco210/<span class="built_in">bin</span>$&#123;LID_LIBRARY_PATH:+:$&#123;LD_LIBRARY_PATH&#125;&#125;</span><br><span class="line">export MUJOCO_KEY_PATH=~/.mujoco$&#123;MUJOCO_KEY_PATH&#125;</span><br><span class="line">source ~/.bashrc</span><br><span class="line"><span class="comment">#(6) 运行测试</span></span><br><span class="line">cd ~/.mujoco/mujoco210/<span class="built_in">bin</span></span><br><span class="line">./simulate ../model/humanoid.xml</span><br></pre></td></tr></table></figure>
<p>报错：./simulate: error while loading shared libraries: libXrandr.so.2: cannot open shared object file: No such file or directory<br><a href="https://www.google.com/search?q=sudo+apt-get+install+libXrandr&amp;oq=sudo+apt-get+install+libXrandr&amp;aqs=chrome..69i57j0i30.565j0j4&amp;sourceid=chrome&amp;ie=UTF-8">You need to install the missing library</a></p>
<h4 id="安装 -mujoco-py"><a href="# 安装 -mujoco-py" class="headerlink" title="安装 mujoco_py"></a>安装 mujoco_py</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 同样在 mujoco_38 环境中</span></span><br><span class="line"><span class="comment">#(0) 先下载一些库</span></span><br><span class="line">sudo apt install libosmesa6-dev libgl1-mesa-glx libglfw3</span><br><span class="line"><span class="comment">#(1) 先在 github 上下载源码（或是使用 wget）</span></span><br><span class="line">git clone https://github.com/openai/mujoco-py.git</span><br><span class="line"><span class="comment">#(2) pip 国内源</span></span><br><span class="line">cd ~ &amp;&amp; mkdir .pip</span><br><span class="line">cd .pip &amp;&amp; vim pip.conf</span><br><span class="line"><span class="comment"># 加入这四句话</span></span><br><span class="line">[<span class="keyword">global</span>]</span><br><span class="line">index-url = http://pypi.douban.com/simple</span><br><span class="line">[install]</span><br><span class="line">trusted-host=pypi.douban.com</span><br><span class="line">timeout = <span class="number">6000</span></span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line">cd ~/.mujoco/mujoco-py-master</span><br><span class="line">pip install -r requirements.txt -i  http://pypi.douban.com/simple  --trusted-host pypi.douban.com</span><br><span class="line">pip install -r requirements.dev.txt -i  http://pypi.douban.com/simple  --trusted-host pypi.douban.com</span><br><span class="line">python setup.py install </span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">python</span><br><span class="line"><span class="comment"># 进入 python</span></span><br><span class="line"><span class="keyword">import</span> mujoco_py</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 常见错误 (1) gcc error:</span></span><br><span class="line"><span class="comment"># 试了网上很多解决办法，包括 mujoco_py 的 github 官方解决办法都不行，试了如下方法，完美解决</span></span><br><span class="line">sudo apt-get update -q</span><br><span class="line">sudo DEBIAN_FRONTEND=noninteractive apt-get install -y curl  libgl1-mesa-dev libgl1-mesa-glx libglew-dev libosmesa6-dev </span><br><span class="line">sudo apt-get clean</span><br><span class="line">rm -rf /var/lib/apt/lists/* </span><br><span class="line"></span><br><span class="line"><span class="comment"># 常见错误 (2) No such file or directory: ‘patchelf’</span></span><br><span class="line">conda install -y patchelf</span><br></pre></td></tr></table></figure>
<h4 id="安装 -gym-all"><a href="# 安装 -gym-all" class="headerlink" title="安装 gym [all]"></a>安装 gym [all]</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法 1</span></span><br><span class="line">git clone https://github.com/openai/gym.git</span><br><span class="line">python setup.py install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 2</span></span><br><span class="line">pip install gym [<span class="built_in">all</span>] --no-deps mujoco_py</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 3</span></span><br><span class="line">conda install gym</span><br></pre></td></tr></table></figure>
<h4 id="安装 -dm-control"><a href="# 安装 -dm-control" class="headerlink" title="安装 dm_control"></a>安装 dm_control</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/deepmind/dm_control.git</span><br><span class="line">cd dm_control</span><br><span class="line">pip install -r requirements.txt</span><br><span class="line">python setup.py install</span><br><span class="line"><span class="comment"># 遇到 GL/glew.h 问题需要</span></span><br><span class="line">sudo apt-get install libosmesa6-dev</span><br><span class="line"><span class="comment"># 遇到 absl 问题</span></span><br><span class="line">pip install absl-py <span class="comment"># 然后重新安装 dm_control</span></span><br></pre></td></tr></table></figure>
<h4 id="安装 -d4rl"><a href="# 安装 -d4rl" class="headerlink" title="安装 d4rl"></a>安装 d4rl</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/rail-berkeley/d4rl.git</span><br><span class="line">cd d4rl</span><br><span class="line">pip install -e .</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">pip install git+https://github.com/rail-berkeley/d4rl@master<span class="comment">#egg=d4rl</span></span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/rail-berkeley/d4rl/issues/80">這些方法我試了都沒效 </a><br><a href="https://blog.csdn.net/Huang_8208_sibo/article/details/124748199?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=error:%20subprocess-exited-with-&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-5-124748199.142^v35^new_blog_pos_by_title&amp;spm=1018.2226.3001.4187"> 這些方法我試了都沒效 </a><br><a href="https://blog.csdn.net/weixin_44949421/article/details/123422983"> 這些方法我試了都沒效 </a><br>pip install -U -f <a href="https://github.com/deepmind/dm_control">https://github.com/deepmind/dm_control</a> -e .<br>pip install -U -f <a href="https://github.com/rail-berkeley/d4rl">https://github.com/rail-berkeley/d4rl</a> -e .<br><a href="https://blog.csdn.net/joey_ada/article/details/123580592?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1-123580592-blog-119415061.pc_relevant_show_downloadRating&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1-123580592-blog-119415061.pc_relevant_show_downloadRating&amp;utm_relevant_index=1"> 這些方法我試了都沒效</a><br>pip install git+<a href="https://github.com/deepmind/dm_control@main#egg=dm_control">https://github.com/deepmind/dm_control@main#egg=dm_control</a></p>
<p>最后解决办法：<br>setup.py 中的 dm_control 和 mjrl</p>
<h4 id="安装 -opencv"><a href="# 安装 -opencv" class="headerlink" title="安装 opencv"></a>安装 opencv</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install opencv-python</span><br><span class="line">pip install opencv-contrib-python</span><br></pre></td></tr></table></figure>
<h3 id="补充注意事项"><a href="# 补充注意事项" class="headerlink" title="补充注意事项"></a>补充注意事项</h3><h4 id="x86-64-amd64"><a href="#x86-64-amd64" class="headerlink" title="x86_64 = amd64"></a>x86_64 = amd64</h4><h4 id="python- 和 -tensorflow- 和各个软件之间都会有版本问题，要注意"><a href="#python- 和 -tensorflow- 和各个软件之间都会有版本问题，要注意" class="headerlink" title="python 和 tensorflow 和各个软件之间都会有版本问题，要注意"></a>python 和 tensorflow 和各个软件之间都会有版本问题，要注意</h4><h4 id="Anaconda- 创建环境、删除环境、激活环境、退出环境"><a href="#Anaconda- 创建环境、删除环境、激活环境、退出环境" class="headerlink" title="Anaconda 创建环境、删除环境、激活环境、退出环境"></a>Anaconda 创建环境、删除环境、激活环境、退出环境</h4><p>conda create -n py36 python=3.6<br>conda remove -n py36 —all<br>conda activate py36<br>conda deactivate   </p>
<h4 id="anaconda- 中的指定虚拟环境 -python- 版本升级"><a href="#anaconda- 中的指定虚拟环境 -python- 版本升级" class="headerlink" title="anaconda 中的指定虚拟环境 python 版本升级"></a>anaconda 中的指定虚拟环境 python 版本升级 </h4><p>conda install python=3.6<br> 但会有 package 匹配的问题，不如直接创立一个新环境</p>
<h4 id="tensorflow1- 和 -2- 的不同"><a href="#tensorflow1- 和 -2- 的不同" class="headerlink" title="tensorflow1 和 2 的不同"></a>tensorflow1 和 2 的不同</h4><p>AttributeError: module ‘tensorflow’ has no attribute ‘Session’</p>
<h4 id="参数种类"><a href="# 参数种类" class="headerlink" title="参数种类"></a>参数种类</h4><p><a href="https://blog.csdn.net/brucewong0516/article/details/78985353">【python】函数调用的参数规则、位置参数、关键参数、任意参数与解包</a></p>
<h4 id="类的实例化"><a href="# 类的实例化" class="headerlink" title="类的实例化"></a>类的实例化</h4><p><a href="https://blog.csdn.net/qq_34659777/article/details/104233039?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1-104233039-blog-105192611.pc_relevant_multi_platform_whitelistv1&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1-104233039-blog-105192611.pc_relevant_multi_platform_whitelistv1&amp;utm_relevant_index=1">【Python】Missing 1 required positional argument 解决方案</a></p>
<h4 id="python-kwargs- 传递多个参数"><a href="#python-kwargs- 传递多个参数" class="headerlink" title="python kwargs 传递多个参数"></a>python kwargs 传递多个参数 </h4><h4 id="PackagesNotFoundError-The-following-packages-are-not-available-from-current-channels"><a href="#PackagesNotFoundError-The-following-packages-are-not-available-from-current-channels" class="headerlink" title="PackagesNotFoundError: The following packages are not available from current channels"></a>PackagesNotFoundError: The following packages are not available from current channels</h4><p><a href="https://blog.csdn.net/weixin_45552562/article/details/109668589"> 一些解决办法</a></p>
<h4 id="linux- 下查看硬件架构"><a href="#linux- 下查看硬件架构" class="headerlink" title="linux 下查看硬件架构"></a>linux 下查看硬件架构</h4><p>uname -m</p>
<h4 id="ubuntu- 安装 -tar-gz- 文件"><a href="#ubuntu- 安装 -tar-gz- 文件" class="headerlink" title="ubuntu 安装 tar.gz 文件"></a>ubuntu 安装 tar.gz 文件</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tar -zxvf FileName.tar.gz</span><br><span class="line">cd FileName</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>
<h4 id="np-mean-data-axis-0- 函数"><a href="#np-mean-data-axis-0- 函数" class="headerlink" title="np.mean (data, axis=0) 函数"></a>np.mean (data, axis=0) 函数 </h4><p><a href="https://blog.csdn.net/qq_41011336/article/details/84345183"> 可以这么理解，axis 是几，那就表明哪一维度被压缩成 1</a></p>
<h4 id="Python-numpy- 归一化和标准化 - 代码实现"><a href="#Python-numpy- 归一化和标准化 - 代码实现" class="headerlink" title="Python numpy 归一化和标准化 代码实现"></a>Python numpy 归一化和标准化 代码实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">standardization</span> (<span class="params">data</span>):</span></span><br><span class="line">    mu = np.mean (data, axis=<span class="number">0</span>)</span><br><span class="line">    sigma = np.std (data, axis=<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> (data - mu) /sigma</span><br></pre></td></tr></table></figure>
<h3 id="犯的一些愚蠢错误"><a href="# 犯的一些愚蠢错误" class="headerlink" title="犯的一些愚蠢错误"></a>犯的一些愚蠢错误 </h3><p> 下载安装成 windows 的版本</p>
<h3 id="参考"><a href="# 参考" class="headerlink" title="参考"></a>参考 </h3><p><a href="https://zhuanlan.zhihu.com/p/77020893">Ubuntu 18.04 强化学习 RL gym mujoco 环境配置</a><br><a href="https://github.com/openai/mujoco-py/issues/323">Installation error: “libgcrypt.so.11: cannot open shared object file”</a><br><a href="https://blog.csdn.net/weixin_44420419/article/details/116231500"> 安装 mujoco_py 遇到的一些问题与解决方法 </a><br><a href="https://github.com/openai/mujoco-py/issues/90">fatal error: GL/osmesa.h: No such file or directory</a><br><a href="https://www.jianshu.com/p/23b58f66e6d9">ImportError:lib<em>*</em>.so—cannot open shared object file: No such file or directory</a><br><a href="https://zhuanlan.zhihu.com/p/124001142"> 安装 Mujoco+Gym 踩的坑 </a><br><a href="https://zhuanlan.zhihu.com/p/88903659"> 安裝 pytorch</a><br><a href="https://blog.csdn.net/zt1091574181/article/details/119459576">open3d free (): invalid pointer 未解之谜</a><br><a href="https://blog.csdn.net/zbzcDZF/article/details/90488442">【没派上用场】 linux 程序被 Killed，查看原因</a><br>ps -elf #查看进程</p>
<p><a href="https://blog.csdn.net/hehedadaq/article/details/109012048">fatal error: GL/osmesa.h: No such file or directory</a><br><a href="https://github.com/openai/mujoco-py/issues/269">error while importing mujoco_py into python</a><br>/home/avi/miniconda3/compiler_compat/ld: cannot find -lmujoco150<br>/home/avi/miniconda3/compiler_compat/ld: cannot find -lglewosmesa</p>
<p>PackagesNotFoundError: The following packages are not available from current channels:</p>
<ul>
<li>python==3.6</li>
</ul>
<p>conda config —append channels conda-forge</p>
<p><a href="https://pypi.org/project/mujoco-py/2.0.2.9/#files">下载 mujoco-py 2.0.2.9</a></p>
<p>conda update python</p>
<h3 id="Ubuntu- 安裝 -CUDA-cuDNN-pytorch-tensorflow-mxnet"><a href="#Ubuntu- 安裝 -CUDA-cuDNN-pytorch-tensorflow-mxnet" class="headerlink" title="Ubuntu 安裝 CUDA cuDNN pytorch tensorflow mxnet"></a>Ubuntu 安裝 CUDA cuDNN pytorch tensorflow mxnet</h3><p><a href="https://mikethreeacer.medium.com/ubuntu-18-04-% E5% AE%89% E8% A3%9D-cuda-cudnn-anaconda-pytorch-1f170b3326a4">Ubuntu 安裝 CUDA cuDNN pytorch tensorflow mxnet</a></p>
]]></content>
      <categories>
        <category>硕士研究</category>
      </categories>
  </entry>
  <entry>
    <title>openai baselines/run.py 分析学习</title>
    <url>/2022/07/05/rl-baseline-2-run/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>硕士研究 1-2：遇到的问题</title>
    <url>/2022/10/05/yanjiu-1-2/</url>
    <content><![CDATA[<h4 id="matplotlib-animation-MovieWriter"><a href="#matplotlib-animation-MovieWriter" class="headerlink" title="matplotlib.animation:MovieWriter"></a>matplotlib.animation:MovieWriter</h4><p>在使用 matplotlib.animation:MovieWriter 存储影片时 memory 和 cache 不够 <br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">WARNING:matplotlib.animation:MovieWriter stderr:</span><br><span class="line">convert-im6.q16: cache resources exhausted `./gym_animation.gi<span class="string">f&#x27; @ error/cache.c/OpenPixelCache/4083.</span></span><br><span class="line"><span class="string">convert-im6.q16: memory allocation failed `./gym_animation.gif&#x27;</span> @ error/quantize.c/AssignImageColors/<span class="number">496</span></span><br></pre></td></tr></table></figure><br><a href="https://github.com/ImageMagick/ImageMagick/issues/396"> 原因：For some reason, my ImageMagick came with very low limits:</a></p>
<h4 id="cache- 不够"><a href="#cache- 不够" class="headerlink" title="cache 不够"></a>cache 不够 </h4><p> 解决办法：清理 pip cache<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cd ~/.cache/pip</span><br><span class="line">sudo rm -rf *</span><br><span class="line"><span class="comment"># 或者在 pip 安装的时候，跳过缓存</span></span><br><span class="line">pip install ... --no-cache-<span class="built_in">dir</span></span><br></pre></td></tr></table></figure></p>
<h4 id="字符串 -array- 用 -np-save- 储存成 -csv- 档案"><a href="# 字符串 -array- 用 -np-save- 储存成 -csv- 档案" class="headerlink" title="字符串 array 用 np.save 储存成 csv 档案"></a>字符串 array 用 np.save 储存成 csv 档案</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 报错 TypeError: Mismatch between array dtype (&#x27;&lt;U21&#x27;) and format specifier (&#x27;%.18e,%.18e&#x27;)</span></span><br><span class="line"><span class="comment">#You have to specify the format (fmt) of you data in savetxt, in this case as a string (% s):</span></span><br><span class="line">np.savetxt (<span class="string">&#x27;test.csv&#x27;</span>, DAT, delimiter=<span class="string">&quot;&quot;</span>, fmt=<span class="string">&quot;% s&quot;</span>) </span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>硕士研究</category>
      </categories>
  </entry>
</search>
